{
  "good_build": {
    "sha": "ffdf96d",
    "details": {
      "sha": "ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
      "node_id": "C_kwDOBgtdddoAKGZmZGY5NmQ2YTVjYTM1YWYwN2NlOGM2OWEwMmRkNzM3YjgwN2YxZGU",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-05T15:20:55Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-12T14:27:54Z"
        },
        "message": "Initialize ImageReader during boot\n\nThis is to avoid being affected by a potential invalid java.home path\n\nFixes: https://github.com/eclipse-openj9/openj9/issues/21105\n\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "0a1553101c0ac449a7c3d69a581f46a5e0332903",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/0a1553101c0ac449a7c3d69a581f46a5e0332903"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c3059659228c2818b5dfa07ae2956b5bcabc20a1"
        }
      ],
      "stats": {
        "total": 204,
        "additions": 202,
        "deletions": 2
      },
      "files": [
        {
          "sha": "95243fda5f40a884a822b8b23a4360cd46a48646",
          "filename": "jcl/src/java.base/share/classes/java/lang/J9VMInternals.java",
          "status": "modified",
          "additions": 12,
          "deletions": 2,
          "changes": 14,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/jcl%2Fsrc%2Fjava.base%2Fshare%2Fclasses%2Fjava%2Flang%2FJ9VMInternals.java",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/jcl%2Fsrc%2Fjava.base%2Fshare%2Fclasses%2Fjava%2Flang%2FJ9VMInternals.java",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/jcl%2Fsrc%2Fjava.base%2Fshare%2Fclasses%2Fjava%2Flang%2FJ9VMInternals.java?ref=ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "patch": "@@ -173,7 +173,7 @@ private static void completeInitialization() {\n \t\t\tRuntime.getRuntime().addShutdownHook(new Thread(runnable, \"CommonCleanerShutdown\", true, false, false, null)); //$NON-NLS-1$\n \t\t}\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n-/*[IF CRAC_SUPPORT]*/\n+\t\t/*[IF CRAC_SUPPORT]*/\n \t\tif (openj9.internal.criu.InternalCRIUSupport.isCRaCSupportEnabled()) {\n \t\t\t// export java.base/jdk.crac unconditionally\n \t\t\tJ9VMInternals.class.getModule().implAddExports(\"jdk.crac\"); //$NON-NLS-1$\n@@ -184,7 +184,17 @@ private static void completeInitialization() {\n \t\t\t\tom.get().implAddExports(\"jdk.crac.management\"); //$NON-NLS-1$\n \t\t\t}\n \t\t}\n-/*[ENDIF] CRAC_SUPPORT */\n+\t\t/*[ENDIF] CRAC_SUPPORT */\n+\t\t/*[IF (11 <= JAVA_SPEC_VERSION) & (JAVA_SPEC_VERSION <= 17)]*/\n+\t\t/* ImageReader should be initialized before main() is called to\n+\t\t * avoid being affected by a potential invalid java.home path.\n+\t\t */\n+\t\ttry {\n+\t\t\tjdk.internal.jimage.ImageReaderFactory.getImageReader();\n+\t\t} catch (java.io.UncheckedIOException e) {\n+\t\t\t// Ignored deliberately.\n+\t\t}\n+\t\t/*[ENDIF] (11 <= JAVA_SPEC_VERSION) & (JAVA_SPEC_VERSION <= 17) */\n \t}\n \n \t/**"
        },
        {
          "sha": "24221d9ece78bc3f04d68690d226b633c8eb6e0c",
          "filename": "test/functional/cmdLineTests/imageReaderInitializationTest/build.xml",
          "status": "added",
          "additions": 75,
          "deletions": 0,
          "changes": 75,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fbuild.xml",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fbuild.xml",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fbuild.xml?ref=ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "patch": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+<project name=\"ImageReader\" default=\"build\" basedir=\".\">\n+\t<taskdef resource=\"net/sf/antcontrib/antlib.xml\" />\n+\t<description>\n+\t\tBuild cmdLineTests_imageReaderInitializationTest\n+\t</description>\n+\n+\t<import file=\"${TEST_ROOT}/functional/cmdLineTests/buildTools.xml\" />\n+\n+\t<!-- set properties for this build -->\n+\t<property name=\"DEST\" value=\"${BUILD_ROOT}/functional/cmdLineTests/imageReaderInitializationTest\" />\n+\t<property name=\"src\" location=\"src\" />\n+\t<property name=\"build\" location=\"bin\" />\n+\n+\t<target name=\"init\">\n+\t\t<mkdir dir=\"${DEST}\" />\n+\t\t<mkdir dir=\"${build}\" />\n+\t</target>\n+\n+\t<target name=\"compile\" depends=\"init\" description=\"Using java ${JDK_VERSION} to compile the source\">\n+\t\t<echo>Ant version is ${ant.version}</echo>\n+\t\t<echo>============COMPILER SETTINGS============</echo>\n+\t\t<echo>===fork:                         yes</echo>\n+\t\t<echo>===executable:                   ${compiler.javac}</echo>\n+\t\t<echo>===debug:                        on</echo>\n+\t\t<echo>===destdir:                      ${DEST}</echo>\n+\t\t<javac srcdir=\"${src}\" destdir=\"${build}\" debug=\"true\" fork=\"true\" executable=\"${compiler.javac}\" includeAntRuntime=\"false\" encoding=\"ISO-8859-1\">\n+\t\t\t<src path=\"${src}\" />\n+\t\t</javac>\n+\t</target>\n+\n+\t<target name=\"dist\" depends=\"compile\" description=\"generate the distribution\">\n+\t\t<jar jarfile=\"${DEST}/imageReaderInitializationTest.jar\" filesonly=\"true\">\n+\t\t\t<fileset dir=\"${build}\" />\n+\t\t\t<fileset dir=\"${src}\" />\n+\t\t</jar>\n+\t\t<copy todir=\"${DEST}\">\n+\t\t\t<fileset dir=\"${src}/../\">\n+\t\t\t\t<include name=\"**/*.mk\" />\n+\t\t\t\t<include name=\"**/*.xml\" />\n+\t\t\t</fileset>\n+\t\t</copy>\n+\t</target>\n+\n+\t<target name=\"clean\" depends=\"dist\" description=\"clean up\">\n+\t\t<!-- Delete the ${build} directory trees -->\n+\t\t<delete dir=\"${build}\" />\n+\t</target>\n+\n+\t<target name=\"build\" depends=\"buildCmdLineTestTools\">\n+\t\t<antcall target=\"clean\" inheritall=\"true\" />\n+\t</target>\n+</project>"
        },
        {
          "sha": "bb93a6003b8dc7271925189960c12e9de4ba5fdc",
          "filename": "test/functional/cmdLineTests/imageReaderInitializationTest/imageReaderInitializationTest.xml",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "changes": 33,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2FimageReaderInitializationTest.xml",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2FimageReaderInitializationTest.xml",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2FimageReaderInitializationTest.xml?ref=ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "patch": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"ImageReader Initialization Test\" timeout=\"60\">\n+\t<test id=\"ImageReader Initialization Test\">\n+\t\t<command>$EXE$ -cp $RESJAR$ org.openj9.test.ImageReaderInitializationTest</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">IllegalStateException</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">ExceptionInInitializerError</output>\n+\t</test>\n+</suite>"
        },
        {
          "sha": "ff36c1a159b557049a19d84aadf551ee29de731d",
          "filename": "test/functional/cmdLineTests/imageReaderInitializationTest/playlist.xml",
          "status": "added",
          "additions": 45,
          "deletions": 0,
          "changes": 45,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fplaylist.xml",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fplaylist.xml",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fplaylist.xml?ref=ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "patch": "@@ -0,0 +1,45 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+<playlist xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../TKG/playlist.xsd\">\n+\t<include>../variables.mk</include>\n+\t<test>\n+\t\t<testCaseName>cmdLineTester_imageReaderInitializationTest</testCaseName>\n+\t\t<variations>\n+\t\t\t<variation>NoOptions</variation>\n+\t\t</variations>\n+\t\t<command>\n+\t\t\t$(JAVA_COMMAND) $(CMDLINETESTER_JVM_OPTIONS) -Xdump \\\n+\t\t\t-DEXE=$(SQ)$(JAVA_COMMAND) $(JVM_OPTIONS)$(SQ) \\\n+\t\t\t-DRESJAR=$(Q)$(TEST_RESROOT)$(D)imageReaderInitializationTest.jar$(Q) \\\n+\t\t\t-jar $(CMDLINETESTER_JAR) -config $(Q)$(TEST_RESROOT)$(D)imageReaderInitializationTest.xml$(Q) \\\n+\t\t\t-explainExcludes -xids all,$(PLATFORM),$(VARIATION), -nonZeroExitWhenError; \\\n+\t\t\t${TEST_STATUS}\n+\t\t</command>\n+\t\t<levels>\n+\t\t\t<level>sanity</level>\n+\t\t</levels>\n+\t\t<groups>\n+\t\t\t<group>functional</group>\n+\t\t</groups>\n+\t</test>\n+</playlist>"
        },
        {
          "sha": "c92f01797e077fef74dfbc205d8d3c0d1cd31688",
          "filename": "test/functional/cmdLineTests/imageReaderInitializationTest/src/org/openj9/test/ImageReaderInitializationTest.java",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "changes": 37,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fsrc%2Forg%2Fopenj9%2Ftest%2FImageReaderInitializationTest.java",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fsrc%2Forg%2Fopenj9%2Ftest%2FImageReaderInitializationTest.java",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/test%2Ffunctional%2FcmdLineTests%2FimageReaderInitializationTest%2Fsrc%2Forg%2Fopenj9%2Ftest%2FImageReaderInitializationTest.java?ref=ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package org.openj9.test;\n+\n+/*\n+ * This test is to make sure that ImageReader is initialized during boot.\n+ * So in case an invalid java.home is set and an exception is thrown in\n+ * the code, the exception can be correctly thrown.\n+ */\n+public class ImageReaderInitializationTest {\n+\tpublic static void main(String[] args) {\n+\t\tSystem.setProperty(\"java.home\", \"/invalid/path/to/java\");\n+\t\tString javaHome = System.getProperty(\"java.home\");\n+\t\tif (javaHome.equals(\"/invalid/path/to/java\")) {\n+\t\t\tthrow new IllegalStateException(\"Invalid Java home set, throwing expected IllegalStateException\");\n+\t\t}\n+\t}\n+}"
        }
      ]
    }
  },
  "bad_build": {
    "sha": "9d6f392",
    "details": {
      "sha": "9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "node_id": "C_kwDOBgtdddoAKDlkNmYzOTJlMjdkZGNmY2ZjNzFmZGIxOTJkZDc3YTAyZWExN2Q0NDg",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-21T17:58:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-21T17:58:18Z"
        },
        "message": "Merge pull request #21437 from thallium/threaddump\n\nFix thread raw state format in dumps",
        "tree": {
          "sha": "6e89592e8a33a00088d7d3055ac1e3b79def97b9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6e89592e8a33a00088d7d3055ac1e3b79def97b9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn3ai6CRC1aQ7uu5UhlAAAl4gQAHRqvUG7FFDOovko0sz7GWwh\ntMCGAGI37v1idY1eFFUaE1OUelwyrljT1CecLc8jA0v7qYHJGuyqNkK88FPK4Z7H\n+mzC/YPm8Aafjzz8x3lvRVM7YOvKthlFtLicjlac2w7fOxSsNOy7F5VTbZfOAYlJ\nL4GryR0iBsQ6iBuUvXP8LLhD+ks8PXYSvO1jAo3EW/9UTnniE0FBp5UewWRpTPy+\nQxQ7vO9+eIXzFpA2r3hbDYQpvx3HGmqH7ZQ5pf/uDnDP2F2OgEJVcE77f9E4DJ+Q\nk2+6g7Hi8l2uIul8QwvjP/+bFHbj7bEAXDOZDHWkBhlI3z+oZkWRBrFbCE2AdBzq\nm5Mq5d5Yop86qRTHQuJIwoJkmc4Csg3XMraVYlAP0XlBtMOvy5kHpF+jA866VC2V\n2/wgKaP1l8y/KCP12Z8/VFeOYeY9S+KUVf7UMVDrN65MeyX4rLlwQMHT6zLDueOG\nx1qaEQhiYg+pnc9ghelEYDKopkN1Dl1jD8mM+jQ7Fw1DjPEvOlJ07nU07e+6TYAb\nquCRc1tjsO0i8j7r8KNy07aHD7dspWTwCxi766YMlU680sKwLpan4ZWwC6km8pDZ\nBYTdCG5bAw0aqoOBsTnZwdFHZFppCHzSw1mjc4jSL+bxeZf1BSStz3lmBLq7oJro\n90cvd2KVfEjGbTEIhFYp\n=bg/p\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6e89592e8a33a00088d7d3055ac1e3b79def97b9\nparent ee64e344f2d4e90e06bafedcfb98ff6537f91063\nparent 0af7de5527a1f7f09f3e52859fc57f3d06e2aa45\nauthor Tobi <atobia@ca.ibm.com> 1742579898 -0400\ncommitter GitHub <noreply@github.com> 1742579898 -0400\n\nMerge pull request #21437 from thallium/threaddump\n\nFix thread raw state format in dumps",
          "verified_at": "2025-03-21T18:03:20Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ee64e344f2d4e90e06bafedcfb98ff6537f91063",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ee64e344f2d4e90e06bafedcfb98ff6537f91063",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ee64e344f2d4e90e06bafedcfb98ff6537f91063"
        },
        {
          "sha": "0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45"
        }
      ],
      "stats": {
        "total": 4,
        "additions": 2,
        "deletions": 2
      },
      "files": [
        {
          "sha": "cd2e3ae858f43e2ea2a013568d58fc10a485676a",
          "filename": "runtime/rasdump/javadump.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/runtime%2Frasdump%2Fjavadump.cpp",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/runtime%2Frasdump%2Fjavadump.cpp",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/runtime%2Frasdump%2Fjavadump.cpp?ref=9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
          "patch": "@@ -4544,7 +4544,7 @@ JavaCoreDumpWriter::writeThread(J9VMThread* vmThread, J9PlatformThread *nativeTh\n \t\t/* Replace vmstate with java state in the \"3XMTHREADINFO\" entry */\n \t\t_OutputStream.writeCharacters(\", state:\");\n \t\twriteThreadState(javaState);\n-\t\t_OutputStream.writeCharacters(\", raw state:\");\n+\t\t_OutputStream.writeCharacters(\", rawStateValue:\");\n \t\t_OutputStream.writeInteger(javaState);\n \n \t\t_OutputStream.writeCharacters(\", prio=\");"
        },
        {
          "sha": "5ac5328fc17e160eb9ba4f011dcce1b6cb744aa7",
          "filename": "runtime/vm/JFRChunkWriter.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "changes": 2,
          "blob_url": "https://github.com/eclipse-openj9/openj9/blob/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/runtime%2Fvm%2FJFRChunkWriter.cpp",
          "raw_url": "https://github.com/eclipse-openj9/openj9/raw/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/runtime%2Fvm%2FJFRChunkWriter.cpp",
          "contents_url": "https://api.github.com/repos/eclipse-openj9/openj9/contents/runtime%2Fvm%2FJFRChunkWriter.cpp?ref=9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
          "patch": "@@ -1104,7 +1104,7 @@ writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWrit\n \t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n \t}\n \tbufferWriter->writeFormattedString(\n-\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s raw state: 0x%zX\",\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s rawStateValue: 0x%zX\",\n \t\t\tthreadName,\n \t\t\twalkThread,\n \t\t\tjavaTID,"
        }
      ]
    },
    "test_failures": {
      "count": 1,
      "tests": [
        "Issue Opened"
      ],
      "error_messages": []
    }
  },
  "commits": [
    {
      "sha": "fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
      "node_id": "C_kwDOBgtdddoAKGZiNmMyZGM3NDcxNjVjZTdkZDg2YTlmZWIwMTc3YjY5NjgxNmU4ZDU",
      "commit": {
        "author": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2024-11-26T19:36:51Z"
        },
        "committer": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2025-01-30T14:45:45Z"
        },
        "message": "x86: Enable BMI2 extension\n\nSigned-off-by: Spencer Comin <spencer.comin@ibm.com>",
        "tree": {
          "sha": "278cce02bcb6a4de3d577eb775bcd796c317a782",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/278cce02bcb6a4de3d577eb775bcd796c317a782"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6c2dc747165ce7dd86a9feb0177b696816e8d5/comments",
      "author": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a82928f6a44cbf2233a9819995f7ef91c3fee581",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a82928f6a44cbf2233a9819995f7ef91c3fee581",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a82928f6a44cbf2233a9819995f7ef91c3fee581"
        }
      ]
    },
    {
      "sha": "91b60321c1399c4d5597be0227a152a7afd09e4f",
      "node_id": "C_kwDOBgtdddoAKDkxYjYwMzIxYzEzOTljNGQ1NTk3YmUwMjI3YTE1MmE3YWZkMDllNGY",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-02-28T17:48:52Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-02-28T17:48:52Z"
        },
        "message": "Remove JvmtiMountTransition annotation from Continuation.enter()\n\nJvmtiMountTransition was added by mistake in\nhttps://github.com/eclipse-openj9/openj9/pull/21084\n\nFixes: https://github.com/eclipse-openj9/openj9/issues/21186\nhttps://github.com/eclipse-openj9/openj9/issues/21185\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "1c48e58f2f18d22c3b69fa2dc0772814d50d8073",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1c48e58f2f18d22c3b69fa2dc0772814d50d8073"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/91b60321c1399c4d5597be0227a152a7afd09e4f",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/91b60321c1399c4d5597be0227a152a7afd09e4f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/91b60321c1399c4d5597be0227a152a7afd09e4f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/91b60321c1399c4d5597be0227a152a7afd09e4f/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2dd07ebbd773e0b3e9243275ab271029a5959a57",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2dd07ebbd773e0b3e9243275ab271029a5959a57",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2dd07ebbd773e0b3e9243275ab271029a5959a57"
        }
      ]
    },
    {
      "sha": "bc7ac0f24449044615c80b62adedacc0055b651c",
      "node_id": "C_kwDOBgtdddoAKGJjN2FjMGYyNDQ0OTA0NDYxNWM4MGI2MmFkZWRhY2MwMDU1YjY1MWM",
      "commit": {
        "author": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-21T20:10:17Z"
        },
        "committer": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-28T17:54:57Z"
        },
        "message": "Add recognized methods java_util_HashMap_put/hash\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>",
        "tree": {
          "sha": "60682e79dd6b978fed621f3bb0ec1109e71da1e4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/60682e79dd6b978fed621f3bb0ec1109e71da1e4"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/bc7ac0f24449044615c80b62adedacc0055b651c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bc7ac0f24449044615c80b62adedacc0055b651c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/bc7ac0f24449044615c80b62adedacc0055b651c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bc7ac0f24449044615c80b62adedacc0055b651c/comments",
      "author": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e3d8d3916daad8240be455829097fd95dc417b1f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e3d8d3916daad8240be455829097fd95dc417b1f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e3d8d3916daad8240be455829097fd95dc417b1f"
        }
      ]
    },
    {
      "sha": "53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
      "node_id": "C_kwDOBgtdddoAKDUzZTNkOWRmNmFjOWU1YTFjMWEyMjYzZGE0YjgxNWJjNDA5Njc2ZDg",
      "commit": {
        "author": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-20T16:55:27Z"
        },
        "committer": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-28T17:54:57Z"
        },
        "message": "Enable peeking ILGen for methods involved in HashMap operations\n\nTo propagate arg info from callers of HashMap.put, HashMap.get, and\nObject.hashCode, generating IL of their callers is necessary when\ncalled from an inlined method. This allows us to propagate prex\narg info from caller and enable compile-time folding of\nfastIdentityHashCode calls.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>",
        "tree": {
          "sha": "707c0ef0d2db8f35663850d7753d2df8cc135fe8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/707c0ef0d2db8f35663850d7753d2df8cc135fe8"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8/comments",
      "author": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bc7ac0f24449044615c80b62adedacc0055b651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bc7ac0f24449044615c80b62adedacc0055b651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/bc7ac0f24449044615c80b62adedacc0055b651c"
        }
      ]
    },
    {
      "sha": "7bf675828edc6d49661435a80b038b595056d6e8",
      "node_id": "C_kwDOBgtdddoAKDdiZjY3NTgyOGVkYzZkNDk2NjE0MzVhODBiMDM4YjU5NTA1NmQ2ZTg",
      "commit": {
        "author": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-27T00:56:55Z"
        },
        "committer": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-28T17:54:57Z"
        },
        "message": "Skip counting nodes for call graphs that can be folded away\n\nFor some call targets and their sub call graphs, it may be\npossible to simplify them into simple operations in certain\nsituations, such as when known object info is being passed\nas arg. In such cases, the node count obtained via\ngenerateNodeEstimate would not truly reflect the number of\nnodes that are actually introduced. This commit adds a\nmechanism that terminates recursive call target walk during\nnode count estimation when faced with call graphs that can\nbe simplified into simple operations.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>",
        "tree": {
          "sha": "1404d696f6c790f7aa3eaf26bf92f50824e29d19",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1404d696f6c790f7aa3eaf26bf92f50824e29d19"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7bf675828edc6d49661435a80b038b595056d6e8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf675828edc6d49661435a80b038b595056d6e8",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7bf675828edc6d49661435a80b038b595056d6e8",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf675828edc6d49661435a80b038b595056d6e8/comments",
      "author": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/53e3d9df6ac9e5a1c1a2263da4b815bc409676d8"
        }
      ]
    },
    {
      "sha": "24215b642253d08191a47d0df5a86db4d3f5e165",
      "node_id": "C_kwDOBgtdddoAKDI0MjE1YjY0MjI1M2QwODE5MWE0N2QwZGY1YTg2ZGI0ZDNmNWUxNjU",
      "commit": {
        "author": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-28T17:48:44Z"
        },
        "committer": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-02-28T17:59:15Z"
        },
        "message": "Repurpose recursivelyWalkCallTargetAndPerformAction\n\nThis routine was only being used for recursively walking call\ntargets and counting nodes, despite being designed to perform\nany \"action\". It was not going to work for any action other\nthan generateNodeEstimate as the debugTrace message relied\non calling generateNodeEstimate::getNodeEstimate.\n\nThis commit repurposes this function to only be used for node\ncounting, rather than any \"action\", and renames the function\naccordingly.\n\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>",
        "tree": {
          "sha": "ebe9b391804e2161b8ffd0aa9a808a660dfe7c84",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/ebe9b391804e2161b8ffd0aa9a808a660dfe7c84"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/24215b642253d08191a47d0df5a86db4d3f5e165",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/24215b642253d08191a47d0df5a86db4d3f5e165",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/24215b642253d08191a47d0df5a86db4d3f5e165",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/24215b642253d08191a47d0df5a86db4d3f5e165/comments",
      "author": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7bf675828edc6d49661435a80b038b595056d6e8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf675828edc6d49661435a80b038b595056d6e8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7bf675828edc6d49661435a80b038b595056d6e8"
        }
      ]
    },
    {
      "sha": "4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
      "node_id": "C_kwDOBgtdddoAKDRlNWQyMjY0ZDkzYjg2MGNhOWQ5N2MxZWIzNDBlMzVjMzliZDQ4ZTk",
      "commit": {
        "author": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-01T18:33:11Z"
        },
        "committer": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-01T18:33:11Z"
        },
        "message": "Exclude jfr event tests on JDK11\n\nRelated to: https://github.com/eclipse-openj9/openj9/issues/21242\n\nSigned-off-by: tajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "6918afc6a6496054cbe01272bfffd607e82d6a75",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6918afc6a6496054cbe01272bfffd607e82d6a75"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "48ed8805ddb94be093db51a3aa62af8d37f88a06",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/48ed8805ddb94be093db51a3aa62af8d37f88a06",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/48ed8805ddb94be093db51a3aa62af8d37f88a06"
        }
      ]
    },
    {
      "sha": "b4a08b0f76e5daeb58f44cc05be09938b114a367",
      "node_id": "C_kwDOBgtdddoAKGI0YTA4YjBmNzZlNWRhZWI1OGY0NGNjMDViZTA5OTM4YjExNGEzNjc",
      "commit": {
        "author": {
          "name": "Annabelle Huo",
          "email": "Annabelle.Huo@ibm.com",
          "date": "2025-02-10T20:52:54Z"
        },
        "committer": {
          "name": "Annabelle Huo",
          "email": "Annabelle.Huo@ibm.com",
          "date": "2025-03-03T15:34:24Z"
        },
        "message": "Check Control Flow Guard on Windows\n\nIf Control Flow Guard (CFG) is enabled in Windows, set\nTR_NoResumableTrapHandler in the JIT.\n\nIf CFG is set, the JIT will not resume exception but\ninstead it goes to the unexpected exception path error\nhandling so that the diagnostic logs will be dumped.\n\nThis change relies on API GetProcessMitigationPolicy.\nIts minimum supported client version is Windows 8 and\nits minimum supported server version is Windows Server 2012.\n\nFixes: #19892\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>",
        "tree": {
          "sha": "10489bed1025fe7a5cc765678856ed85f740b5b1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/10489bed1025fe7a5cc765678856ed85f740b5b1"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/b4a08b0f76e5daeb58f44cc05be09938b114a367",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b4a08b0f76e5daeb58f44cc05be09938b114a367",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/b4a08b0f76e5daeb58f44cc05be09938b114a367",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b4a08b0f76e5daeb58f44cc05be09938b114a367/comments",
      "author": {
        "login": "a7ehuo",
        "id": 45463964,
        "node_id": "MDQ6VXNlcjQ1NDYzOTY0",
        "avatar_url": "https://avatars.githubusercontent.com/u/45463964?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/a7ehuo",
        "html_url": "https://github.com/a7ehuo",
        "followers_url": "https://api.github.com/users/a7ehuo/followers",
        "following_url": "https://api.github.com/users/a7ehuo/following{/other_user}",
        "gists_url": "https://api.github.com/users/a7ehuo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/a7ehuo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/a7ehuo/subscriptions",
        "organizations_url": "https://api.github.com/users/a7ehuo/orgs",
        "repos_url": "https://api.github.com/users/a7ehuo/repos",
        "events_url": "https://api.github.com/users/a7ehuo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/a7ehuo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "a7ehuo",
        "id": 45463964,
        "node_id": "MDQ6VXNlcjQ1NDYzOTY0",
        "avatar_url": "https://avatars.githubusercontent.com/u/45463964?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/a7ehuo",
        "html_url": "https://github.com/a7ehuo",
        "followers_url": "https://api.github.com/users/a7ehuo/followers",
        "following_url": "https://api.github.com/users/a7ehuo/following{/other_user}",
        "gists_url": "https://api.github.com/users/a7ehuo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/a7ehuo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/a7ehuo/subscriptions",
        "organizations_url": "https://api.github.com/users/a7ehuo/orgs",
        "repos_url": "https://api.github.com/users/a7ehuo/repos",
        "events_url": "https://api.github.com/users/a7ehuo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/a7ehuo/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bc97acf797764ca0964016838cf5fe4972df6a15",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bc97acf797764ca0964016838cf5fe4972df6a15",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/bc97acf797764ca0964016838cf5fe4972df6a15"
        }
      ]
    },
    {
      "sha": "d6d0fe6bd93306010e045cf01d303db9d34990b7",
      "node_id": "C_kwDOBgtdddoAKGQ2ZDBmZTZiZDkzMzA2MDEwZTA0NWNmMDFkMzAzZGI5ZDM0OTkwYjc",
      "commit": {
        "author": {
          "name": "Daryl Maier",
          "email": "maier@ca.ibm.com",
          "date": "2025-03-03T16:15:59Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-03T16:15:59Z"
        },
        "message": "Merge pull request #21154 from a7ehuo/windows-cfg-detection-4\n\nCheck Control Flow Guard on Windows",
        "tree": {
          "sha": "ea1883921a46f23ebb364e0e7a9ce987770ae5d0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/ea1883921a46f23ebb364e0e7a9ce987770ae5d0"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d6d0fe6bd93306010e045cf01d303db9d34990b7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxdW/CRC1aQ7uu5UhlAAAIzQQAF4gTfy2WhtkgwLQ8ZhCmL7g\nC2aLAmbVweW0hCUhi9kUx7FSdu3VTUsyPJsSmrawfKavsT4Sq1CrrR0a0AnOZIev\nF+VwrRDfIqnPiAQg2XKmJ3z1f51mBq7kTOOp+jf0YuGYrXimyplsXRiqeGugXy6m\n4fwkpjModeCtQOU+stKxxtaBXOmN7n6U5ELvOuKJERM0yV90yeFhpnRSOXvLl8lP\nRA4iPG2xS0ad2h6sG+oFbhkVyOTspbElWAVSvHOWjVgbg7vKXlnpC2PZqW/xtyWx\nDSK9RzAWb2Eyg1Kg92yqtaw1WFnXxhJR6bi3uLeVDD/8ucmK/hZWcCyrnCnHV1sC\n97UJXXqBGjyhOVzMz6hG1YRUagZyzxllSh0h4461YzWITmF/G4dMu9xpFwUmTVob\nYCAMY2GhlLe3kn1rjqv5m55BRX/P2FA/Lb7X4oM7k/VTzoUwXu7+25XxtCaLSTRI\ndlpXKJ6XIa/1bPtjI9/kGQ4aGtVSA0S+wI0QFznwMPIwlj1OJ5TC2HSJMEf31zGj\njqm9bqYZVSQjRCNmOEL+EiVnUEi/9BEUqlEsefmkOzp4CRJGId4MfLWtM3oEK39b\nEs8DLBrYwiY6b6++z2a6sGQpoIRfRTxc4PggWSYOHIrKITZzwg+fBt2YgDoRE6nk\nYyiq4T9Ac6OWIVUQyJCL\n=xy0J\n-----END PGP SIGNATURE-----\n",
          "payload": "tree ea1883921a46f23ebb364e0e7a9ce987770ae5d0\nparent c3059659228c2818b5dfa07ae2956b5bcabc20a1\nparent b4a08b0f76e5daeb58f44cc05be09938b114a367\nauthor Daryl Maier <maier@ca.ibm.com> 1741018559 -0500\ncommitter GitHub <noreply@github.com> 1741018559 -0500\n\nMerge pull request #21154 from a7ehuo/windows-cfg-detection-4\n\nCheck Control Flow Guard on Windows",
          "verified_at": "2025-03-03T16:21:02Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d6d0fe6bd93306010e045cf01d303db9d34990b7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d6d0fe6bd93306010e045cf01d303db9d34990b7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d6d0fe6bd93306010e045cf01d303db9d34990b7/comments",
      "author": {
        "login": "0xdaryl",
        "id": 17713611,
        "node_id": "MDQ6VXNlcjE3NzEzNjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17713611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xdaryl",
        "html_url": "https://github.com/0xdaryl",
        "followers_url": "https://api.github.com/users/0xdaryl/followers",
        "following_url": "https://api.github.com/users/0xdaryl/following{/other_user}",
        "gists_url": "https://api.github.com/users/0xdaryl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/0xdaryl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/0xdaryl/subscriptions",
        "organizations_url": "https://api.github.com/users/0xdaryl/orgs",
        "repos_url": "https://api.github.com/users/0xdaryl/repos",
        "events_url": "https://api.github.com/users/0xdaryl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/0xdaryl/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c3059659228c2818b5dfa07ae2956b5bcabc20a1"
        },
        {
          "sha": "b4a08b0f76e5daeb58f44cc05be09938b114a367",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b4a08b0f76e5daeb58f44cc05be09938b114a367",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b4a08b0f76e5daeb58f44cc05be09938b114a367"
        }
      ]
    },
    {
      "sha": "bf0a1005e26b3176d5a09c088a883ea58f5d353b",
      "node_id": "C_kwDOBgtdddoAKGJmMGExMDA1ZTI2YjMxNzZkNWEwOWMwODhhODgzZWE1OGY1ZDM1M2I",
      "commit": {
        "author": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-02-26T15:59:37Z"
        },
        "committer": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-03-03T18:57:27Z"
        },
        "message": "CRIUSupport supports only one singleton instance\n\nInternalCRIUSupport has only one singleton instance as well;\nUpdated test usages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
        "tree": {
          "sha": "5d2982e4f633ff236181feec20da98e1f481e5bd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5d2982e4f633ff236181feec20da98e1f481e5bd"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/bf0a1005e26b3176d5a09c088a883ea58f5d353b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.71\n\niQJFBAABCAAvBQJnxfuXFiEEiRnHsy6EAjjx24R3tcynBMHuMmMRHGZlbmdqQGNh\nLmlibS5jb20ACgkQtcynBMHuMmOiLQ//ck4y7ddICKlabfgplLkG9tyjGgn0Vv/M\nIdo+L6nrde5IVsxLMt8JP6HFzaG0iQJpDdTDUyzajBCaePMPfZ9Tlo+0/pmHJOLp\nPO7LuMrXb2EZqEhsZW067qs+xzn3vIQVL+LeTLUZzyEVSWZ9I9wQ4athSvKXJMZb\nATB4hbDcyZe/wAwhwMVM5EoX0eW1pptNFcAFC2JDJ/Ys/xBS4zH0C0w7TmFtWjIG\nH6rTf7/ZwExHMVbpyNGS8LaaOohvniud5k30MJ9bftpQblYQR00hYXW/KBY4EaHs\nBLB4IIJJeE3r42wegrPRHI3B1Drz3UfTyGCpl6rMcVIFRfPBum8qjMYH0kcuvIwO\nbCSIfD4DnuLCcUvRZgzKkBUhevkBIkyWxyYkm8SVxPAh+Rtb32dQrfsryLSt3MUj\nHlGiurTtpEqZIysHXjCR1kaYq7RXUkAmbQ56EPMTSNjDVAAArjhIbH5ugmzkjRvV\nnE0ZvJ1wyAWMUEU0oyGzl8EdVm/s31/1/DDYMSyqCP+4flLHb5JHSouyfMbRpNpd\nuMIXzwfNRpdt+M8i9Ya2zS/n1KTpuPaOlcJELSE3AFs2XQYp0bvM68rWa3EWBaz1\nJSrIYzLKARyHmRIyA/SV99bCus6/bbRpRrBJdJR5YChdGBxeSkgqYck6dr+NF3vw\nzt+8OG2SDEQ=\n=jYet\n-----END PGP SIGNATURE-----",
          "payload": "tree 5d2982e4f633ff236181feec20da98e1f481e5bd\nparent c3059659228c2818b5dfa07ae2956b5bcabc20a1\nauthor Jason Feng <fengj@ca.ibm.com> 1740585577 -0500\ncommitter Jason Feng <fengj@ca.ibm.com> 1741028247 -0500\n\nCRIUSupport supports only one singleton instance\n\nInternalCRIUSupport has only one singleton instance as well;\nUpdated test usages.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
          "verified_at": "2025-03-03T18:58:26Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bf0a1005e26b3176d5a09c088a883ea58f5d353b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/bf0a1005e26b3176d5a09c088a883ea58f5d353b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bf0a1005e26b3176d5a09c088a883ea58f5d353b/comments",
      "author": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c3059659228c2818b5dfa07ae2956b5bcabc20a1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c3059659228c2818b5dfa07ae2956b5bcabc20a1"
        }
      ]
    },
    {
      "sha": "28e013ce84fd78a5926ddd8685675a891409904e",
      "node_id": "C_kwDOBgtdddoAKDI4ZTAxM2NlODRmZDc4YTU5MjZkZGQ4Njg1Njc1YTg5MTQwOTkwNGU",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2024-12-05T18:32:39Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-03T20:43:08Z"
        },
        "message": "Reorder handling of JNI critical between offheap and discontiguous\n\nIn presence of double mapping code (which we recently reintroduced),\nhandling of discontiguous arrays (including 0-sized) ones should be done\nbefore handling offheap case. Otherwise offheap case will incorrectly\nuse isDataAdjacentToHeader API, what could be a 0-size array, and that\nAPI assumes that array is contiguous.\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "9a39d97e1fd31ecfbb1e29362719a97026886e6f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/9a39d97e1fd31ecfbb1e29362719a97026886e6f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/28e013ce84fd78a5926ddd8685675a891409904e",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/28e013ce84fd78a5926ddd8685675a891409904e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/28e013ce84fd78a5926ddd8685675a891409904e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/28e013ce84fd78a5926ddd8685675a891409904e/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "abf8fa738c396816c3a4f1c373e866ca00e7a743",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/abf8fa738c396816c3a4f1c373e866ca00e7a743",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/abf8fa738c396816c3a4f1c373e866ca00e7a743"
        }
      ]
    },
    {
      "sha": "4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
      "node_id": "C_kwDOBgtdddoAKDRlNDlhM2JhYzEwYTNlYzM5YmQ1NjgzNmNkODhlOTRlZmI1ZTQzNWM",
      "commit": {
        "author": {
          "name": "Shubham Verma",
          "email": "shubhamv.sv@gmail.com",
          "date": "2025-02-27T18:29:45Z"
        },
        "committer": {
          "name": "Shubham Verma",
          "email": "shubhamv.sv@gmail.com",
          "date": "2025-03-03T21:39:31Z"
        },
        "message": "Disable DAA optimization if vector facilities are not available\n\nDisable DAA optimiziation if vector packed decimal facilities aren't available.\nThis is a temporary fix to enable off-heap enablement while we continue to\ninvestigate the bug in non-vectorized pdload evaluator.\n\nSigned-off-by: Shubham Verma <shubhamv.sv@gmail.com>",
        "tree": {
          "sha": "97ff7e26af5d2db9bc1a1444e9f79993669be3ae",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/97ff7e26af5d2db9bc1a1444e9f79993669be3ae"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtrGmjeoecVuFUzWt8CIQ3SwoKjgFAmfGIZMACgkQ8CIQ3Swo\nKjiGtg/+MKYv3xFzymQoMWsm3vMnjxZxxJ9gSVLvcpcb7ic7Am5wAzrIiKFHYQgb\nZNjqZSor0Prdd+bCaNZnMwCQHmQQ4ZEbzu04kSjATsyQTOc1HxykraPYb6jRzIEr\nraf/Swk+IBRXTrbUUA9wxJo/0tFBZ/YUHeHt8jCeOlj2ckniz/ofYMDBt3Q+Qj2h\n4rh1DyLoNpc+J2kTPU4BGOvyhOXOJnJLzfnpbPIQVQ8tm4RELjhfSxHJGOkTGIon\n5yI45m4gFg2EgFCSpcloK3o6qEQwqpyLgs1+CBA7FEDKg6GMz79QJkacwHbY4UIg\n4ayR5aXHIDqb07ZC0WIkp6eDXdrr9XCI1UjqEQsz+WLEWd3Q3Il4GG196Sx5XznK\nVtIcJw4WcnPzVulCqFqlOjOPwirsTSBdMemlXcPGZeNTZPmynorlHMSR+G8lS021\no07xK1EKFQYEghk0J9uB5R4nOPdrDWDEuvsQyUtzq0E3A923ceZskEmyvjINz82Z\n0Hoahk2lwM/cbJ4JNINAh9iK5q5yOgykwsqFNrPpzE4/76/8WNKCOKvechJk+enw\nseH5xIL1/GC9e61WIeAkSB8+piAm8KBXaZrM4WZIiyX6PNQQxn9HLqcGb4Eab0XG\nkBgzoJkbm37PoxBPDergxGsqsdrlkSqxIFfR3UKCtE0KK5CBFRI=\n=BV+4\n-----END PGP SIGNATURE-----",
          "payload": "tree 97ff7e26af5d2db9bc1a1444e9f79993669be3ae\nparent 79714a6f44574a241ceeee74bcedf1d288ac62cb\nauthor Shubham Verma <shubhamv.sv@gmail.com> 1740680985 -0500\ncommitter Shubham Verma <shubhamv.sv@gmail.com> 1741037971 -0500\n\nDisable DAA optimization if vector facilities are not available\n\nDisable DAA optimiziation if vector packed decimal facilities aren't available.\nThis is a temporary fix to enable off-heap enablement while we continue to\ninvestigate the bug in non-vectorized pdload evaluator.\n\nSigned-off-by: Shubham Verma <shubhamv.sv@gmail.com>\n",
          "verified_at": "2025-03-03T21:39:38Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e49a3bac10a3ec39bd56836cd88e94efb5e435c/comments",
      "author": {
        "login": "VermaSh",
        "id": 8346599,
        "node_id": "MDQ6VXNlcjgzNDY1OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8346599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VermaSh",
        "html_url": "https://github.com/VermaSh",
        "followers_url": "https://api.github.com/users/VermaSh/followers",
        "following_url": "https://api.github.com/users/VermaSh/following{/other_user}",
        "gists_url": "https://api.github.com/users/VermaSh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/VermaSh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/VermaSh/subscriptions",
        "organizations_url": "https://api.github.com/users/VermaSh/orgs",
        "repos_url": "https://api.github.com/users/VermaSh/repos",
        "events_url": "https://api.github.com/users/VermaSh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/VermaSh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "VermaSh",
        "id": 8346599,
        "node_id": "MDQ6VXNlcjgzNDY1OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8346599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VermaSh",
        "html_url": "https://github.com/VermaSh",
        "followers_url": "https://api.github.com/users/VermaSh/followers",
        "following_url": "https://api.github.com/users/VermaSh/following{/other_user}",
        "gists_url": "https://api.github.com/users/VermaSh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/VermaSh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/VermaSh/subscriptions",
        "organizations_url": "https://api.github.com/users/VermaSh/orgs",
        "repos_url": "https://api.github.com/users/VermaSh/repos",
        "events_url": "https://api.github.com/users/VermaSh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/VermaSh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "79714a6f44574a241ceeee74bcedf1d288ac62cb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/79714a6f44574a241ceeee74bcedf1d288ac62cb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/79714a6f44574a241ceeee74bcedf1d288ac62cb"
        }
      ]
    },
    {
      "sha": "f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
      "node_id": "C_kwDOBgtdddoAKGY1MTQxYTZiYjdkZjVkNjRhZTQ1YmJiOTA1MGUyZDEzYmMxNTZiOTQ",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-03T21:49:17Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-03T21:49:17Z"
        },
        "message": "Merge pull request #21236 from thallium/fix\n\nRemove JvmtiMountTransition annotation from Continuation.enter()",
        "tree": {
          "sha": "107b0c9c56980c73cb5dec3fecfc3b7d50f06382",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/107b0c9c56980c73cb5dec3fecfc3b7d50f06382"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxiPdCRC1aQ7uu5UhlAAAbA0QAHIV85Tt6asb8PzYe+Q2QXuY\nbrKGZAjXMOgcmtQUvw3UzYf7MUkLSkuGOqcWGmRDYSuxYWeDEb/kfu08DeCnW1KZ\nS2zIJGYvv1Vs/4AGtTqQMfBiL00yahmhKxTrdS0VwWRbkPa/eIKVXczaEkouRAS5\nuqvWaWaJMpLQpLaKUMSDXQjpgvPvX71/D1MUQIwiUoogXS32hQ00wilR2PJdBQzJ\nq2ACSrDWWPir9IoUIttC5lvo2WoZaclZdUIzkiH6GNKWLRA03Xifbntob9utLqPW\nUirH+Z8sXHiRPYyrVpDlkYsQCICxWaEtBrhQi0H0VgBNtUx2Gzf1CaHQXthyURzf\nBANMe4Xx6VJGnFX2R3zafuAq+GF3Qqn5UodFvrsFN+ODFPCLmfLvya6sOe9vbaZQ\nRX1N3aY+W+wrdepNWNzHSlEQHDNkrjG391ChoUUQqADfKFbbljPgkIRQIkyvp/QI\nQfHT5Kwnl6niv8vbX4GzSBl7F5/l1QNfdR+zps2Q1YmDMQVwUT7wnDI3zhGEnq2K\ns58NgnAARfqMu35qWNIP+Lc1ssrCEIeDPm1C4UdRbthU8TKBUUPx4E6VLCMEDAE6\nRss21/iQ9sYDZ4JwRVJgwuxeZwFCnEEGACYaZLvG0jAtwY+T2GGiiER4s9Uk7pTe\nhkMHm3jBlmm7tkeHOHAo\n=dM41\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 107b0c9c56980c73cb5dec3fecfc3b7d50f06382\nparent d6d0fe6bd93306010e045cf01d303db9d34990b7\nparent 91b60321c1399c4d5597be0227a152a7afd09e4f\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1741038557 -0500\ncommitter GitHub <noreply@github.com> 1741038557 -0500\n\nMerge pull request #21236 from thallium/fix\n\nRemove JvmtiMountTransition annotation from Continuation.enter()",
          "verified_at": "2025-03-03T21:54:21Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d6d0fe6bd93306010e045cf01d303db9d34990b7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d6d0fe6bd93306010e045cf01d303db9d34990b7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d6d0fe6bd93306010e045cf01d303db9d34990b7"
        },
        {
          "sha": "91b60321c1399c4d5597be0227a152a7afd09e4f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/91b60321c1399c4d5597be0227a152a7afd09e4f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/91b60321c1399c4d5597be0227a152a7afd09e4f"
        }
      ]
    },
    {
      "sha": "eb5b49de0186a480428320d0701609a76c31cc88",
      "node_id": "C_kwDOBgtdddoAKGViNWI0OWRlMDE4NmE0ODA0MjgzMjBkMDcwMTYwOWE3NmMzMWNjODg",
      "commit": {
        "author": {
          "name": "Rahil Shah",
          "email": "rahil@ca.ibm.com",
          "date": "2025-03-03T21:50:58Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-03T21:50:58Z"
        },
        "message": "Merge pull request #21220 from VermaSh/off-heap_daa_fix\n\nDisable DAA optimization if vector facilities are not available",
        "tree": {
          "sha": "4a9d85d05c8a090b5e2ecde25a0d10f436b75213",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4a9d85d05c8a090b5e2ecde25a0d10f436b75213"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/eb5b49de0186a480428320d0701609a76c31cc88",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxiRCCRC1aQ7uu5UhlAAA3e0QAD1t7wuhBYEmEloJ1uYI7wRB\nFUjAmaxZp1U7YdCySzWMt61nKGB1oG2MBXEw/U8AkKGlUc+P0TObzNA5RL32gIXV\nrxKBV36+OP9+2LnJo5M6K4dgiSiSJVq5FDCkEAOYFm9xOqUVESDON460Pw+4vtVM\n88iUAbeBwGe51j873eRwLwKWYUaZzgkfS7q7ADZwDJeTpxMAbmb5XlbrObHz9gQM\nqaadqPFLT6gdeYAs4Kg5ES2tmOIbJMaaXgbmYoskSakvexOd8IFImLkGiL/y8EVT\nfThgqQxQ+WnFFX34/NqoNa8Xy0JqGkXNfIqFrivwofSFfT2+zRfgaIQa5B/6o/Xj\naVk184eVvCXQ9DBdt+p2eyYfRvF3MCOad7YvjM9FN+Ga/DAwdt1KuXk/7uQ8J12q\n5wSpv3H+mVHyNPEyuVbYKYmJMMxd0ei0+AOeUcz4YHPys6ol+Z0Fn44qAqymKeZX\nyes6tnZDMxBMDyWIw3S/WTCGzTVZ8jeZlfRyACjU0zCVfcdnlv3bdgacb5OyQwNs\niNkLeNrirsg80C2lr88jLGLio4DXwhxdh+qY+jL1JR0bhuvqTD/ghESGSZXtajnZ\nBT3byVp8g9UubaknoQkG8wAih25Jk2HexXe5QaFPBi2qGn0eQnT1tT8GAr7wBGSt\nra0miMmomjlG9rGghVwb\n=bpI1\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4a9d85d05c8a090b5e2ecde25a0d10f436b75213\nparent f5141a6bb7df5d64ae45bbb9050e2d13bc156b94\nparent 4e49a3bac10a3ec39bd56836cd88e94efb5e435c\nauthor Rahil Shah <rahil@ca.ibm.com> 1741038658 -0500\ncommitter GitHub <noreply@github.com> 1741038658 -0500\n\nMerge pull request #21220 from VermaSh/off-heap_daa_fix\n\nDisable DAA optimization if vector facilities are not available",
          "verified_at": "2025-03-03T21:56:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb5b49de0186a480428320d0701609a76c31cc88",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/eb5b49de0186a480428320d0701609a76c31cc88",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb5b49de0186a480428320d0701609a76c31cc88/comments",
      "author": {
        "login": "r30shah",
        "id": 22353051,
        "node_id": "MDQ6VXNlcjIyMzUzMDUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22353051?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/r30shah",
        "html_url": "https://github.com/r30shah",
        "followers_url": "https://api.github.com/users/r30shah/followers",
        "following_url": "https://api.github.com/users/r30shah/following{/other_user}",
        "gists_url": "https://api.github.com/users/r30shah/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/r30shah/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/r30shah/subscriptions",
        "organizations_url": "https://api.github.com/users/r30shah/orgs",
        "repos_url": "https://api.github.com/users/r30shah/repos",
        "events_url": "https://api.github.com/users/r30shah/events{/privacy}",
        "received_events_url": "https://api.github.com/users/r30shah/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f5141a6bb7df5d64ae45bbb9050e2d13bc156b94"
        },
        {
          "sha": "4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e49a3bac10a3ec39bd56836cd88e94efb5e435c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e49a3bac10a3ec39bd56836cd88e94efb5e435c"
        }
      ]
    },
    {
      "sha": "878b3c4e7d3da82cdb03e3db104a342e3818645d",
      "node_id": "C_kwDOBgtdddoAKDg3OGIzYzRlN2QzZGE4MmNkYjAzZTNkYjEwNGEzNDJlMzgxODY0NWQ",
      "commit": {
        "author": {
          "name": "Theresa Mammarella",
          "email": "Theresa.T.Mammarella@ibm.com",
          "date": "2025-02-27T14:55:02Z"
        },
        "committer": {
          "name": "Theresa Mammarella",
          "email": "Theresa.T.Mammarella@ibm.com",
          "date": "2025-03-03T21:52:42Z"
        },
        "message": "Support heap memory for ffi CaptureCallState\n\nSigned-off-by: Theresa Mammarella <Theresa.T.Mammarella@ibm.com>",
        "tree": {
          "sha": "61366976356bd8ade6f79017b4d32a6e2f2d3478",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/61366976356bd8ade6f79017b4d32a6e2f2d3478"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/878b3c4e7d3da82cdb03e3db104a342e3818645d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/878b3c4e7d3da82cdb03e3db104a342e3818645d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/878b3c4e7d3da82cdb03e3db104a342e3818645d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/878b3c4e7d3da82cdb03e3db104a342e3818645d/comments",
      "author": {
        "login": "theresa-m",
        "id": 12902323,
        "node_id": "MDQ6VXNlcjEyOTAyMzIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/12902323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theresa-m",
        "html_url": "https://github.com/theresa-m",
        "followers_url": "https://api.github.com/users/theresa-m/followers",
        "following_url": "https://api.github.com/users/theresa-m/following{/other_user}",
        "gists_url": "https://api.github.com/users/theresa-m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theresa-m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theresa-m/subscriptions",
        "organizations_url": "https://api.github.com/users/theresa-m/orgs",
        "repos_url": "https://api.github.com/users/theresa-m/repos",
        "events_url": "https://api.github.com/users/theresa-m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theresa-m/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "theresa-m",
        "id": 12902323,
        "node_id": "MDQ6VXNlcjEyOTAyMzIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/12902323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theresa-m",
        "html_url": "https://github.com/theresa-m",
        "followers_url": "https://api.github.com/users/theresa-m/followers",
        "following_url": "https://api.github.com/users/theresa-m/following{/other_user}",
        "gists_url": "https://api.github.com/users/theresa-m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theresa-m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theresa-m/subscriptions",
        "organizations_url": "https://api.github.com/users/theresa-m/orgs",
        "repos_url": "https://api.github.com/users/theresa-m/repos",
        "events_url": "https://api.github.com/users/theresa-m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theresa-m/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d6d0fe6bd93306010e045cf01d303db9d34990b7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d6d0fe6bd93306010e045cf01d303db9d34990b7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d6d0fe6bd93306010e045cf01d303db9d34990b7"
        }
      ]
    },
    {
      "sha": "38a18d4270bec8080eae9131ecfd983473cbd02c",
      "node_id": "C_kwDOBgtdddoAKDM4YTE4ZDQyNzBiZWM4MDgwZWFlOTEzMWVjZmQ5ODM0NzNjYmQwMmM",
      "commit": {
        "author": {
          "name": "Adrian Popescu",
          "email": "adpopescu@ibm.com",
          "date": "2025-02-07T18:19:46Z"
        },
        "committer": {
          "name": "Adrian Popescu",
          "email": "adpopescu@ibm.com",
          "date": "2025-03-03T21:54:40Z"
        },
        "message": "Add JFR monitor enter event\n\nThis change adds support for the JFR monitor enter event.\n\nSigned-off-by: Adrian Popescu <adpopescu@ibm.com>",
        "tree": {
          "sha": "f4ae225e12d8b910bf1aec96d9d338101ae4cdd2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f4ae225e12d8b910bf1aec96d9d338101ae4cdd2"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/38a18d4270bec8080eae9131ecfd983473cbd02c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/38a18d4270bec8080eae9131ecfd983473cbd02c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/38a18d4270bec8080eae9131ecfd983473cbd02c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/38a18d4270bec8080eae9131ecfd983473cbd02c/comments",
      "author": {
        "login": "adpopescu",
        "id": 5844458,
        "node_id": "MDQ6VXNlcjU4NDQ0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5844458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adpopescu",
        "html_url": "https://github.com/adpopescu",
        "followers_url": "https://api.github.com/users/adpopescu/followers",
        "following_url": "https://api.github.com/users/adpopescu/following{/other_user}",
        "gists_url": "https://api.github.com/users/adpopescu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adpopescu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adpopescu/subscriptions",
        "organizations_url": "https://api.github.com/users/adpopescu/orgs",
        "repos_url": "https://api.github.com/users/adpopescu/repos",
        "events_url": "https://api.github.com/users/adpopescu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adpopescu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "adpopescu",
        "id": 5844458,
        "node_id": "MDQ6VXNlcjU4NDQ0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5844458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adpopescu",
        "html_url": "https://github.com/adpopescu",
        "followers_url": "https://api.github.com/users/adpopescu/followers",
        "following_url": "https://api.github.com/users/adpopescu/following{/other_user}",
        "gists_url": "https://api.github.com/users/adpopescu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/adpopescu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/adpopescu/subscriptions",
        "organizations_url": "https://api.github.com/users/adpopescu/orgs",
        "repos_url": "https://api.github.com/users/adpopescu/repos",
        "events_url": "https://api.github.com/users/adpopescu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/adpopescu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eb5b49de0186a480428320d0701609a76c31cc88",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb5b49de0186a480428320d0701609a76c31cc88",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eb5b49de0186a480428320d0701609a76c31cc88"
        }
      ]
    },
    {
      "sha": "47e00d8ad9acd017f981b9defc6c9f20d122c19e",
      "node_id": "C_kwDOBgtdddoAKDQ3ZTAwZDhhZDlhY2QwMTdmOTgxYjlkZWZjNmM5ZjIwZDEyMmMxOWU",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-03T22:25:34Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-03T22:25:34Z"
        },
        "message": "Merge pull request #21197 from theresa-m/fix_ffi\n\nSupport heap memory for ffi CaptureCallState",
        "tree": {
          "sha": "602e3ecb1b8fa94aad299848b21f3ad30492bc03",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/602e3ecb1b8fa94aad299848b21f3ad30492bc03"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/47e00d8ad9acd017f981b9defc6c9f20d122c19e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxixeCRC1aQ7uu5UhlAAA854QAGAuTn4DdhtX/SjUWnxg8yFM\n9NIz2AElAKDWFkAydIaqvwPzdM6gNT9qRJoO/qIVNNAJJE8Cg6ZGr972AaWuR+s3\nW1pt53rOSdYyxer6rnJDWYHx85Ue6xT0L9FXa96HlS+glv3JiO2EEaDlOZCxabia\n0FQ02QhS0fLZsq1DbA7hiZrMHggMOd6SM7UpH86WaXKYOTgjrSNvNwrh8+6zPLbi\nt8ei1JADBrC3uwddIRtbxupF+FRVLWpFu7yghRIk1MEbDYC1eVL45TXieOjxhK23\n4/rbCnKOpnJa5N2bvQD1KWPSrVvkqH7OiKNWgt2slTkGLPH3GqFD1tqXzcxQ6BNZ\nG90Rj5Vm+DScLbm3K1EXFOg15lGs6FzNmn5KhkBEgDwD2cIhV8aYZjp23uf2QjG7\nc+e2+Sy2fsL3hvDah0tQGnp0hqHFYEf2tZgEMvZUCd3ruGaQyeLq784+KOHiguQR\np64lcs7rCtDJIJ4/G0ErFbNA45EHNBrxadLO1FyF1zfO0mubANacrcWBVoF1PAtK\ndypiK2nCVh59z//eJ6p8dIND0sUeXq0TnGTFbkl7bLfiypf0JGsALWzW6pXP0aHf\nLQQIYOSL/kTmZzm0d8CkKkPCnMPEj+bGbrtI4K8PwpjW9FoCmfLZRIXqCNrwhI0o\n0Hvgap4jo8LWR4Qgw9Iy\n=upNB\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 602e3ecb1b8fa94aad299848b21f3ad30492bc03\nparent eb5b49de0186a480428320d0701609a76c31cc88\nparent 878b3c4e7d3da82cdb03e3db104a342e3818645d\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1741040734 -0500\ncommitter GitHub <noreply@github.com> 1741040734 -0500\n\nMerge pull request #21197 from theresa-m/fix_ffi\n\nSupport heap memory for ffi CaptureCallState",
          "verified_at": "2025-03-03T22:30:37Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e00d8ad9acd017f981b9defc6c9f20d122c19e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/47e00d8ad9acd017f981b9defc6c9f20d122c19e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e00d8ad9acd017f981b9defc6c9f20d122c19e/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eb5b49de0186a480428320d0701609a76c31cc88",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb5b49de0186a480428320d0701609a76c31cc88",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eb5b49de0186a480428320d0701609a76c31cc88"
        },
        {
          "sha": "878b3c4e7d3da82cdb03e3db104a342e3818645d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/878b3c4e7d3da82cdb03e3db104a342e3818645d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/878b3c4e7d3da82cdb03e3db104a342e3818645d"
        }
      ]
    },
    {
      "sha": "36382ff89394dc8c0203535b8e766baf78ae630a",
      "node_id": "C_kwDOBgtdddoAKDM2MzgyZmY4OTM5NGRjOGMwMjAzNTM1YjhlNzY2YmFmNzhhZTYzMGE",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-03T22:48:46Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-03T22:48:46Z"
        },
        "message": "Update ifdef comments in bindnatv.cpp\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "38698f7ab537720aa31149f309cdc606c9259a38",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/38698f7ab537720aa31149f309cdc606c9259a38"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/36382ff89394dc8c0203535b8e766baf78ae630a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/36382ff89394dc8c0203535b8e766baf78ae630a",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/36382ff89394dc8c0203535b8e766baf78ae630a",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/36382ff89394dc8c0203535b8e766baf78ae630a/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "47e00d8ad9acd017f981b9defc6c9f20d122c19e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e00d8ad9acd017f981b9defc6c9f20d122c19e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/47e00d8ad9acd017f981b9defc6c9f20d122c19e"
        }
      ]
    },
    {
      "sha": "54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
      "node_id": "C_kwDOBgtdddoAKDU0ZmEyMDYyNzNhMGFhMTlhNWFjM2MyZjY2NmQ3YTg0YzYzY2ViZDg",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-03T22:55:57Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-03T22:55:57Z"
        },
        "message": "Merge pull request #21257 from babsingh/main12\n\nUpdate ifdef comments in bindnatv.cpp",
        "tree": {
          "sha": "38698f7ab537720aa31149f309cdc606c9259a38",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/38698f7ab537720aa31149f309cdc606c9259a38"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxjN9CRC1aQ7uu5UhlAAA4kgQACQRSAjV9bNaHPYGH6OHjP+v\nr+oQj/cLYVjcNCYwJ/vSJerOhupKy+JJdAUGSJ6xxnZLA0cMz8V3rVU8W1JxLQbp\nz38qwB1qS6xHmuf762bn+QS93dX7/DqPUxZmk7AkB6aC8jTWJ+uiH1scdoStuQef\nanVmoMq9ijlVtILdlRYs0yiKDAr2RetQiJVoKokomiz3DjcEyK39hK6eYygzgtcF\ni8qFsOzjGj0nHQeTiKtM3PqGv7wMvf+XiM08H7g3w2TJLxdclg/tcN2Qm+cKuHod\nEfGk5DjL50Y71KyR8y2yDIkIN49e5mY/O335b4+D7GYLmeDRpN5RhQj6GAXthIul\n0eLzuMv3tQf36T6uHjjNjNKh6gszoiNHgwQpNWPZvltqDpZMxVcTpJxy+BV8DHOY\nqq0lZ0WdsPni/67XBcLwrXfYBk4tHyWB8XDmDTivzzas2gf869yZ/E8WIxVZCoXL\nu+L3dhHLce9oMWW/C6+wZdFRxmRth30cLEtfKPTeWCE7UB0Oy4II+eCgNhyiHP4N\nOBIvX7mR9jFzHoy4CXF4shM4JcTSB2Ajm8BsAxPcZR0KiAxvZ0DvmNy2Mm/KtixN\nwjxN7SJTkc+CrhKarPpVlh+zSAxxFYB82no/gsN0kLecsJ8NzIYOoNFlVPNcqJSI\naKu3oJ7gPIIE8YBpBrV3\n=Dqcz\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 38698f7ab537720aa31149f309cdc606c9259a38\nparent 47e00d8ad9acd017f981b9defc6c9f20d122c19e\nparent 36382ff89394dc8c0203535b8e766baf78ae630a\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741042557 -0500\ncommitter GitHub <noreply@github.com> 1741042557 -0500\n\nMerge pull request #21257 from babsingh/main12\n\nUpdate ifdef comments in bindnatv.cpp",
          "verified_at": "2025-03-03T23:01:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "47e00d8ad9acd017f981b9defc6c9f20d122c19e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e00d8ad9acd017f981b9defc6c9f20d122c19e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/47e00d8ad9acd017f981b9defc6c9f20d122c19e"
        },
        {
          "sha": "36382ff89394dc8c0203535b8e766baf78ae630a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/36382ff89394dc8c0203535b8e766baf78ae630a",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/36382ff89394dc8c0203535b8e766baf78ae630a"
        }
      ]
    },
    {
      "sha": "39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
      "node_id": "C_kwDOBgtdddoAKDM5MzY4YWU1MTdlYTg0ZWZhZGJiZDcyZDA5Y2RiYzM3OGZhOGJiOWE",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-03T22:50:51Z"
        },
        "committer": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-03T22:58:31Z"
        },
        "message": "Remove unused import and non-existent @param\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
        "tree": {
          "sha": "af36a1c7834796d0b5fafe4cad2d13987a34d699",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/af36a1c7834796d0b5fafe4cad2d13987a34d699"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.79\n\niQJGBAABCAAwBYJnxjQXFiEEBqD+SRTaKJJnWdCNNcpWYI2Shg0SHGtlaXRoY0Bj\nYS5pYm0uY29tAAoJEDXKVmCNkoYNTFEQAKYutT4G2cicydPoO+Hi1UBmWxcSWh0N\njE9KkxPinm3l+bMl4KfCBSKPqbJWYDkRrekEkMLEQ4FUgtcmNWVf5xc2Ef7ZVlqS\nILllpWKqEwS59Jl5nj+frrqoUvyHV+NNjxJZ9T9v7AGUBOMmmQweV10Q93CMuBqI\noezfyakmlBgt8BsFm0Jx2jW3+eD9Pd4IezYrAenLPILMjrwmFJhx+rA3p/o5RO6/\novCRl8RA4T23ox0QVdaZ/hMTbf3RD9YXz3GxQLmZi25NzSHOLaZA/bbxfd3l5bls\ncZLqlPs2w1cVQ1WnRzCq2WFOMR1vSEpLNDAATDVfI3ZoYen2QWu+2eLUdOnTJBro\ni3+gq9p9caO4xnRPa0JDljFIEgQO651IiQBvgaHX19onzX+rqI7JHbd4cJ1bwEfG\nrWKC8UBmJ3uKxgVX5fU2J9m6nPQpuRHRcYzVo/Fs71+jEWbk6D7FTxdK3BHYDgm2\n7b9VXKWE1aIZvVS6HhrYj4+KmBZ4Kv/e6g9rITT/SrAaT3HJH/kM6JNJiv//6YFP\nga1n3QMvpf1N+6b9Tr7K3KPL03+BHguisjweeaGZuesXW7lwzGg/WuJFimf++anX\n+Rb+/m/BXGXmvx8O9JJax6kz+8fQt28RmUXcbojBPivpBEmvtFYvDK2jPt5ND9YP\nyYzfoLn5ondp\n=wKI3\n-----END PGP SIGNATURE-----",
          "payload": "tree af36a1c7834796d0b5fafe4cad2d13987a34d699\nparent 54fa206273a0aa19a5ac3c2f666d7a84c63cebd8\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741042251 -0500\ncommitter Keith W. Campbell <keithc@ca.ibm.com> 1741042711 -0500\n\nRemove unused import and non-existent @param\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
          "verified_at": "2025-03-03T22:59:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/39368ae517ea84efadbbd72d09cdbc378fa8bb9a/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8"
        }
      ]
    },
    {
      "sha": "3c6fa084e657e5f0128087102366725c1df49e6e",
      "node_id": "C_kwDOBgtdddoAKDNjNmZhMDg0ZTY1N2U1ZjAxMjgwODcxMDIzNjY3MjVjMWRmNDllNmU",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-04T00:20:35Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T00:20:35Z"
        },
        "message": "Merge pull request #21259 from keithc-ca/small\n\nRemove unused import and non-existent @param",
        "tree": {
          "sha": "af36a1c7834796d0b5fafe4cad2d13987a34d699",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/af36a1c7834796d0b5fafe4cad2d13987a34d699"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/3c6fa084e657e5f0128087102366725c1df49e6e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxkdTCRC1aQ7uu5UhlAAAGGUQAJIv32lMG2oujtTnJF6CNYxP\nrFYcubYtibUcgryNfmI3n5fiI41aNGDWhx8GJGJZUoQfazY5tO5dyqYTH2CGA5Po\nWYEqDdhPDXar018E+XOwRrRWskZvf9ljr6jR+VJ0NkZrvpQrvoX4mHRrV4bsqS9K\n70s62Z52oITLRT2nyznBBQ23j1OZp/j/lq6uZTBBn9opFTi3bUVoW1d/BCS+/wWT\n7QmQ7/AA0p5sq+WQduwG8QSGjsjp3J8y2yVHZ7xIRcVdnMjrDQLakZATJSa5STva\nPE6N3mW3zcmytkfsBwAgr5yUE3GP9Wwylc7zicdjHYKEeycQdLMpKuZ+luTaG0MP\nX0aCJ+FspTJQ4m1idOpXBCSLjnMrDh4LRVzQ1LveSIq386zTRaeEwB+56a+Yuohl\nxDgTx2NczjEyH3r7WAxViVSH+zEJDvlSHUw6BXSW35fEpbqNF0x5FFNWWr1Fz9f2\nEjO/bMMKBDnW6/8o8cGgHlNxeFTwUPBUp7sAwwm+gxPRzZWT7Co7DeOCPapKp21z\nJkHh7aSN2l86CO3+Uc7oRQgN2H0BMFH9hu+PJnt/9bO5VIggpe/oQaV4rJVeVdlc\nllAy2g0I+wUrvOUXfp7mZkhTSpotZ4lC5QFtq5uegDz/5NZZafT6zXETLiQfO6/F\no2Ds7JcE7fJBSQ3r3I42\n=IMDn\n-----END PGP SIGNATURE-----\n",
          "payload": "tree af36a1c7834796d0b5fafe4cad2d13987a34d699\nparent 54fa206273a0aa19a5ac3c2f666d7a84c63cebd8\nparent 39368ae517ea84efadbbd72d09cdbc378fa8bb9a\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741047635 -0500\ncommitter GitHub <noreply@github.com> 1741047635 -0500\n\nMerge pull request #21259 from keithc-ca/small\n\nRemove unused import and non-existent @param",
          "verified_at": "2025-03-04T00:25:37Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3c6fa084e657e5f0128087102366725c1df49e6e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/3c6fa084e657e5f0128087102366725c1df49e6e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3c6fa084e657e5f0128087102366725c1df49e6e/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/54fa206273a0aa19a5ac3c2f666d7a84c63cebd8"
        },
        {
          "sha": "39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/39368ae517ea84efadbbd72d09cdbc378fa8bb9a",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/39368ae517ea84efadbbd72d09cdbc378fa8bb9a"
        }
      ]
    },
    {
      "sha": "ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
      "node_id": "C_kwDOBgtdddoAKGFkNmVhYmI0NjFkZWVjOTJjMTFhYjlhNWJjM2Y5ZDFmYjI5NzdkZWI",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-04T01:10:06Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T01:10:06Z"
        },
        "message": "Merge pull request #21254 from amicic/offheap_doublemapping_jni_critical\n\nReorder handling of JNI critical between offheap and discontiguous",
        "tree": {
          "sha": "c05e9a2a02a11fe8ad57a1e1dc004d56dabc40b3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c05e9a2a02a11fe8ad57a1e1dc004d56dabc40b3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxlLuCRC1aQ7uu5UhlAAA3woQAG0YqRAz/eN1zPm6sl+mcqeM\nJ9TYY1hmLU8jEVQgYEdDlFzM3tpvdIrqk3kWkEC1SJgIl/8Oe2Ih0ac/ZxFYdtXt\nUOiGgGeZWiA8JdDcaO1/FDmNwJv8yHZfj7eA2GAVCe9YbHqubx+8r6X0+2/fAkNf\no67z03Gq3A7IOzlFiR8gP61QF+AS+fvAEGR9DwYMDRMT26DafFv1X1t9GPyt4ywf\nefUEqMErd8R2pbrILCVO67eGPSEppE5TKntJ1Qa9nSeScGBesQjIRbRCDHeYWYaE\n86RgpDL+zH00W8KHkB1kTaMMqkyjjzitYGT43C6UP/Ob48K15IKGA+ra5dMfHh+L\n1oEaOdHoCcqgFB7rIPtbYe90FDiPD+Y352ahuhDayw9cKZ2jlEa2q0FOq75/xviO\nKdxB/q18tlsg+muerzo8+z8YQ7CoyX4iBKmBrd1dVCwvfSdMAOOL1YSnxdydT+iv\nL583iR3mP4Kw8/AuIgxs5/Dd2Th7YkjifZ8NBTrtwpXsbf5N4I4L1iQ3th/dFhzz\n0d3SrFG0GCbFIuYbTj7rFyrvlEe6fKkxofOVA5V5EtSZCjaxbuOTRogzxebqlJGA\n8LjzUIbkRSJVCiNQgAtm8Oqt/y5ihCrrjCK11B3VXYBMr3eget7bN3r6gh/8+Bp5\nBjDEHt5SWX1CzXWTzQfl\n=O2sA\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c05e9a2a02a11fe8ad57a1e1dc004d56dabc40b3\nparent 3c6fa084e657e5f0128087102366725c1df49e6e\nparent 28e013ce84fd78a5926ddd8685675a891409904e\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1741050606 -0500\ncommitter GitHub <noreply@github.com> 1741050606 -0500\n\nMerge pull request #21254 from amicic/offheap_doublemapping_jni_critical\n\nReorder handling of JNI critical between offheap and discontiguous",
          "verified_at": "2025-03-04T01:15:09Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3c6fa084e657e5f0128087102366725c1df49e6e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3c6fa084e657e5f0128087102366725c1df49e6e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/3c6fa084e657e5f0128087102366725c1df49e6e"
        },
        {
          "sha": "28e013ce84fd78a5926ddd8685675a891409904e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/28e013ce84fd78a5926ddd8685675a891409904e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/28e013ce84fd78a5926ddd8685675a891409904e"
        }
      ]
    },
    {
      "sha": "aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
      "node_id": "C_kwDOBgtdddoAKGFhNWQ4OTFkMGY2YjM2ZjQ0YWMyNDRlZjQyOWE5MmY0Yzk5NWVmMjE",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-04T14:12:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T14:12:18Z"
        },
        "message": "Merge pull request #21179 from adpopescu/jfr-monitor\n\nAdd JFR monitor enter event",
        "tree": {
          "sha": "cb713885f4000cbfe530da70af3317522508670f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/cb713885f4000cbfe530da70af3317522508670f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxwpDCRC1aQ7uu5UhlAAALjkQAII7UfJAar4sTeHSVBvTgnkJ\nsfwoAruLPk6FgOsuyQdP00IwrN3geIWOFpJJMoEcQ/xYOplZcLT47Fkz2IPJWUqM\nzydJGgWKxcOcz4AjoivNVdoWFH4uQLNaS5ZaSblTCV5CnH3yAQTUBXJJnJx+ZiFy\nPRihX8NcGlCAgom5km+iMsheKsFty0NE/PM+1mZwcs6TA0wBG9jjCDbNqNkSg7EN\ngwGuE2D2zRxlH+Xb8mfGcIGIao6aHwJ6Wu9BsJ1NqIB1Oq82JtK9htFpax254VvJ\nQ4FvxK3witqshcQRNigTVhjYl9/CwjJ92fJcdC0t5m5VNr00TVdyRkPSPYJM2r/M\ndrqx+0N4PfHSfiFW+o+Ei8FmIf6F7UnW5iQuNs4cLhQmNqtr6oRWRcUzUUL3FiUs\nuW3XO2xo1Uxt8zCCHXzza93WanIHIAJQonpwB/s0YLeg9aP4pIw4nCIVEApdGv4T\ne91e9pos54u4QSYOgzh6uvvtBDqWhtJu9ATFeEFgpE3YBQ6efPQxP5ZJzampmAUj\nhZbU8QlRqfEuMnw49P2lGWWlko3ONsA3Js8V6im9SPPNDLNVOFAkFl7n7TCbYMMU\ni5iwgVX2hrjvVm5DdqrkSPCCXq7Cqy8wcdQgSa+RgzyaRM3kj4PGOLx/oAPtJZ7f\nQcF72Wz3sZahST01NN9B\n=5FwX\n-----END PGP SIGNATURE-----\n",
          "payload": "tree cb713885f4000cbfe530da70af3317522508670f\nparent ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb\nparent 38a18d4270bec8080eae9131ecfd983473cbd02c\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741097538 -0500\ncommitter GitHub <noreply@github.com> 1741097538 -0500\n\nMerge pull request #21179 from adpopescu/jfr-monitor\n\nAdd JFR monitor enter event",
          "verified_at": "2025-03-04T14:17:22Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/aa5d891d0f6b36f44ac244ef429a92f4c995ef21/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb"
        },
        {
          "sha": "38a18d4270bec8080eae9131ecfd983473cbd02c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/38a18d4270bec8080eae9131ecfd983473cbd02c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/38a18d4270bec8080eae9131ecfd983473cbd02c"
        }
      ]
    },
    {
      "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
      "node_id": "C_kwDOBgtdddoAKDE1ODFhYzhmNDEyZjJmM2IyMmFkZGE0MjgzNGQwODg4ZWIzMGRkMDc",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-04T15:29:49Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T15:29:49Z"
        },
        "message": "Merge pull request #21243 from tajila/jfr3\n\nExclude jfr event tests on JDK11",
        "tree": {
          "sha": "9555eddbf76203ae57a6cf599eb87e4710ced055",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/9555eddbf76203ae57a6cf599eb87e4710ced055"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnxxxtCRC1aQ7uu5UhlAAAHqkQAAdi5T49y7Bc/Jf4gy+dfLmp\nObu5yMbhTxevh92G4eeFVEbSLtS6SCe9lK0OQyykdamL01D4stjarRsJdoZSqG93\nJxkFPCYZyw5zffhpoTa69oDxPwn+Xe9qbqYDR654U+uzzXmt60BCJ8yc61gdpx0t\nM+hQv8I7Qj0YZpjKtenT27ak/T2G1pRBym02CQHfteSKTxTrQhDJFZ6F61r8ruaq\n9hxfEFVL3UbwA4vd+QUf3ToOJ+LOcPO3JBRatzUuIKGV8ziu7m7ZjD1qzhvTEZEG\nbCT9pBt9OAJ4xzYkLnleOAV7iKc28F+cKDBDPXV61zAsVf3hJMtFecEGS/8XZeni\nAEemw7L4xxjNUCzb0GI7LUfqE6oBqUGuSV1RtlTfQFRF705+FJNOD9/3A9kqxlWA\neqCWettDY1PYUyiF1L6XMCLC4L2gWUZZ+TzXCsOdAT5ywZdvv/obBwpsFZWk8HTO\nfeslglnOHsob966HQYCFFXS8MfWFDZGEShUufsLOPS+76YHzsPH1Vck3cTUgJ6g0\nJOdERwfF0TqbgoPb4/LPYaTqMfMZtGC2lV+wa/YvCLE7FSHGkvbPjYYvb2JNNZBa\nhjk/O/YvEW/A0GB0LaDTmJ9KZsGyTJCG+Z399gqlVL/v4XIQ2SzrqwgJ9a24tX3M\nzc99RdnHDTkJE1FIV7nW\n=Joh4\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9555eddbf76203ae57a6cf599eb87e4710ced055\nparent aa5d891d0f6b36f44ac244ef429a92f4c995ef21\nparent 4e5d2264d93b860ca9d97c1eb340e35c39bd48e9\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741102189 -0500\ncommitter GitHub <noreply@github.com> 1741102189 -0500\n\nMerge pull request #21243 from tajila/jfr3\n\nExclude jfr event tests on JDK11",
          "verified_at": "2025-03-04T15:34:51Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/aa5d891d0f6b36f44ac244ef429a92f4c995ef21"
        },
        {
          "sha": "4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e5d2264d93b860ca9d97c1eb340e35c39bd48e9"
        }
      ]
    },
    {
      "sha": "3ec9566312c48fb9f31574c2c22325afc453fa96",
      "node_id": "C_kwDOBgtdddoAKDNlYzk1NjYzMTJjNDhmYjlmMzE1NzRjMmMyMjMyNWFmYzQ1M2ZhOTY",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-04T18:25:59Z"
        },
        "committer": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-04T18:25:59Z"
        },
        "message": "Restart JIT activity when code cache allocations are freed\n\nCurrently, when the JIT cannot allocate code cache space anymore,\nit will set the `J9JIT_CODE_CACHE_FULL` flag in JITConfig and\ndisable further compilation. However, class unloading can free\ncode cache allocations allowing future JIT compilations to be\nperformed.\nThis commit disables setting the `_disableFurtherCompilation` flag\nonce the code cache runs out of space. Instead, it will check the\n`J9JIT_CODE_CACHE_FULL` flag to see if compilation requests should\nnot even be queued. The difference is that `_disableFurtherCompilation`\nis never reset while `J9JIT_CODE_CACHE_FULL` is reset after code\ncache deallocations. This resetting can be disabled with\n`-Xjit:disableClearCodeCacheFullFlag`\n\nSigned-off-by: Marius Pirvu <mpirvu@ca.ibm.com>",
        "tree": {
          "sha": "ae42db2a265a967f372a7fc1ba3fb8edd024bea1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/ae42db2a265a967f372a7fc1ba3fb8edd024bea1"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/3ec9566312c48fb9f31574c2c22325afc453fa96",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3ec9566312c48fb9f31574c2c22325afc453fa96",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/3ec9566312c48fb9f31574c2c22325afc453fa96",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3ec9566312c48fb9f31574c2c22325afc453fa96/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bbe67ef2e8bd6d92da62879b0909842d4d6a8f6d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bbe67ef2e8bd6d92da62879b0909842d4d6a8f6d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/bbe67ef2e8bd6d92da62879b0909842d4d6a8f6d"
        }
      ]
    },
    {
      "sha": "06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
      "node_id": "C_kwDOBgtdddoAKDA2ZTc4OTliYzI3YjUxNDFlYTFlYmIyNzgxZDNhYzJjZmFhMTI1MzY",
      "commit": {
        "author": {
          "name": "Anna Babu Palathingal",
          "email": "anna.bp@ibm.com",
          "date": "2025-03-04T17:46:24Z"
        },
        "committer": {
          "name": "Anna Babu Palathingal",
          "email": "anna.bp@ibm.com",
          "date": "2025-03-04T18:48:37Z"
        },
        "message": "Remove JFR:required tag in playlist\n\n- Remove JFR feature tag in playlist\n\nrelated:https://github.com/eclipse-openj9/openj9/issues/21269\n\nSigned-off-by: Anna Babu Palathingal <anna.bp@ibm.com>",
        "tree": {
          "sha": "2444beb425d46309d92e532bd15c5f2ef5456d13",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2444beb425d46309d92e532bd15c5f2ef5456d13"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536/comments",
      "author": {
        "login": "annaibm",
        "id": 148897727,
        "node_id": "U_kgDOCN__vw",
        "avatar_url": "https://avatars.githubusercontent.com/u/148897727?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/annaibm",
        "html_url": "https://github.com/annaibm",
        "followers_url": "https://api.github.com/users/annaibm/followers",
        "following_url": "https://api.github.com/users/annaibm/following{/other_user}",
        "gists_url": "https://api.github.com/users/annaibm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/annaibm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/annaibm/subscriptions",
        "organizations_url": "https://api.github.com/users/annaibm/orgs",
        "repos_url": "https://api.github.com/users/annaibm/repos",
        "events_url": "https://api.github.com/users/annaibm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/annaibm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "annaibm",
        "id": 148897727,
        "node_id": "U_kgDOCN__vw",
        "avatar_url": "https://avatars.githubusercontent.com/u/148897727?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/annaibm",
        "html_url": "https://github.com/annaibm",
        "followers_url": "https://api.github.com/users/annaibm/followers",
        "following_url": "https://api.github.com/users/annaibm/following{/other_user}",
        "gists_url": "https://api.github.com/users/annaibm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/annaibm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/annaibm/subscriptions",
        "organizations_url": "https://api.github.com/users/annaibm/orgs",
        "repos_url": "https://api.github.com/users/annaibm/repos",
        "events_url": "https://api.github.com/users/annaibm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/annaibm/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07"
        }
      ]
    },
    {
      "sha": "0fba63c1941caf926699ebe716a380687965fbf4",
      "node_id": "C_kwDOBgtdddoAKDBmYmE2M2MxOTQxY2FmOTI2Njk5ZWJlNzE2YTM4MDY4Nzk2NWZiZjQ",
      "commit": {
        "author": {
          "name": "Theresa Mammarella",
          "email": "Theresa.T.Mammarella@ibm.com",
          "date": "2025-03-04T18:56:08Z"
        },
        "committer": {
          "name": "Theresa Mammarella",
          "email": "Theresa.T.Mammarella@ibm.com",
          "date": "2025-03-04T18:56:08Z"
        },
        "message": "Revert \"Add -Xdump debug option for ValueTypeTests\"\n\nThis reverts commit 9c9ca49ad6fe5a160ce47f496df43a3f0d1a8e36.",
        "tree": {
          "sha": "08943030125146fb94a3a4757198a2f300795f46",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/08943030125146fb94a3a4757198a2f300795f46"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/0fba63c1941caf926699ebe716a380687965fbf4",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0fba63c1941caf926699ebe716a380687965fbf4",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/0fba63c1941caf926699ebe716a380687965fbf4",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0fba63c1941caf926699ebe716a380687965fbf4/comments",
      "author": {
        "login": "theresa-m",
        "id": 12902323,
        "node_id": "MDQ6VXNlcjEyOTAyMzIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/12902323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theresa-m",
        "html_url": "https://github.com/theresa-m",
        "followers_url": "https://api.github.com/users/theresa-m/followers",
        "following_url": "https://api.github.com/users/theresa-m/following{/other_user}",
        "gists_url": "https://api.github.com/users/theresa-m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theresa-m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theresa-m/subscriptions",
        "organizations_url": "https://api.github.com/users/theresa-m/orgs",
        "repos_url": "https://api.github.com/users/theresa-m/repos",
        "events_url": "https://api.github.com/users/theresa-m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theresa-m/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "theresa-m",
        "id": 12902323,
        "node_id": "MDQ6VXNlcjEyOTAyMzIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/12902323?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theresa-m",
        "html_url": "https://github.com/theresa-m",
        "followers_url": "https://api.github.com/users/theresa-m/followers",
        "following_url": "https://api.github.com/users/theresa-m/following{/other_user}",
        "gists_url": "https://api.github.com/users/theresa-m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/theresa-m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/theresa-m/subscriptions",
        "organizations_url": "https://api.github.com/users/theresa-m/orgs",
        "repos_url": "https://api.github.com/users/theresa-m/repos",
        "events_url": "https://api.github.com/users/theresa-m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/theresa-m/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07"
        }
      ]
    },
    {
      "sha": "cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
      "node_id": "C_kwDOBgtdddoAKGNkNmEzM2Q2ZGZiNjMyNWM1MTUxY2FmMjlhZmU3OGE4M2MwYThkMDk",
      "commit": {
        "author": {
          "name": "Lan Xia",
          "email": "Lan_Xia@ca.ibm.com",
          "date": "2025-03-04T19:56:40Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T19:56:40Z"
        },
        "message": "Merge pull request #21270 from annaibm/removeJFRFeatureATag\n\nRemove JFR:required tag in playlist",
        "tree": {
          "sha": "2444beb425d46309d92e532bd15c5f2ef5456d13",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2444beb425d46309d92e532bd15c5f2ef5456d13"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnx1r4CRC1aQ7uu5UhlAAA5IMQAJfSLjnnHKYRcSzPQtKosNZR\nFsJ7ZXsvVyUZZBAauuT/YV6hbezbswQi3JNweOizYd0uTyUI47pM424FLf4foqJj\nNGANOQ1QrO+gAlGQ3bmO52i9sJH/lTuOoto7PeLpJjtrc2TfjnywC1HQDqt8jLcS\nS8edRzManTuvH4m9TUpCVR41GyV1+tU67isDnbfmvlmyi/f+SJt9Puvp4Gb3YMpO\nJHvxP3bqraiSrSGJcZNCJgX2K7YKQGJJfpoM77vKlT5kMM1OB5gjPoXmKhOG3LGV\nlV58XkyXXmKqgB0+fxktZ/O8rkM3QcdQeJvAH58g/ODUA5Vk+D31pSRx/I9hc6UX\nHHteH64kG/AD7brPTSpSVFEmUJRaa5G2SYlYKLrAayZK/NC3QRyKVNkTuXHejoT+\nYfKFWnX07HLqi0pVq9N6xNBC+dRe2o68dre7RGUcYpqmbjJRrLZ1ROJMfOJK8MbB\no3vg43qB+Vs31aByqWEmEJa1x4/JPP9U9ZYsJJ3qTxEhlQZrLd8aonY+NKhd/Ea6\niRlNQPdJLrkTdVPQfVsLSjfY/v2epZHevgnYtiE8lCUwDZD8EAnLjrg1Ai5JejLP\ngCLi/ForyfvXDdhTaGDMwcv/Cp4zGExtZQAYzWMkP++dA9aCPGnxmdenP/qbcskM\n0FJi3SvFP+lpyvScTlz6\n=+CvZ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2444beb425d46309d92e532bd15c5f2ef5456d13\nparent 1581ac8f412f2f3b22adda42834d0888eb30dd07\nparent 06e7899bc27b5141ea1ebb2781d3ac2cfaa12536\nauthor Lan Xia <Lan_Xia@ca.ibm.com> 1741118200 -0500\ncommitter GitHub <noreply@github.com> 1741118200 -0500\n\nMerge pull request #21270 from annaibm/removeJFRFeatureATag\n\nRemove JFR:required tag in playlist",
          "verified_at": "2025-03-04T19:58:47Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09/comments",
      "author": {
        "login": "llxia",
        "id": 19273206,
        "node_id": "MDQ6VXNlcjE5MjczMjA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19273206?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/llxia",
        "html_url": "https://github.com/llxia",
        "followers_url": "https://api.github.com/users/llxia/followers",
        "following_url": "https://api.github.com/users/llxia/following{/other_user}",
        "gists_url": "https://api.github.com/users/llxia/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/llxia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/llxia/subscriptions",
        "organizations_url": "https://api.github.com/users/llxia/orgs",
        "repos_url": "https://api.github.com/users/llxia/repos",
        "events_url": "https://api.github.com/users/llxia/events{/privacy}",
        "received_events_url": "https://api.github.com/users/llxia/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07"
        },
        {
          "sha": "06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/06e7899bc27b5141ea1ebb2781d3ac2cfaa12536"
        }
      ]
    },
    {
      "sha": "172a32eb3ff5033a69906f957b7baebbca72d543",
      "node_id": "C_kwDOBgtdddoAKDE3MmEzMmViM2ZmNTAzM2E2OTkwNmY5NTdiN2JhZWJiY2E3MmQ1NDM",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2024-11-21T23:09:09Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-04T20:28:51Z"
        },
        "message": "Add basic yield pinned vthread support\n\nUpdate Continuation.Pinned enum\nAdd field refs in vmconstantpool.xml\nadd helper to update monitor info\nadd enterObjectMonitor intercept\nAdd support for Object.wait/notify()\nAdd reverse link between J9VMContinuation and vthread & remove Object ref in J9ObjectMonitor\nMove JVM_TakeVirtualThreadListToUnblock code into helper\nRename XX:YieldPinnedContinuation to XX:YieldPinnedVirtualThreads\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nCo-authored-by: Babneet Singh <sbabneet@ca.ibm.com>\nCo-authored-by: Keith W. Campbell <keithc@ca.ibm.com>",
        "tree": {
          "sha": "6ad4146f577096a1da49ace8ef83870e4e9fc844",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6ad4146f577096a1da49ace8ef83870e4e9fc844"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/172a32eb3ff5033a69906f957b7baebbca72d543",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/172a32eb3ff5033a69906f957b7baebbca72d543",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/172a32eb3ff5033a69906f957b7baebbca72d543",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/172a32eb3ff5033a69906f957b7baebbca72d543/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb"
        }
      ]
    },
    {
      "sha": "9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
      "node_id": "C_kwDOBgtdddoAKDlmNDliOTQyYzM5MTVlN2MyM2FmZjU5MThhZGNmOTg4OGQ3Y2I5YzA",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-04T20:37:54Z"
        },
        "committer": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-04T20:37:54Z"
        },
        "message": "Fix bug in TR_IPBCDataFourBytes::getSumBranchCount\n\nTR_IPBCDataFourBytes::getSumBranchCount returns the sum of the two\nbranch counters. Internally these are stored as two 16 bit integers.\ngetSumBranchCount is called only by TR_IProfiler::getSamplingCount which\nreturns a int32_t. However, TR_IPBCDataFourBytes::getSumBranchCount sums\nup the two 16 bit integers as uint16_ts and returns a int16_t. This has\nthe consequence of sometimes returning a negative number because of\noverflow.\n\nThis commit fixes this by consistently using int32_t.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>",
        "tree": {
          "sha": "c1d13de2f27f9f9c23682af82e15e3dde6f6afb3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c1d13de2f27f9f9c23682af82e15e3dde6f6afb3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f49b942c3915e7c23aff5918adcf9888d7cb9c0/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b1d3b4b0bf9c1731380e9a50fc770f9912ba9f40",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b1d3b4b0bf9c1731380e9a50fc770f9912ba9f40",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b1d3b4b0bf9c1731380e9a50fc770f9912ba9f40"
        }
      ]
    },
    {
      "sha": "fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
      "node_id": "C_kwDOBgtdddoAKGZkMmI0NDY2ZTA4YjI1MzVmNzE0ZDUyMDcwYTJiYTNiMzVmZTNiMTA",
      "commit": {
        "author": {
          "name": "Hang Shao",
          "email": "hangshao@ca.ibm.com",
          "date": "2025-03-04T21:08:17Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-04T21:08:17Z"
        },
        "message": "Merge pull request #21272 from theresa-m/fix_20189\n\nRevert \"Add -Xdump debug option for ValueTypeTests\"",
        "tree": {
          "sha": "b344344a6a34e9a27d0f01f16fc67072eeb1a2fa",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b344344a6a34e9a27d0f01f16fc67072eeb1a2fa"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnx2vBCRC1aQ7uu5UhlAAADZIQAIDq/K7jpr/P6MwmOawPEkN1\nEgKzFzs8tuhgCMEjjoKxAfqTgTsJKclHLMUx5+vi1UBYjfk1BfwbhJsU5zRLK6ZW\nEEtR179cgnxZCD9yveuyPppGKY1y3wf5/Ll5jZ+53Y+kvpVGwxpxHKYWKlTSHc9A\nbzP2A3/Z/CoUz5hyUOmYm2ikYNEtDoxQVMhIzDrahdBTUsg4VCTVlIOz5dBXaKK0\nb63ocfJxE6NSxGpo1RNXfX6Zc6TyH/ttSVVXnrcODj2xMD4xj4BQoYrSbAG8EreW\nqnKXzpHSmmumRitsZugBNadhoREQNSPHo4yyJohvRFBsfgJJsRtu5ZBBgoMC+R21\nZVibjMttuJAnsnJgzf4r14gGAY7WmlDtN/Gir65dnid4FXiSZW+ah+jGo1MZRq9a\nmsEMRbyfluqXE04+7SUois7jYoNzq9NTxYR0SbEKvoP04ZelGpSlfoTYAXBy2RkH\nzYQ2/UigPd+uw/1/T0QOIYLScYAWTqOrRO71+hjR18Njn6NTyPQIfmOwkKGbGBV6\nwKLAQDQzKgetE/wYiFkcydJM+CsfNsZPrRkY9DlXpEG0Lnl6niwVCJZy+amsxPrc\n2qWuR1CW3xC/uu3Eqv4QwHTP3UJdx4r8+qj1lZzziweASmLBshhZhgivfU2C/1dV\nIkRqmRp03k/hQNYkWt5x\n=DBQS\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b344344a6a34e9a27d0f01f16fc67072eeb1a2fa\nparent cd6a33d6dfb6325c5151caf29afe78a83c0a8d09\nparent 0fba63c1941caf926699ebe716a380687965fbf4\nauthor Hang Shao <hangshao@ca.ibm.com> 1741122497 -0500\ncommitter GitHub <noreply@github.com> 1741122497 -0500\n\nMerge pull request #21272 from theresa-m/fix_20189\n\nRevert \"Add -Xdump debug option for ValueTypeTests\"",
          "verified_at": "2025-03-04T21:13:21Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd2b4466e08b2535f714d52070a2ba3b35fe3b10/comments",
      "author": {
        "login": "hangshao0",
        "id": 18008382,
        "node_id": "MDQ6VXNlcjE4MDA4Mzgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18008382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hangshao0",
        "html_url": "https://github.com/hangshao0",
        "followers_url": "https://api.github.com/users/hangshao0/followers",
        "following_url": "https://api.github.com/users/hangshao0/following{/other_user}",
        "gists_url": "https://api.github.com/users/hangshao0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hangshao0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hangshao0/subscriptions",
        "organizations_url": "https://api.github.com/users/hangshao0/orgs",
        "repos_url": "https://api.github.com/users/hangshao0/repos",
        "events_url": "https://api.github.com/users/hangshao0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hangshao0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/cd6a33d6dfb6325c5151caf29afe78a83c0a8d09"
        },
        {
          "sha": "0fba63c1941caf926699ebe716a380687965fbf4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0fba63c1941caf926699ebe716a380687965fbf4",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/0fba63c1941caf926699ebe716a380687965fbf4"
        }
      ]
    },
    {
      "sha": "1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
      "node_id": "C_kwDOBgtdddoAKDFlNWNlYzlmNWMxYTgwNTIwNTJmNzc5YTY1NjBhZDlkY2I5OWQzMDI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-04T21:16:49Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-04T21:16:49Z"
        },
        "message": "Update to OpenSSL 3.0.16\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "8377a6a788257fc3c33d3c7f5d4be399dd728894",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/8377a6a788257fc3c33d3c7f5d4be399dd728894"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1e5cec9f5c1a8052052f779a6560ad9dcb99d302/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fd2b4466e08b2535f714d52070a2ba3b35fe3b10"
        }
      ]
    },
    {
      "sha": "cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
      "node_id": "C_kwDOBgtdddoAKGNiY2M4NzBjZmUzMDkyY2VhNDFhZmE4MGNiMWIwZWJhMmFkNzM2NmE",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2024-12-05T18:32:39Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-05T00:56:10Z"
        },
        "message": "Relax SoftMx test passing criteria\n\nAllow that test passes if heap contracts to exact SoftMx value\n(previously, required to be `less then`, what was unnecessarily strict)\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "1b49f43c4b68bdb6a831ec5957d53748a35017cd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1b49f43c4b68bdb6a831ec5957d53748a35017cd"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/aa5d891d0f6b36f44ac244ef429a92f4c995ef21",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/aa5d891d0f6b36f44ac244ef429a92f4c995ef21"
        }
      ]
    },
    {
      "sha": "23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
      "node_id": "C_kwDOBgtdddoAKDIzYjJjZGNmMjFlZTZhNDEyOTkxZmMyMjUzZjAwYmIxN2EwODJmYjI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-05T03:09:45Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T03:09:45Z"
        },
        "message": "Merge pull request #21276 from amicic/softmx_test_relax\n\nRelax SoftMx test passing criteria",
        "tree": {
          "sha": "12afd14ed67dfdfa211c56dcfd95b74ccfb4ba23",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/12afd14ed67dfdfa211c56dcfd95b74ccfb4ba23"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnx8B5CRC1aQ7uu5UhlAAATF4QAJIZp1xdtFBTU+9aHHuyNvim\nYKryddW2Q2S2H+yknK2Yyh3pcIgXKh6CNiWrHgaVGgRLdcuViy1OGVMEZvnyIUES\nZ7GWkCznaXM4FfcBUYgPkAChvtxLoCgmmIzo+hRGhA6yimFNob6BrIC0jrJ9bwJ5\nKTpW88ED2GHzAZ4wdAGTNyHRVeGq98TVbmPHetwUDekPekBdMLfYosUUAWYrBaoZ\n1MJC6SKQEJamTVp2Kn5Krzpks4lCPXTnT/b7bYuJ5mQnA0aLyVVD3F5mw/cX6hgh\nTwG77KYm60jIdysZRbXZDMjOgLtwTqYpnq53RS/q+ZeDKWQJcgMGlZD4rKfbJrRY\n//pHTgWCgO8TDQZCqUBctsWL45a/9Uqb+CfQHNTtQDN7snSe37HOSmTtyb6zrXTN\n6ov7b0B++BP/VcEP1wHpdz6it3zF9AtZACsAGpRsdL8SC2kUHl769u8TVRejrp+W\nvrtIyWAnRUBEdltufhSDb+mEtYQzo15R3szsXDpe5HKppyFSBccFE/lN3oPNzrU/\nQ4blhGgSckfE5BRTcWo6LnK7Znyczox4UAeNNN3IGlmY6leliL4plWGH1bXyIr+i\nkC4KIYpmiApzp6tI+ulBlLriFDaXB2NYkmWUt0RpPopwg2NHSjgc9SBlkQoK9YUJ\n0Xi7NhCPNazFPaKI75H8\n=KoYQ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 12afd14ed67dfdfa211c56dcfd95b74ccfb4ba23\nparent fd2b4466e08b2535f714d52070a2ba3b35fe3b10\nparent cbcc870cfe3092cea41afa80cb1b0eba2ad7366a\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741144185 -0500\ncommitter GitHub <noreply@github.com> 1741144185 -0500\n\nMerge pull request #21276 from amicic/softmx_test_relax\n\nRelax SoftMx test passing criteria",
          "verified_at": "2025-03-05T03:14:47Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/23b2cdcf21ee6a412991fc2253f00bb17a082fb2/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd2b4466e08b2535f714d52070a2ba3b35fe3b10",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fd2b4466e08b2535f714d52070a2ba3b35fe3b10"
        },
        {
          "sha": "cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/cbcc870cfe3092cea41afa80cb1b0eba2ad7366a"
        }
      ]
    },
    {
      "sha": "4d799e0f717fe7805256166f128b20a66d4c46dc",
      "node_id": "C_kwDOBgtdddoAKDRkNzk5ZTBmNzE3ZmU3ODA1MjU2MTY2ZjEyOGIyMGE2NmQ0YzQ2ZGM",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-05T03:15:12Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T03:15:12Z"
        },
        "message": "Merge pull request #21274 from dsouzai/fixgetSumBranchCount\n\nFix bug in TR_IPBCDataFourBytes::getSumBranchCount",
        "tree": {
          "sha": "503fa7a9d4b408900b35f7c08bc8a044572721bf",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/503fa7a9d4b408900b35f7c08bc8a044572721bf"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4d799e0f717fe7805256166f128b20a66d4c46dc",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnx8HACRC1aQ7uu5UhlAAAkj4QAKbsChyULwrGpzaO+lPePaHj\nZCV3kQK8kUirLrcrjv6Y3X/y/3yBVMMmHOi2CBh8YMDXPPuoLdIqMjB35hPVRWW0\n3voBuYrc7SVI/h335pKXNiBVzM5sqJeBcI6L16JYYDbl5D8N/TDIHC1VlRtGzfvs\nW1jd7A1O2RNHm0Dmzigwu7/UB+V6XAcIV3rtl4UJA7ILXW3AtknLpttSyAbl2n1+\nKV1eFHJhn2tvDf3ZxeFTR3opl9kl6OR+qPitxW7mn+SKFYLEJzVWBOnGvi6ECCal\nwOw4frLibovK0iadbWVUFDb3HQCK+/ZimELQbrRT1DYZOV1OQl9dMLPuWRvEB15H\nlujEFO+cMD9yVgHJPhG3xDP3jxi+EueyAGIv7ZwLuSqtA5rJBy61uH+ZxMdgzcmL\nSGKW+acD/hVlhkk12yhB0/LZteQbSYCfdWieOymjTSXHka7tE1B4La5rppdTjXhH\naGciUu6UcbuAg0AN2Q+3E+XCyJa+OH0mcPu6bRfqIw4i5/cd51UvmNyMQLoU33xD\nxD5z4MIoMYfc0DcAT/IBbIlEK+H+1LCGZV5rMx9ZA6hgyDC+pDhWD8lXu+2wilCi\n29acLmqvDDQlFI7TnVbS1UBFHPGkq1yhQSMrX9aH82LXqWKB6Dy8hZHUItPIsHat\n0f+zgze1QR7keDLz++ac\n=4ICZ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 503fa7a9d4b408900b35f7c08bc8a044572721bf\nparent 23b2cdcf21ee6a412991fc2253f00bb17a082fb2\nparent 9f49b942c3915e7c23aff5918adcf9888d7cb9c0\nauthor Marius Pirvu <mpirvu@ca.ibm.com> 1741144512 -0500\ncommitter GitHub <noreply@github.com> 1741144512 -0500\n\nMerge pull request #21274 from dsouzai/fixgetSumBranchCount\n\nFix bug in TR_IPBCDataFourBytes::getSumBranchCount",
          "verified_at": "2025-03-05T03:20:15Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4d799e0f717fe7805256166f128b20a66d4c46dc",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4d799e0f717fe7805256166f128b20a66d4c46dc",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4d799e0f717fe7805256166f128b20a66d4c46dc/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/23b2cdcf21ee6a412991fc2253f00bb17a082fb2",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/23b2cdcf21ee6a412991fc2253f00bb17a082fb2"
        },
        {
          "sha": "9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f49b942c3915e7c23aff5918adcf9888d7cb9c0",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f49b942c3915e7c23aff5918adcf9888d7cb9c0"
        }
      ]
    },
    {
      "sha": "9ed344211e8268be2bd0e90308d21c6436d1c2fa",
      "node_id": "C_kwDOBgtdddoAKDllZDM0NDIxMWU4MjY4YmUyYmQwZTkwMzA4ZDIxYzY0MzZkMWMyZmE",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-05T04:22:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T04:22:04Z"
        },
        "message": "Merge pull request #21275 from pshipton/openssl3.0.16\n\nUpdate to OpenSSL 3.0.16",
        "tree": {
          "sha": "8e4d28dbf50703f88a622e1b392fc58e43add7f1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/8e4d28dbf50703f88a622e1b392fc58e43add7f1"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9ed344211e8268be2bd0e90308d21c6436d1c2fa",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnx9FsCRC1aQ7uu5UhlAAAjdsQAGCyotZc9v3377/fI4xUnJug\nBKnNc212vmtcvNHVDTBz2Id7gJ619TUx5Kdf0KKVH9C3xVoABau9W8SaB915WWiy\na7ipWwaJihWf0EJRKYOBdni0Uar/4sK8GyUsesANaHxgSl8hVFf2fgPoNilAKVYE\nZvcWcWdjOH0CX7v3PZ5WmlLdGpuK9pVQa0WstttgMdROELsp3AnvFExLPMNg0CWl\nZrJJDksxxcRB1zQdgATZ5MUJkg97f9fe7aY7cQHhtfbrbelW2FHqRDQK3KUeCqvX\nfbBWqB8YGJldsBUVVhu4zY/s4YMii+eCgP3QA0BOrRDeLGFWrFJ90jJZ64SKNupj\nIDkPSoWOb9LZfCJmpRQQTnfn2RXDgC7u4MLEDQKM4joM5PHYEoTjLAp0qwNjw/SO\n5GAgbGH2qH6oKqd1gWLLt0OFbgyA8JcL1pEZbUcC3l3cx/bf/ahpuCom5FXHGWNm\nzd/+iN9bme43JeRFsPtw7hpONEsINTVEMAi3cjGw04jasWedav13kwvJFHn4Mvly\nVcuW7BDc520ARJ7+sTYVdHJcZ7+sApYu6rpqab2M0bi95mJOUGdkoiiFCOwU1kfW\nCoX/I1gDCuO3HhHct8BvI56bUAGNpsq7/0okjFjrPitJCbDdP8gfhR9xzwji/GNl\n6yNy5p2JIezPMEl0V8bT\n=T5BS\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 8e4d28dbf50703f88a622e1b392fc58e43add7f1\nparent 4d799e0f717fe7805256166f128b20a66d4c46dc\nparent 1e5cec9f5c1a8052052f779a6560ad9dcb99d302\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741148524 -0500\ncommitter GitHub <noreply@github.com> 1741148524 -0500\n\nMerge pull request #21275 from pshipton/openssl3.0.16\n\nUpdate to OpenSSL 3.0.16",
          "verified_at": "2025-03-05T04:27:06Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9ed344211e8268be2bd0e90308d21c6436d1c2fa",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9ed344211e8268be2bd0e90308d21c6436d1c2fa",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9ed344211e8268be2bd0e90308d21c6436d1c2fa/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4d799e0f717fe7805256166f128b20a66d4c46dc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4d799e0f717fe7805256166f128b20a66d4c46dc",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4d799e0f717fe7805256166f128b20a66d4c46dc"
        },
        {
          "sha": "1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1e5cec9f5c1a8052052f779a6560ad9dcb99d302",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1e5cec9f5c1a8052052f779a6560ad9dcb99d302"
        }
      ]
    },
    {
      "sha": "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
      "node_id": "C_kwDOBgtdddoAKDlkY2U0ZGM4MmQ3OWI4NmYwMWFmZjljZjIzODU5YWE3MmQ3M2ViM2Q",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-05T13:57:16Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T13:57:16Z"
        },
        "message": "Merge pull request #21271 from mpirvu/codecache_full\n\nRestart JIT activity when code cache allocations are freed",
        "tree": {
          "sha": "afd18efee309163af97cc9e3d13cf94f58161d85",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/afd18efee309163af97cc9e3d13cf94f58161d85"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyFg8CRC1aQ7uu5UhlAAAbp8QAJPCMCnsoMfdC8+r4rXvCK1D\nT489EeMg19d0hxWTunSyk/UHNLlYchKir1D8+UqA70c0nk9Z2xcyhL0wCcswOVzR\nJ31cdgcAw5Nn6/4WEwfkpYcgmm2+qmwyRIzVodFpBJCghVA38fV2+6bHYYBfhCLd\nVEixLQ4Wgyk6mp78vSqVfrcRke9F0Cv0YvrH+t8byBvs0T+f/JUo8A7JuTbHHcfO\njndQ/43jItUi62KFyAd4zVfOzcnZyGbPXPpOc98AEvwgkhd3te81NEtt1eY0381z\nPzhAXq3P65x+uJr5KttzJp/33K30TC0HF/kQ2l+GxBgKEWXfIkl6/iGe1mn6Ynx0\nKh82F0ixuehFK1t9gfKK4P9IxC8VICPPmUXJK0YWKCT5PlasWkiqpj/Hu0K3EOZy\noY8e6Ix06SCxxYLYBNeI1LoNmKOTJMc/ZNxUMuKLTHTKJHmnMTt+WgbxJ3UzQayE\nmONgXgJVXgXF41YjM7zAAof0rvdMEmcfD9GwKBnK1d0XpKp0/o+g/KGKt8kQhWTU\n9PmvP/hjDDix+LdHlM3mOEid3JdkwfAhnzvqbeb3IygpGzh+aMCWtSJhGXRRRpmH\nozO8GdM8IrvERDgsdrfxTXursFojlQHYlRjYD9oBbuMZ6fFbqMOLNAhIEVsf89/5\nh/mPRWBYHQtBxFgWjOLR\n=iMgB\n-----END PGP SIGNATURE-----\n",
          "payload": "tree afd18efee309163af97cc9e3d13cf94f58161d85\nparent 9ed344211e8268be2bd0e90308d21c6436d1c2fa\nparent 3ec9566312c48fb9f31574c2c22325afc453fa96\nauthor Irwin D'Souza <dsouzai.gh@gmail.com> 1741183036 -0500\ncommitter GitHub <noreply@github.com> 1741183036 -0500\n\nMerge pull request #21271 from mpirvu/codecache_full\n\nRestart JIT activity when code cache allocations are freed",
          "verified_at": "2025-03-05T14:02:20Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9ed344211e8268be2bd0e90308d21c6436d1c2fa",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9ed344211e8268be2bd0e90308d21c6436d1c2fa",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9ed344211e8268be2bd0e90308d21c6436d1c2fa"
        },
        {
          "sha": "3ec9566312c48fb9f31574c2c22325afc453fa96",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3ec9566312c48fb9f31574c2c22325afc453fa96",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/3ec9566312c48fb9f31574c2c22325afc453fa96"
        }
      ]
    },
    {
      "sha": "eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
      "node_id": "C_kwDOBgtdddoAKGVlYTdkNDhiMmE0ZjJmODZjYmJjNzg5NGJiOWIyZmIxZjgxNjVlMzY",
      "commit": {
        "author": {
          "name": "Mahdi Ardekanian",
          "email": "mahdi@ibm.com",
          "date": "2025-03-05T14:47:51Z"
        },
        "committer": {
          "name": "Mahdi Ardekanian",
          "email": "mahdi@ibm.com",
          "date": "2025-03-05T14:51:28Z"
        },
        "message": "replace os specific labels for mac aarch,x64 with sw.tool.xcode.15_2\n\nRelated changes to build base on XCode level rather os specified version. related: runtimes/infrastructure#8105. Also unnecessary additionalTestLables related to mac_10_11 removes as those nodes are not exists anymore and the fact that test framework set labels in logic. e.g here\n\nSigend-off-by: mahdi@ibm.com",
        "tree": {
          "sha": "1b29546885002c86ab877efe1a8de1263bf1d839",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1b29546885002c86ab877efe1a8de1263bf1d839"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36/comments",
      "author": {
        "login": "mahdipub",
        "id": 136717340,
        "node_id": "U_kgDOCCYkHA",
        "avatar_url": "https://avatars.githubusercontent.com/u/136717340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mahdipub",
        "html_url": "https://github.com/mahdipub",
        "followers_url": "https://api.github.com/users/mahdipub/followers",
        "following_url": "https://api.github.com/users/mahdipub/following{/other_user}",
        "gists_url": "https://api.github.com/users/mahdipub/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mahdipub/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mahdipub/subscriptions",
        "organizations_url": "https://api.github.com/users/mahdipub/orgs",
        "repos_url": "https://api.github.com/users/mahdipub/repos",
        "events_url": "https://api.github.com/users/mahdipub/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mahdipub/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "mahdipub",
        "id": 136717340,
        "node_id": "U_kgDOCCYkHA",
        "avatar_url": "https://avatars.githubusercontent.com/u/136717340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mahdipub",
        "html_url": "https://github.com/mahdipub",
        "followers_url": "https://api.github.com/users/mahdipub/followers",
        "following_url": "https://api.github.com/users/mahdipub/following{/other_user}",
        "gists_url": "https://api.github.com/users/mahdipub/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mahdipub/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mahdipub/subscriptions",
        "organizations_url": "https://api.github.com/users/mahdipub/orgs",
        "repos_url": "https://api.github.com/users/mahdipub/repos",
        "events_url": "https://api.github.com/users/mahdipub/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mahdipub/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d"
        }
      ]
    },
    {
      "sha": "5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
      "node_id": "C_kwDOBgtdddoAKDVkYWExMTBlMGEzZDUzYWU4OGEyNWVlMWY4YzcyZTU2OWIyYTAxY2I",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-05T15:08:34Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T15:08:34Z"
        },
        "message": "Merge pull request #21273 from fengxue-IS/jep491-3.1\n\nJep491 VM support",
        "tree": {
          "sha": "bf6c335e9dce2d185ed4ade27c9e1cb7484cf819",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/bf6c335e9dce2d185ed4ade27c9e1cb7484cf819"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyGjyCRC1aQ7uu5UhlAAAuqIQAEUu5O894v6Moz0XhfyIF002\nnhKgNo7JIlLJxF9r4gCt2lfeC3J23FhCB/Ppp9Q9Aw66/rbTDo9Chneao73zDQdC\njgLz6oTn4v/xdNVqZRAz4cw53Z3VpA3fo4BtuvPBGn5MQa+zjmKRxSWCcKInVXt9\n9o2UKs65Sl3tz+DghSFhwTV/2/LMtt6y6O95PvvbqP0dHqDJ3FrQ7/NUUa/cnuhC\nsVTgZJ8DJ2IPq4p0jsC+GQIAzZHTjvDdT+yIgIXaqVu2s6vk8jGT2cjoMbneDXI7\nKdGD3mrKLOMyCoe+ZxT1eLu5IT429ht4Pda5mYKi0oSq3bAbaktV2jnyQE00ug9i\nU1R17HJThg+fZHf5UfVWx16AXHCSYx4PPzFX0gWkGcXNt6wrF43BoRuOKR9944So\nlU9z3UB7CIlWzUPMfq3lSGSJQpgzlHKp/Zj+VDouBRbEVcBxvhWtkIoDFUvxPDIT\nHWjcV+2WNxSCoQ71iSjE9NGiy6kSw9JHNdJddQt8XPX4ZNXGacyf4zPz/MDJ08oD\nnq2yXM2ueYONPltDGI9tCdyo86gsH7j4ZkANrbl5hBytiaM/5jX+pWR9PncU5Gw2\nt+WrzgsvA0J8MUaGStoLlm22ab7OrLxs+XjfjIPasSWuK4PLDNojCtPZeoTifaK7\n3CeFFTM/mTGCAEm/sB1k\n=k57M\n-----END PGP SIGNATURE-----\n",
          "payload": "tree bf6c335e9dce2d185ed4ade27c9e1cb7484cf819\nparent 9dce4dc82d79b86f01aff9cf23859aa72d73eb3d\nparent 172a32eb3ff5033a69906f957b7baebbca72d543\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1741187314 -0500\ncommitter GitHub <noreply@github.com> 1741187314 -0500\n\nMerge pull request #21273 from fengxue-IS/jep491-3.1\n\nJep491 VM support",
          "verified_at": "2025-03-05T15:13:37Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d"
        },
        {
          "sha": "172a32eb3ff5033a69906f957b7baebbca72d543",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/172a32eb3ff5033a69906f957b7baebbca72d543",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/172a32eb3ff5033a69906f957b7baebbca72d543"
        }
      ]
    },
    {
      "sha": "774e298d762c526e0036c0b5dfc1ea0b5069d426",
      "node_id": "C_kwDOBgtdddoAKDc3NGUyOThkNzYyYzUyNmUwMDM2YzBiNWRmYzFlYTBiNTA2OWQ0MjY",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-05T16:17:28Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-05T16:21:11Z"
        },
        "message": "Remove J9JavaVM from takeVirtualThreadListToUnblock's parameter list\n\nJ9JavaVM is now retrieved from currentThread, simplifying the code.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "f560743358214beac11265334d9e29b9708af446",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f560743358214beac11265334d9e29b9708af446"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/774e298d762c526e0036c0b5dfc1ea0b5069d426",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/774e298d762c526e0036c0b5dfc1ea0b5069d426",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/774e298d762c526e0036c0b5dfc1ea0b5069d426",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/774e298d762c526e0036c0b5dfc1ea0b5069d426/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb"
        }
      ]
    },
    {
      "sha": "9f917f586505ff9d4b20c374481555ce6f99c88f",
      "node_id": "C_kwDOBgtdddoAKDlmOTE3ZjU4NjUwNWZmOWQ0YjIwYzM3NDQ4MTU1NWNlNmY5OWM4OGY",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-05T17:21:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T17:21:04Z"
        },
        "message": "Merge pull request #21287 from babsingh/main12\n\nRemove J9JavaVM from takeVirtualThreadListToUnblock's parameter list",
        "tree": {
          "sha": "f560743358214beac11265334d9e29b9708af446",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f560743358214beac11265334d9e29b9708af446"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9f917f586505ff9d4b20c374481555ce6f99c88f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyIgACRC1aQ7uu5UhlAAAvpEQAFoDiqTZSrMKjjRL+2OEjt39\nQDtnH4lVzpZc4FcynSHVCDo4rZlIMrWKfrMGVzBeW50k74VqWDbEPgwAhy4wn9+Y\no8GmM8uN0P1X4H7Fxhuq5ui5xOyw6DERRI0zALkAC2QzA8i4wdNId4a96JCcRcOO\nYts/z987O8RCDCMb5Jl4yS3zG/UkdbwLb86r9aBaz4U0UKvFpmwFonwF5t2kwZfA\ny5dPuCyKbA2HThdaM339YHSiQUqjrg19CAV5hEfn3MoVa9mS85RdPMHfTThcSFfx\nXrmobso67QIp7Eirg3SkGd5z0iV/gTcRPwFRgkdLcE6vK0VrGf3+/Ej4ZBj3gVK7\n/HTCU2r7xlB96vKTvNVMAVcg5yM879N/dXAgjXip7vwMGS4RBhC3t9NAsdja4Hki\nh1LCqPC5CDRdq+lekXJDDsBHFc92/JIK8ZHGmliYlopr67O6WsS5sTetNfxYUaAm\nmrEpu5BQ29MahThzE+O+jPjSzv+SoaTik37ISeE7BsmuYJrZzueSgwnmGUwdZ/6U\nrjrBlI0MegklHD/t72Q15oFMcV72FVFOpUPdjTe4C+rUMRquHRiOEax1Pjanp+Ev\n50jIRdpy5Y8BDpfl4u7y24ptbsY3x9PTPCbQKkqWqHcSle/EvUkfRssY6PieJf3x\nJjRoxOxWoY+WpcJEs1w7\n=JFuI\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f560743358214beac11265334d9e29b9708af446\nparent 5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb\nparent 774e298d762c526e0036c0b5dfc1ea0b5069d426\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741195264 -0500\ncommitter GitHub <noreply@github.com> 1741195264 -0500\n\nMerge pull request #21287 from babsingh/main12\n\nRemove J9JavaVM from takeVirtualThreadListToUnblock's parameter list",
          "verified_at": "2025-03-05T17:26:06Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f917f586505ff9d4b20c374481555ce6f99c88f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f917f586505ff9d4b20c374481555ce6f99c88f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f917f586505ff9d4b20c374481555ce6f99c88f/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb"
        },
        {
          "sha": "774e298d762c526e0036c0b5dfc1ea0b5069d426",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/774e298d762c526e0036c0b5dfc1ea0b5069d426",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/774e298d762c526e0036c0b5dfc1ea0b5069d426"
        }
      ]
    },
    {
      "sha": "b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
      "node_id": "C_kwDOBgtdddoAKGI5MzBkMGNhMjVkYWFkY2M4M2EyMmY3YjBjYjIzYTAyNmU4MjFhYzI",
      "commit": {
        "author": {
          "name": "Bradley Wood",
          "email": "bradley.wood@ibm.com",
          "date": "2025-02-28T21:09:47Z"
        },
        "committer": {
          "name": "Bradley Wood",
          "email": "bradley.wood@ibm.com",
          "date": "2025-03-05T17:27:53Z"
        },
        "message": "x86: check xcr0 in AOT compiles\n\nSigned-off-by: Bradley Wood <bradley.wood@ibm.com>",
        "tree": {
          "sha": "d9c580c0775fa95b0d9ab1d78ec2a6dd61d5c44a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d9c580c0775fa95b0d9ab1d78ec2a6dd61d5c44a"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b930d0ca25daadcc83a22f7b0cb23a026e821ac2/comments",
      "author": {
        "login": "BradleyWood",
        "id": 14269423,
        "node_id": "MDQ6VXNlcjE0MjY5NDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14269423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BradleyWood",
        "html_url": "https://github.com/BradleyWood",
        "followers_url": "https://api.github.com/users/BradleyWood/followers",
        "following_url": "https://api.github.com/users/BradleyWood/following{/other_user}",
        "gists_url": "https://api.github.com/users/BradleyWood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BradleyWood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BradleyWood/subscriptions",
        "organizations_url": "https://api.github.com/users/BradleyWood/orgs",
        "repos_url": "https://api.github.com/users/BradleyWood/repos",
        "events_url": "https://api.github.com/users/BradleyWood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BradleyWood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "BradleyWood",
        "id": 14269423,
        "node_id": "MDQ6VXNlcjE0MjY5NDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14269423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BradleyWood",
        "html_url": "https://github.com/BradleyWood",
        "followers_url": "https://api.github.com/users/BradleyWood/followers",
        "following_url": "https://api.github.com/users/BradleyWood/following{/other_user}",
        "gists_url": "https://api.github.com/users/BradleyWood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BradleyWood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BradleyWood/subscriptions",
        "organizations_url": "https://api.github.com/users/BradleyWood/orgs",
        "repos_url": "https://api.github.com/users/BradleyWood/repos",
        "events_url": "https://api.github.com/users/BradleyWood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BradleyWood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07"
        }
      ]
    },
    {
      "sha": "d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
      "node_id": "C_kwDOBgtdddoAKGQ3OGI2MDk1YmU1ZTdhNzlkOGIzNDg5MGE3ZjQyYTczMTJiY2M5YzY",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-05T14:55:05Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-05T18:44:02Z"
        },
        "message": "For jdk24+ set the default encoding to UTF-8\n\nIssue https://github.com/eclipse-openj9/openj9/issues/21204\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "872ef3e3817077083d72767365ac1bfdd8b07f39",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/872ef3e3817077083d72767365ac1bfdd8b07f39"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d"
        }
      ]
    },
    {
      "sha": "40febba0c4d91850a90b5611721676f417ac7bac",
      "node_id": "C_kwDOBgtdddoAKDQwZmViYmEwYzRkOTE4NTBhOTBiNTYxMTcyMTY3NmY0MTdhYzdiYWM",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2024-12-05T18:32:39Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-05T20:23:59Z"
        },
        "message": "SoftMx test, touch memory\n\nWhen allocating large arrays we now touch memory. This should help with\nmore precise/deterministic calculation of OS physical free memory.\n\nThis is particularly important for Balanced Offheap, which has lazy\ncommit of newly allocated Offheap arrays.\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "1f48d3194421c852dce4d2b459c04810e6b39d0b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1f48d3194421c852dce4d2b459c04810e6b39d0b"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/40febba0c4d91850a90b5611721676f417ac7bac",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/40febba0c4d91850a90b5611721676f417ac7bac",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/40febba0c4d91850a90b5611721676f417ac7bac",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/40febba0c4d91850a90b5611721676f417ac7bac/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "9f917f586505ff9d4b20c374481555ce6f99c88f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f917f586505ff9d4b20c374481555ce6f99c88f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f917f586505ff9d4b20c374481555ce6f99c88f"
        }
      ]
    },
    {
      "sha": "de6f631bf53183e8d84b7b4831e81de63eb3ca67",
      "node_id": "C_kwDOBgtdddoAKGRlNmY2MzFiZjUzMTgzZThkODRiN2I0ODMxZTgxZGU2M2ViM2NhNjc",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-05T20:35:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T20:35:10Z"
        },
        "message": "Merge pull request #21285 from pshipton/defutf8\n\nFor jdk24+ set the default encoding to UTF-8",
        "tree": {
          "sha": "b45893a23463a7c97cfc90d9c0d0a2aaa7b457b4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b45893a23463a7c97cfc90d9c0d0a2aaa7b457b4"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/de6f631bf53183e8d84b7b4831e81de63eb3ca67",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyLV+CRC1aQ7uu5UhlAAAw9AQAJC12KpZujNq48EgHVDeICxL\nQcnjzbaQrPX9onD17jUb67I3sfPRc3nJmrxZejZVbjaDRZptp0ksw8R9AvBOaL4y\nQx0kEuNC43Oyw3JaNVSFVWaWwtd6aoimmo4JBCajw0N3SDZzjky2GVpgWGOzi3WI\n9ieFMjLNuuuEpIdV+FJkDvgkdbBM8ZFmf/9sX5b3uS+abSySQDVRJoy7xf3XnVTY\nIK5odzPfFLsqR2aAmZsbO8CBcvQ2Bbx1Bezc7HwENbT0l4+n6pMGakAx/rPq4x9A\nLvxFRtorWSjdzGypHIYeKo/y7lEUhex76YU9Eo1AEouW9keJpvLiDXrzQSinptNe\norex34JopL3DEKC22pzsgSO31cOlqkg/lQaWkzMXvdwfGp6PKy8HzqSz1BxMBJRl\n9VzWN47LgQ/KYTTJ9ifjJYF5B7ItzEmAvYUoNrDt424ksIWdZYst9yvy14zFX12F\nM/aeFscYHNxabazi3GIuH3isbG+Ih957PjMdNVPVtUtTZV93MzXFqzZXLpCXlLFt\nrYRGRu8XWnZ5plAD+Yz/zBWlS4RP9lWeOx4/fpqHUhjhU+q4Ru4FqF7/zWWYmkBy\ncjOfYPPqwN3Pj2RXjZiJSQfJTIDM9Hu5+U0FGjjnBAykagT8BJtM8POsXfpQNLbx\nV2ZhWJLTReenaQKTiXGg\n=+WFM\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b45893a23463a7c97cfc90d9c0d0a2aaa7b457b4\nparent 9f917f586505ff9d4b20c374481555ce6f99c88f\nparent d78b6095be5e7a79d8b34890a7f42a7312bcc9c6\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741206910 -0500\ncommitter GitHub <noreply@github.com> 1741206910 -0500\n\nMerge pull request #21285 from pshipton/defutf8\n\nFor jdk24+ set the default encoding to UTF-8",
          "verified_at": "2025-03-05T20:40:12Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de6f631bf53183e8d84b7b4831e81de63eb3ca67",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/de6f631bf53183e8d84b7b4831e81de63eb3ca67",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de6f631bf53183e8d84b7b4831e81de63eb3ca67/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9f917f586505ff9d4b20c374481555ce6f99c88f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f917f586505ff9d4b20c374481555ce6f99c88f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f917f586505ff9d4b20c374481555ce6f99c88f"
        },
        {
          "sha": "d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d78b6095be5e7a79d8b34890a7f42a7312bcc9c6"
        }
      ]
    },
    {
      "sha": "7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
      "node_id": "C_kwDOBgtdddoAKDdjZTJjMDE4ZWU4MjhjMmFiNTgyOGQ0ZmY3Njg4ZDQ2M2E0YTgxZTc",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-05T20:41:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T20:41:56Z"
        },
        "message": "Merge pull request #21290 from amicic/softmx_test_touch\n\nSoftMx test, touch memory",
        "tree": {
          "sha": "e5efbe6c9fecc1cfd6b98bf274161a0d176501bf",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/e5efbe6c9fecc1cfd6b98bf274161a0d176501bf"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyLcUCRC1aQ7uu5UhlAAA2XsQAK6zS+W3OLaRVUaoeRcPHHP3\n6eTvKLGFYXJwmeS7rj1bY5G0wvvORkqxVOWnt5+RXFwjvVRKl9wtl2Y7gJwmQBp+\nwgCzsoFI+gCleQ645U176YOxadwLZKlivyet77wpshML10jrCnTNgbj6iz8CPXWV\nIFdTeRCvjcXS4QGfyhPPmltg45m2J2nVvZYN/ooXnKxSerhuSXVN6cKxNssERnNv\npqMFTZpLcGA9OL8ogSsXqGmV5C1mh2KSDLBHsmhJIh/M7IiV1YnoF2rvT0GM2bOa\nOmKDbsnFWucetw2YcOO2HTj7Z4u36CWgIX1OxHkLF1DRnDpMfpz6S+vGQ482ECfP\nCj12LtSDX18MYSLng7BTpNHQKTS/VE0EYXonaVScQ8o4f3vkV+mXZlQdjG0yAxgu\nDBFPZStgksitZPVTGwOggzYWv88kKRCllEO6TOD6B8Q8H3mk87i1zobgj7y1CDs0\nTYOqKr4iwbPeYRIFfKU8JgJyiCH0HYHXKFsvUC0pC4o7dKWiwFiWU2zKnHcwj5+r\nqvoHy3V0A1D06OMMMbAx5cuyHLK1Uk6ja07UTBCfuL97b04edR8GUlbjc3Dp7+qb\n4Qj0aoyoPA7lUoBIGTMpYSPL+TiLsVKiU0RcPBABjCGoNugIwtRqVXT/tPeVcJ+A\nk9WkFJjMqckkZE2XDbVg\n=6q8f\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e5efbe6c9fecc1cfd6b98bf274161a0d176501bf\nparent de6f631bf53183e8d84b7b4831e81de63eb3ca67\nparent 40febba0c4d91850a90b5611721676f417ac7bac\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741207316 -0500\ncommitter GitHub <noreply@github.com> 1741207316 -0500\n\nMerge pull request #21290 from amicic/softmx_test_touch\n\nSoftMx test, touch memory",
          "verified_at": "2025-03-05T20:46:59Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "de6f631bf53183e8d84b7b4831e81de63eb3ca67",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de6f631bf53183e8d84b7b4831e81de63eb3ca67",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/de6f631bf53183e8d84b7b4831e81de63eb3ca67"
        },
        {
          "sha": "40febba0c4d91850a90b5611721676f417ac7bac",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/40febba0c4d91850a90b5611721676f417ac7bac",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/40febba0c4d91850a90b5611721676f417ac7bac"
        }
      ]
    },
    {
      "sha": "96b2f0f6c9da92f4b3f98474b1bb3db977533131",
      "node_id": "C_kwDOBgtdddoAKDk2YjJmMGY2YzlkYTkyZjRiM2Y5ODQ3NGIxYmIzZGI5Nzc1MzMxMzE",
      "commit": {
        "author": {
          "name": "Henry Zongaro",
          "email": "zongaro@ca.ibm.com",
          "date": "2025-01-29T14:54:21Z"
        },
        "committer": {
          "name": "Henry Zongaro",
          "email": "zongaro@ca.ibm.com",
          "date": "2025-03-05T21:30:21Z"
        },
        "message": "Throw IdentityException if operand of monent is a value type object\n\nPreviously, specifying an instance of a value type class on a\nmonitorenter bytecode would result in an IllegalMonitorStateException;\na java.lang.IdentityException must now be thrown instead.\n\nThis commit introduces a non-helper, <isIdentityObject>, that checks\nthat the operand of a TR::monent instruction is an instance of an\nidentity class rather than a value type class.  If it is a value type\nclass, it throws an IdentityException.  The actual test is expanded\nto test the flags field of the object's class during the Tree Lowering\noptimization pass.\n\nThe result of <isIdentityObject> is tested on a ZEROCHK operation that\nis generated before the monent during IL generation.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>",
        "tree": {
          "sha": "da685aad059b5b40c2e7fbd75cca6bcee7a31ca2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/da685aad059b5b40c2e7fbd75cca6bcee7a31ca2"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/96b2f0f6c9da92f4b3f98474b1bb3db977533131",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b2f0f6c9da92f4b3f98474b1bb3db977533131",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/96b2f0f6c9da92f4b3f98474b1bb3db977533131",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b2f0f6c9da92f4b3f98474b1bb3db977533131/comments",
      "author": {
        "login": "hzongaro",
        "id": 19479475,
        "node_id": "MDQ6VXNlcjE5NDc5NDc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19479475?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hzongaro",
        "html_url": "https://github.com/hzongaro",
        "followers_url": "https://api.github.com/users/hzongaro/followers",
        "following_url": "https://api.github.com/users/hzongaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/hzongaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hzongaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hzongaro/subscriptions",
        "organizations_url": "https://api.github.com/users/hzongaro/orgs",
        "repos_url": "https://api.github.com/users/hzongaro/repos",
        "events_url": "https://api.github.com/users/hzongaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hzongaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "hzongaro",
        "id": 19479475,
        "node_id": "MDQ6VXNlcjE5NDc5NDc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19479475?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hzongaro",
        "html_url": "https://github.com/hzongaro",
        "followers_url": "https://api.github.com/users/hzongaro/followers",
        "following_url": "https://api.github.com/users/hzongaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/hzongaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hzongaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hzongaro/subscriptions",
        "organizations_url": "https://api.github.com/users/hzongaro/orgs",
        "repos_url": "https://api.github.com/users/hzongaro/repos",
        "events_url": "https://api.github.com/users/hzongaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hzongaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "292bda03ecfba81d1e1f91b52db61b12009726ff",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/292bda03ecfba81d1e1f91b52db61b12009726ff",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/292bda03ecfba81d1e1f91b52db61b12009726ff"
        }
      ]
    },
    {
      "sha": "c363b26afeec17efc60ab87926144bfd4ac448ab",
      "node_id": "C_kwDOBgtdddoAKGMzNjNiMjZhZmVlYzE3ZWZjNjBhYjg3OTI2MTQ0YmZkNGFjNDQ4YWI",
      "commit": {
        "author": {
          "name": "Vijay Sundaresan",
          "email": "vijaysun@ca.ibm.com",
          "date": "2025-03-05T23:06:50Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-05T23:06:50Z"
        },
        "message": "Merge pull request #21157 from nbhuiyan/class-arg-propagation\n\nEnable peeking ILGen for inlined methods related to java/util/HashMap get/put operations.",
        "tree": {
          "sha": "6746e9a7cb3ec5711b53aaa75d6f1c494e038f90",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6746e9a7cb3ec5711b53aaa75d6f1c494e038f90"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c363b26afeec17efc60ab87926144bfd4ac448ab",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyNkKCRC1aQ7uu5UhlAAA7PEQAELgqTKoRzlxuRHg92qcpwoP\n8GCkQuYZBWKUpdbYKHdby/OkNAdA+EtualO0iCqXmT6p9s22syUIdwW4FyvufUbS\nDyZZnr5T7h1ScJcFi0oQwrs3U/O1R6PWFKz+NDcypDVS7s70tmOqykEQP9purR/f\nzoUUGZ3FVQb8udVZwG7sFCSAVgXIIwATXpDXutp4OH2pGmpX/EqlJsGpOXUdgDqT\nnEDGFRZlEOOfJpvQQpL8NjMKWKBKU5MELRb0Dq6VmB2uiPAxKLC4SXQQZZf4RqAv\n25a3kV9Y0FON43HFL+MPZuku807clajOgn+uRMNihG3lcxtSzTSRQWzC4W/G9i3q\nByigjqGbJilhnx9ohnCitiKilj6t3xQkABU/7y5WzJofLmPEbrE6LovzMdVQLi1t\n6hDNhBwsnhE7wWwdzA569JxzjtqPfdB5Q+cDDHEpb01itCYlRqFwzYipyKxVoBtf\na2RZbw89Xl8/o/yZQNEmFXqxxUnoLG6pcPOWj0M1Za4Ab9dJ4qnMf4qRdhTb5lSF\nNh51lZBYVbfOVrXEMCRNVQM9wwcUfAs7HDLV7sekFFu7RZSlumxFPWIhqIlNxaOm\ncWEY3QtAw1p/gTflOvK+m9pHFR6o8eADe6BfR50iqhTag3hrCrqRxa4EbTFaP59F\neWb6ycAOSKyMcYuqa8yc\n=Jxbi\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6746e9a7cb3ec5711b53aaa75d6f1c494e038f90\nparent 7ce2c018ee828c2ab5828d4ff7688d463a4a81e7\nparent 24215b642253d08191a47d0df5a86db4d3f5e165\nauthor Vijay Sundaresan <vijaysun@ca.ibm.com> 1741216010 -0500\ncommitter GitHub <noreply@github.com> 1741216010 -0500\n\nMerge pull request #21157 from nbhuiyan/class-arg-propagation\n\nEnable peeking ILGen for inlined methods related to java/util/HashMap get/put operations.",
          "verified_at": "2025-03-05T23:11:53Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c363b26afeec17efc60ab87926144bfd4ac448ab",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c363b26afeec17efc60ab87926144bfd4ac448ab",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c363b26afeec17efc60ab87926144bfd4ac448ab/comments",
      "author": {
        "login": "vijaysun-omr",
        "id": 22303775,
        "node_id": "MDQ6VXNlcjIyMzAzNzc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/22303775?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaysun-omr",
        "html_url": "https://github.com/vijaysun-omr",
        "followers_url": "https://api.github.com/users/vijaysun-omr/followers",
        "following_url": "https://api.github.com/users/vijaysun-omr/following{/other_user}",
        "gists_url": "https://api.github.com/users/vijaysun-omr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/vijaysun-omr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/vijaysun-omr/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaysun-omr/orgs",
        "repos_url": "https://api.github.com/users/vijaysun-omr/repos",
        "events_url": "https://api.github.com/users/vijaysun-omr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/vijaysun-omr/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ce2c018ee828c2ab5828d4ff7688d463a4a81e7"
        },
        {
          "sha": "24215b642253d08191a47d0df5a86db4d3f5e165",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/24215b642253d08191a47d0df5a86db4d3f5e165",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/24215b642253d08191a47d0df5a86db4d3f5e165"
        }
      ]
    },
    {
      "sha": "c94546d9434d9d0116a024066ca2f11d65b11c1f",
      "node_id": "C_kwDOBgtdddoAKGM5NDU0NmQ5NDM0ZDlkMDExNmEwMjQwNjZjYTJmMTFkNjViMTFjMWY",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-06T11:37:35Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T11:37:35Z"
        },
        "message": "Merge pull request #21225 from JasonFengJ9/criusingleton\n\nCRIUSupport supports only one singleton instance",
        "tree": {
          "sha": "88e6df2b5a9cba90de2ad8d24bfacda7be4bfea6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/88e6df2b5a9cba90de2ad8d24bfacda7be4bfea6"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c94546d9434d9d0116a024066ca2f11d65b11c1f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyYj/CRC1aQ7uu5UhlAAAw/oQAHYRN50jKvr2YghkEE8DvPiv\nkOcePcAq0o0bsqwE9lrf6u0PslS4mp59du4rgKDh+c0i3IaTx+NFpJCq4Ho4zc8b\ngW9WxYk24DDiWazQS140oqLZIELWirCrLE8LKMn06UubWrfREhG1MhguulV2ZDwA\njjFB1ODNEPL7NX3pbbB5Alk/67qXYFP+T9rGSdmJvTuGgmmHs8vRvsckrXrb12oz\nVAEuCmYU4fU4EX+AGAR9vxwfMHXVlHdHaZXLx6/3vQ0+xUj4ySX7mVxDC7bAE0uF\n+PTG0SwjWkMvB6CUR05X+PvQ9wsRNDGcQS0J8dAz62y5X4cHkqsx1OjjRJ72+oWC\nImXVrjYCDQ0EECW56wInZnusRkY6W0EtqrqM0VSOfel5wLuK3hgJCX1GWQJtg8sI\n5t7YypMEFkLqv3ff2VpMJHO1Kw89xBBJ7bOOlV4L4op8rNUPVGCcDKiOfcE9vNkI\nnAfA3p1sJFWyfq5IvXHWRbHlNspSTrxqvLlZYt0o0khI61q/168HPhkj5oSZh7xQ\nAP4ksBI64RSE+KK/CToGDkMQfMcLlCG2Llw/dY5baCqJYuj63vplGYPl4o1svqsE\nJMdm6dw7c62t+G2I4dYu/Y4ZKdvSw7g0Olz730ghizVtTo/fim1Ua1O+wYOztCM6\niIk4sRf1BIQ9fKgtNtuj\n=ecku\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 88e6df2b5a9cba90de2ad8d24bfacda7be4bfea6\nparent c363b26afeec17efc60ab87926144bfd4ac448ab\nparent bf0a1005e26b3176d5a09c088a883ea58f5d353b\nauthor Tobi <atobia@ca.ibm.com> 1741261055 -0500\ncommitter GitHub <noreply@github.com> 1741261055 -0500\n\nMerge pull request #21225 from JasonFengJ9/criusingleton\n\nCRIUSupport supports only one singleton instance",
          "verified_at": "2025-03-06T11:42:37Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c94546d9434d9d0116a024066ca2f11d65b11c1f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c94546d9434d9d0116a024066ca2f11d65b11c1f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c94546d9434d9d0116a024066ca2f11d65b11c1f/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c363b26afeec17efc60ab87926144bfd4ac448ab",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c363b26afeec17efc60ab87926144bfd4ac448ab",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c363b26afeec17efc60ab87926144bfd4ac448ab"
        },
        {
          "sha": "bf0a1005e26b3176d5a09c088a883ea58f5d353b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/bf0a1005e26b3176d5a09c088a883ea58f5d353b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/bf0a1005e26b3176d5a09c088a883ea58f5d353b"
        }
      ]
    },
    {
      "sha": "59def09e71ea3162269f58ea58f56ce7598ee154",
      "node_id": "C_kwDOBgtdddoAKDU5ZGVmMDllNzFlYTMxNjIyNjlmNThlYTU4ZjU2Y2U3NTk4ZWUxNTQ",
      "commit": {
        "author": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-03-05T13:46:26Z"
        },
        "committer": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-03-06T14:44:28Z"
        },
        "message": "Optimize handling enableVirtualLargeObjectHeap cmdline option\n\n1, isVirtualLargeObjectHeapEnabled = false on all gcpolicies.\n2, if user specify -XXgc:enableVirtualLargeObjectHeap on\nBalanced GC, off heap can be enabled.\n3, -XXgc:disableVirtualLargeObjectHeap/\nenableVirtualLargeObjectHeap would be ignored on the rest of gcpolicies.\n4, if user specify -XXgc:enableVirtualLargeObjectHeap on\ngcpolicy:metronome, JVM would output warning message.\n\nSigned-off-by: lhu <linhu@ca.ibm.com>",
        "tree": {
          "sha": "a54c6a5e14d7a7898af9ecb05f8988a57eee3f10",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a54c6a5e14d7a7898af9ecb05f8988a57eee3f10"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/59def09e71ea3162269f58ea58f56ce7598ee154",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/59def09e71ea3162269f58ea58f56ce7598ee154",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/59def09e71ea3162269f58ea58f56ce7598ee154",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/59def09e71ea3162269f58ea58f56ce7598ee154/comments",
      "author": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9dce4dc82d79b86f01aff9cf23859aa72d73eb3d"
        }
      ]
    },
    {
      "sha": "2fee7aa1fc3bec169db3e3376dfb199d099459d3",
      "node_id": "C_kwDOBgtdddoAKDJmZWU3YWExZmMzYmVjMTY5ZGIzZTMzNzZkZmIxOTlkMDk5NDU5ZDM",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "amicic@ca.ibm.com",
          "date": "2025-03-06T14:50:42Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T14:50:42Z"
        },
        "message": "Merge pull request #21281 from LinHu2016/enable-offheap-default_2\n\nOptimize handling enableVirtualLargeObjectHeap cmdline option",
        "tree": {
          "sha": "062b4e52feb76eba21dae56fb95652f08cc963ca",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/062b4e52feb76eba21dae56fb95652f08cc963ca"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/2fee7aa1fc3bec169db3e3376dfb199d099459d3",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnybZDCRC1aQ7uu5UhlAAAq2cQACMnYG4w3LMftbD3uct9BNld\nVrGjRY/qrrllt746i7bqk6dNnIcb1tG7Ww+5+mnB/e8GZXqfg8kIro+gJfBKLlYd\n5LAC4q+F5Oh0cK4EtM7Khu2XdanKK9t1eStRjkqPPicn0mlgEWx0/C3m2S5UObiP\nwhvJIwjsny68KZuiafp2iIlbSAnrWzTlNb4y1/LlM8UGTg9u1tmx0Ce/jwdsptwW\nKodudTLXssmL3koeGacrVGQNM2i9//JqypochBb+Tnc8bOAFcwKG+RBh5t1fpBPF\nSuoB6PjCOPsb+Ixy+4bCSrtbWv5INNeaOai2ZGbk8HFWQaSvs8tkdH1pNeZKCS6f\nCCnkixc7dwjB0ze1XYDCxSXituGMY2uWob/jfkX28AEi4LX/Ax/iz1RhSYf8V697\nDuhlb96lQ+pm97CiqoF5SyBiR+sRQSJ1j9CHp5qwub7z848epzYn5/BCNRF4WV1a\nfFv4MX5MNtbjOIJMo6YMWcsMMQ3Sy+rCvC46KbmidB4s9BOe+1ZgqjtzT00ZzzCw\n6bC9cv8zTimVqTjsIXiOk1lwHCFh5f1kzd3Xq6yCj4N+MOnKq6Mt0nBGRl4oiceC\ngSVDzaZ/usBAQ6AV/thAXVN3b0tEdjbushRKQeKuNr4Bu0KZh8CsgHGc1Tw6UlzC\nDhXbTJxZ4mH7VKgXVIRf\n=WL3Q\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 062b4e52feb76eba21dae56fb95652f08cc963ca\nparent c94546d9434d9d0116a024066ca2f11d65b11c1f\nparent 59def09e71ea3162269f58ea58f56ce7598ee154\nauthor Aleksandar Micic <amicic@ca.ibm.com> 1741272642 -0500\ncommitter GitHub <noreply@github.com> 1741272642 -0500\n\nMerge pull request #21281 from LinHu2016/enable-offheap-default_2\n\nOptimize handling enableVirtualLargeObjectHeap cmdline option",
          "verified_at": "2025-03-06T14:55:45Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2fee7aa1fc3bec169db3e3376dfb199d099459d3",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/2fee7aa1fc3bec169db3e3376dfb199d099459d3",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2fee7aa1fc3bec169db3e3376dfb199d099459d3/comments",
      "author": {
        "login": "amicic",
        "id": 18264984,
        "node_id": "MDQ6VXNlcjE4MjY0OTg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18264984?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amicic",
        "html_url": "https://github.com/amicic",
        "followers_url": "https://api.github.com/users/amicic/followers",
        "following_url": "https://api.github.com/users/amicic/following{/other_user}",
        "gists_url": "https://api.github.com/users/amicic/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/amicic/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/amicic/subscriptions",
        "organizations_url": "https://api.github.com/users/amicic/orgs",
        "repos_url": "https://api.github.com/users/amicic/repos",
        "events_url": "https://api.github.com/users/amicic/events{/privacy}",
        "received_events_url": "https://api.github.com/users/amicic/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c94546d9434d9d0116a024066ca2f11d65b11c1f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c94546d9434d9d0116a024066ca2f11d65b11c1f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c94546d9434d9d0116a024066ca2f11d65b11c1f"
        },
        {
          "sha": "59def09e71ea3162269f58ea58f56ce7598ee154",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/59def09e71ea3162269f58ea58f56ce7598ee154",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/59def09e71ea3162269f58ea58f56ce7598ee154"
        }
      ]
    },
    {
      "sha": "dee178319d16c63318138bf92f7ba31dcdd4f6f8",
      "node_id": "C_kwDOBgtdddoAKGRlZTE3ODMxOWQxNmM2MzMxODEzOGJmOTJmN2JhMzFkY2RkNGY2Zjg",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-06T15:41:19Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-06T15:41:19Z"
        },
        "message": "Restore #endif in createHeapWithManager\n\nUnintentionally removed by\nhttps://github.com/eclipse-openj9/openj9/pull/21281\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "25a306495f03a8af445b0edebd68da17fef973cc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/25a306495f03a8af445b0edebd68da17fef973cc"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/dee178319d16c63318138bf92f7ba31dcdd4f6f8",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dee178319d16c63318138bf92f7ba31dcdd4f6f8",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/dee178319d16c63318138bf92f7ba31dcdd4f6f8",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dee178319d16c63318138bf92f7ba31dcdd4f6f8/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "2fee7aa1fc3bec169db3e3376dfb199d099459d3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2fee7aa1fc3bec169db3e3376dfb199d099459d3",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2fee7aa1fc3bec169db3e3376dfb199d099459d3"
        }
      ]
    },
    {
      "sha": "9e9d007c7229e4615b1c050346662fe407e81e5d",
      "node_id": "C_kwDOBgtdddoAKDllOWQwMDdjNzIyOWU0NjE1YjFjMDUwMzQ2NjYyZmU0MDdlODFlNWQ",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-06T15:44:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T15:44:51Z"
        },
        "message": "Merge pull request #21296 from amicic/restore_endif\n\nRestore #endif in createHeapWithManager",
        "tree": {
          "sha": "25a306495f03a8af445b0edebd68da17fef973cc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/25a306495f03a8af445b0edebd68da17fef973cc"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9e9d007c7229e4615b1c050346662fe407e81e5d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnycLzCRC1aQ7uu5UhlAAA7PAQACPbp8+20t2cV10iDbK+1rcE\n4RbWDF6bf9iyTmAVMvm9i4PPXkOW9c9nbrc6fYAvP2iGoo13AoCAJaGCTdQ/XHLl\nYKdjAPeWrJCrnbUov4pJ1KClqw3DSKSpcKbnJtixIIdYOJdBSzzmWcpQhZL1b8n/\nVTaDgPxY0957VoQBsEZiVkUQjSOOXDUU0bvNd4YlhNxrx01FYk8JVZe0WsQEhGMh\n1w+OI1d1ODeZOhTq80OBed5Fr2cmImpwYp215KsWT9kE37jpW9Jjb9q/NYVORe9d\n0mdS+x3fF8/j5mvQxs+uAoNr1W1crHCYDMpQTlckkZfQcrisxVyXPeT6zxMN1Yw+\nSQ2VeoGLInIfcLitsTpOwsNjfQGHj8rPTXQIqFpktMxG2KDW4UbfdfRnBLqRdi7w\nFT6jioheFQsjTo9yrphM18VHbzSPttAY5hs2ArJqM2HdZxN4rgb+09b4L6NX5Jf6\ngrgH5AzuF6XxfSs4DxfZwUnCsd9TKz3qrKiy5RYodB2CCrNPQCAwFz9dpGKlVLDd\nqu23ycFNzKSxxktSXawB8o4jAdqlYlBu+kfeuE8NrfBv2JxokmihtYB74fWHXRfL\nCQDpOvr5t+zmxYqDv1qS45IgDXTu2EuT7M3SzdspMRtArpE4jF2et1CCXmFFqycR\nqWcAu2rzQXYTW0h70dTN\n=GKOC\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 25a306495f03a8af445b0edebd68da17fef973cc\nparent 2fee7aa1fc3bec169db3e3376dfb199d099459d3\nparent dee178319d16c63318138bf92f7ba31dcdd4f6f8\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1741275891 -0500\ncommitter GitHub <noreply@github.com> 1741275891 -0500\n\nMerge pull request #21296 from amicic/restore_endif\n\nRestore #endif in createHeapWithManager",
          "verified_at": "2025-03-06T15:49:54Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9e9d007c7229e4615b1c050346662fe407e81e5d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9e9d007c7229e4615b1c050346662fe407e81e5d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9e9d007c7229e4615b1c050346662fe407e81e5d/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2fee7aa1fc3bec169db3e3376dfb199d099459d3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2fee7aa1fc3bec169db3e3376dfb199d099459d3",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2fee7aa1fc3bec169db3e3376dfb199d099459d3"
        },
        {
          "sha": "dee178319d16c63318138bf92f7ba31dcdd4f6f8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dee178319d16c63318138bf92f7ba31dcdd4f6f8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dee178319d16c63318138bf92f7ba31dcdd4f6f8"
        }
      ]
    },
    {
      "sha": "00b44874626df62a6570af72adcde8af1dc9e3e4",
      "node_id": "C_kwDOBgtdddoAKDAwYjQ0ODc0NjI2ZGY2MmE2NTcwYWY3MmFkY2RlOGFmMWRjOWUzZTQ",
      "commit": {
        "author": {
          "name": "AdamBrousseau",
          "email": "adam.brousseau88@gmail.com",
          "date": "2025-03-06T18:54:58Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T18:54:58Z"
        },
        "message": "Merge pull request #21283 from mahdipub/xcode15.2_build\n\nreplace os specific labels for mac aarch,x64 with sw.tool.xcode.15_2",
        "tree": {
          "sha": "411576324b8582d4b52a41b006a7823cc5aa07a7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/411576324b8582d4b52a41b006a7823cc5aa07a7"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/00b44874626df62a6570af72adcde8af1dc9e3e4",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnye+CCRC1aQ7uu5UhlAAABXQQAJnMlv7gBY9lyKJzlL+gBY9z\ndKIJz+bel2BK/w84gI/Tdb78FardZQQcjN+OdFxjt1aGbarGQ1eqMjkD6X6MIoNc\nROBJCgx/qmfPS5l5syMUSl5XkfSOqxGVuundnJ7pEBolLFx4lUtyvyRLXvuXdXzI\nBCsSz8EHu8VRKvewWul8jxRVOCjvRO2eanSo6Kpw8vgjO86tHOBnlN/zchX3wuyg\n3pQHvqfnCHJkoCT9xEWEzQpN+LmW3Q0zqD49KCeBjl7FUo1MtI5+tKVhGQtd1YwD\nnodKC2LXggjxf4xGjKCw4wKg3u/JT07axbLkSsY7/QyBKQ4GIAzwlzxK2gB52cQY\nFftA2WVcSA2QZbFyf7hJ/c/jgchkVO6egyevPok7nvDKKOl9oKRLUSTpsCyL0F58\n3hU2976uw+1H0rMIo8IjUeIxPd8qpo2YJnXIJGmXCntpM0/XDo6Gn3CUfkegbZhw\nVlTVa1QmxOSVl7Bl35vwZQghdxUKFx5HReazX7QE9fl8zytFnWz8MViNwgCCra1j\n0R8qARsvxGVB1Rd1D+qoOIwy3yrR/dAcxBXpdabOJ7fiPRPheQ7xtT10MYihVD4P\nBxrITf1kr1wLzh/FdHmpLQeUD8wX7ZXs7clSRXtPHEqP7CghJZ3dohD9nKqntCHH\nsUsXYUpTs/0f6LnJVDyg\n=J3YZ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 411576324b8582d4b52a41b006a7823cc5aa07a7\nparent 9e9d007c7229e4615b1c050346662fe407e81e5d\nparent eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36\nauthor AdamBrousseau <adam.brousseau88@gmail.com> 1741287298 -0500\ncommitter GitHub <noreply@github.com> 1741287298 -0500\n\nMerge pull request #21283 from mahdipub/xcode15.2_build\n\nreplace os specific labels for mac aarch,x64 with sw.tool.xcode.15_2",
          "verified_at": "2025-03-06T19:00:01Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00b44874626df62a6570af72adcde8af1dc9e3e4",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/00b44874626df62a6570af72adcde8af1dc9e3e4",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00b44874626df62a6570af72adcde8af1dc9e3e4/comments",
      "author": {
        "login": "AdamBrousseau",
        "id": 6430052,
        "node_id": "MDQ6VXNlcjY0MzAwNTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6430052?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AdamBrousseau",
        "html_url": "https://github.com/AdamBrousseau",
        "followers_url": "https://api.github.com/users/AdamBrousseau/followers",
        "following_url": "https://api.github.com/users/AdamBrousseau/following{/other_user}",
        "gists_url": "https://api.github.com/users/AdamBrousseau/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AdamBrousseau/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AdamBrousseau/subscriptions",
        "organizations_url": "https://api.github.com/users/AdamBrousseau/orgs",
        "repos_url": "https://api.github.com/users/AdamBrousseau/repos",
        "events_url": "https://api.github.com/users/AdamBrousseau/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AdamBrousseau/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9e9d007c7229e4615b1c050346662fe407e81e5d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9e9d007c7229e4615b1c050346662fe407e81e5d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9e9d007c7229e4615b1c050346662fe407e81e5d"
        },
        {
          "sha": "eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36"
        }
      ]
    },
    {
      "sha": "754bf6e642fac0d068d611f3f79bb74e6812f684",
      "node_id": "C_kwDOBgtdddoAKDc1NGJmNmU2NDJmYWMwZDA2OGQ2MTFmM2Y3OWJiNzRlNjgxMmY2ODQ",
      "commit": {
        "author": {
          "name": "Daryl Maier",
          "email": "maier@ca.ibm.com",
          "date": "2025-03-06T19:33:15Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T19:33:15Z"
        },
        "message": "Merge pull request #21218 from hzongaro/monenter-throws-IdentityExcept\n\nThrow IdentityException if operand of monent is a value type object",
        "tree": {
          "sha": "bc8cc119370b07d2680a1851e3ede2dd8cbfd43d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/bc8cc119370b07d2680a1851e3ede2dd8cbfd43d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyfh7CRC1aQ7uu5UhlAAAcYcQAKHAflMfIYQvVCzVVVfnxCx6\nDEHcppTKqyBax4XzO6liD4de0PfivDIeAqEDg2bXZhCeXpgpj9YAiwqv0vnX3zGX\nd7TmbIxHqtpBGWiR1voM9Pw0R3OENfTG6an12/loyazFUr72zQMxWlN1Wci9o/FB\nqzf8YnMT3GnaWp8eqp+ml5lDPAlb5NZlK+BwU9xKXHrFtoSHKkPutNJY0DRc9pG4\nZ/Q/mV6jE6OlACcsrigxyT1qXtGIPmuUHqSy6yyoHya1DCfspnpf7xk87aUeKW+e\nGkqELfpVK3AFb1wwakE4f8Alj9n+5FTrAVmZK2tg6Fc37PvJ8TAGu5pgTHdsN8Ze\ntVvNNZdp0kyz8EwvDj2CQ30FviLnx6NzMwaeJTGWDX1aevVsO3pBkS04Hp7Eg14e\nfXZGAZsU2XDqd9UkRSh54xAG+v2v9nHNsIe23jK3XWglZUUY5JU8cr2bMCQfHdZe\nAov62+gw0yhu5alIjyVeyUbqytD/Jy93y3ulK6ywGNYhqM+GSeQca/CM3azSAwfl\nVhPNnTr2zcAnRjO9FO9ELY6cW/tjwvirORj3sCy3Wo3z5j608dj5d2f5106l/el/\nGLRMsbYxAmKZrZAtg/2LSXIfthv4VjMU+qZFJhhUGYjEQiZH1DfrvF1lFNT9NfOG\nhYoG95he1sBEDXUbG/vi\n=hM5i\n-----END PGP SIGNATURE-----\n",
          "payload": "tree bc8cc119370b07d2680a1851e3ede2dd8cbfd43d\nparent 00b44874626df62a6570af72adcde8af1dc9e3e4\nparent 96b2f0f6c9da92f4b3f98474b1bb3db977533131\nauthor Daryl Maier <maier@ca.ibm.com> 1741289595 -0500\ncommitter GitHub <noreply@github.com> 1741289595 -0500\n\nMerge pull request #21218 from hzongaro/monenter-throws-IdentityExcept\n\nThrow IdentityException if operand of monent is a value type object",
          "verified_at": "2025-03-06T19:38:18Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/754bf6e642fac0d068d611f3f79bb74e6812f684",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684/comments",
      "author": {
        "login": "0xdaryl",
        "id": 17713611,
        "node_id": "MDQ6VXNlcjE3NzEzNjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17713611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xdaryl",
        "html_url": "https://github.com/0xdaryl",
        "followers_url": "https://api.github.com/users/0xdaryl/followers",
        "following_url": "https://api.github.com/users/0xdaryl/following{/other_user}",
        "gists_url": "https://api.github.com/users/0xdaryl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/0xdaryl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/0xdaryl/subscriptions",
        "organizations_url": "https://api.github.com/users/0xdaryl/orgs",
        "repos_url": "https://api.github.com/users/0xdaryl/repos",
        "events_url": "https://api.github.com/users/0xdaryl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/0xdaryl/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "00b44874626df62a6570af72adcde8af1dc9e3e4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00b44874626df62a6570af72adcde8af1dc9e3e4",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/00b44874626df62a6570af72adcde8af1dc9e3e4"
        },
        {
          "sha": "96b2f0f6c9da92f4b3f98474b1bb3db977533131",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b2f0f6c9da92f4b3f98474b1bb3db977533131",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/96b2f0f6c9da92f4b3f98474b1bb3db977533131"
        }
      ]
    },
    {
      "sha": "9620a5a7654118a6b379a8185281653d06b3fa80",
      "node_id": "C_kwDOBgtdddoAKDk2MjBhNWE3NjU0MTE4YTZiMzc5YTgxODUyODE2NTNkMDZiM2ZhODA",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-02-26T20:25:11Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-06T21:29:28Z"
        },
        "message": "Implement JVM_GetProperties for jdk17+\n\nRelated to https://github.com/eclipse-openj9/openj9/issues/21189\n\nMove the code, more or less unchanged, from the jcl to the\nvm so it can be called from multiple places. Remove unnecessary system\nprops from jdk17+, they are added by SystemProps.initProperties().\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "ca8e93702a7481995e0e043f234c03e4b2d03e7d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/ca8e93702a7481995e0e043f234c03e4b2d03e7d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9620a5a7654118a6b379a8185281653d06b3fa80",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9620a5a7654118a6b379a8185281653d06b3fa80",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9620a5a7654118a6b379a8185281653d06b3fa80",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9620a5a7654118a6b379a8185281653d06b3fa80/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb"
        }
      ]
    },
    {
      "sha": "7ecfbd15127a88370e4835f39205c98fb9e14156",
      "node_id": "C_kwDOBgtdddoAKDdlY2ZiZDE1MTI3YTg4MzcwZTQ4MzVmMzkyMDVjOThmYjllMTQxNTY",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-06T21:35:45Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-06T21:36:35Z"
        },
        "message": "Enable offheap on X and P\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "2fd1911a04d9fa3b07528e29af76217bbed2343e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2fd1911a04d9fa3b07528e29af76217bbed2343e"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7ecfbd15127a88370e4835f39205c98fb9e14156",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ecfbd15127a88370e4835f39205c98fb9e14156",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ecfbd15127a88370e4835f39205c98fb9e14156",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ecfbd15127a88370e4835f39205c98fb9e14156/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "754bf6e642fac0d068d611f3f79bb74e6812f684",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/754bf6e642fac0d068d611f3f79bb74e6812f684"
        }
      ]
    },
    {
      "sha": "6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
      "node_id": "C_kwDOBgtdddoAKDZkYzIyYmUxZDdjYWVmMmNlZWI3ZDYyNGUyNmRmZWVkYWNhNWFkOTM",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-06T21:53:46Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-06T22:10:04Z"
        },
        "message": "Fix JFR ThreadPark support\n\nThe \"timeout\" and \"until\" fields weren't correctly initialized.\n\nFixes: https://github.com/eclipse-openj9/openj9/issues/21242\nRelated: https://github.com/eclipse-openj9/openj9/pull/20885\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "1e1f052cec7330ea1585bba96c6c67eb492210f3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1e1f052cec7330ea1585bba96c6c67eb492210f3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "754bf6e642fac0d068d611f3f79bb74e6812f684",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/754bf6e642fac0d068d611f3f79bb74e6812f684"
        }
      ]
    },
    {
      "sha": "430b6515f1fedcea4506dbe914e6d8f57efbd988",
      "node_id": "C_kwDOBgtdddoAKDQzMGI2NTE1ZjFmZWRjZWE0NTA2ZGJlOTE0ZTZkOGY1N2VmYmQ5ODg",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-06T22:28:07Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-06T22:28:07Z"
        },
        "message": "Merge pull request #21298 from amicic/offheap_enabled\n\nEnable offheap on X and P",
        "tree": {
          "sha": "2fd1911a04d9fa3b07528e29af76217bbed2343e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2fd1911a04d9fa3b07528e29af76217bbed2343e"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/430b6515f1fedcea4506dbe914e6d8f57efbd988",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyiF3CRC1aQ7uu5UhlAAAEwUQAGAUvX9pYOcFxRMVKD2fJ7Je\nJf6kThg4Yz/FI+CnYjApMJfwPDoB5XmAFGqBN3i/P0kAO9VzEIRXKdUxFpJjKR3Q\nregEZnyd6qQS2X8iRwKhi0CHlzNyYKqjkgFd90mSZgzaay31UWi+SI1OdKj36WwH\n56zfwHJOy7h3bh5eQfNYirdrHXk9I950SlSgU3scxRJ0OYIa+4XEL+QY7GRJ4AU2\nTu7SVmN62gtYeVSc+O12ZK9EuZAWo+uDkJuytb8NsvxieJsEzu/4E0hBz7rHauWC\n4A6APRFGttgBhC6VWw7UNEykniiVtAooeARQZ24OaUljevEIb6SSLjRgit6Z2jd9\ndrwpSauXMl8Dqp3m7bUYwA3h75rgzQbKx5VodlntnQs5dczfSpydkFh2PjqbcPRW\ni/lwwCGSCNdEzsX5QUfbDz/WoDvYxetQSsp37y6UQb7fDlBDBliUhuBNo2QJRhil\nph0eBuutf5aEo+P4fCvX79MKvWsuCsJVchJfgzoP8UT2NBpOOSm4pJ8gD6BzWKsi\noZO68AQ+3xxW0XzzhFPrD4V72yWmnRkdGOiEaHPWvY6tgqbJGVOTuhc+h4rmaViq\nvG2oBbdenNADU+Z94zaJPPGox4VLkIv0IFlfkhNl5C6TajGYWEGtaqLBSRusNNjA\nJMwN8dQNY0UlOV4Ux1BS\n=eOKL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2fd1911a04d9fa3b07528e29af76217bbed2343e\nparent 754bf6e642fac0d068d611f3f79bb74e6812f684\nparent 7ecfbd15127a88370e4835f39205c98fb9e14156\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1741300087 -0500\ncommitter GitHub <noreply@github.com> 1741300087 -0500\n\nMerge pull request #21298 from amicic/offheap_enabled\n\nEnable offheap on X and P",
          "verified_at": "2025-03-06T22:33:09Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/430b6515f1fedcea4506dbe914e6d8f57efbd988",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/430b6515f1fedcea4506dbe914e6d8f57efbd988",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/430b6515f1fedcea4506dbe914e6d8f57efbd988/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "754bf6e642fac0d068d611f3f79bb74e6812f684",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/754bf6e642fac0d068d611f3f79bb74e6812f684"
        },
        {
          "sha": "7ecfbd15127a88370e4835f39205c98fb9e14156",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ecfbd15127a88370e4835f39205c98fb9e14156",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ecfbd15127a88370e4835f39205c98fb9e14156"
        }
      ]
    },
    {
      "sha": "dd89e9ab80f5d851a2aa422d052aec0a65822572",
      "node_id": "C_kwDOBgtdddoAKGRkODllOWFiODBmNWQ4NTFhMmFhNDIyZDA1MmFlYzBhNjU4MjI1NzI",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-02-22T19:28:07Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-06T22:36:22Z"
        },
        "message": "Enter critical transition when preparing for unmount pinned vthread\n\nMove enter/exitVThreadTransitionCritical to ContinuationHelpers.hpp\nEnter critical before yielding a pinned vthread\nExit critical after vthread re-entry from a pinned state (not vthread.yield)\n\nCo-authored-by: Babneet Singh <sbabneet@ca.ibm.com>\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>",
        "tree": {
          "sha": "7b40e57666cc3c5f4dd01db098e661f9c3c8404c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/7b40e57666cc3c5f4dd01db098e661f9c3c8404c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/dd89e9ab80f5d851a2aa422d052aec0a65822572",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd89e9ab80f5d851a2aa422d052aec0a65822572",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/dd89e9ab80f5d851a2aa422d052aec0a65822572",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd89e9ab80f5d851a2aa422d052aec0a65822572/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "172a32eb3ff5033a69906f957b7baebbca72d543",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/172a32eb3ff5033a69906f957b7baebbca72d543",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/172a32eb3ff5033a69906f957b7baebbca72d543"
        }
      ]
    },
    {
      "sha": "840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
      "node_id": "C_kwDOBgtdddoAKDg0MGIyYzk1ZjY1ZjMyOTdlNGI3ZTZhM2Q1ZWU4N2U0MDBlM2ZmZDI",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-04T23:43:34Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-06T23:01:52Z"
        },
        "message": "Fix Object.wait/notify logic\n\nCorrectly handle the waiting object during detach/attach.\nUse vthread.notified field to indicate status.\nPrevent vthreads in transition to be returned as unblocked.\n\nCo-authored-by: Babneet Singh <sbabneet@ca.ibm.com>\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>",
        "tree": {
          "sha": "2f14a1488020392075d0a5db9f557c90cdcaaea8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2f14a1488020392075d0a5db9f557c90cdcaaea8"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dd89e9ab80f5d851a2aa422d052aec0a65822572",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd89e9ab80f5d851a2aa422d052aec0a65822572",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dd89e9ab80f5d851a2aa422d052aec0a65822572"
        }
      ]
    },
    {
      "sha": "1be02821312c6b66a58258e45b1ffe849b842b74",
      "node_id": "C_kwDOBgtdddoAKDFiZTAyODIxMzEyYzZiNjZhNTgyNThlNDViMWZmZTg0OWI4NDJiNzQ",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-07T13:18:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T13:18:10Z"
        },
        "message": "Merge pull request #21299 from thallium/jfr-fix\n\nFix JFR ThreadPark support",
        "tree": {
          "sha": "a005309c7e56dd838f5764bcb50195d31b384884",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a005309c7e56dd838f5764bcb50195d31b384884"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/1be02821312c6b66a58258e45b1ffe849b842b74",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyvISCRC1aQ7uu5UhlAAAh1kQADYr0S5Wvl5Sb0DysLRNMQKy\nJbO2dejsDhT5szSMqLoB99ehLyhmMELE0YQxdc2UfN9iY6gPcV7zII6bLtWETqAM\ntgrbaz1pj89HzPS7xVMn5GJBAUlxIdXzXheZzj5njcrYz1ZhJKT7x/UYWCb0mrkS\nLUdhjHSXYpJk7oMtz8OQIpKzxKZPM5wGwIoGMJoimQGE+3QzkMjq3ZFFnhN8bNE7\nWdg4ntoebt0h74vlwH/BbnW0efDc3SVfEf9gyGnSOTOM3WmWC87iEOf0MbqnT4TU\nrdGc7a0WAluzezsSUEclSDW7I+S4/IqQgSE7g6OctWAfQZgnQ6iWFAhj5P6hms4t\n0SeTKIxmsy4XMvw+sthKDy9e6WmhFFd/vlTmov5oicYgBtwZDWKIzw0W0SEmXMIw\nr0A1vu3inxj75dwzBT6+47aKq/b56NuFAatc92IJmqaEUxul8+N2G27kkFufeG4h\nApP+5SWGpBYTy2m/oT2OpZQTbZvZIqThGhqoHrVTQnOeumokTzwXawDUd/3UM956\n2w2euDidV1RYTF5gQW/3dIY4N0wWgXy+KwHekZX3fZInKHlLlC3Pm5YvMquAFC90\nVHv4VoKZQZxWJBBuZmXMc2yMygNtYWLw9E1t1LYzGRPnbwN3aKw/QnDeT62UeQK+\nlw4ni5JbUQ27x4KwrInd\n=eY0E\n-----END PGP SIGNATURE-----\n",
          "payload": "tree a005309c7e56dd838f5764bcb50195d31b384884\nparent 430b6515f1fedcea4506dbe914e6d8f57efbd988\nparent 6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93\nauthor Tobi <atobia@ca.ibm.com> 1741353490 -0500\ncommitter GitHub <noreply@github.com> 1741353490 -0500\n\nMerge pull request #21299 from thallium/jfr-fix\n\nFix JFR ThreadPark support",
          "verified_at": "2025-03-07T13:23:12Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1be02821312c6b66a58258e45b1ffe849b842b74",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/1be02821312c6b66a58258e45b1ffe849b842b74",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1be02821312c6b66a58258e45b1ffe849b842b74/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "430b6515f1fedcea4506dbe914e6d8f57efbd988",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/430b6515f1fedcea4506dbe914e6d8f57efbd988",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/430b6515f1fedcea4506dbe914e6d8f57efbd988"
        },
        {
          "sha": "6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93"
        }
      ]
    },
    {
      "sha": "09bf0ffcc1c893de5ce868b87c4176fc165927bc",
      "node_id": "C_kwDOBgtdddoAKDA5YmYwZmZjYzFjODkzZGU1Y2U4NjhiODdjNDE3NmZjMTY1OTI3YmM",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T13:19:17Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T13:19:17Z"
        },
        "message": "Revert \"Enable offheap on X and P\"",
        "tree": {
          "sha": "1e1f052cec7330ea1585bba96c6c67eb492210f3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1e1f052cec7330ea1585bba96c6c67eb492210f3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/09bf0ffcc1c893de5ce868b87c4176fc165927bc",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyvJVCRC1aQ7uu5UhlAAAjnYQAKK3jMgqWp4sTIRWOI94Anbj\n90i88Y8YYOp8msXWwfWyqDkv8JBCRhzFeRzvFOP8UcZDaN/FzKbNwsuULQPqtu7B\nUtJqaHpEfKoSfSPOvT6BAYs9rEu27LNE1vYbDS+GvPUsc9FrHbxpdxU+UWonxqbZ\njhs8Yt/IviZYD8Ruke0+YMFirLi3pU4/Qy7btXrS8OWFgFOZgTZB7Mo34MbpmYmH\n9BYqNU1XCS2zYWPxKToi3EskwM74J5gdeO5iYV1OKQaxXAw7RpowI8VbnvYv14Ww\nmUQq+Z7UQH9bqKom7Z3DBQ1O6MzR7DOMdZNgOyCHWWJSilFq8PkIktovL9XsN4H5\n7qx6NnY7++Fv534BEWFWzuJvLgiPNvVgFJU6+89a2e1/nROmSn9B7vszZChZDxhy\nODWEBosdwdCmU2Rg+qY04LOe6FxJiPWAmcYr2Y48YPJSVXDTGaYZ2OOafCZbAENf\nR3XMF6XwSs49zdYq7JTmDnL1r4XpWCVcBcjP5zuk3YW/w9a0AQj93/WlAPmjb+Ex\nPGwlVL/OpF5zLdXLEDiB3AsAPOkfQC4juTV4sj4plisTAAn3LbtKfBdxh9UQFqap\naP/2QZfsBIA4W6qse480P+J3aXJsneAWSj65elp6ggD6PGrL8TqowEu7EImluXHS\nun3+KiVSKb3uQ47CRD5X\n=ZQmk\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1e1f052cec7330ea1585bba96c6c67eb492210f3\nparent 1be02821312c6b66a58258e45b1ffe849b842b74\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741353557 -0500\ncommitter GitHub <noreply@github.com> 1741353557 -0500\n\nRevert \"Enable offheap on X and P\"\n",
          "verified_at": "2025-03-07T13:19:19Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/09bf0ffcc1c893de5ce868b87c4176fc165927bc",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/09bf0ffcc1c893de5ce868b87c4176fc165927bc",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/09bf0ffcc1c893de5ce868b87c4176fc165927bc/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1be02821312c6b66a58258e45b1ffe849b842b74",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1be02821312c6b66a58258e45b1ffe849b842b74",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1be02821312c6b66a58258e45b1ffe849b842b74"
        }
      ]
    },
    {
      "sha": "b3215af38fe1751e512c54dc8e8508bf6e13c63e",
      "node_id": "C_kwDOBgtdddoAKGIzMjE1YWYzOGZlMTc1MWU1MTJjNTRkYzhlODUwOGJmNmUxM2M2M2U",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T13:19:45Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T13:19:45Z"
        },
        "message": "Merge pull request #21305 from eclipse-openj9/revert-21298-offheap_enabled\n\nRevert \"Enable offheap on X and P\"",
        "tree": {
          "sha": "1e1f052cec7330ea1585bba96c6c67eb492210f3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1e1f052cec7330ea1585bba96c6c67eb492210f3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/b3215af38fe1751e512c54dc8e8508bf6e13c63e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyvJxCRC1aQ7uu5UhlAAA4rgQACVecqPd+5cE5zFvHjCTRYHe\nWBY7uUTg/uTkUgTbOiFyIyy9yDvOHWn27sHTWg9lPQvRBBrGWQaJ7RNhGGCnKS8B\nmJ+NoMk7me7f260t8EPCfN213rKKg9o+aHfS1HNyGp4UZo/NMn+807LHxw2G3WhG\nIEukoOsIUHUwm4yk1H7jMUi2ujLtvHXQ0Im+P4EhxmfQFc6anIe2dleTQ6HgzsmZ\nJOl7MPi3LDs2Ooe8dqekw+ITrmPUSinxNYD/MKf+ur0svkBHE2mqaKWzeGMNJJYN\nVALJLsrKCCBeGsXRUWNIhE2hmVK2CoAwhlhSou3P1yA85r6coTnxfxZouIfnsODh\nRPeGDntNqPXguZBwa2Xg8wMN9tOhWBOIWsoSK+VPqP8dbcynpP0XDaKAoj8XgTgk\nMSW1dT/7n5URus7e5lgnOD9dHjEyMuVbNX76EOacQf9OLKTVvLd3QRIHLNweuTFd\n+R+ke1ybk9E+feyvdABFioi+K1nt5TEX2SjSWYdR13itv14ZMtld1uu8Vl2pVb5J\n5CfjRdpjuQW3B3Oiw6A+kG2k5cZ3CN14yna6bEXFmj+2VgyMJ9flR2j0hgIqqORn\nXLhnOxYsdFjFQFgh8J+PqxTwLfL0bXlxe+OeYoytSd714MvVZe2GTXc46B8LM7BE\nlOYnWFc4QnLANZm+zEVX\n=YKVN\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1e1f052cec7330ea1585bba96c6c67eb492210f3\nparent 1be02821312c6b66a58258e45b1ffe849b842b74\nparent 09bf0ffcc1c893de5ce868b87c4176fc165927bc\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741353585 -0500\ncommitter GitHub <noreply@github.com> 1741353585 -0500\n\nMerge pull request #21305 from eclipse-openj9/revert-21298-offheap_enabled\n\nRevert \"Enable offheap on X and P\"",
          "verified_at": "2025-03-07T13:24:21Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b3215af38fe1751e512c54dc8e8508bf6e13c63e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/b3215af38fe1751e512c54dc8e8508bf6e13c63e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b3215af38fe1751e512c54dc8e8508bf6e13c63e/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1be02821312c6b66a58258e45b1ffe849b842b74",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1be02821312c6b66a58258e45b1ffe849b842b74",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1be02821312c6b66a58258e45b1ffe849b842b74"
        },
        {
          "sha": "09bf0ffcc1c893de5ce868b87c4176fc165927bc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/09bf0ffcc1c893de5ce868b87c4176fc165927bc",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/09bf0ffcc1c893de5ce868b87c4176fc165927bc"
        }
      ]
    },
    {
      "sha": "8adca0ea3965aab4fae1be3ace8d23dfdee78721",
      "node_id": "C_kwDOBgtdddoAKDhhZGNhMGVhMzk2NWFhYjRmYWUxYmUzYWNlOGQyM2RmZGVlNzg3MjE",
      "commit": {
        "author": {
          "name": "Daryl Maier",
          "email": "maier@ca.ibm.com",
          "date": "2025-03-07T14:03:29Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T14:03:29Z"
        },
        "message": "Merge pull request #21241 from BradleyWood/aotXCR0checks\n\nx86: check xcr0 in AOT compiles",
        "tree": {
          "sha": "cbc2b869f6db241f9c3836033b54d8174dc58b50",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/cbc2b869f6db241f9c3836033b54d8174dc58b50"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/8adca0ea3965aab4fae1be3ace8d23dfdee78721",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyvyxCRC1aQ7uu5UhlAAAuAEQAHZLU4i7Tcksc4wfB2IbxDV3\naiVDs+0ZTTDXx5Zc9LQnspkzLp+hg6s+oihtaAx8nrypUONuVxyDTp5yjDStdaz3\ntE/ElSTk3qIBLimwMRB1iKA9Pzx8xOKHwXMZ8Cxi5ndLp4cl1nTSLCiVoBZqH5Jf\nM/cItpSPim/tS4E/P4KFpl55pp/dmUXFtJYbf/OXB6DLecTieYVYTsybKwve5I8v\n36ct4qlp3+zwueF1WkAOw54Vi3lgNmbrrYTC+k5mWmoY2bR8PP2PPXNZwcSLZZqd\nUqXfzelt06G95moGUFm8r4xjEAhs07ouet+IPjyu1fgR3Sf4KJrWS2CBUrABXRtV\nXXnLnIAygazZd+WYN4fAFfzb6RGXDIvgkyMOnvdxHs9Ec8wONbaxMWy09nXNQC30\ni9pxJ++3iq/UG0Q1eO88lHC3x3ao5YKP2b0Bcw9flTPgkxL+bxDfemtWr+U2yBWy\nRiJehJmsF9r5Hp0DRqmz6camvCQ6df+EzNbBkPUx0xa3ZZtIatZYisy8Hth7NE2N\n1QQ3fygBu/R2UNK8BxGmVAhmDXJTD4wI0RmbFupFbATy8u5B8o+6UCSLUDZWG2es\nHJHFdSJW6Ez3qQc8L8JXG+y46luWcRFSw/F4ZVe5ltKvf4KkgOY1s53je1i8tiks\nqCck16MNIncbqJOfylmT\n=a7gH\n-----END PGP SIGNATURE-----\n",
          "payload": "tree cbc2b869f6db241f9c3836033b54d8174dc58b50\nparent b3215af38fe1751e512c54dc8e8508bf6e13c63e\nparent b930d0ca25daadcc83a22f7b0cb23a026e821ac2\nauthor Daryl Maier <maier@ca.ibm.com> 1741356209 -0500\ncommitter GitHub <noreply@github.com> 1741356209 -0500\n\nMerge pull request #21241 from BradleyWood/aotXCR0checks\n\nx86: check xcr0 in AOT compiles",
          "verified_at": "2025-03-07T14:08:31Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8adca0ea3965aab4fae1be3ace8d23dfdee78721",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/8adca0ea3965aab4fae1be3ace8d23dfdee78721",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8adca0ea3965aab4fae1be3ace8d23dfdee78721/comments",
      "author": {
        "login": "0xdaryl",
        "id": 17713611,
        "node_id": "MDQ6VXNlcjE3NzEzNjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17713611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xdaryl",
        "html_url": "https://github.com/0xdaryl",
        "followers_url": "https://api.github.com/users/0xdaryl/followers",
        "following_url": "https://api.github.com/users/0xdaryl/following{/other_user}",
        "gists_url": "https://api.github.com/users/0xdaryl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/0xdaryl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/0xdaryl/subscriptions",
        "organizations_url": "https://api.github.com/users/0xdaryl/orgs",
        "repos_url": "https://api.github.com/users/0xdaryl/repos",
        "events_url": "https://api.github.com/users/0xdaryl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/0xdaryl/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b3215af38fe1751e512c54dc8e8508bf6e13c63e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b3215af38fe1751e512c54dc8e8508bf6e13c63e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b3215af38fe1751e512c54dc8e8508bf6e13c63e"
        },
        {
          "sha": "b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b930d0ca25daadcc83a22f7b0cb23a026e821ac2",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b930d0ca25daadcc83a22f7b0cb23a026e821ac2"
        }
      ]
    },
    {
      "sha": "96b1831fcdd85f4d2be9263caaabe4974b14dea0",
      "node_id": "C_kwDOBgtdddoAKDk2YjE4MzFmY2RkODVmNGQyYmU5MjYzY2FhYWJlNDk3NGIxNGRlYTA",
      "commit": {
        "author": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2024-11-26T19:36:58Z"
        },
        "committer": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2025-03-07T14:12:48Z"
        },
        "message": "Accelerate Java bit compress and expand methods\n\nThis commit maps the following methods to IL opcodes:\n - Integer.compress to icompressbits\n - Integer.expand to iexpandbits\n - Long.compress to lcompressbits\n - Long.expand to lexpandbits\n\nSigned-off-by: Spencer Comin <spencer.comin@ibm.com>",
        "tree": {
          "sha": "a7bb3c9c406db738a054d11cee3b247c4fa0e589",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a7bb3c9c406db738a054d11cee3b247c4fa0e589"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/96b1831fcdd85f4d2be9263caaabe4974b14dea0",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b1831fcdd85f4d2be9263caaabe4974b14dea0",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/96b1831fcdd85f4d2be9263caaabe4974b14dea0",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b1831fcdd85f4d2be9263caaabe4974b14dea0/comments",
      "author": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6c2dc747165ce7dd86a9feb0177b696816e8d5",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fb6c2dc747165ce7dd86a9feb0177b696816e8d5"
        }
      ]
    },
    {
      "sha": "db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
      "node_id": "C_kwDOBgtdddoAKGRiM2YyNDRhYjFjN2YwMTBiY2M3MDczYmNmOWEyOThhZDZlOTI0NzA",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-06T08:04:24Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-07T15:48:35Z"
        },
        "message": "Allow pinned vthread to yield in normal path\n\nUpdate isPinnedImpl to ignore ownedMonitorCount when trying to yield.\nHandle the detach/attach when yielding vthread holds monitors.\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>",
        "tree": {
          "sha": "389fcbca709356a8a8cf1065a9fd63d7aeb6feaf",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/389fcbca709356a8a8cf1065a9fd63d7aeb6feaf"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/db3f244ab1c7f010bcc7073bcf9a298ad6e92470/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2"
        }
      ]
    },
    {
      "sha": "fd112fb389076fa7740db9b2984d6df12c9e0556",
      "node_id": "C_kwDOBgtdddoAKGZkMTEyZmIzODkwNzZmYTc3NDBkYjliMjk4NGQ2ZGYxMmM5ZTA1NTY",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-07T05:21:18Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-07T16:02:35Z"
        },
        "message": "return NULL object spine if offheap full\n\nIn an unlikely case that Offheap is full, return NULL spine object,\nrather then valid spine object with NULL dataPtr.\n\nThis is the same how we handle individual arraylet region allocation\nfailures.\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "c423b457c8eb5f83e39867d46a0a3df9d0cd66b6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c423b457c8eb5f83e39867d46a0a3df9d0cd66b6"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fd112fb389076fa7740db9b2984d6df12c9e0556",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd112fb389076fa7740db9b2984d6df12c9e0556",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fd112fb389076fa7740db9b2984d6df12c9e0556",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd112fb389076fa7740db9b2984d6df12c9e0556/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "430b6515f1fedcea4506dbe914e6d8f57efbd988",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/430b6515f1fedcea4506dbe914e6d8f57efbd988",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/430b6515f1fedcea4506dbe914e6d8f57efbd988"
        }
      ]
    },
    {
      "sha": "1f970cd6ebae7d6137594e3c071ae8146987a63b",
      "node_id": "C_kwDOBgtdddoAKDFmOTcwY2Q2ZWJhZTdkNjEzNzU5NGUzYzA3MWFlODE0Njk4N2E2M2I",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-07T16:10:30Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T16:10:30Z"
        },
        "message": "Merge pull request #21200 from pshipton/sysprops\n\nImplement JVM_GetProperties for jdk17+",
        "tree": {
          "sha": "52043faa4e90a321df82c5bd107a87ca1b091728",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/52043faa4e90a321df82c5bd107a87ca1b091728"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnyxp2CRC1aQ7uu5UhlAAAM0sQAIigLpeMlBqRiihW3QMFB0eW\nwEVa4eTKNYiGTelEg8Ne9h2uUhp0CqVySVMB+K/8Cs9+JPlCVuKIeBoa93f8fmCw\nh7eizjcE4/umsWlU/a9dKRUKdB+M6i72UYD7nUQYfy8KYJtpCwEahgxouwDIynkj\nvC9Qdcjs76Qn4R3KWofYOplpITZTKp0fggTbL6U0d64RDXpUr3H+CpOsB62ozsLA\nJ3glx04avi4umRDRFldfS8Kesp1jEZer/nfdyxBfrcU0Nmq+5WM42AFAgN4Mk4ud\nP+hKE7O7HLyBVF7b6Gvb2dcfA0t9DGaF8DRGCR0bmrsgEyf5ut8OZmVIWxzEMqPa\na1UhrSWiPAsocaHdls1o2ev0DgnliUHW8nGkNQj0XHsHCjwYanMxqjJ1wu4NYE0C\nKaBwwxQVc7yssso4zs/GUhrhHHITIOSE9Bnlnk14Xn8dm3e2Rz+/x5FzXpZbJAJi\nLvrcrEneCS8bwcg7ddkx7hcfWGJVQN6lVeLFEt9bwJjOtnDaq5h9hY74ktxD8X09\ntEPRhI/AuQLliB2+cEaa/Jbl+t/v8sPoEVODV/kgrxYTQE65+AIaOLIoPLuldwDW\nvAuCGs5fts5dX2563TvZ0wRG4e/WWugvAl8P4aN/JEahBZepgGwwXQFBwF+Ytmts\nlkN24Np3EZHrCvYI2R2w\n=O3pw\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 52043faa4e90a321df82c5bd107a87ca1b091728\nparent 8adca0ea3965aab4fae1be3ace8d23dfdee78721\nparent 9620a5a7654118a6b379a8185281653d06b3fa80\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741363830 -0500\ncommitter GitHub <noreply@github.com> 1741363830 -0500\n\nMerge pull request #21200 from pshipton/sysprops\n\nImplement JVM_GetProperties for jdk17+",
          "verified_at": "2025-03-07T16:10:46Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/1f970cd6ebae7d6137594e3c071ae8146987a63b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8adca0ea3965aab4fae1be3ace8d23dfdee78721",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8adca0ea3965aab4fae1be3ace8d23dfdee78721",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/8adca0ea3965aab4fae1be3ace8d23dfdee78721"
        },
        {
          "sha": "9620a5a7654118a6b379a8185281653d06b3fa80",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9620a5a7654118a6b379a8185281653d06b3fa80",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9620a5a7654118a6b379a8185281653d06b3fa80"
        }
      ]
    },
    {
      "sha": "c099a69256a0b71aa2822aab175b0c27c8d3eb86",
      "node_id": "C_kwDOBgtdddoAKGMwOTlhNjkyNTZhMGI3MWFhMjgyMmFhYjE3NWIwYzI3YzhkM2ViODY",
      "commit": {
        "author": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-01-24T20:47:24Z"
        },
        "committer": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-03-07T18:32:04Z"
        },
        "message": "Add new DumpAllOffHeapEntriesCommand in DDR\n\n - new DumpAllOffHeapEntriesCommand provides a way to list all\n  off-heap entries in the core file, which contain off heap data\n  (only when off-heap has been enabled in jvm and gcpolicy has been set\n  to Balanced GC mode).\n - for the rest of cases(off-heap has been disabled or \"old core file\",\n  which did not contain off-heap option at all), print out error message\n  \"This command only works with the core file,\n  which contains off-heap.\"\n - off-heap entry information includes\n   the address of the Array Object,\n   the data address and\n   the size of array data\n\nSigned-off-by: lhu <linhu@ca.ibm.com>",
        "tree": {
          "sha": "a759da4d9ce22e9953bf70c87c15cf3f7245fb7c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a759da4d9ce22e9953bf70c87c15cf3f7245fb7c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c099a69256a0b71aa2822aab175b0c27c8d3eb86",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c099a69256a0b71aa2822aab175b0c27c8d3eb86",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c099a69256a0b71aa2822aab175b0c27c8d3eb86",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c099a69256a0b71aa2822aab175b0c27c8d3eb86/comments",
      "author": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1f970cd6ebae7d6137594e3c071ae8146987a63b"
        }
      ]
    },
    {
      "sha": "ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
      "node_id": "C_kwDOBgtdddoAKGZmM2IyM2QzM2NmODM2NmNlOGVjZTlkOTRlZTY2M2Y0ZWQ3ZWVmZWI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T20:59:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T20:59:05Z"
        },
        "message": "Revert \"x86: check xcr0 in AOT compiles\"",
        "tree": {
          "sha": "86ed823e69451cae81dfd00a09d793e99b29f363",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/86ed823e69451cae81dfd00a09d793e99b29f363"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJny14ZCRC1aQ7uu5UhlAAAxbIQADV6mAhFIJTiYO1jJOzUAa03\ntQ47wmChGc4VbBp5XHI6UOH0krZ+JbQky0P1eJ3cErhfDuzFAgNbKHGvUbx6/dwj\ni43nRBt5MOaoIol6rgiUto3/jezGrIey7pRWbnEhzu3RwZneDUuPlLF2VBNtU8aS\n2qSXY3wfytqwQ9U/qwUwuw5QKCVBwI/yeh5vWHRsCTiNw7hntmifgRqyrBTXO+vD\n9fQigAQI0vWh0YK8d4tr1hBLo6oX3F6T1bUA1OZbplJqN+44zNLDU1mOokK0WNm0\nbdfFN8Cml5m2iTOt3iKH78+rOb0yoaXWxRfUok3zyxYH/jL/K8Sfa7two7igVG1S\nSJM/WEnLbdMZagYiuGP/Mofb9b0A6ammX7fPMzgBzd4T9P1Bf8x22G5k378Hwt8f\nRkf5iSwRp3wIZIcH50LShnwRM28VUe5V9mWhsY/tVeF85QGgw+WeRxV6lbSFwnaj\nrRM88YK3LDzFqzOksKevPFd/K85kEZ9m6U8yF73xmzFcdGONp8FsxX7wdOT5eUpy\nqgdSVDA0y3G++uavQqirU9a2Pxcf0xVkDlEMZ5cJYZXXmVnG38VDobRimxzCjtU9\nxW4Z+LjtwEAFEHom2JnPZIgHDJQaY0b+VMrm8wiiiZKGMfJH2DDevKLMtHE9Yzz1\npdHWneOXJNxD93EJWKhS\n=cv+k\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 86ed823e69451cae81dfd00a09d793e99b29f363\nparent 1f970cd6ebae7d6137594e3c071ae8146987a63b\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741381145 -0500\ncommitter GitHub <noreply@github.com> 1741381145 -0500\n\nRevert \"x86: check xcr0 in AOT compiles\"\n",
          "verified_at": "2025-03-07T20:59:06Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1f970cd6ebae7d6137594e3c071ae8146987a63b"
        }
      ]
    },
    {
      "sha": "4f09a6d2e61b41774df9feb7e721981fd925fa8d",
      "node_id": "C_kwDOBgtdddoAKDRmMDlhNmQyZTYxYjQxNzc0ZGY5ZmViN2U3MjE5ODFmZDkyNWZhOGQ",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T20:59:21Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T20:59:21Z"
        },
        "message": "Merge pull request #21310 from eclipse-openj9/revert-21241-aotXCR0checks\n\nRevert \"x86: check xcr0 in AOT compiles\"",
        "tree": {
          "sha": "86ed823e69451cae81dfd00a09d793e99b29f363",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/86ed823e69451cae81dfd00a09d793e99b29f363"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4f09a6d2e61b41774df9feb7e721981fd925fa8d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJny14pCRC1aQ7uu5UhlAAACQIQAHP2ud3yDHqePEfYxH11zBJG\nhPb1emDvAkk/KTcwoRc/xVzDdEbFGO9dkDCw7y0frtNh2knNFQSszN19ZazPaelX\nYgfKReTXyA+qDIgkWk6xkRKhgRWEx5qW11+ctMBhrRk1j2eNXLpyXHzqMowrWC7O\n3Ybb8pbK5QJAdbbJ3AvBvSU7Y4X2d7VPg+cC2ILS7Ojy+iW9yKhFe8dNz+YIC+I9\n1MBz72AK3TFYoYk9EBRVs6WlSRFkPpaHf5K6cW9JcNHOpJpvMpJK8C+st83HVc/P\nh2ff9aw7aBv8sGqBAXxELV41Ckv8BLLY5qOnvjsDGlv6jcA/yehZi3soMAnr7DL8\nTqkxs9am1NJ5WCQWpW4kdI71cgaWg3HiwtdRYff1FMD3gukDnNPaX76Bd3Kw7qFj\nkZ0uwQ4TraLzTLmV2dlUGRN8uyR/mpqPPZFGFd2/PgusqTOWMVnpSLGfclfevIGq\nl8ZSnOT/Zx1w+ZOfwxk2Yx5o4NCFWRgaFfqD5LUDwanxKwjBzBA2TWoC7oSqs+gr\ntjdUa5dENt8hk+0EytNzMSZv75ngNnBysLFvGPJUSFJODM4/2hiKck3r9pTQYm3p\nbK3mO+Yc+y0aC3RrDzZozOTgamFVm5WfPgnEyLSLa7ie1wVvsh7mskLIczmCa9dR\nVeX/WaTq/LBRdLcC/SAV\n=bg6J\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 86ed823e69451cae81dfd00a09d793e99b29f363\nparent 1f970cd6ebae7d6137594e3c071ae8146987a63b\nparent ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741381161 -0500\ncommitter GitHub <noreply@github.com> 1741381161 -0500\n\nMerge pull request #21310 from eclipse-openj9/revert-21241-aotXCR0checks\n\nRevert \"x86: check xcr0 in AOT compiles\"",
          "verified_at": "2025-03-07T21:02:38Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4f09a6d2e61b41774df9feb7e721981fd925fa8d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4f09a6d2e61b41774df9feb7e721981fd925fa8d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4f09a6d2e61b41774df9feb7e721981fd925fa8d/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1f970cd6ebae7d6137594e3c071ae8146987a63b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1f970cd6ebae7d6137594e3c071ae8146987a63b"
        },
        {
          "sha": "ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb"
        }
      ]
    },
    {
      "sha": "f12ef363bdf96e4846ff4276fa3790c59b4f4925",
      "node_id": "C_kwDOBgtdddoAKGYxMmVmMzYzYmRmOTZlNDg0NmZmNDI3NmZhMzc5MGM1OWI0ZjQ5MjU",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T23:34:34Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T23:34:34Z"
        },
        "message": "Revert \"Implement JVM_GetProperties for jdk17+\"",
        "tree": {
          "sha": "1e1f052cec7330ea1585bba96c6c67eb492210f3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1e1f052cec7330ea1585bba96c6c67eb492210f3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f12ef363bdf96e4846ff4276fa3790c59b4f4925",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJny4KKCRC1aQ7uu5UhlAAAqasQACHayvkXBxydATc1s5qFL0eJ\n8QeH29WnF3FKVqzNLtrdzGjmAXq1upcX1o983jcWfp3uOOqqQuNMwfHXDtr6rbz0\n0/8IcOEo7mGhrTBg8Vp6+DdcQdaSvX0y+D9HqdAZvmTvHOEV+j/N/flHdtyW6mcT\naKDrQjNCX3PsThSoG+DvoViD1ky9pReDKMfIDDQ4zLeL2Hd7C40ybyILFRNIyWmg\nrE8PU1tLBIwDUHolBfuPdbVnyWZv+RCB3+kMnAlf84R5b+lMFQ2ydfNspYN76Vfw\nfnXPp3OOcLvjp3ZeZzcgt9caYPI03PLSgxEbLG3xN3Gch3Rjw44BDjjDgNmYwvxC\nfOqknGbZuxfUOq7jzEJYEfv/Myv4Y5wwlXSF1bQBpZPKrBAeFQ/Evp9x/LW4fp0A\nxmoCSGRH/jlma2YXKQ+F3pR3CdV/1aE5wMML/OVV2J5DMu1qjAPWxOws2w0qorXD\n7/Ow1NBuS8M9RxTYQD7fbGgl0f7O2j2JH052daZY8bi3C8ZPbvgmdpqxj9DG0aJz\nBowGiJ+lJLyiFI7yBEUkXUz4KUEsGGlF0EUH09ljRpsD997LaH3y+IYpaPiRSmWO\nR7tQVWYUqwmsjwMCNtJsscVGPxq77AnWs/lVVTwzDgsIof17lqhLhyVp21ZgZ9BH\nUd5AHmbaLMiJiA0z7Wpb\n=qaJQ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1e1f052cec7330ea1585bba96c6c67eb492210f3\nparent 4f09a6d2e61b41774df9feb7e721981fd925fa8d\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741390474 -0500\ncommitter GitHub <noreply@github.com> 1741390474 -0500\n\nRevert \"Implement JVM_GetProperties for jdk17+\"\n",
          "verified_at": "2025-03-07T23:34:36Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f12ef363bdf96e4846ff4276fa3790c59b4f4925",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f12ef363bdf96e4846ff4276fa3790c59b4f4925",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f12ef363bdf96e4846ff4276fa3790c59b4f4925/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4f09a6d2e61b41774df9feb7e721981fd925fa8d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4f09a6d2e61b41774df9feb7e721981fd925fa8d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4f09a6d2e61b41774df9feb7e721981fd925fa8d"
        }
      ]
    },
    {
      "sha": "daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
      "node_id": "C_kwDOBgtdddoAKGRhZjJiYzk5ZjhhYjgyN2E3ZmIxZDhkYzgwOTFjNmYzYTg4Y2U4NWM",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-07T23:35:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-07T23:35:04Z"
        },
        "message": "Merge pull request #21313 from eclipse-openj9/revert-21200-sysprops\n\nRevert \"Implement JVM_GetProperties for jdk17+\"",
        "tree": {
          "sha": "1e1f052cec7330ea1585bba96c6c67eb492210f3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/1e1f052cec7330ea1585bba96c6c67eb492210f3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJny4KoCRC1aQ7uu5UhlAAAOXwQAIk0hajpqLBvppGc8yOCzSje\n2hPqtgWUO2Lz5Shu7VLrD2m/RpIp3N/xB8XT4g9lci1415f7muC5wGpR0OS23ge6\n4JF9ImmskN0VEPIIz6Tun3QrQQUDEKbv5J9YsPYCszRZ+UY3GD7jX1feaZZyARqA\nt4gKHS89pAJGRDzgTo49DkVp8gCtRd3Jxo0+KKgqmriB2xswV63jko399FrqiTgO\nmXfye/va9Z+ilkBreSyleEGqcCwd4UPo0ZS65cP0xoEXOISKkPPerXPvK4BGC5lX\n3ChfI83HWHpdGlBrTUOQ5BHB9bUY7T/3mk2qI1EIt800NlRzoRtxfaS5f5iWHdc5\ndMMMvKDZ/lOgvtH5ySsUJJlqAxeIP9asyZv4k1XCW0D18Y4Kp1mi0pzU5mEv9B+L\nLauNC8jo0oso7KDOU3v3pBCV8D3vHPEfGMoVE93OTjaVDCFby9yik62WIkNaAudI\nDn/uWmKw1VRNRjHgTHI04G4xr88ywNJsgTLoA0iJ6CBBKFexZEqa8s95QgWx363Q\nLYVuUfZeBDB7+NWFErIofqdDrBzFx2jqMYL7bvTy4YahSLOPXrvzX/zzVuXYEMOz\nzyoxnVjPG7FNIzL0ARTlJgzaO2MuCAvnduTXetxDOoqO+Wbpq9tVh5WglXivaQJu\nsGZQOWRCTZUzzTv3Qexd\n=NnDK\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 1e1f052cec7330ea1585bba96c6c67eb492210f3\nparent 4f09a6d2e61b41774df9feb7e721981fd925fa8d\nparent f12ef363bdf96e4846ff4276fa3790c59b4f4925\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741390504 -0500\ncommitter GitHub <noreply@github.com> 1741390504 -0500\n\nMerge pull request #21313 from eclipse-openj9/revert-21200-sysprops\n\nRevert \"Implement JVM_GetProperties for jdk17+\"",
          "verified_at": "2025-03-07T23:39:35Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4f09a6d2e61b41774df9feb7e721981fd925fa8d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4f09a6d2e61b41774df9feb7e721981fd925fa8d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4f09a6d2e61b41774df9feb7e721981fd925fa8d"
        },
        {
          "sha": "f12ef363bdf96e4846ff4276fa3790c59b4f4925",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f12ef363bdf96e4846ff4276fa3790c59b4f4925",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f12ef363bdf96e4846ff4276fa3790c59b4f4925"
        }
      ]
    },
    {
      "sha": "fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
      "node_id": "C_kwDOBgtdddoAKGZiNjIzMzA4NmVjZGRhOGJlZTI4ZWY2NmNjMWIxZDZmNzJhNGQxNDc",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-08T15:45:24Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-08T15:45:24Z"
        },
        "message": "Merge pull request #21047 from LinHu2016/DDR_update4offheap\n\nAdd new DumpAllOffHeapEntriesCommand in DDR",
        "tree": {
          "sha": "9e6ef634566d78473feab3a800c6722ac5a7b23d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/9e6ef634566d78473feab3a800c6722ac5a7b23d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnzGYUCRC1aQ7uu5UhlAAAABQQAASSoosHkVTB4VY3imjnzG0q\nWiL0QKllgJyhjLiidVWx1hNgDgF1bDtRFm0yChDVkDCHKrWWeXTcJXY+djH1m0U2\nkccGYdu6aCLI7FKmNSvzRKsG+g4VcCnlVQN9mGGCZrijCnCgQNTeUfgeJBz5x72T\nVUH2d2v0QJyEUZZfWVKrehDir4Ann9nj5WpqnFAj1GVS/NmZpIRf9UD3qMeOodOG\nCZFe7Cz8FNtii5nmc5EUUyjyA2B8rRuXOKy1JaMEcUZYFtcBiH0WK1gymjNVvl2k\nuJme+GMRxqy3qYjkQZ3IE3XgJ0+QVqzboamGAkc/OfdUWblgsAFWiPSXOUIcjsVN\nFiBr4bu/gIIZPXcJpOMuSAzyvyeavondy/w+Ktm+zPbLyJOhHwE+NmQMAqQJwTpj\nVlNPRC4ofhHBVwl0MorAfQQf0QcXjkdEzzNOf+gK1+A4vFPtMjugvJL+GGrXH9Dh\nFFxKHeHuVd1kexkaG+NuufnZlQoDXY0/8E8DK6MRcx1uh8d/Xv35rREbRND68DPO\neJ/wL7xUTYxAmTLUN+cn4BGXlHlTF4liAOt6SNcSL2Gs1JMaZPKoCnRdtDw5uVHs\nLS51jx3vpIZkhtjNj/pbOZPG05oTq5qPi9gvZUHRI0CiD+YF6Va2EAcyLwg5tPdm\nSKKiLkYHN7bFGf1MJYiF\n=psMJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 9e6ef634566d78473feab3a800c6722ac5a7b23d\nparent daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c\nparent c099a69256a0b71aa2822aab175b0c27c8d3eb86\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741448724 -0500\ncommitter GitHub <noreply@github.com> 1741448724 -0500\n\nMerge pull request #21047 from LinHu2016/DDR_update4offheap\n\nAdd new DumpAllOffHeapEntriesCommand in DDR",
          "verified_at": "2025-03-08T15:48:24Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c"
        },
        {
          "sha": "c099a69256a0b71aa2822aab175b0c27c8d3eb86",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c099a69256a0b71aa2822aab175b0c27c8d3eb86",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c099a69256a0b71aa2822aab175b0c27c8d3eb86"
        }
      ]
    },
    {
      "sha": "4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
      "node_id": "C_kwDOBgtdddoAKDQ2NTJlN2JlYTk1NGIyZjE5YjNlN2M1ZTg2YmI1YWVjNTkwNGJiOTA",
      "commit": {
        "author": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-02-26T15:52:48Z"
        },
        "committer": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-03-08T19:26:26Z"
        },
        "message": "Evaluate destination subtrees early when deferring destination eval\n\nIn x86 ArrayStoreCHK, with OffHeap the destination tree evaluation is\ndeferred but its subtrees still need to be evaluated early especially if\nsubtrees are complex and might introduce more instructions and\nvirtual-registers.",
        "tree": {
          "sha": "880f5d7ec599d688bd06df8a2bcf6e37e581e3e8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/880f5d7ec599d688bd06df8a2bcf6e37e581e3e8"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90/comments",
      "author": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "650329ee3f5fb4f4e7742d94c96c174d9196a2ad",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/650329ee3f5fb4f4e7742d94c96c174d9196a2ad",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/650329ee3f5fb4f4e7742d94c96c174d9196a2ad"
        }
      ]
    },
    {
      "sha": "0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
      "node_id": "C_kwDOBgtdddoAKDAxMDliYzQ3Mjc4NWE5ZTE2YmM4OGVkN2JkNGVhYzBmY2I4MmUzNzI",
      "commit": {
        "author": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-03-08T19:39:21Z"
        },
        "committer": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-03-08T19:39:21Z"
        },
        "message": "Guard ArrayStoreCHK early subtree eval tree shape",
        "tree": {
          "sha": "fd8f4d0abca5edd6abbb592560cc9a80843a5d3f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/fd8f4d0abca5edd6abbb592560cc9a80843a5d3f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0109bc472785a9e16bc88ed7bd4eac0fcb82e372/comments",
      "author": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1581ac8f412f2f3b22adda42834d0888eb30dd07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1581ac8f412f2f3b22adda42834d0888eb30dd07"
        }
      ]
    },
    {
      "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
      "node_id": "C_kwDOBgtdddoAKDI2YmFhNTBhMGE2NDBlYzkwMzMzNWRiMTUzNWI5NDBiYTk0YTY1MWM",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-10T02:39:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-10T02:39:51Z"
        },
        "message": "Merge pull request #21292 from fengxue-IS/jep491-4\n\nFix hang on vthread unmount when -XX:+YieldPinnedVirtualThreads is enabled",
        "tree": {
          "sha": "627181c7a931dda5b9a172f6f936a8f33020c856",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/627181c7a931dda5b9a172f6f936a8f33020c856"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/26baa50a0a640ec903335db1535b940ba94a651c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnzlD3CRC1aQ7uu5UhlAAA6FkQACkhPfAj5fW0yEdVQDeSpXqM\niKUlQ3CCCDgzm4whC7MxirRMkTAVGWOVsRYIC1gS2nSl8s39CnXyBT+wTYvdGmZW\n38xHxuUpsRaM9MskTYLF2tnVXIAdgNmBuK2aC1I2aTA3ukaEW/NMYJvSRrQgXhzL\ntDeabIGoKHsxQjZGqVVg2FRXvEOPVbbqTjr2ILVlqVF+ivHfOh93RAPqm1g2E7u+\nTHcVimXFGWyxE6LitbE9pWpv0a7Fw3lOoFMvvtGT6lII7070HoOhdRLcZ3TYp9Ng\nyOyyT2VqpPqFdx1MFgXkzLHuB7VPQfEyga1hVf863tuwTs3JDjofdF6niat9rb4H\nVTVrfWCE5yrRVGSdkW7RnNLPzUdcEPYiuAOyeIpkAEsz+tEqu9JVg08vkJwLl31o\npqUDagVeHFF5H/IA/Cbv5vZWqE3z6pC2m6V+yQvSRYfDOJrGHZv+dm3efOhwTMJR\nqiLnelGsFUV0Uob1RYPW+778h6FjB7QjVzGa45fBeOPlxicb/hOvAtkAVcRorXh6\ndEmhGQWfdBIjIgme39iHMM1sibGodECM668zwY/WWyj2hGO6AbxTT7Dm65tQe2g1\n1Vh4lJGEQ3W2EOZlRXU9xSKhnantfjFLDUYv4i514nVemtR9q80ZfoJrt3jCyE63\nJKC0u3HrjN/Ghhj7OCZ+\n=A2Mg\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 627181c7a931dda5b9a172f6f936a8f33020c856\nparent fb6233086ecdda8bee28ef66cc1b1d6f72a4d147\nparent db3f244ab1c7f010bcc7073bcf9a298ad6e92470\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1741574391 -0400\ncommitter GitHub <noreply@github.com> 1741574391 -0400\n\nMerge pull request #21292 from fengxue-IS/jep491-4\n\nFix hang on vthread unmount when -XX:+YieldPinnedVirtualThreads is enabled",
          "verified_at": "2025-03-10T02:44:53Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fb6233086ecdda8bee28ef66cc1b1d6f72a4d147"
        },
        {
          "sha": "db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/db3f244ab1c7f010bcc7073bcf9a298ad6e92470",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/db3f244ab1c7f010bcc7073bcf9a298ad6e92470"
        }
      ]
    },
    {
      "sha": "3f8ccc251049a43255fb36ea5c245c43287c41fd",
      "node_id": "C_kwDOBgtdddoAKDNmOGNjYzI1MTA0OWE0MzI1NWZiMzZlYTVjMjQ1YzQzMjg3YzQxZmQ",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-02-12T21:16:44Z"
        },
        "committer": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-10T14:13:01Z"
        },
        "message": "Add External Options Metadata\n\nThis commit adds the ExternalOptionsMetadata struct as well as a table\nof this struct to contain information about External Options that the\nJIT processes. This commit also adds a method to find and possibly\nconsume the options, caching the arg index. Finally, this commit adds\nsome documentation to describe how to add a new external option.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>",
        "tree": {
          "sha": "dc366cd08f7c62009dfc4ac11241aac50dcb78db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/dc366cd08f7c62009dfc4ac11241aac50dcb78db"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/3f8ccc251049a43255fb36ea5c245c43287c41fd",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f8ccc251049a43255fb36ea5c245c43287c41fd",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/3f8ccc251049a43255fb36ea5c245c43287c41fd",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f8ccc251049a43255fb36ea5c245c43287c41fd/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "754bf6e642fac0d068d611f3f79bb74e6812f684",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/754bf6e642fac0d068d611f3f79bb74e6812f684",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/754bf6e642fac0d068d611f3f79bb74e6812f684"
        }
      ]
    },
    {
      "sha": "eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
      "node_id": "C_kwDOBgtdddoAKGViN2Q4NTVjODMwYzc1ZjYwYjc5ZTBkN2FkNWNjMzRiMzJlZTY0MmY",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-02-13T19:11:17Z"
        },
        "committer": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-10T14:13:06Z"
        },
        "message": "Use External Options Metadata Table\n\nThis commit updates the JIT to use the External Options Metadata table.\nThis ensures that all external options that are used to control JIT\nfunctionality are consumed, which prevents the JVM from terminating\nearly with an error when -XX:-IgnoreUnrecognizedXXColonOptions is\nspecified.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>",
        "tree": {
          "sha": "fbc8c94cd90bac1d305948605e89c2f253b1e7a5",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/fbc8c94cd90bac1d305948605e89c2f253b1e7a5"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3f8ccc251049a43255fb36ea5c245c43287c41fd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f8ccc251049a43255fb36ea5c245c43287c41fd",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/3f8ccc251049a43255fb36ea5c245c43287c41fd"
        }
      ]
    },
    {
      "sha": "84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
      "node_id": "C_kwDOBgtdddoAKDg0ZGMwODNiMmFjZTAyOGM4YmQyMWI2OTI2YmRmMjdlMjAxOWE1Yjc",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-09T20:20:44Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-10T15:57:46Z"
        },
        "message": "Displacement API for offheap using region flags\n\nImprove API for displacement calculation of stack referenced arrays for\noffheap to rely on region flags to determine the type of the movement\n(evacuate vs sliding). Previously the movement type was determined by\nRootScanner. But unlike standard platform threads, Virtual Threads\n(Continuations) are not roots and their stack walker does not\ninstantiate RootScanner.\n\nRelying on region flags (of source object) works for both types of\nthreads.\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "aeb6f238a5735de98a5ceffe4d2ee64185588d97",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/aeb6f238a5735de98a5ceffe4d2ee64185588d97"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/84dc083b2ace028c8bd21b6926bdf27e2019a5b7/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        }
      ]
    },
    {
      "sha": "42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
      "node_id": "C_kwDOBgtdddoAKDQyYTkyMWMxZTJkOTQ2YTg3OTRjNjk4MWEwOWY5ZDFlOGE3M2Y2MGI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-10T16:09:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-10T16:09:46Z"
        },
        "message": "Revert \"Revert \"x86: check xcr0 in AOT compiles\"\"",
        "tree": {
          "sha": "a0eeecdd11e54a1f98020bcecad1d441daba6a9e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a0eeecdd11e54a1f98020bcecad1d441daba6a9e"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnzw7KCRC1aQ7uu5UhlAAAYvEQAIEGERhHKLrrvRmFH0LaFnCn\nTWSQ2Ufqwwz4TswTyPEkkKE9oxcbH7r57iwbHZ15dk3cJ7bPdEuZwAz9FV2rLLEC\n16xDVQiJJSgbDM8Pdx7QH2wXzf6Jo3+ZsUua+ML1x/KIQDiI42oVtfC+LapD+2lN\ng3WeHPC+KkGwibc56UxY7Jv2zGUgvoZLz9ZGSYyPIA7B73N1b/yLmvuMsMUz7kdd\nER4xXefykzwmEAj9R36C/DCLki2Y6xnS5kI4syQ2mCvV3S31f0wxqKz6mXSxsuqj\nh3oRBn7OR4BTBngr2nvfbmyj4hTApa/Phfw4o3YH/1tfIkSamiCQnmtznn1sVFYx\n+khiWhEbmomg6trl70odfYicuQMP+3jBfeMBYA0/j4FGU2igIa4dedtQ4RvcHr81\nsZy3a/dYZB15WWtmi+BiRX/uGYWI6FkCBg8nxOBwcyMSnEt8BKw9o0baU5ZbWJUP\nj1+jUPZLNnLYdEWNNmw+5OAR0bWN+PeakAAn2mCuxRRiyFe14tTcDmJDDLicmfr/\nfz2yR0Rw7ngPS325QfpooP58d7zjXXph4pudIm/b2a2+OM8ab5w2SLOxd2vrFszj\napxP0djja2lxte3K/6bOIM0VYO4kOGQdgLIuxAKfLO3Rvk2gTh9EF4fRkx4+vMdv\nPFkcs79KXPfZ4VnHYlIH\n=xI5L\n-----END PGP SIGNATURE-----\n",
          "payload": "tree a0eeecdd11e54a1f98020bcecad1d441daba6a9e\nparent 26baa50a0a640ec903335db1535b940ba94a651c\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741622986 -0400\ncommitter GitHub <noreply@github.com> 1741622986 -0400\n\nRevert \"Revert \"x86: check xcr0 in AOT compiles\"\"\n",
          "verified_at": "2025-03-10T16:09:48Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/42a921c1e2d946a8794c6981a09f9d1e8a73f60b/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        }
      ]
    },
    {
      "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
      "node_id": "C_kwDOBgtdddoAKGUyYWE2ZWM4YmQ2YTFlYzQ5OTUxOWJjMDNiYzk1OWM5MzIwM2NkMjk",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-10T16:10:48Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-10T16:10:48Z"
        },
        "message": "Merge pull request #21321 from eclipse-openj9/revert-21310-revert-21241-aotXCR0checks\n\nx86: check xcr0 in AOT compiles (again)",
        "tree": {
          "sha": "a0eeecdd11e54a1f98020bcecad1d441daba6a9e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a0eeecdd11e54a1f98020bcecad1d441daba6a9e"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnzw8ICRC1aQ7uu5UhlAAAtagQAKIsvxumy0hpYL5z92A4XV+b\nS9ZoKs+UhZZxq29n+VRZaQU5I2U1d/C3pGTg2iRComFTSvbDRb+r5JSjMN58nHKE\nOj0/Fv8Flnv+EEPmgSz2gizYYxxyqesyebqUgf8blI6GAvw6NuHYxMHY0r71T2/V\npjL+/xu33pb9utqrQxN8qWPu96u0b60FfDDTE5YVa6A5D6EpVcnqlJ+GzdF0Dr6m\nlkY0tyY9mx6FeUMSzNB2iA4ObdNE6t7J9aMDFd2hlwhx3XrTFQIZgQuuJnNO2833\n9C9JU0ZksjGlB60/SFNrkfyY8SFxFSPBRAALluJLo9MsmLz+cnHzh2H/48hOnsEo\nceUFjZjIhpaUckbafKNW7J7xnFyn9y2XNWUQWnG09ytUvPRDjjB7DXP2wR4OpWqz\nG+tXAkrVH88B2bzAHx696JfcqTSbWwl88sSec7S5dwVM0a3UqYyB0DlROioGyvRS\nXpbDQx5MP8401t87kSneM4i/vE0GUzMb7WGrlpcLV1QbLqDDeASdZOReXTXpfqpi\nFLxMK1v98Rxps8Q85CD3Ld3csiNx9CEqYiiItXBS4xr31Uhczxttrj6HpGjN5yuK\nfnzpvRiNyiWb7cQo82TPuk//acSHT+qTxHCqU8nnBrfdAPwmkL0n7rHy4flteQ0e\n/nV5mDop2BhH+uvgyYam\n=4vkJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree a0eeecdd11e54a1f98020bcecad1d441daba6a9e\nparent 26baa50a0a640ec903335db1535b940ba94a651c\nparent 42a921c1e2d946a8794c6981a09f9d1e8a73f60b\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741623048 -0400\ncommitter GitHub <noreply@github.com> 1741623048 -0400\n\nMerge pull request #21321 from eclipse-openj9/revert-21310-revert-21241-aotXCR0checks\n\nx86: check xcr0 in AOT compiles (again)",
          "verified_at": "2025-03-10T16:14:49Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        },
        {
          "sha": "42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/42a921c1e2d946a8794c6981a09f9d1e8a73f60b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/42a921c1e2d946a8794c6981a09f9d1e8a73f60b"
        }
      ]
    },
    {
      "sha": "4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
      "node_id": "C_kwDOBgtdddoAKDRkYWMxYTg1YmQ5ZDNlOWFkNTI5NjQ0N2U5MmVhZmZjYmU4NTliZGI",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-10T18:37:02Z"
        },
        "committer": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-10T18:37:02Z"
        },
        "message": "Kill MM_SparseVirtualMemory at shutdown\n\nClass MM_SparseVirtualMemory shouldbe killed at shutdown\n\nSigned-off-by: Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com>",
        "tree": {
          "sha": "4bad7f9098a0d03cb3db08697cbce46e27688345",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4bad7f9098a0d03cb3db08697cbce46e27688345"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
      "node_id": "C_kwDOBgtdddoAKGE5ODU1Y2Y3YmYwNDM2N2ZiY2NiNWIxMWVkZDMzZGU0NWUzYzZjMDg",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-10T18:48:52Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-10T18:48:52Z"
        },
        "message": "No need to check file.encoding.pkg during boot since it's not used\n\nRelated to https://github.com/eclipse-openj9/openj9/pull/21172\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "4cf4ffd32843ff50ed0e846a486180e669b43d16",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4cf4ffd32843ff50ed0e846a486180e669b43d16"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9855cf7bf04367fbccb5b11edd33de45e3c6c08/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        }
      ]
    },
    {
      "sha": "df48dd95a74fab209acf07afb60e7d50d82f4953",
      "node_id": "C_kwDOBgtdddoAKGRmNDhkZDk1YTc0ZmFiMjA5YWNmMDdhZmI2MGU3ZDUwZDgyZjQ5NTM",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-10T19:35:20Z"
        },
        "committer": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-10T19:35:20Z"
        },
        "message": "Ensure all JITServer compilation threads process CH Table Updates\n\nUnder very rare circumstances, it is possible for a JITServer\ncompilation thread processing a remote compilation request containing CH\nTable updates to side step processing the CH Table updates. The\nsequences of events that could lead to this is as follows:\n\n1. compThreadID=0 processes request seqNo=2 (isCritical=0) (criticalSeqNo=1 lastProcessedCriticalReq=1)\n2. compThreadID=1 processes request seqNo=1 (isCritical=1) (criticalSeqNo=0 lastProcessedCriticalReq=1)\n3. compThreadID=1 discards request because seqNo=2 was processed first\n4. compThreadID=0 requests full CH Table to initialize on the server\n5. compThreadID=1 processes request seqNo=3 (isCritical=1) (criticalSeqNo=1 lastProcessedCriticalReq=1)\n\nseqNo=1 and seqNo=3 contain CH Table updates; seqNo=2 does not. As such,\non the client when generating seqNo=3, it still only depends on seqNo=1.\nThis means that on the server, by step 4 above, both compThreadID=0 and\ncompThread=1 can reach the point where the code determines whether or\nnot to initialize the CH Table.\n\nUntil compThreadID=0 finishes initializing the CH Table, the\nclientSession->cachesAreCleared() flag remains true. This causes\ncompThreadID=1 to block on the monitor guarding the initialization code.\nOnce compThreadID=0 is done initializing the CH Table, compThreadID=1 on\nlonger sees clientSession->cachesAreCleared() as true (after it\nunblocks).\n\nHowever, the way the code is structured, this results in compThreadID=1\nnot executing any code that processes the CH Table updates associated\nwith its compilation request.\n\nThis commit fixes this by restructuring the code to ensure that all\nthreads either execute the CH Table initialization code or the CH Table\nupdates code.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>",
        "tree": {
          "sha": "c89ae11b96ebf6ce84531a84ffb554250563f9ac",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c89ae11b96ebf6ce84531a84ffb554250563f9ac"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/df48dd95a74fab209acf07afb60e7d50d82f4953",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df48dd95a74fab209acf07afb60e7d50d82f4953",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/df48dd95a74fab209acf07afb60e7d50d82f4953",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df48dd95a74fab209acf07afb60e7d50d82f4953/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
      "node_id": "C_kwDOBgtdddoAKDA5NWM3ZTZlZjQ3MWE1MDlhM2U0NWQzZjhhMTAwYWFiMzA0ZWYxYmE",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2024-11-08T02:58:06Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-10T21:32:47Z"
        },
        "message": "Add JFR ThreadDump support\n\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "bcae13b18a0f4b03f184dcd26e268759ec334768",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/bcae13b18a0f4b03f184dcd26e268759ec334768"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/095c7e6ef471a509a3e45d3f8a100aab304ef1ba/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
      "node_id": "C_kwDOBgtdddoAKDMxMTJhMmNkZTVkYmM5ZWI2YjZmYjg4MTNmYjk4YzQwZGUzZTJmZmI",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-11T00:51:13Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-11T00:51:13Z"
        },
        "message": "Merge pull request #21126 from dsouzai/externalOptions\n\nFind and consume all -X / -XX options relevant to the JIT",
        "tree": {
          "sha": "e631130735af37a7ac3001001e638924905d5edb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/e631130735af37a7ac3001001e638924905d5edb"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnz4kBCRC1aQ7uu5UhlAAAxAwQAEPHP5+Mz/+sA6V2hnViNJDz\ngvC5VF9U7Y6UYN9xjT8jJGtHo5ObdHiVHnwGofdyZkgV8hcPEGnJOHDfC43HCoUF\nmjGtcLFBsfad8iadEv1+Xali79m1emAdGw4BX/ccsJoZ2ubFA3jBoKsmp6zf6e5L\nFdrl4IDcmKumNixLCs2emh5NmGjpDxxWdgRxV3QzS5qvk7Oyofu7W2cGm6fwMfxV\n0ZGQffXMF8/nO/vjZlj38FpT06G0imE83dpnHBOQR8bz4bJkT8C53Kx4v75IUF5d\n55AfgaHoGhP1yZ1gBO9Yk8KMKcLwxyZcLtNr+HeyJhfhVRhNnxdN3ecPLAInX49G\n6epCZS2HU0Rj1E/7idyn9XyC3orp7/OHtDMSSoXKOHt2GY5F39GKAgUZtd6fIxBg\nmtecdIcXkFDz6bX2qoqwQlo3hANqs8xaJlNzf69+n1TismuQ6IGOBLF0QNPx1SxI\ntSFnJPxk57ZsjX5B4C9wIN5aZGxC4loIIo+bcNIOHo5KNpmUThCILiU2bNnIWzZs\nzO5Ikm3CONw3fBup0cvlV5T4YNiQOrxlutf8Hov9nihPw3FPbKXK7qgyiBLv3KD3\naAdqTC0Zq2YaTa6IzAzWXTRtbLwv4owv7g/hTJMtdXumR+C68owCWv7BliQBYrtB\nA5MWpsQj1U9kl5u1EH3F\n=OHSR\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e631130735af37a7ac3001001e638924905d5edb\nparent e2aa6ec8bd6a1ec499519bc03bc959c93203cd29\nparent eb7d855c830c75f60b79e0d7ad5cc34b32ee642f\nauthor Marius Pirvu <mpirvu@ca.ibm.com> 1741654273 -0400\ncommitter GitHub <noreply@github.com> 1741654273 -0400\n\nMerge pull request #21126 from dsouzai/externalOptions\n\nFind and consume all -X / -XX options relevant to the JIT",
          "verified_at": "2025-03-11T00:56:15Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        },
        {
          "sha": "eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eb7d855c830c75f60b79e0d7ad5cc34b32ee642f"
        }
      ]
    },
    {
      "sha": "7f8c5b127a9718179bf4d102268d28c88d3124ca",
      "node_id": "C_kwDOBgtdddoAKDdmOGM1YjEyN2E5NzE4MTc5YmY0ZDEwMjI2OGQyOGM4OGQzMTI0Y2E",
      "commit": {
        "author": {
          "name": "Shubham Verma",
          "email": "shubhamv.sv@gmail.com",
          "date": "2025-03-06T22:07:54Z"
        },
        "committer": {
          "name": "Shubham Verma",
          "email": "shubhamv.sv@gmail.com",
          "date": "2025-03-11T03:19:18Z"
        },
        "message": "Use 32bit compare for array size in inline array allocation sequence\n\nWe need to use 32 bit compare because the top half of the size reg can contain\nclass pointer. On z, Class pointer is written to top half by IIHF in\ngenInitObjectHeader. I have updated the compare instruction on x as well to\navoid future issues related to garbage in top half of the size register.\n\nSigned-off-by: Shubham Verma <shubhamv.sv@gmail.com>",
        "tree": {
          "sha": "11f5bd463df5e249866a912ac6db2a5a79376c41",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/11f5bd463df5e249866a912ac6db2a5a79376c41"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7f8c5b127a9718179bf4d102268d28c88d3124ca",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEtrGmjeoecVuFUzWt8CIQ3SwoKjgFAmfPq7YACgkQ8CIQ3Swo\nKjiH1g//bYPDmVLOTGjKako1sJvTRo/3Mt7bjNJXDniTQNCmXFj+VxNodppBS1cU\nVa0GvGMXkQQ2wSXzb+3l2r9i350p4fJuaWQnTImq9DZnm4HDtPYFstZZdfqGw5NL\n2te+rMSYZ0xnl10cTEFbtHaUIo39cKNOBNZeDheahyjh95XwBussVK3UniVrWzEQ\n36BQGhJeI8xVraZOARxp+ZnXXr684lXGQ+zq2wz/S+6DB13MjAyWgwD3w3DVCpI1\nl3Rk95jI518xJtIndcXwfYQ2+ub8cAQyaTtlmIJpaIYqzbmTUbOzI0jxGmP/hY9J\nDOt5Bx9JAEZvhQO9ZFByG/153RJzW7F6qDdGZ86oq2fV+48iZlHOMleNWLZzy7C6\n7I3FHi4UvvWMqGMW+///Or1czGstBBn1az6UubLdJOuOAnk+F1hqjIsK+nZ1n73p\ndJjxqzbsrnEnDAEQKvSa50H8f/Vn0ItMNCxIDd9IJabOUm9Zc/qrt6OtoblkN5xc\nXiOndeclIOTvwD9WVi4btDcRglutjhtzWeTDpuLCD1qfOtkxNeeAmk4oTbgS+fYp\nH1T5nPpFV+RO1B1PTBcup+xBWDjccyt8TpX14GM1MDVnyquuVCiBOvOwmsXzRX+Z\nMlqi8TzZeNmTL2qVR+JCckSWTDf662nKh4npKpl/5D4EbZnP07c=\n=FvLW\n-----END PGP SIGNATURE-----",
          "payload": "tree 11f5bd463df5e249866a912ac6db2a5a79376c41\nparent abf8fa738c396816c3a4f1c373e866ca00e7a743\nauthor Shubham Verma <shubhamv.sv@gmail.com> 1741298874 -0500\ncommitter Shubham Verma <shubhamv.sv@gmail.com> 1741663158 -0400\n\nUse 32bit compare for array size in inline array allocation sequence\n\nWe need to use 32 bit compare because the top half of the size reg can contain\nclass pointer. On z, Class pointer is written to top half by IIHF in\ngenInitObjectHeader. I have updated the compare instruction on x as well to\navoid future issues related to garbage in top half of the size register.\n\nSigned-off-by: Shubham Verma <shubhamv.sv@gmail.com>\n",
          "verified_at": "2025-03-11T03:19:29Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7f8c5b127a9718179bf4d102268d28c88d3124ca",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7f8c5b127a9718179bf4d102268d28c88d3124ca",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7f8c5b127a9718179bf4d102268d28c88d3124ca/comments",
      "author": {
        "login": "VermaSh",
        "id": 8346599,
        "node_id": "MDQ6VXNlcjgzNDY1OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8346599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VermaSh",
        "html_url": "https://github.com/VermaSh",
        "followers_url": "https://api.github.com/users/VermaSh/followers",
        "following_url": "https://api.github.com/users/VermaSh/following{/other_user}",
        "gists_url": "https://api.github.com/users/VermaSh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/VermaSh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/VermaSh/subscriptions",
        "organizations_url": "https://api.github.com/users/VermaSh/orgs",
        "repos_url": "https://api.github.com/users/VermaSh/repos",
        "events_url": "https://api.github.com/users/VermaSh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/VermaSh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "VermaSh",
        "id": 8346599,
        "node_id": "MDQ6VXNlcjgzNDY1OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8346599?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/VermaSh",
        "html_url": "https://github.com/VermaSh",
        "followers_url": "https://api.github.com/users/VermaSh/followers",
        "following_url": "https://api.github.com/users/VermaSh/following{/other_user}",
        "gists_url": "https://api.github.com/users/VermaSh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/VermaSh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/VermaSh/subscriptions",
        "organizations_url": "https://api.github.com/users/VermaSh/orgs",
        "repos_url": "https://api.github.com/users/VermaSh/repos",
        "events_url": "https://api.github.com/users/VermaSh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/VermaSh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "abf8fa738c396816c3a4f1c373e866ca00e7a743",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/abf8fa738c396816c3a4f1c373e866ca00e7a743",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/abf8fa738c396816c3a4f1c373e866ca00e7a743"
        }
      ]
    },
    {
      "sha": "3f1ce815d6c32a9848545723241e901298892b29",
      "node_id": "C_kwDOBgtdddoAKDNmMWNlODE1ZDZjMzJhOTg0ODU0NTcyMzI0MWU5MDEyOTg4OTJiMjk",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-11T11:22:33Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-11T11:22:33Z"
        },
        "message": "Merge pull request #21317 from amicic/displacement_offheap_continuation\n\nDisplacement API for offheap using region flags",
        "tree": {
          "sha": "5dc4954a37374edaab72c7e8dbf217497f784d8b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5dc4954a37374edaab72c7e8dbf217497f784d8b"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/3f1ce815d6c32a9848545723241e901298892b29",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0Bz5CRC1aQ7uu5UhlAAAA4oQAD9X1fQq+I6TJLeURJB1QaLf\nDkvAsSXoPOJ4ZY1p4kdEEEYqP8uDgiAXbT/4tdIYgi1pvr9jaDeeacBMQ4Jc5hag\n/dCXvGqf5j3tWP/suGI2u+G5inWks11GCFOLGahQQiOurQZindEzKAuanFoSOk3y\nzdVV0smVGFR+NXZ9ZLHaGwVXh8RsK/Fu8KMiRverHLKJZmtgG+5cgIO972T4WxvZ\nakcxEQGrkGurlL5SDsXTp+S7wi6gdhEOSo7sogjE3pKAtgMnSgZOc8wB7WbWJfKE\nrpMCro3T8JYm1bMZ2d4zfWfFBYmBOV9hWHbZU0txBPfKeWPDncjIYUcX2ou+Nywu\nPZko1b9E2Z7GZyE6LvIVriOOiMLlPUgOHY0+IcKkRBYARRh8RBoOhPb/2NGtdFSy\nxNaYl3tZQCThhVzNXO2bFBQxP4l+lm9NcVmrnSkN2wea4ABC/vN6t7ZKBhXg00Ru\nHyCMyzNqvZQwuc6Xc5LagTi6QCVo2wJkG/Mc2dQyexxToSVQS8cal5LDblWDiYOh\nJInCc/CafWh/GH+Fr+5vOA2RY7v57JZmBK5l+ML+YExqmz4ggEdy2zlBV3uqE1NX\n7ekCmrkqfPSvU27vaoaH2xcLmkyLohCLqHyxMdtN7oNxb66TbcjnZkSmrAvkf1LQ\nJO0IFSEaj9kkSSXBgjim\n=nsCl\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5dc4954a37374edaab72c7e8dbf217497f784d8b\nparent 3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb\nparent 84dc083b2ace028c8bd21b6926bdf27e2019a5b7\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1741692153 -0400\ncommitter GitHub <noreply@github.com> 1741692153 -0400\n\nMerge pull request #21317 from amicic/displacement_offheap_continuation\n\nDisplacement API for offheap using region flags",
          "verified_at": "2025-03-11T11:27:36Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f1ce815d6c32a9848545723241e901298892b29",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/3f1ce815d6c32a9848545723241e901298892b29",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f1ce815d6c32a9848545723241e901298892b29/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb"
        },
        {
          "sha": "84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/84dc083b2ace028c8bd21b6926bdf27e2019a5b7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/84dc083b2ace028c8bd21b6926bdf27e2019a5b7"
        }
      ]
    },
    {
      "sha": "a840d4acb1b183b7fea9b969da1078f2d487e4cd",
      "node_id": "C_kwDOBgtdddoAKGE4NDBkNGFjYjFiMTgzYjdmZWE5Yjk2OWRhMTA3OGYyZDQ4N2U0Y2Q",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-11T13:45:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-11T13:45:56Z"
        },
        "message": "Merge pull request #21324 from pshipton/fencpkg\n\nNo need to check file.encoding.pkg during boot since it's not used",
        "tree": {
          "sha": "4a8d3625139d8d0dd22b14d0e1bfeb3b4dfd11de",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4a8d3625139d8d0dd22b14d0e1bfeb3b4dfd11de"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/a840d4acb1b183b7fea9b969da1078f2d487e4cd",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0D6UCRC1aQ7uu5UhlAAAPycQADPao1oVQyS3mFPB/aoaua3Z\n0wOAMRFiwvoUq7AkxFvbtX8Or+IXwY8mRAJpWChM1fsr4pzdCBaZx6PdiFFqgxfD\nPfk9UWlY9SlYmm4lR9Xc9s6zqPqh2AO1wbeDyLy/4wBfCB9wUPrhuyQEzxOu4xp0\nBRZvDSeYLPdseOeWLyGi0mZmIzpf4K5NpjyRoLx3DP4f/smzEL+ixMiFNgdG29pe\nuT1NdVjgGTrQZvtQah0pHRJfOHJYlNuMZ/2v9bQ+G0fq5vNWdu/HYgeJj36tkWGm\nekq1nbXjENI5/iRUzeBzauk94OlRskuOfU45CLxnrM0qMzIU+K2g+hWfSKN2cVWq\njJ33/5zP5amXvq+QUnEP2H7SaJiIgVtsHSWS2n6XEeqPPrQUgzEI18CDZ6w183HZ\n+gxqbSPfARYH95QIeEV08lyQL9FNphH4Ufbmgyn1NK9Y+ZgZN/L4ZD+aHg1UG61j\npDVcU5YB7heXpl/EQfO3EmAeT2gGL4fVhMk6RS1YNNdS3aKRzkPgYhCOpb4fU1pj\nN0XE05TQT8F6Fg26BXRSQmf1vLP091seTdmltc/+CTCmscTehRt+gJWEV00YaMUu\nJ5we1Y6oY7ryAMV9wowPIjiCS4VTSDfY56hdfi08Awr5Esu2SCMluwgtdT6cRjm7\nK4qoLcTdNJbBBGa0w5GH\n=Ezt3\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4a8d3625139d8d0dd22b14d0e1bfeb3b4dfd11de\nparent 3f1ce815d6c32a9848545723241e901298892b29\nparent a9855cf7bf04367fbccb5b11edd33de45e3c6c08\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741700756 -0400\ncommitter GitHub <noreply@github.com> 1741700756 -0400\n\nMerge pull request #21324 from pshipton/fencpkg\n\nNo need to check file.encoding.pkg during boot since it's not used",
          "verified_at": "2025-03-11T13:51:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a840d4acb1b183b7fea9b969da1078f2d487e4cd",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/a840d4acb1b183b7fea9b969da1078f2d487e4cd",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a840d4acb1b183b7fea9b969da1078f2d487e4cd/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3f1ce815d6c32a9848545723241e901298892b29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/3f1ce815d6c32a9848545723241e901298892b29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/3f1ce815d6c32a9848545723241e901298892b29"
        },
        {
          "sha": "a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9855cf7bf04367fbccb5b11edd33de45e3c6c08",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a9855cf7bf04367fbccb5b11edd33de45e3c6c08"
        }
      ]
    },
    {
      "sha": "e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
      "node_id": "C_kwDOBgtdddoAKGU0OTcxZWQyMGY0OWNhNDgyNGIxNzA1YzAyZmM1ZDBjNDRiYzIwNWM",
      "commit": {
        "author": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-11T16:22:07Z"
        },
        "committer": {
          "name": "Irwin D'Souza",
          "email": "dsouzai.gh@gmail.com",
          "date": "2025-03-11T16:22:07Z"
        },
        "message": "Don't resume more than one comp thread if the queue weight is 0\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>",
        "tree": {
          "sha": "4d17d479c48622016b1d0bb6a4f53a6592c349ed",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4d17d479c48622016b1d0bb6a4f53a6592c349ed"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e4971ed20f49ca4824b1705c02fc5d0c44bc205c/comments",
      "author": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dsouzai",
        "id": 18743715,
        "node_id": "MDQ6VXNlcjE4NzQzNzE1",
        "avatar_url": "https://avatars.githubusercontent.com/u/18743715?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsouzai",
        "html_url": "https://github.com/dsouzai",
        "followers_url": "https://api.github.com/users/dsouzai/followers",
        "following_url": "https://api.github.com/users/dsouzai/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsouzai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsouzai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsouzai/subscriptions",
        "organizations_url": "https://api.github.com/users/dsouzai/orgs",
        "repos_url": "https://api.github.com/users/dsouzai/repos",
        "events_url": "https://api.github.com/users/dsouzai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsouzai/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "1c420ec20e03a3dbf51928438448ba593e7f416b",
      "node_id": "C_kwDOBgtdddoAKDFjNDIwZWMyMGUwM2EzZGJmNTE5Mjg0Mzg0NDhiYTU5M2U3ZjQxNmI",
      "commit": {
        "author": {
          "name": "Bradley Wood",
          "email": "bradley.wood@ibm.com",
          "date": "2025-03-11T17:54:46Z"
        },
        "committer": {
          "name": "Bradley Wood",
          "email": "bradley.wood@ibm.com",
          "date": "2025-03-11T17:54:46Z"
        },
        "message": "x86: call cg->getCurrentBlock() instead of node->getBlock()\n\nSigned-off-by: Bradley Wood <bradley.wood@ibm.com>",
        "tree": {
          "sha": "46a8a0607f5cc04ec57cecda09aecedeb7b0ea69",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/46a8a0607f5cc04ec57cecda09aecedeb7b0ea69"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/1c420ec20e03a3dbf51928438448ba593e7f416b",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1c420ec20e03a3dbf51928438448ba593e7f416b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/1c420ec20e03a3dbf51928438448ba593e7f416b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1c420ec20e03a3dbf51928438448ba593e7f416b/comments",
      "author": {
        "login": "BradleyWood",
        "id": 14269423,
        "node_id": "MDQ6VXNlcjE0MjY5NDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14269423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BradleyWood",
        "html_url": "https://github.com/BradleyWood",
        "followers_url": "https://api.github.com/users/BradleyWood/followers",
        "following_url": "https://api.github.com/users/BradleyWood/following{/other_user}",
        "gists_url": "https://api.github.com/users/BradleyWood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BradleyWood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BradleyWood/subscriptions",
        "organizations_url": "https://api.github.com/users/BradleyWood/orgs",
        "repos_url": "https://api.github.com/users/BradleyWood/repos",
        "events_url": "https://api.github.com/users/BradleyWood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BradleyWood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "BradleyWood",
        "id": 14269423,
        "node_id": "MDQ6VXNlcjE0MjY5NDIz",
        "avatar_url": "https://avatars.githubusercontent.com/u/14269423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BradleyWood",
        "html_url": "https://github.com/BradleyWood",
        "followers_url": "https://api.github.com/users/BradleyWood/followers",
        "following_url": "https://api.github.com/users/BradleyWood/following{/other_user}",
        "gists_url": "https://api.github.com/users/BradleyWood/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BradleyWood/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BradleyWood/subscriptions",
        "organizations_url": "https://api.github.com/users/BradleyWood/orgs",
        "repos_url": "https://api.github.com/users/BradleyWood/repos",
        "events_url": "https://api.github.com/users/BradleyWood/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BradleyWood/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
      "node_id": "C_kwDOBgtdddoAKDM0NmU2MWY2YTZmMTJlOGIwMGNiOGY2NjM2ZTAyYTJlMjBlN2MyN2Q",
      "commit": {
        "author": {
          "name": "Hang Shao",
          "email": "hangshao@ca.ibm.com",
          "date": "2025-03-10T15:35:58Z"
        },
        "committer": {
          "name": "Hang Shao",
          "email": "hangshao@ca.ibm.com",
          "date": "2025-03-11T18:14:30Z"
        },
        "message": "Unprotect header when modifying extraStartupHints\n\nFixes #21315\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>",
        "tree": {
          "sha": "37540c3ba32f3b086bbb45095c30dec28b0e2aac",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/37540c3ba32f3b086bbb45095c30dec28b0e2aac"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d/comments",
      "author": {
        "login": "hangshao0",
        "id": 18008382,
        "node_id": "MDQ6VXNlcjE4MDA4Mzgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18008382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hangshao0",
        "html_url": "https://github.com/hangshao0",
        "followers_url": "https://api.github.com/users/hangshao0/followers",
        "following_url": "https://api.github.com/users/hangshao0/following{/other_user}",
        "gists_url": "https://api.github.com/users/hangshao0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hangshao0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hangshao0/subscriptions",
        "organizations_url": "https://api.github.com/users/hangshao0/orgs",
        "repos_url": "https://api.github.com/users/hangshao0/repos",
        "events_url": "https://api.github.com/users/hangshao0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hangshao0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "hangshao0",
        "id": 18008382,
        "node_id": "MDQ6VXNlcjE4MDA4Mzgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18008382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hangshao0",
        "html_url": "https://github.com/hangshao0",
        "followers_url": "https://api.github.com/users/hangshao0/followers",
        "following_url": "https://api.github.com/users/hangshao0/following{/other_user}",
        "gists_url": "https://api.github.com/users/hangshao0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hangshao0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hangshao0/subscriptions",
        "organizations_url": "https://api.github.com/users/hangshao0/orgs",
        "repos_url": "https://api.github.com/users/hangshao0/repos",
        "events_url": "https://api.github.com/users/hangshao0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hangshao0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a840d4acb1b183b7fea9b969da1078f2d487e4cd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a840d4acb1b183b7fea9b969da1078f2d487e4cd",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a840d4acb1b183b7fea9b969da1078f2d487e4cd"
        }
      ]
    },
    {
      "sha": "94f4a9ea92860c84ddad61e0a912cf75327a5f94",
      "node_id": "C_kwDOBgtdddoAKDk0ZjRhOWVhOTI4NjBjODRkZGFkNjFlMGE5MTJjZjc1MzI3YTVmOTQ",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-10T13:48:50Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-11T18:33:04Z"
        },
        "message": "Implement JVM_GetProperties for jdk17+\n\nThis reverts commit f12ef363bdf96e4846ff4276fa3790c59b4f4925, which\nre-instates commit 9620a5a7654118a6b379a8185281653d06b3fa80, PR\nhttps://github.com/eclipse-openj9/openj9/pull/21200 plus some additional\ncosmetic changes, and the following.\n\nSetting SystemProps.customTmpdir is unnecessary, and fails.\nIt already has the correct value from calling\nSystemProps.initProperties().\n\nIssue https://github.com/eclipse-openj9/openj9/issues/21311\n\nModify the tracepoint used by test to match VM changes.\ncmdLineTester_PageAlignDirectMemory uses the j9jcl.352 tracepoint, which\nhas moved to j9vm.791.\n\nIssue https://github.com/eclipse-openj9/openj9/issues/21314\n\nUpdate JVM_GetTemporaryDirectory\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "7409b34b42b408c38ee58bb90ea87c08b9951a35",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/7409b34b42b408c38ee58bb90ea87c08b9951a35"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/94f4a9ea92860c84ddad61e0a912cf75327a5f94",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/94f4a9ea92860c84ddad61e0a912cf75327a5f94",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/94f4a9ea92860c84ddad61e0a912cf75327a5f94",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/94f4a9ea92860c84ddad61e0a912cf75327a5f94/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        }
      ]
    },
    {
      "sha": "df442101547c9d76bb3b275662455f65048ac142",
      "node_id": "C_kwDOBgtdddoAKGRmNDQyMTAxNTQ3YzlkNzZiYjNiMjc1NjYyNDU1ZjY1MDQ4YWMxNDI",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-12T02:44:52Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T02:44:52Z"
        },
        "message": "Merge pull request #21331 from dsouzai/postRestoreCompThreads\n\nDon't resume more than one comp thread if the queue weight is 0",
        "tree": {
          "sha": "c3b7f35831be469ec67d3e5e3e6610bfdfc324f9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c3b7f35831be469ec67d3e5e3e6610bfdfc324f9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/df442101547c9d76bb3b275662455f65048ac142",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0PUkCRC1aQ7uu5UhlAAAjkYQADto0Kn5Bqlwo0aKEV3Ika1C\nQ3MfICkRmpEXkR+1H6JbHIaQNZ6rQ+MsJCLF1Grc8YLdqsRA2UMa0JEIqaJgG3rO\nOMIVUgIEfehHEETzkEUddkzBWMqH7Uf57lr2w/HtBh8Vu1L5LJ0WgudYfF6Tmved\nJOL04DdWVtxEQMl8/J+nmjeNX0eBWtDaWixpo+8HpG0PAeUmhkUWxtRN7J4Tw8fG\nBU7YocoJGqSfDl6EDk8pu1sl7Lz5MSk4yRnDfsmPON7yluBUXWVdx9L4M1poau2t\nrQbgoRVPLFHVCHP8ikB8WqzLEQhUZvVZXzAV7ePYszsL1kh5XCx0X5KRvg0hqXzs\nXK+EKIGIU80MsWzU636FM1KF4n37yT+Btdonb33kbYwnTwMDzoy6P9gQQZGQ+6lb\ngnzz2ks6GUAzU1Dt6aRXsi1EThMSv3eRrp7r99t0WGggsPMt99PNzkWKhiPERcS6\nA3+Pe3tmppb27TS608WpEgyMWt1RfZAEBkMtFEhXBrbzR9DBVKUEUoYJ2Ng6yAbY\ng9ThD7Q2YFxCc9v6z8qrgXCFdkmmm4mJPWJlK1nC1mf5SopxB8AX1jXRN8Z81pYn\ncaZE4+Wl2CPiCq5P5vPYi5WIPuIP4KcFrFJPE3g+gEaHsRKZs6As6CWbdl3/SSFO\nXov0k9TI7SgEEo42ZRXw\n=1to+\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c3b7f35831be469ec67d3e5e3e6610bfdfc324f9\nparent a840d4acb1b183b7fea9b969da1078f2d487e4cd\nparent e4971ed20f49ca4824b1705c02fc5d0c44bc205c\nauthor Marius Pirvu <mpirvu@ca.ibm.com> 1741747492 -0400\ncommitter GitHub <noreply@github.com> 1741747492 -0400\n\nMerge pull request #21331 from dsouzai/postRestoreCompThreads\n\nDon't resume more than one comp thread if the queue weight is 0",
          "verified_at": "2025-03-12T02:49:54Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df442101547c9d76bb3b275662455f65048ac142",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/df442101547c9d76bb3b275662455f65048ac142",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df442101547c9d76bb3b275662455f65048ac142/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "a840d4acb1b183b7fea9b969da1078f2d487e4cd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a840d4acb1b183b7fea9b969da1078f2d487e4cd",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a840d4acb1b183b7fea9b969da1078f2d487e4cd"
        },
        {
          "sha": "e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e4971ed20f49ca4824b1705c02fc5d0c44bc205c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e4971ed20f49ca4824b1705c02fc5d0c44bc205c"
        }
      ]
    },
    {
      "sha": "e6e2efd8532b681f4dbab0af408196505e9f9183",
      "node_id": "C_kwDOBgtdddoAKGU2ZTJlZmQ4NTMyYjY4MWY0ZGJhYjBhZjQwODE5NjUwNWU5ZjkxODM",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-12T02:47:02Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T02:47:02Z"
        },
        "message": "Merge pull request #21326 from dsouzai/jitserverassertion\n\nEnsure all JITServer compilation threads process CH Table Updates",
        "tree": {
          "sha": "67dd23bd2dfc4823d00051eb0f6ea19c4449caf1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/67dd23bd2dfc4823d00051eb0f6ea19c4449caf1"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/e6e2efd8532b681f4dbab0af408196505e9f9183",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0PWmCRC1aQ7uu5UhlAAAGZUQADj1o3ow3IwqiEsAX1DZTYc/\nrOqbsXfQEbGJjeDpzxEJ3xFkI67ctlftlzKLZye6vU5hcn96xnQbUHlh8b5orr7x\nBDYlYzFIEian98L0q3zYZElK65554eFrCROc0N+Nk/yvhPLjiuXlDIgnRLf9RgqG\nrDVw6wS+j8TMPuvLrTdLXNSDJ2kLHcKg/V3kkF419xlvMHZ4KFqRa2eu5v81J0xZ\njOZdA9zEqsWApdvbXKsNa+LGvl7koqjX6Ngwqy8r3tQ2TDVL5rq9NhyDSHZcOMuI\nz7wGQ0H7yaAkW9U0s4GvGWamfFDQsdKnUFFF/7oRhhl1TT0B7PxUPkUpygeg1fX5\nrHCRegtdKxQDuMUGRS/8qJHPS65//YoKU3a948i4I6tSYghfRqUJ0e2Ekdbxdw7S\nhQnIlRiC/g0tKw1AksAAMkIfnLS+aMn5N9Ynk7R9HuuEtAQsgsEoHLq3JcsiQDuf\nmj4zuD37/Ye4jKIItJpiSECoZDhtLHvgQ4hc9jMQpFysckoMRaOXSDrJDhBiXMZz\n3vLTF2tLB1q4yqWeoY9/DGlk3e8gNBrzwpue2G37zHpxqaLe59t+GHhzrV1lgpwW\nMHw1CPnbWV/JizUWfY73z2I4KoLeL1UqZyutzbLd8DVDN6SvcoB4W5B8SyTGSIq/\nlbbop71Q1VvuDnmY7Xt/\n=7UU8\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 67dd23bd2dfc4823d00051eb0f6ea19c4449caf1\nparent df442101547c9d76bb3b275662455f65048ac142\nparent df48dd95a74fab209acf07afb60e7d50d82f4953\nauthor Marius Pirvu <mpirvu@ca.ibm.com> 1741747622 -0400\ncommitter GitHub <noreply@github.com> 1741747622 -0400\n\nMerge pull request #21326 from dsouzai/jitserverassertion\n\nEnsure all JITServer compilation threads process CH Table Updates",
          "verified_at": "2025-03-12T02:52:04Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e6e2efd8532b681f4dbab0af408196505e9f9183",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/e6e2efd8532b681f4dbab0af408196505e9f9183",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e6e2efd8532b681f4dbab0af408196505e9f9183/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "df442101547c9d76bb3b275662455f65048ac142",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df442101547c9d76bb3b275662455f65048ac142",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/df442101547c9d76bb3b275662455f65048ac142"
        },
        {
          "sha": "df48dd95a74fab209acf07afb60e7d50d82f4953",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/df48dd95a74fab209acf07afb60e7d50d82f4953",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/df48dd95a74fab209acf07afb60e7d50d82f4953"
        }
      ]
    },
    {
      "sha": "b281c110bf3b299b975c56a61661be342dff9dec",
      "node_id": "C_kwDOBgtdddoAKGIyODFjMTEwYmYzYjI5OWI5NzVjNTZhNjE2NjFiZTM0MmRmZjlkZWM",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-12T02:48:42Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T02:48:42Z"
        },
        "message": "Merge pull request #21333 from hangshao0/FixSCC\n\nUnprotect header when modifying extraStartupHints",
        "tree": {
          "sha": "c441922bbb39d6cfcda8687331644feea5683c89",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c441922bbb39d6cfcda8687331644feea5683c89"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/b281c110bf3b299b975c56a61661be342dff9dec",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0PYKCRC1aQ7uu5UhlAAAaJUQAG8ynnLI8a/0k0KsaPayYrkc\ncMCgkLn0iCgZwa14aH5sOwraVFtcFTsjC0Vn4a+fpy51WajY6/NkiOvzApjBEqBV\nq8wBlROYyfe2PbZOuR40sMRWub4RdgHLJx8SnPjOoDG0G4Q4e8qc5xgyIViQ7BoG\n5q6PrHAcKmVOD9E91tKAWG4kDyDCpO0NKc4Gd6Wb9XZtS3qZNo/9+KC0xtSQVTI6\nVb0h8nOCLm2IzP5HajWXQA40lT+pMpsM7XrglP2bMhAGB3CIGuveRJ/U8hjb2PAG\nyk3sDR7nuOf1QPC7xPhgK4NqHHWzrso90YCk6lWQvrtnCbeN2HGEQinH45JKEqfF\nG8JjMxvAZQF5C0TkQMULpMBZ5D7AlDgPT8FHQpMa1S+P5fF8ABBGdYHWuTYzMmi/\n56s9XEXkr76bFRLJ2WIi3Nl9bjk5JvNUhK4hFZSyAdel/dHIbjYBEtPAnrt+/pRs\nAFLyvLlVG37grpRnAz1U+HYC72beITOuqV3k0E6iiogkkd1iSPp7tZxOdY591R40\nWd2BvMZO8dKSVJKMaHBPrcz/4qoT8loSmqksYl/CAZIfBw9Rp3p7xn9pVax1BbzM\n7ulfA9IG9kNeZseCXv3nJFOwPQ+0OBVcOXyTKIAMDQ7QP4Cgd8vz+jrTVUI1OQGw\nLZRRN0QeZO08WJnCCiWD\n=UIMw\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c441922bbb39d6cfcda8687331644feea5683c89\nparent e6e2efd8532b681f4dbab0af408196505e9f9183\nparent 346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741747722 -0400\ncommitter GitHub <noreply@github.com> 1741747722 -0400\n\nMerge pull request #21333 from hangshao0/FixSCC\n\nUnprotect header when modifying extraStartupHints",
          "verified_at": "2025-03-12T02:53:45Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b281c110bf3b299b975c56a61661be342dff9dec",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/b281c110bf3b299b975c56a61661be342dff9dec",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b281c110bf3b299b975c56a61661be342dff9dec/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e6e2efd8532b681f4dbab0af408196505e9f9183",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e6e2efd8532b681f4dbab0af408196505e9f9183",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e6e2efd8532b681f4dbab0af408196505e9f9183"
        },
        {
          "sha": "346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d"
        }
      ]
    },
    {
      "sha": "7cba308722d8fc6e492c26a82c282d87b6ca24f4",
      "node_id": "C_kwDOBgtdddoAKDdjYmEzMDg3MjJkOGZjNmU0OTJjMjZhODJjMjgyZDg3YjZjYTI0ZjQ",
      "commit": {
        "author": {
          "name": "Rahil Shah",
          "email": "rahil@ca.ibm.com",
          "date": "2025-03-12T12:41:57Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T12:41:57Z"
        },
        "message": "Merge pull request #21306 from VermaSh/inlineAllocationFix\n\nUse 32bit compare for array size in inline array allocation sequence",
        "tree": {
          "sha": "510474fc30017cda7b882316a4587aeddb972ce3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/510474fc30017cda7b882316a4587aeddb972ce3"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7cba308722d8fc6e492c26a82c282d87b6ca24f4",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0YEVCRC1aQ7uu5UhlAAATgYQAHg5F+oYS0df4UI0vizTZory\nc2FoNteuNef3aCi4TcO5SXb07JvuoaS3ixjK08S/yyREXWP5BtCAUWDIZeLHglrw\nRZpZb4WNnQ14JuPEGyRd+RAFYciuxFEeYb45iMXtC16aOd+mGi/mUQUDllZS6KA5\n4cXcK7SHUlNv9JKo39aC47X13+XqAcE+z7gFIi5RK0x+KcSkDgZejAjp4zoKFGIh\n6YY5q6nGKeI5aZrwq7HD2uZOFMYdHmHUVuGl4yZTUNx0GaqtVzjzU2EMgZUZOG6a\nDH4jdvcsfV787YJRYhpXaDL9GD3wGpvJZcO9+OOtnH9p6KjCx9/UgTzi80nfTnfk\nvAna7Yk0ew2FllLRNWp3WFjIY6pFLslM0YubkTaWN8/KgvXA3hfDrr1nnZj6o7fh\nViuvlflCTu6aWvfXXaenuuae2i8c/9V+Rj0ofXy+Zmb4whWF+eFIidfo0cpGScpQ\n+CGQuj9Tv2jua3iwpsNiOWvAo+ekg11guXsivFLmorFbouxvCfcR4YgcLDtUO1LN\nI4fEushC/0/crXUhU/k7izsArXkxtW6GlUUweNAh7dygfqSI77QHUj3lfgN8ANZ8\nkIDYKEHsdu9yYJ2qbFP0wU57cSVLCOKw3O4FPnDaXh1Oc3Q2iCx4RHow6EpWbBbK\nY3qbYgQQXIy9x/BxcEl6\n=vHtE\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 510474fc30017cda7b882316a4587aeddb972ce3\nparent b281c110bf3b299b975c56a61661be342dff9dec\nparent 7f8c5b127a9718179bf4d102268d28c88d3124ca\nauthor Rahil Shah <rahil@ca.ibm.com> 1741783317 -0400\ncommitter GitHub <noreply@github.com> 1741783317 -0400\n\nMerge pull request #21306 from VermaSh/inlineAllocationFix\n\nUse 32bit compare for array size in inline array allocation sequence",
          "verified_at": "2025-03-12T12:47:01Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7cba308722d8fc6e492c26a82c282d87b6ca24f4",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7cba308722d8fc6e492c26a82c282d87b6ca24f4",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7cba308722d8fc6e492c26a82c282d87b6ca24f4/comments",
      "author": {
        "login": "r30shah",
        "id": 22353051,
        "node_id": "MDQ6VXNlcjIyMzUzMDUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22353051?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/r30shah",
        "html_url": "https://github.com/r30shah",
        "followers_url": "https://api.github.com/users/r30shah/followers",
        "following_url": "https://api.github.com/users/r30shah/following{/other_user}",
        "gists_url": "https://api.github.com/users/r30shah/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/r30shah/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/r30shah/subscriptions",
        "organizations_url": "https://api.github.com/users/r30shah/orgs",
        "repos_url": "https://api.github.com/users/r30shah/repos",
        "events_url": "https://api.github.com/users/r30shah/events{/privacy}",
        "received_events_url": "https://api.github.com/users/r30shah/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "b281c110bf3b299b975c56a61661be342dff9dec",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b281c110bf3b299b975c56a61661be342dff9dec",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b281c110bf3b299b975c56a61661be342dff9dec"
        },
        {
          "sha": "7f8c5b127a9718179bf4d102268d28c88d3124ca",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7f8c5b127a9718179bf4d102268d28c88d3124ca",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7f8c5b127a9718179bf4d102268d28c88d3124ca"
        }
      ]
    },
    {
      "sha": "5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
      "node_id": "C_kwDOBgtdddoAKDVlYjhkMGY0ZmFmYmJhNDM4MWYwZmYyOWE0OTE2NmRlZGEzOGYxNWM",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T12:53:43Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T12:53:43Z"
        },
        "message": "Merge pull request #21320 from pshipton/sysprops6\n\nImplement JVM_GetProperties for jdk17+ (again)",
        "tree": {
          "sha": "46fb7e640091cdcec0f618e0a06f4f382c56d6b2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/46fb7e640091cdcec0f618e0a06f4f382c56d6b2"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0YPXCRC1aQ7uu5UhlAAAEwgQAKU+dIUzIq56K1xSUktkJOQE\n+nPmSozbwfYVM7viy73pHZlwH18K5NvUwTVdK6VBMimuKNl9pi1NMDeSMR0Qq72Y\n61LmW9+3br679XGGd7tSRGO6lw3aXUsPJ7cM5TO+/DPB9UqL1i46BnLl9dw+8jSv\noRlB58fG5NIehhyIAsbCa/vb8OnbEzCbrIfRxKT7cJsOUk4Mt1A/vrZpYVOjZun7\nsfR7LTjNrdIRCjynAPT8NP6RtjAGVRk/i9g3hhiuwHI0MCR+e0XGiPglW3J7W+jY\n5gcM0lzZxfrS9JcrQxdGoQ1RTPEL2d1W8eqjNi14uLxQh/igzBbOjaRVAUXcXsDK\ndWgR+sHSOUllZoCPFsVYWN8Yv+xKAp7aCth010cpi4AuYy3g8vXAoxOOoN6m4IaT\nKObLp3Zhx73biyvKS4VHzy2oTtxuM3BvOG8sv32gd/o5hS8nl3rqNj1poeQ4Prty\nRijewZ7hs27ZCI5RuVyspn0TtYAl9WIYwncUmPlLWIqDBQXtgjM1J9mmzWJ/9aBV\nqzrZ7N3XiB6GqmQIC9TRW2oEIYXo5N8vPbTxwNSEfx1gQguT6FPeIUolP7HKCEl6\nc2d17YpcBE70fSDw+cmKZL4/ZJZ+FAALfdGOawV/zdSsxLDl8ApcnclqLWu8bPU/\nz3dZyoafSPSnZmkoAUMD\n=Ietg\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 46fb7e640091cdcec0f618e0a06f4f382c56d6b2\nparent 7cba308722d8fc6e492c26a82c282d87b6ca24f4\nparent 94f4a9ea92860c84ddad61e0a912cf75327a5f94\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741784023 -0400\ncommitter GitHub <noreply@github.com> 1741784023 -0400\n\nMerge pull request #21320 from pshipton/sysprops6\n\nImplement JVM_GetProperties for jdk17+ (again)",
          "verified_at": "2025-03-12T12:58:21Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5eb8d0f4fafbba4381f0ff29a49166deda38f15c/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7cba308722d8fc6e492c26a82c282d87b6ca24f4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7cba308722d8fc6e492c26a82c282d87b6ca24f4",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7cba308722d8fc6e492c26a82c282d87b6ca24f4"
        },
        {
          "sha": "94f4a9ea92860c84ddad61e0a912cf75327a5f94",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/94f4a9ea92860c84ddad61e0a912cf75327a5f94",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/94f4a9ea92860c84ddad61e0a912cf75327a5f94"
        }
      ]
    },
    {
      "sha": "f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
      "node_id": "C_kwDOBgtdddoAKGY5OTQ1YmIwMWE4ZTZhYWEyZjJjNTNkMzBmNjEwYWM2OGUxZjY4YjQ",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T13:04:33Z"
        },
        "committer": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T13:04:33Z"
        },
        "message": "Fix a few typos\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
        "tree": {
          "sha": "09e8c19b16ef90e276c4a2c45895f6e659178afa",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/09e8c19b16ef90e276c4a2c45895f6e659178afa"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.79\n\niQJGBAABCAAwBYJn0YZhFiEEBqD+SRTaKJJnWdCNNcpWYI2Shg0SHGtlaXRoY0Bj\nYS5pYm0uY29tAAoJEDXKVmCNkoYNIScP/1jYEOKdJhnheJmx9Bmr8xY/TTSOn50y\ncC3hKxua9z/LZVlES9Eo4JRPcRAjkCn9W2K4IQvJxAs91c+zqcCCIU8wmw/vL6im\n/WPzREAKZdeV6+m43zz2mtBhQmjjcNK3nNRuXZawieLhGQIseWVUWqK2KxWrv2az\nj7X4HPTgiKxOUU+1GlwyTGbBjdl/z5Q8INAGv4eOZOcGb/+KjO4wJ3TtMsi/+iYU\nt2ktZ1mE0FAuOqtKoBX6fUgfSP6O1YKqIZpXHXvqPzj8VxqJfCNYebhhAYsyYf7D\n4vb47vcN7+msI3SyEugsmiggU+scKwoNTf9SChgGT9lF7a4g5gW9Sev1dSpvUf7s\nlWmPa/lIs/6ijz1KGYA6Q2ORud5yjjEhSoE6e/IBxoKc2zYQCHq2spui8VDim/wV\n9BJhze5CTFnkFJWJbXtkHLaL6rwl1lYOJERd0eRDMX82KQkcq3wzchMOBJ2Nv7kT\nWaWy8AScXliZmVdmxOX9Ix2TKUGuNnB/rajVJLOq3Spk8ZToe943Vi2QG7BTilb4\nadlrhRAydm8Vg0KB2WlGfj7u2YRB5a/6H0k4+PWHj2ZjMGeYsEDVeLXotqOWX4Wg\n5q1J3qrbnYJLjkLEoKFFLMZY88NBElgs2yhQtaO1JTzwXa6KM6YXLzazwFwA0FHO\n9H2eu8dTRt3Q\n=sebR\n-----END PGP SIGNATURE-----",
          "payload": "tree 09e8c19b16ef90e276c4a2c45895f6e659178afa\nparent 5eb8d0f4fafbba4381f0ff29a49166deda38f15c\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741784673 -0400\ncommitter Keith W. Campbell <keithc@ca.ibm.com> 1741784673 -0400\n\nFix a few typos\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
          "verified_at": "2025-03-12T13:04:47Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/5eb8d0f4fafbba4381f0ff29a49166deda38f15c"
        }
      ]
    },
    {
      "sha": "0c17bb52deb31ca34a9930001672bbd07f151b53",
      "node_id": "C_kwDOBgtdddoAKDBjMTdiYjUyZGViMzFjYTM0YTk5MzAwMDE2NzJiYmQwN2YxNTFiNTM",
      "commit": {
        "author": {
          "name": "Rahil Shah",
          "email": "rahil@ca.ibm.com",
          "date": "2025-03-12T13:18:05Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T13:18:05Z"
        },
        "message": "Merge pull request #21337 from keithc-ca/typos\n\nFix a few typos",
        "tree": {
          "sha": "09e8c19b16ef90e276c4a2c45895f6e659178afa",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/09e8c19b16ef90e276c4a2c45895f6e659178afa"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/0c17bb52deb31ca34a9930001672bbd07f151b53",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0YmNCRC1aQ7uu5UhlAAAuRAQAH3SuhWxFX9x+hcj/e1MDPuw\n72H42bN7z2UjRv7rAC7/DUxGjV1weZPc3AVg01WxxITCuLwpjK89Q2L++rse9JxR\n1n02vFobXKmzwOLHBHhudMQ9VNqpHZzT1x4r1/KDeHUwA4IkK3wRNN7n8lExSYYS\n58DZVhxbVtLa3nJNMJ8eFK+zCs9sKCqFfeXG6yKHl48gCvZl6uZMKy75+sga2Oz7\nYY8aFanYN5egjZabP34ycgqtKVXk3VypPvFoinlP8pbeH2BZpDWdqBrDfbXbp6Cl\nIo/Vp/Iu2vCfnLRFW93QGSFvIcxrddEwHZ/bmjrxa8H0IK8N+euMVHOhi9/Pwt1K\nQubpPwAn6jPOfROSk2ejZ6qqfKAeJ3Dl7FleIidE3yurnwpuJBAHzZx7UZyT4XRM\nIV5brnBzr7es3wAG3GcE9pxJiZzMP9BNK3E/ZcbHcVQpyBPwq45mBzjaqXlRTYmt\nKwL6pPmQLmx1RN30TaqnQoEnvLBHPPR5etmakYsjry6SXsCIirV5dYOkc+fO8FOj\nu/PvhFU9N0C6im/ypVuaVgIKZtCKEqTrO75Fhgh4ngWSxkfeU+U7v8abKyz0vaUN\n6xspKpRidLjtPgGGc5cIhwAHzikcKqdngsw4kj/tQFlp9IQbc78gx8iKSCTlFhmw\nLRsAKILh6ux0CRvKcfLo\n=5AHL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 09e8c19b16ef90e276c4a2c45895f6e659178afa\nparent 5eb8d0f4fafbba4381f0ff29a49166deda38f15c\nparent f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4\nauthor Rahil Shah <rahil@ca.ibm.com> 1741785485 -0400\ncommitter GitHub <noreply@github.com> 1741785485 -0400\n\nMerge pull request #21337 from keithc-ca/typos\n\nFix a few typos",
          "verified_at": "2025-03-12T13:23:09Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0c17bb52deb31ca34a9930001672bbd07f151b53",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/0c17bb52deb31ca34a9930001672bbd07f151b53",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0c17bb52deb31ca34a9930001672bbd07f151b53/comments",
      "author": {
        "login": "r30shah",
        "id": 22353051,
        "node_id": "MDQ6VXNlcjIyMzUzMDUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22353051?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/r30shah",
        "html_url": "https://github.com/r30shah",
        "followers_url": "https://api.github.com/users/r30shah/followers",
        "following_url": "https://api.github.com/users/r30shah/following{/other_user}",
        "gists_url": "https://api.github.com/users/r30shah/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/r30shah/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/r30shah/subscriptions",
        "organizations_url": "https://api.github.com/users/r30shah/orgs",
        "repos_url": "https://api.github.com/users/r30shah/repos",
        "events_url": "https://api.github.com/users/r30shah/events{/privacy}",
        "received_events_url": "https://api.github.com/users/r30shah/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/5eb8d0f4fafbba4381f0ff29a49166deda38f15c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/5eb8d0f4fafbba4381f0ff29a49166deda38f15c"
        },
        {
          "sha": "f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4"
        }
      ]
    },
    {
      "sha": "33767c224086bcd72d02c5529fe56a00bea9413d",
      "node_id": "C_kwDOBgtdddoAKDMzNzY3YzIyNDA4NmJjZDcyZDAyYzU1MjlmZTU2YTAwYmVhOTQxM2Q",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T13:18:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T13:18:56Z"
        },
        "message": "Merge pull request #20301 from thallium/threaddump\n\nAdd JFR ThreadDump support",
        "tree": {
          "sha": "5525baf27758d855ab3244112c753d83fe0bad6c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5525baf27758d855ab3244112c753d83fe0bad6c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/33767c224086bcd72d02c5529fe56a00bea9413d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0YnACRC1aQ7uu5UhlAAAvuIQAEM7p74YTFZurXFOponDX7PL\nT4XUpqXQPFcRLOTyphMr+mplLTaNED3CqZWTvsdloDrwo5K9vidb6EWMujOVZ1Nj\nu9/EhuBB+Ns4JfCKhMAPm+WpKCfTGEuHv/aovVvQc2zZgeVq21vEMwaXSbxD8iQv\n5rkj9l1GxfNzuPxXKGdKibxsbxpKPjej+0ASPekwKo601MCiQaA1cCwrKVlGbYIs\njh/DvZXT8gWZ/5OexCucs+T9UGrjFoDb5egpZOlnlYk6zId7FmhMD644z09iOf90\njDZ9E+U5QoX3sNiu/Qaat6elHxEtv3LrXVI5Ur06TpLT94X86gfgEwo770mus+b0\nNtrn5xvTF7JV/3/+tQ7bSObEKnogim89bhEofKv3va7wxEsIIlVevnSWJOqP/JkO\nSu08QAuHuUMnQcTA2RBi16y/UNBeyG4jVd+vNW8bN2k9tkYIjjD4Y5H5MacSnwiF\ncL+fbNB7V40IlNB4Y3ss5kRA2ZPAv0srKSDAx1HUv+1qPZeDacLBnD1/frIup9FT\nnU6kN6aL9RL5ghHyP5zVpAomi4IEvoAgwsVydy2sKo5pgywDpJvVsXgSc5RM3Vux\n57Ecjh3O90EEkfoOZT8xMGxLrpJn0DdVbyNh5ndlNJ1V4aixh8bTkJTRKhzV4Hqd\nTFoDqrwwYmVRUBVwiCNw\n=36QX\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5525baf27758d855ab3244112c753d83fe0bad6c\nparent 0c17bb52deb31ca34a9930001672bbd07f151b53\nparent 095c7e6ef471a509a3e45d3f8a100aab304ef1ba\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741785536 -0400\ncommitter GitHub <noreply@github.com> 1741785536 -0400\n\nMerge pull request #20301 from thallium/threaddump\n\nAdd JFR ThreadDump support",
          "verified_at": "2025-03-12T13:23:58Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/33767c224086bcd72d02c5529fe56a00bea9413d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/33767c224086bcd72d02c5529fe56a00bea9413d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/33767c224086bcd72d02c5529fe56a00bea9413d/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0c17bb52deb31ca34a9930001672bbd07f151b53",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0c17bb52deb31ca34a9930001672bbd07f151b53",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/0c17bb52deb31ca34a9930001672bbd07f151b53"
        },
        {
          "sha": "095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/095c7e6ef471a509a3e45d3f8a100aab304ef1ba",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/095c7e6ef471a509a3e45d3f8a100aab304ef1ba"
        }
      ]
    },
    {
      "sha": "9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
      "node_id": "C_kwDOBgtdddoAKDk3MTJhMzUwNDVkYWRjMzU5M2ZjZGJlN2NmOGVlYWZiY2YxMDMwOGM",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "amicic@ca.ibm.com",
          "date": "2025-03-12T15:40:44Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T15:40:44Z"
        },
        "message": "Merge pull request #21327 from dmitripivkine/master\n\nKill MM_SparseVirtualMemory at shutdown",
        "tree": {
          "sha": "5f3d68164ab36f43221c6220801c7a1b75287388",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5f3d68164ab36f43221c6220801c7a1b75287388"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0ar8CRC1aQ7uu5UhlAAA6d4QAC06fiW9vgiCslrK/R5JMg5a\n7TAKg85fCAg3yG4TxgeoD0cfm/TPoy6i5eWEjZRtm81Ty9V7qtbFq37YgXO3KzAk\nziPcomeD/dr5lt2fhsQENhySZKGRUKOpiiR3QkyB7GxuIS9VunMC/6pdRNz7+35L\nPKmw4ALYJKaSltWmMQT+uiPpsUzXwJsDFcxMBaOdEvjFDVzT7yLTs2o/ns8pJQNN\nPKY5OU4O/UafBcGx4+GlKm/6fRmrZiJj40o+klDu46emL/a3zS3bzw1/jaNFgJjE\nFbizqCHjya8Z41p8Nfl34TIUzbflHIOKQT7FkYB0cQMqCCdMO2ZxdRh3MUm9M0Es\n0UQAhr747OyzQXa3EY/pRaxMEOghd5itkkD9W5WQPc6FQDzgINIP+cWUMQV5YEuN\n/ItILGPbgG4z9EXPjFuYDBqXRPM6X1z/bxjAfA2ohA7QtMwNzUsOMbUk8IsyflXD\ngAwhso8nu1DhIH9Td4RsXGrMZ7CdHnwcri+RjS07CmEaZOd3vAnizl9K1u4uMuN+\nHejcp8j64pyzhIGG0DdTiWjjDg/mUqfL2rvLYaTrXUDRlSJZ7MOpmvYNkEPBL0E9\nZKeAGo08xiVcDv2Da7i2fs/Khzj6TS6FgHPTkcNm1SLHOn8XoM48Pj1gFCVYp4d7\nw90rULW5kS02TmIOw9++\n=m0H5\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5f3d68164ab36f43221c6220801c7a1b75287388\nparent 33767c224086bcd72d02c5529fe56a00bea9413d\nparent 4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb\nauthor Aleksandar Micic <amicic@ca.ibm.com> 1741794044 -0400\ncommitter GitHub <noreply@github.com> 1741794044 -0400\n\nMerge pull request #21327 from dmitripivkine/master\n\nKill MM_SparseVirtualMemory at shutdown",
          "verified_at": "2025-03-12T15:45:46Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9712a35045dadc3593fcdbe7cf8eeafbcf10308c/comments",
      "author": {
        "login": "amicic",
        "id": 18264984,
        "node_id": "MDQ6VXNlcjE4MjY0OTg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18264984?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amicic",
        "html_url": "https://github.com/amicic",
        "followers_url": "https://api.github.com/users/amicic/followers",
        "following_url": "https://api.github.com/users/amicic/following{/other_user}",
        "gists_url": "https://api.github.com/users/amicic/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/amicic/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/amicic/subscriptions",
        "organizations_url": "https://api.github.com/users/amicic/orgs",
        "repos_url": "https://api.github.com/users/amicic/repos",
        "events_url": "https://api.github.com/users/amicic/events{/privacy}",
        "received_events_url": "https://api.github.com/users/amicic/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "33767c224086bcd72d02c5529fe56a00bea9413d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/33767c224086bcd72d02c5529fe56a00bea9413d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/33767c224086bcd72d02c5529fe56a00bea9413d"
        },
        {
          "sha": "4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb"
        }
      ]
    },
    {
      "sha": "be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
      "node_id": "C_kwDOBgtdddoAKGJlNDA4OGYwYTNiZDkwMGQ4ZTE3NGM2OTQ3M2ZmNWI3ZmM5ZjExMDk",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T17:02:14Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T17:02:14Z"
        },
        "message": "Merge pull request #21289 from thallium/image-reader\n\nInitialize ImageReader during boot",
        "tree": {
          "sha": "677b6b12b440bbfb2b47029407e9f0f98466bbad",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/677b6b12b440bbfb2b47029407e9f0f98466bbad"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0b4WCRC1aQ7uu5UhlAAAed0QAJZSg9DkWHnTdvdjkjUomMJw\n/czAiGcTr5mwm4JXw1XayU7uKaP2eka956kYv3iwQDQrehzY6fT3oOSMkAMJto5j\nchRMS0Hfm+0dAfhnIPgwrVn90Qck/TS+n8ltJBYObgOpzMVHoEa4weDB5Ll8X4u7\nkFOjZvIx7FHen09TPJ+39uiarnzXZk0QyOTWKMehBf8kLnAAD/BmK2K2G6eOg8fw\nJDGabN5uiAs6ANKx+gUA8RIFtfp8dcYj/cgdlw6OTUjWTUmHQCFXm3CMFd7hgLRx\nutoFS+ZBAhQy7xyNnpOookomR2hRD6DkBvjwpl3llsVcJftwazKePM6JdUxmpvYY\nAk5TtsnfVoSfSJJa9q7wEpSEWmp348CZaQBTaxF2gql3l07GazJWvTQh4OzOtakf\nmHLm+rBSW2x+fCG+8o/8A99R4GIEkeSwY2BBi5D4YW8mo8Qkn5pJdBAMKHkPOwIJ\nuIdzTiVhkMe3qrWuEodzC5NSN/K2XKhfeaZ83ZvJLdUbCeSXUYryJ7DuwtpKggKt\nP7qL/iM6mMpPxfUc0N5+xXs0OcCqP4NrG0uaf/GqbQ6isYiemB+waR6uHxh4PeF9\n4ug2jD62dHQpcfFV6ixBMWoejR/9wUg7P9wsT/0rUvwtFZs+OB1iCwrNTt5UXJ/s\nS7WrxAY6ZMEU64Cb8/K9\n=8CaF\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 677b6b12b440bbfb2b47029407e9f0f98466bbad\nparent 9712a35045dadc3593fcdbe7cf8eeafbcf10308c\nparent ffdf96d6a5ca35af07ce8c69a02dd737b807f1de\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1741798934 -0400\ncommitter GitHub <noreply@github.com> 1741798934 -0400\n\nMerge pull request #21289 from thallium/image-reader\n\nInitialize ImageReader during boot",
          "verified_at": "2025-03-12T17:07:17Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be4088f0a3bd900d8e174c69473ff5b7fc9f1109/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9712a35045dadc3593fcdbe7cf8eeafbcf10308c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9712a35045dadc3593fcdbe7cf8eeafbcf10308c"
        },
        {
          "sha": "ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ffdf96d6a5ca35af07ce8c69a02dd737b807f1de"
        }
      ]
    },
    {
      "sha": "00a6c450285770d5a955b392610b0aba20290819",
      "node_id": "C_kwDOBgtdddoAKDAwYTZjNDUwMjg1NzcwZDVhOTU1YjM5MjYxMGIwYWJhMjAyOTA4MTk",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-01-15T16:16:36Z"
        },
        "committer": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-12T18:39:40Z"
        },
        "message": "Use new classfile API to work with bytecode for Java 24+\n\nUpdate BytecodeGenerator:\n* correct max locals in subOffset(long)\n\nEncapsulate uses of objectweb.asm within ClassScanner.\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
        "tree": {
          "sha": "8d19640ea167fff98da1d26893f7c8e504da64ee",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/8d19640ea167fff98da1d26893f7c8e504da64ee"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/00a6c450285770d5a955b392610b0aba20290819",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.79\n\niQJGBAABCAAwBYJn0dTsFiEEBqD+SRTaKJJnWdCNNcpWYI2Shg0SHGtlaXRoY0Bj\nYS5pYm0uY29tAAoJEDXKVmCNkoYNE8gP/3NBUWA0z8+EO4ttsO+tq0eD5mTrJIp0\nKcdb2CdRuz+QMM8HTFzz/jV+ESLQJPaLFkDMuNq3YzfaYGCbtFkkNL5bV7i5aLga\nU8Kx2C77IyG/UYM9eLtUUByIf0aMOX3SvTOYsgnGc3tY9Ka99cIk4u97gZbD8Ys4\nHWHZhcBml7CsPzfGJvdrTTiQ1M+C3TjY44ptTX1kuOj+V5k42qMmSfOndNN2EKGY\nH4j3CKSOJGxEdTRs+zth3OXDFWkHAdULXDXqwDsVjys1s6kVe12hQD20k2sMzPik\nM3H6I+eztNefdqsdApG75u5f7IueDVc7VeYLFd2ZpdpZaH97EFKZFQsPzchp/tyg\nbyw9AXRAqNCmgrgmWyaOGSsh5uaWszywlcK3f9sE1t7UHgylZNQ5VA8QTV3zhoWY\nDQtwA67eEuNvHX0ES9+LLR4INctY/t9f4dcA3G69x+ReRd2tTZXxWe42uOWRCLrG\n3X9CqZyNiK7lW6hKqGlIXoq6cwSxEyYrhr3o7dYN1UMQ3/eVFg1hQgdQVVBGLtJq\no+49w8psnFz7eZnByEvSBDMjtwR3aZfTBlUzXqJE5SYHwLtG2vvfoIfBvxehymzV\nLMyAqT9SJoGV/+dFmNGuGi5Wh/dCgZ18mqvuJFg2mRopTu8z5rqZZB4XK+Qzqnb1\nsBDlT6IYNp4k\n=yR5+\n-----END PGP SIGNATURE-----",
          "payload": "tree 8d19640ea167fff98da1d26893f7c8e504da64ee\nparent be4088f0a3bd900d8e174c69473ff5b7fc9f1109\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1736957796 -0500\ncommitter Keith W. Campbell <keithc@ca.ibm.com> 1741804780 -0400\n\nUse new classfile API to work with bytecode for Java 24+\n\nUpdate BytecodeGenerator:\n* correct max locals in subOffset(long)\n\nEncapsulate uses of objectweb.asm within ClassScanner.\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>",
          "verified_at": "2025-03-12T18:45:09Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00a6c450285770d5a955b392610b0aba20290819",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/00a6c450285770d5a955b392610b0aba20290819",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00a6c450285770d5a955b392610b0aba20290819/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/be4088f0a3bd900d8e174c69473ff5b7fc9f1109"
        }
      ]
    },
    {
      "sha": "17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
      "node_id": "C_kwDOBgtdddoAKDE3ZTVmN2VlNDhjNmUxYjU3NzJkM2IyMzk3NzI0M2VhMjYxZmMxYmM",
      "commit": {
        "author": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-03-10T17:13:37Z"
        },
        "committer": {
          "name": "Abdulrahman Alattas",
          "email": "rmnattas@gmail.com",
          "date": "2025-03-12T19:22:15Z"
        },
        "message": "Use index for boundary check and offset for dest in str.inflate\n\nAlso consolidate OffHeap and non-OffHeap paths.",
        "tree": {
          "sha": "fa1123fa414896ea8c5228ffd3386e4847bb1c9e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/fa1123fa414896ea8c5228ffd3386e4847bb1c9e"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc/comments",
      "author": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "rmnattas",
        "id": 12851435,
        "node_id": "MDQ6VXNlcjEyODUxNDM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/12851435?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rmnattas",
        "html_url": "https://github.com/rmnattas",
        "followers_url": "https://api.github.com/users/rmnattas/followers",
        "following_url": "https://api.github.com/users/rmnattas/following{/other_user}",
        "gists_url": "https://api.github.com/users/rmnattas/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rmnattas/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rmnattas/subscriptions",
        "organizations_url": "https://api.github.com/users/rmnattas/orgs",
        "repos_url": "https://api.github.com/users/rmnattas/repos",
        "events_url": "https://api.github.com/users/rmnattas/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rmnattas/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e2aa6ec8bd6a1ec499519bc03bc959c93203cd29"
        }
      ]
    },
    {
      "sha": "f5a031fefb2856f8c249ebf4392a807e353e0ad1",
      "node_id": "C_kwDOBgtdddoAKGY1YTAzMWZlZmIyODU2ZjhjMjQ5ZWJmNDM5MmE4MDdlMzUzZTBhZDE",
      "commit": {
        "author": {
          "name": "Tobi Ajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-12T14:36:14Z"
        },
        "committer": {
          "name": "Tobi Ajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-12T22:00:22Z"
        },
        "message": "Fix owner for JFR monitor enter\n\n- Fix Owner for JFR monitor enter\n- Add tests to validate monitor enter events\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "abf5c58b4a456f7c5fcec249d7492bc7925c0fdf",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/abf5c58b4a456f7c5fcec249d7492bc7925c0fdf"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f5a031fefb2856f8c249ebf4392a807e353e0ad1",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5a031fefb2856f8c249ebf4392a807e353e0ad1",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f5a031fefb2856f8c249ebf4392a807e353e0ad1",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5a031fefb2856f8c249ebf4392a807e353e0ad1/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "33767c224086bcd72d02c5529fe56a00bea9413d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/33767c224086bcd72d02c5529fe56a00bea9413d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/33767c224086bcd72d02c5529fe56a00bea9413d"
        }
      ]
    },
    {
      "sha": "2b1ec1c1d85a5856b920ad59490b83220c18df88",
      "node_id": "C_kwDOBgtdddoAKDJiMWVjMWMxZDg1YTU4NTZiOTIwYWQ1OTQ5MGI4MzIyMGMxOGRmODg",
      "commit": {
        "author": {
          "name": "Henry Zongaro",
          "email": "zongaro@ca.ibm.com",
          "date": "2025-03-12T23:13:46Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-12T23:13:46Z"
        },
        "message": "Merge pull request #21332 from BradleyWood/checkColdBlock\n\nx86: call cg->getCurrentBlock() instead of node->getBlock()",
        "tree": {
          "sha": "d2805792c8479f9ea0cb8b60acbcaeecf36f612c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d2805792c8479f9ea0cb8b60acbcaeecf36f612c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/2b1ec1c1d85a5856b920ad59490b83220c18df88",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0hUqCRC1aQ7uu5UhlAAAfrYQAE+EM53tXubmsj/fm81H38TL\nM6EQdBjWJRv+coaJGAUHuBTngpUv5hZf3kiz8PIXBptK9+smWg10EAeoGyagXWMX\ncEHVBGFWZ0jCoxtLe4DhxmKch8ZVuCKPoz18MNH2dHr6ervzbNj7ILIsNvrV/mhd\nw3ZrM4+vtnM/YasEmqUSagpYNVWinme5K4hbeKyem40p6rPwn1VgD+OBSXjR5y87\nH/zNfrnuwGjMcBhMlpSporPkD+b1Dnur6wvYSNdYynusvL74TEXW1lfzE0PRFZCl\n9s6eCchVtWIDUmXB9qkMYv1kA7FTnD2ZM03HWqRlvtcWqUiFFNnRqpso4z7rqULr\nU4y7kgRxRSlagAwVrpSxk1rvdLatASEx2kwsLHXbDi9e68OFbSLsEKGxYmtgPZtQ\nWZELH271xy1BFnrpeLiKPdxsBJQ7cfzc3ZfbC7MhjzWatv+KsGZXQQ9pcZkV+hR8\nBHlo1Pbvpq1bO7B9aPSHho8NlouWWpdM0zeit9lEgp4PpxiAyyqwTWlRCWuVVEz7\n4XtuqqH7ZKrBq+Ah6WgfjvH0UPt5VyWztBsB5rqYd0d98FqXStXE7sOrtnlvV9zb\njV4PwJVY61eCoHkJRbXHCraswkbDN9Iz8XUw4jII8E3w+XTABgW/B0yLJQri2Wxy\nhF61cMCVLl+34FR19AZO\n=kt0i\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d2805792c8479f9ea0cb8b60acbcaeecf36f612c\nparent be4088f0a3bd900d8e174c69473ff5b7fc9f1109\nparent 1c420ec20e03a3dbf51928438448ba593e7f416b\nauthor Henry Zongaro <zongaro@ca.ibm.com> 1741821226 -0400\ncommitter GitHub <noreply@github.com> 1741821226 -0400\n\nMerge pull request #21332 from BradleyWood/checkColdBlock\n\nx86: call cg->getCurrentBlock() instead of node->getBlock()",
          "verified_at": "2025-03-12T23:18:48Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b1ec1c1d85a5856b920ad59490b83220c18df88",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b1ec1c1d85a5856b920ad59490b83220c18df88",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b1ec1c1d85a5856b920ad59490b83220c18df88/comments",
      "author": {
        "login": "hzongaro",
        "id": 19479475,
        "node_id": "MDQ6VXNlcjE5NDc5NDc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19479475?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hzongaro",
        "html_url": "https://github.com/hzongaro",
        "followers_url": "https://api.github.com/users/hzongaro/followers",
        "following_url": "https://api.github.com/users/hzongaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/hzongaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hzongaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hzongaro/subscriptions",
        "organizations_url": "https://api.github.com/users/hzongaro/orgs",
        "repos_url": "https://api.github.com/users/hzongaro/repos",
        "events_url": "https://api.github.com/users/hzongaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hzongaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be4088f0a3bd900d8e174c69473ff5b7fc9f1109",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/be4088f0a3bd900d8e174c69473ff5b7fc9f1109"
        },
        {
          "sha": "1c420ec20e03a3dbf51928438448ba593e7f416b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/1c420ec20e03a3dbf51928438448ba593e7f416b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/1c420ec20e03a3dbf51928438448ba593e7f416b"
        }
      ]
    },
    {
      "sha": "be0196b37870640bbe8ab245d17ff3082156efb5",
      "node_id": "C_kwDOBgtdddoAKGJlMDE5NmIzNzg3MDY0MGJiZThhYjI0NWQxN2ZmMzA4MjE1NmVmYjU",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-13T12:03:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T12:03:04Z"
        },
        "message": "Merge pull request #21307 from amicic/offheap_failed_alloc\n\nreturn NULL object spine if offheap full",
        "tree": {
          "sha": "458ec73ca1ba51234c2dad3f3ee9b53d6e7d77d9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/458ec73ca1ba51234c2dad3f3ee9b53d6e7d77d9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/be0196b37870640bbe8ab245d17ff3082156efb5",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0sl4CRC1aQ7uu5UhlAAA6TIQABJldxUVWuGr7wSblSJzNw50\n5hjSm1dBNWotWaM04hKnymJa6hDdCnpC+C2CTJUlY1rwheCojrdjlxIyV5Bw/0wP\nfY+92xerUcUOihanG9MLbwM+aLlBlDVlTTzx/xJEewl9iwWhcaoUrelx5AWHwf3M\nO3H9hSNqy3sf/Av/yWEvYGvLvbObbZu3dna7VeAmsjuDxrlhnmWeWptorlaoufhH\npYhzC8SuLc9aN+eLa7vDmjhLUGKLhvMd8/JJy1aGlckhPziDgwEJXbPa7UyNAr4R\ndfDWjCWyiNApWN158En3fQQqDZ6DsV+4UCCP8aPqGP0Z/Oak4CG0m098JIH3NVjp\n5wWEGiTv7tcVrlCAzPBx6QO2cDyUliRPL1QOtt8GmqWS1lvKeAcFq5iEgM1Ic5Jm\nw9/2FOZht+1y58+jAOopSm3xj1zvlgj8dbCVtF6o1h8IB4YIFMa6aHabsTHZudIt\nEx7rLFZnLSbbVBIdLpHn+E8w6Hr+q8UAz82aF1ovR63mbQHP6qFXjFmf/wkauFEr\n9N2FM4rox7Q3V3VWXUNIgciq7PyWejrgEMrcBRjZ0kH7y3CZxHsj/JQe3kvYRk3V\nq84vgw/fyF2ES9Wcg2IoTt/COY9cDkraWakvJNGPj6WFLGyuzCaCwcBX6+FPqgV/\nhAmVTUr1XFU5WPTudITu\n=L9nS\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 458ec73ca1ba51234c2dad3f3ee9b53d6e7d77d9\nparent 2b1ec1c1d85a5856b920ad59490b83220c18df88\nparent fd112fb389076fa7740db9b2984d6df12c9e0556\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1741867384 -0400\ncommitter GitHub <noreply@github.com> 1741867384 -0400\n\nMerge pull request #21307 from amicic/offheap_failed_alloc\n\nreturn NULL object spine if offheap full",
          "verified_at": "2025-03-13T12:08:09Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be0196b37870640bbe8ab245d17ff3082156efb5",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/be0196b37870640bbe8ab245d17ff3082156efb5",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be0196b37870640bbe8ab245d17ff3082156efb5/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2b1ec1c1d85a5856b920ad59490b83220c18df88",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b1ec1c1d85a5856b920ad59490b83220c18df88",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b1ec1c1d85a5856b920ad59490b83220c18df88"
        },
        {
          "sha": "fd112fb389076fa7740db9b2984d6df12c9e0556",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fd112fb389076fa7740db9b2984d6df12c9e0556",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fd112fb389076fa7740db9b2984d6df12c9e0556"
        }
      ]
    },
    {
      "sha": "592b97d65e62aa487120fe5c54f87ee4cd66765b",
      "node_id": "C_kwDOBgtdddoAKDU5MmI5N2Q2NWU2MmFhNDg3MTIwZmU1YzU0Zjg3ZWU0Y2Q2Njc2NWI",
      "commit": {
        "author": {
          "name": "Henry Zongaro",
          "email": "zongaro@ca.ibm.com",
          "date": "2025-03-13T12:18:44Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T12:18:44Z"
        },
        "message": "Merge pull request #21322 from rmnattas/oh-gvp\n\nUse index for boundary check and offset for dest in str.inflate OffHeap",
        "tree": {
          "sha": "b270422e35d31961890672c1bead2800c14b1ad5",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b270422e35d31961890672c1bead2800c14b1ad5"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/592b97d65e62aa487120fe5c54f87ee4cd66765b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0s0lCRC1aQ7uu5UhlAAAT0gQAKeXbC104RPgaqNXPvgrixo6\nhqFrBBNNT6N7pNPCU+g73JFwNGvLcLLojtt2adVIyb9f7jRrXlhNh7j6mAw6yYO+\nFdkaBZW+qe1NvZnM1stJzVPSD23NwWhoaMYIuThPW0gT0mBpVzftoq6o+eZcZNAu\njw4Q12FBkpUd+g8m9zoPD30KnLKeEyn2pl+PALFs87FdHZi5RWjFe+iGhE3UmJ22\nFX+AVMkM1e7N1QDGgCZqvml/vClyeF7NC0fwJw5M+N/j0RT9H232Y9fTDBkubATo\nn2pBlQRwPY5c2WG8+TUvrTyw7zHIgB6VlF8E1z117xvkK3O2qAJXKBxbClXjGA1N\nOaWf36oUIIJIH1DZM7iqLIip6CPkA0ZyEPQNQXBh3o2SUo69ymUA10FEDwDbMofF\nq9bScF4R4ArpXgRI660jttUmnZHRRjmSuVBA8+mbxbP/cedGWhPwnzPd1/mQxARH\n+ngQIRKmrJXWJ1pWhDlPFacbIlF+9/C8ySpv2/6kcQO7NAaJxW+3fg3fZ+qewjww\nfBd+84j3adgEZPeBYUUW2npq9th6o3nTjn/svSDeAWnDoM9uo5oLO3iijyCK2IrO\nD1I+zOqXqRJYaNGNwmjjLwXzKh5YmhYx4Hz9VJX6KsMKBQeecBlBDZ8k10o08nkH\nW6jvOnyQ/xNRhBj1V3AL\n=eEzZ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b270422e35d31961890672c1bead2800c14b1ad5\nparent be0196b37870640bbe8ab245d17ff3082156efb5\nparent 17e5f7ee48c6e1b5772d3b23977243ea261fc1bc\nauthor Henry Zongaro <zongaro@ca.ibm.com> 1741868324 -0400\ncommitter GitHub <noreply@github.com> 1741868324 -0400\n\nMerge pull request #21322 from rmnattas/oh-gvp\n\nUse index for boundary check and offset for dest in str.inflate OffHeap",
          "verified_at": "2025-03-13T12:23:48Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/592b97d65e62aa487120fe5c54f87ee4cd66765b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/592b97d65e62aa487120fe5c54f87ee4cd66765b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/592b97d65e62aa487120fe5c54f87ee4cd66765b/comments",
      "author": {
        "login": "hzongaro",
        "id": 19479475,
        "node_id": "MDQ6VXNlcjE5NDc5NDc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19479475?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hzongaro",
        "html_url": "https://github.com/hzongaro",
        "followers_url": "https://api.github.com/users/hzongaro/followers",
        "following_url": "https://api.github.com/users/hzongaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/hzongaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hzongaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hzongaro/subscriptions",
        "organizations_url": "https://api.github.com/users/hzongaro/orgs",
        "repos_url": "https://api.github.com/users/hzongaro/repos",
        "events_url": "https://api.github.com/users/hzongaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hzongaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "be0196b37870640bbe8ab245d17ff3082156efb5",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/be0196b37870640bbe8ab245d17ff3082156efb5",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/be0196b37870640bbe8ab245d17ff3082156efb5"
        },
        {
          "sha": "17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/17e5f7ee48c6e1b5772d3b23977243ea261fc1bc"
        }
      ]
    },
    {
      "sha": "330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
      "node_id": "C_kwDOBgtdddoAKDMzMDk1OWNmYTEzYjliMWZkNmRhNGExMDJmZTJlMGNkNDczZDZjMDc",
      "commit": {
        "author": {
          "name": "Henry Zongaro",
          "email": "zongaro@ca.ibm.com",
          "date": "2025-03-13T12:46:49Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T12:46:49Z"
        },
        "message": "Merge pull request #19202 from Spencer-Comin/compress-expand-opcodes\n\nAccelerate Integer/Long compress/expand methods",
        "tree": {
          "sha": "57c069bf91821e9dc9db98e596e5a5906f736cb0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/57c069bf91821e9dc9db98e596e5a5906f736cb0"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0tO5CRC1aQ7uu5UhlAAAIOoQAImsxK94AlGoXRFfA6QVmafh\nP9DyjcgLoCSg7+5rs80fHQFRAooPmbmS9qe4HaSctKsQKWkD4rtd5lLVq+Ts7exZ\nOuL3CTiS6O/4dKAjcNeM7tCmGu8vtMn1FLTE2PV/2XQWDbO9FZuHy0ubIy1jWLGN\n6YBmjXI7P85edt5Rrpo+RNsp6Lw4BKgb5bOTeXulEoF1jRIOc0gvecpk2vTGfXoE\n5PHCbYVjhc+8GlgYkzXS8CmcaGVqnvRqgkCQ50gpEhJxSBMQsIVU+vkdUA7a2Omd\ntHIpvQh9lEWWsFjlHlShZx3O3E+A3NV6ZO1IVPP4qm1uxajP4jows2C+gPYo6w6E\n44A8IgMw5DhVQRjNunYFNSy3Bxdo5+tOR1CMqv8fgRq5MFji3nrLnSzl61DaOdKk\nrO+oYNKQEpcywb0XH/Ds2CyHWmIcFZcPNwLmc9+431HuYylfyjXqAa5jV6a9q4ea\nn6u2duzN2iaYdIV0ks7eOaExqx4W9Pc4pRIn7noZGxRP7fqxsfHBnxzs4xeEBl2A\nll7CBC8wkYkeIKllYzRfbj5qlixZO+GnR3083zdDPa1U3CQ8+ibZUr4LrHRlGuRx\nHoFPYQYDAzOh6TeEIG3dt3wXAe2KFNZYZf9s3VGcigkVLEAswvm/tcCbOhTKuGTY\n5BxnyALZUk3i51Epew0h\n=nCey\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 57c069bf91821e9dc9db98e596e5a5906f736cb0\nparent 592b97d65e62aa487120fe5c54f87ee4cd66765b\nparent 96b1831fcdd85f4d2be9263caaabe4974b14dea0\nauthor Henry Zongaro <zongaro@ca.ibm.com> 1741870009 -0400\ncommitter GitHub <noreply@github.com> 1741870009 -0400\n\nMerge pull request #19202 from Spencer-Comin/compress-expand-opcodes\n\nAccelerate Integer/Long compress/expand methods",
          "verified_at": "2025-03-13T12:51:54Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07/comments",
      "author": {
        "login": "hzongaro",
        "id": 19479475,
        "node_id": "MDQ6VXNlcjE5NDc5NDc1",
        "avatar_url": "https://avatars.githubusercontent.com/u/19479475?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hzongaro",
        "html_url": "https://github.com/hzongaro",
        "followers_url": "https://api.github.com/users/hzongaro/followers",
        "following_url": "https://api.github.com/users/hzongaro/following{/other_user}",
        "gists_url": "https://api.github.com/users/hzongaro/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hzongaro/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hzongaro/subscriptions",
        "organizations_url": "https://api.github.com/users/hzongaro/orgs",
        "repos_url": "https://api.github.com/users/hzongaro/repos",
        "events_url": "https://api.github.com/users/hzongaro/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hzongaro/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "592b97d65e62aa487120fe5c54f87ee4cd66765b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/592b97d65e62aa487120fe5c54f87ee4cd66765b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/592b97d65e62aa487120fe5c54f87ee4cd66765b"
        },
        {
          "sha": "96b1831fcdd85f4d2be9263caaabe4974b14dea0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/96b1831fcdd85f4d2be9263caaabe4974b14dea0",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/96b1831fcdd85f4d2be9263caaabe4974b14dea0"
        }
      ]
    },
    {
      "sha": "c963071fe4296e09304a563506db1b8c283e159e",
      "node_id": "C_kwDOBgtdddoAKGM5NjMwNzFmZTQyOTZlMDkzMDRhNTYzNTA2ZGIxYjhjMjgzZTE1OWU",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-13T12:52:24Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-13T13:09:09Z"
        },
        "message": "Correctly derive an inflated object monitor\n\nA null object monitor is being passed to detachMonitorInfo, which\nleads to a segfault. In the inflated case, the object monitor is\ncorrectly derived to prevent the segfault.\n\nThis fix helps the LotsOfContendedMonitorEnter test in #20705.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "d0b8952188a3cae160033733303f536666f9a79a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d0b8952188a3cae160033733303f536666f9a79a"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c963071fe4296e09304a563506db1b8c283e159e",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c963071fe4296e09304a563506db1b8c283e159e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c963071fe4296e09304a563506db1b8c283e159e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c963071fe4296e09304a563506db1b8c283e159e/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07"
        }
      ]
    },
    {
      "sha": "a85b6bb330437dd8baf33769e6f82f9181845e49",
      "node_id": "C_kwDOBgtdddoAKGE4NWI2YmIzMzA0MzdkZDhiYWYzMzc2OWU2ZjgyZjkxODE4NDVlNDk",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-13T13:02:19Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-13T13:09:27Z"
        },
        "message": "Correctly handle notify before wait for virtual threads\n\nIf a notify is issued before wait, then there waitingContinuations\nwill be NULL. In this case, the notify steps should not be executed\nsince there are no virtual threads waiting, and\nwaitingContinuations->vthread will be NULL.\n\nAddresses point 3 in the below Github comment:\nhttps://github.com/eclipse-openj9/openj9/issues/20369#issuecomment-2715488932.\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "d814a5a0cea695f01f0424ed02e25a0a1f4eb862",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d814a5a0cea695f01f0424ed02e25a0a1f4eb862"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/a85b6bb330437dd8baf33769e6f82f9181845e49",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a85b6bb330437dd8baf33769e6f82f9181845e49",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/a85b6bb330437dd8baf33769e6f82f9181845e49",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a85b6bb330437dd8baf33769e6f82f9181845e49/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c963071fe4296e09304a563506db1b8c283e159e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c963071fe4296e09304a563506db1b8c283e159e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c963071fe4296e09304a563506db1b8c283e159e"
        }
      ]
    },
    {
      "sha": "cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
      "node_id": "C_kwDOBgtdddoAKGNiZTJiOGNkYTc0MDRjYTE5NDJhYTBkNjNmMDcwYjg5ZWZlNzA2N2E",
      "commit": {
        "author": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-02-18T18:45:23Z"
        },
        "committer": {
          "name": "lhu",
          "email": "linhu@ca.ibm.com",
          "date": "2025-03-13T14:20:16Z"
        },
        "message": "GC update for supporting yield of pinned VirtualThread(JEP491)\n\nIn order to supporting yield of pinned VirtualThread\na couple of heap references have been added in chain of continuation\nstructures, GC need to maintain(scan/update) these references.\n\n1, new ContunuationSlotIterator to iterate all of the references\n list of monitorRecord\n list of jniMonitorRecord\n vthread reference\nContunuationSlotIterator also contains state and related vmThread\nstate (can be state_monitor_records or state_vthread) for assert check\nin doContinuationSlot() (monitor_records can be non heap reference),\nvmThread is for retrieving related carrier context during rootscanning.\n\n2, two new methods doSlot() and doContinuationSlot() are introduced\ndoSlot() would handle basic processing, which can be shared between\ndoContinuationSlot() and doStackSlot().\ndoContinuationSlot() would have condition check for heap reference and\nalso get ContunuationSlotIterator as a parameter for the extra assert\nchecks.\n\n3, mounted continuations are scanned during rootscan/scanOneThread\nunmounted continuations are scanned during ContinuationNativeSlots\n\n4, for doContinuationSlot in CopyForwardScheme case\nthe reservingContext (numa node related) can be retrieved via\nContunuationSlotIterator (carrier thread context) for root scanning\nphase, and retrieved via the region of related Continuation Object\nfor heap scanning phase.\n\nSigned-off-by: lhu <linhu@ca.ibm.com>",
        "tree": {
          "sha": "6d74ccb72f9062790f21256affd4e3af64be8dec",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6d74ccb72f9062790f21256affd4e3af64be8dec"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbe2b8cda7404ca1942aa0d63f070b89efe7067a/comments",
      "author": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "LinHu2016",
        "id": 18031118,
        "node_id": "MDQ6VXNlcjE4MDMxMTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18031118?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LinHu2016",
        "html_url": "https://github.com/LinHu2016",
        "followers_url": "https://api.github.com/users/LinHu2016/followers",
        "following_url": "https://api.github.com/users/LinHu2016/following{/other_user}",
        "gists_url": "https://api.github.com/users/LinHu2016/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/LinHu2016/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/LinHu2016/subscriptions",
        "organizations_url": "https://api.github.com/users/LinHu2016/orgs",
        "repos_url": "https://api.github.com/users/LinHu2016/repos",
        "events_url": "https://api.github.com/users/LinHu2016/events{/privacy}",
        "received_events_url": "https://api.github.com/users/LinHu2016/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07"
        }
      ]
    },
    {
      "sha": "72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
      "node_id": "C_kwDOBgtdddoAKDcyYjE2OWYzYzg0YmE0ZGRmZDlkNWJiZjAwYTkwYzA4NWNhMjJiZjY",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-13T14:29:08Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T14:29:08Z"
        },
        "message": "Merge pull request #21341 from keithc-ca/classfile\n\nUse new classfile API to work with bytecode for Java 24+",
        "tree": {
          "sha": "39292f177c08ff5a78cfe2fa06d3792ca17b38f0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/39292f177c08ff5a78cfe2fa06d3792ca17b38f0"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0uu0CRC1aQ7uu5UhlAAAf4YQAICioCQ/G0LM6nOW4Ry2EgPg\ngh8D3EFQW8IzBDLJng6kamZVby4S13N0dCPgkOFyz+mZhSl/LqVX1I/MIbP3GeAX\nPfiq+Cd2JIJEnl8/QV4CUMJa0msfKt7luPIQ29dUH7qPocE4j2GRZo0m8jv1NMk8\naBd7VGHDLnw4qBaRcn+bd0zcSaQNA9IXquDZYgV2t6aPLPsnK/EYv1tQ+fl5Duez\nSdUtNDahkR8o+oG9p3p+n2uw3WDEPchnsc1QkMredlctSqICrrKQLZy1UXYPHXPr\n6gte+v/FEaDmI2gWnmNql70R82UE/z40Dd4OFx8BBfTTvXontIJ/ZKsuR6HhcAUF\niSIySeyRcso1HTyRSCe72Oy2G0DWsp99scvXPiY8E5L54uUFbwYxGQ4+UqwzGEv1\nRLBH/p9kGCoRJ2V+kpahPDNYKQadFNxCvg/2nV3UA7bJj2gpVaR3TeGJimuv+ia4\nVslb7emdbBCd8C5S0nQHu9vYy3dz6OvQie30AFNIp8WxErOCjUqeQr69Hr3e03i0\nLXVkSacRotEzB+E+Y3yT77RHvhoP72RSs3sYSw7AEMXzt9OlcIN+wuZs9cfW2VSP\nCe6Uzyd7j4sdZ6PRZO9s15PD40XtkKgPJwOJEdG6Eq0uK2WnZ8VW1oyKOwr3J2al\nwETNefcmFqNOmCCLCg10\n=sf2D\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 39292f177c08ff5a78cfe2fa06d3792ca17b38f0\nparent 330959cfa13b9b1fd6da4a102fe2e0cd473d6c07\nparent 00a6c450285770d5a955b392610b0aba20290819\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741876148 -0400\ncommitter GitHub <noreply@github.com> 1741876148 -0400\n\nMerge pull request #21341 from keithc-ca/classfile\n\nUse new classfile API to work with bytecode for Java 24+",
          "verified_at": "2025-03-13T14:34:11Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/330959cfa13b9b1fd6da4a102fe2e0cd473d6c07"
        },
        {
          "sha": "00a6c450285770d5a955b392610b0aba20290819",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/00a6c450285770d5a955b392610b0aba20290819",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/00a6c450285770d5a955b392610b0aba20290819"
        }
      ]
    },
    {
      "sha": "07d2353c2f6b47aace47f4a86f79feec1a871198",
      "node_id": "C_kwDOBgtdddoAKDA3ZDIzNTNjMmY2YjQ3YWFjZTQ3ZjRhODZmNzlmZWVjMWE4NzExOTg",
      "commit": {
        "author": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2024-11-22T17:16:37Z"
        },
        "committer": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2025-03-13T16:42:07Z"
        },
        "message": "Refine Symbol::isVolatile tests\n\nWith the expansion of possible memory ordering semantics from binary\nvolatile or non-volatile to volatile, acquire/release, opaque, and\ntransparent, all tests  whether a symbol is volatile need to be refined\ndepending on the intention of the test, i.e. is it testing if the\nsymbol is strictly volatile, simply opaque, or somewhere in between?\n\nSigned-off-by: Spencer Comin <spencer.comin@ibm.com>",
        "tree": {
          "sha": "ac55a185f3657a47e6ef0e7dd12678da9449188d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/ac55a185f3657a47e6ef0e7dd12678da9449188d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/07d2353c2f6b47aace47f4a86f79feec1a871198",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/07d2353c2f6b47aace47f4a86f79feec1a871198",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/07d2353c2f6b47aace47f4a86f79feec1a871198",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/07d2353c2f6b47aace47f4a86f79feec1a871198/comments",
      "author": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6"
        }
      ]
    },
    {
      "sha": "7a5c47ba219c3dab292b0b464967138f0ef623c9",
      "node_id": "C_kwDOBgtdddoAKDdhNWM0N2JhMjE5YzNkYWIyOTJiMGI0NjQ5NjcxMzhmMGVmNjIzYzk",
      "commit": {
        "author": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2024-11-22T20:18:00Z"
        },
        "committer": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2025-03-13T16:42:07Z"
        },
        "message": "Recognize opaque and acquire/release intrinsics\n\nAdd opaque and acquire/release flavours of get put methods in Unsafe as\nrecognized methods, and generate unsafe shadow symbols with the correct\naccess modes when inlining these methods.\n\nSigned-off-by: Spencer Comin <spencer.comin@ibm.com>",
        "tree": {
          "sha": "87cb27608e4eccb71089d925fcf3d4151d95b090",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/87cb27608e4eccb71089d925fcf3d4151d95b090"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7a5c47ba219c3dab292b0b464967138f0ef623c9",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7a5c47ba219c3dab292b0b464967138f0ef623c9",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7a5c47ba219c3dab292b0b464967138f0ef623c9",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7a5c47ba219c3dab292b0b464967138f0ef623c9/comments",
      "author": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "07d2353c2f6b47aace47f4a86f79feec1a871198",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/07d2353c2f6b47aace47f4a86f79feec1a871198",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/07d2353c2f6b47aace47f4a86f79feec1a871198"
        }
      ]
    },
    {
      "sha": "6254ab0085f26cbcdd08fe0008113669be3fdff1",
      "node_id": "C_kwDOBgtdddoAKDYyNTRhYjAwODVmMjZjYmNkZDA4ZmUwMDA4MTEzNjY5YmUzZmRmZjE",
      "commit": {
        "author": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2024-11-04T20:21:03Z"
        },
        "committer": {
          "name": "Spencer Comin",
          "email": "spencer.comin@ibm.com",
          "date": "2025-03-13T16:42:07Z"
        },
        "message": "Remove Unsafe.putOrdered call duplication\n\nSince Unsafe.putOrdered is fully supported through acquire/release\nsymbols, we no longer need to duplicate the call tree to prevent\nincorrect optimizations.\n\nSigned-off-by: Spencer Comin <spencer.comin@ibm.com>",
        "tree": {
          "sha": "f50733d8acf2592e2c23b30a54ecf071016a04d0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f50733d8acf2592e2c23b30a54ecf071016a04d0"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/6254ab0085f26cbcdd08fe0008113669be3fdff1",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6254ab0085f26cbcdd08fe0008113669be3fdff1",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/6254ab0085f26cbcdd08fe0008113669be3fdff1",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6254ab0085f26cbcdd08fe0008113669be3fdff1/comments",
      "author": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Spencer-Comin",
        "id": 52704940,
        "node_id": "MDQ6VXNlcjUyNzA0OTQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/52704940?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Spencer-Comin",
        "html_url": "https://github.com/Spencer-Comin",
        "followers_url": "https://api.github.com/users/Spencer-Comin/followers",
        "following_url": "https://api.github.com/users/Spencer-Comin/following{/other_user}",
        "gists_url": "https://api.github.com/users/Spencer-Comin/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Spencer-Comin/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Spencer-Comin/subscriptions",
        "organizations_url": "https://api.github.com/users/Spencer-Comin/orgs",
        "repos_url": "https://api.github.com/users/Spencer-Comin/repos",
        "events_url": "https://api.github.com/users/Spencer-Comin/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Spencer-Comin/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7a5c47ba219c3dab292b0b464967138f0ef623c9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7a5c47ba219c3dab292b0b464967138f0ef623c9",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7a5c47ba219c3dab292b0b464967138f0ef623c9"
        }
      ]
    },
    {
      "sha": "7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
      "node_id": "C_kwDOBgtdddoAKDdlYzJjMmQ3YjgwMThmMDMwYzViNWE4N2RiYTZiMjAzMDc5YTNlY2M",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-13T17:21:51Z"
        },
        "committer": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-13T17:21:51Z"
        },
        "message": "Add -Xmx512m to -Xcheck:memory GC Regression tests\n\nLooks like -Xcheck:memory has a problem on x86 Mac platform preventing\nto run Balanced with enabled off-heap with default maximum heap size as\n25% of RAM available on machine failing with Native OOM. I guess it\nforces Sparce Heap to be allocated in the physical memory instead of be\nmostly virtual. Size of the heap is not significant for this particular\ntest, so it can be explicitly set to smaller value to avoid the problem.\nWe are going to investigate -Xcheck:memory behaviour on x86 Mac.",
        "tree": {
          "sha": "00ec7967d2d46e8beacbbe59e8754beda760c08c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/00ec7967d2d46e8beacbbe59e8754beda760c08c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6"
        }
      ]
    },
    {
      "sha": "d9569dd5784fd6390321eaf641d96f9aaa60ed19",
      "node_id": "C_kwDOBgtdddoAKGQ5NTY5ZGQ1Nzg0ZmQ2MzkwMzIxZWFmNjQxZDk2ZjlhYWE2MGVkMTk",
      "commit": {
        "author": {
          "name": "Graham Chapman",
          "email": "graham_chapman@ca.ibm.com",
          "date": "2025-03-13T18:25:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T18:25:04Z"
        },
        "message": "Merge pull request #21340 from tajila/jfrtest\n\nFix owner for JFR monitor enter",
        "tree": {
          "sha": "b00afd3b9a0ce36f2e4461a4a012e881d3ca6f0d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b00afd3b9a0ce36f2e4461a4a012e881d3ca6f0d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d9569dd5784fd6390321eaf641d96f9aaa60ed19",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0yMACRC1aQ7uu5UhlAAAJHYQAB25c6idEMDATEYJhTvEAH9x\nhajeFBjbmtWfeDWvM8WRpQswXp8hzm8UhBr+Qv7IJ2SMyIkNiCtWMSjwUB1bSUhl\niWDm+Cc7xcR0bmxb97aM3z2bX8GVIUVWnbs9c33Uh6s24KphbLAiWkm3kKuZBplV\n6nyt68B0HcI+4C4PnCEbpTZU62saD77VK01rz5R7rPxM4gCRQ9k01L/ceEd/YrEo\n4l0CQGlzwRSo3qhd+PNxYZQIobj+7YPJytQfG7sYiuAW9ERvbhxhoVOLYn4egf8B\nGvFkwSSdN3RM4a7oXutSDgabQSjm6sV6VcoUoO757R4KOjfTvSCJlvSejSRa50BM\nnabTv1Mg9Bxcji3ba9WrtQCSuftRg+srm9bLCFaiB57L0R/K+JX/D9BTam6Es+lx\nLcG1wz4Ko7qQhIAEf7tN1JTp2NCH8cXsD0xuVBOs8b770kD/CFfrVsNwm7nGI8vQ\ndCbpTdQEQ+a0S2b6LfutXKl/xPUKdDjrIKL9HXHZ5xnrgoHCKeWhr2h2iQWORIde\nt3wo33FA3RQQTKY/q5/5xbcTzQ8/gZrkTfp5jFt40JhMe9ERrpUrGDFmxgZuACX5\nRfNFMiYTve0Jqkcr2iAcXbemKmtFVHYbZnFXGQlKrtkyePNp9WzljBRWbGC8MmKV\n1qIEK8FCSt40tm+nvl6B\n=HLJI\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b00afd3b9a0ce36f2e4461a4a012e881d3ca6f0d\nparent 72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6\nparent f5a031fefb2856f8c249ebf4392a807e353e0ad1\nauthor Graham Chapman <graham_chapman@ca.ibm.com> 1741890304 -0400\ncommitter GitHub <noreply@github.com> 1741890304 -0400\n\nMerge pull request #21340 from tajila/jfrtest\n\nFix owner for JFR monitor enter",
          "verified_at": "2025-03-13T18:30:07Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d9569dd5784fd6390321eaf641d96f9aaa60ed19",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d9569dd5784fd6390321eaf641d96f9aaa60ed19",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d9569dd5784fd6390321eaf641d96f9aaa60ed19/comments",
      "author": {
        "login": "gacholio",
        "id": 18033688,
        "node_id": "MDQ6VXNlcjE4MDMzNjg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18033688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gacholio",
        "html_url": "https://github.com/gacholio",
        "followers_url": "https://api.github.com/users/gacholio/followers",
        "following_url": "https://api.github.com/users/gacholio/following{/other_user}",
        "gists_url": "https://api.github.com/users/gacholio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gacholio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gacholio/subscriptions",
        "organizations_url": "https://api.github.com/users/gacholio/orgs",
        "repos_url": "https://api.github.com/users/gacholio/repos",
        "events_url": "https://api.github.com/users/gacholio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gacholio/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6"
        },
        {
          "sha": "f5a031fefb2856f8c249ebf4392a807e353e0ad1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f5a031fefb2856f8c249ebf4392a807e353e0ad1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f5a031fefb2856f8c249ebf4392a807e353e0ad1"
        }
      ]
    },
    {
      "sha": "dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
      "node_id": "C_kwDOBgtdddoAKGRjNmE2ZjcyM2NjM2QzM2U4NmQwNzZmMDcyZmI3ZGQxZDg4ZTM4NzI",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-13T18:30:47Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-13T18:30:47Z"
        },
        "message": "Exclude Balanced testing from FFI downcall\n\nThis is temporary till this tests works with Balanced Offheap\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "68a6eaf7c342c3ed1edc0c99698d6f49ce4a1dda",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/68a6eaf7c342c3ed1edc0c99698d6f49ce4a1dda"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "26baa50a0a640ec903335db1535b940ba94a651c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26baa50a0a640ec903335db1535b940ba94a651c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26baa50a0a640ec903335db1535b940ba94a651c"
        }
      ]
    },
    {
      "sha": "e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
      "node_id": "C_kwDOBgtdddoAKGUwYzk5YzgyY2EyNGM1OWI4ZWFmMjEyN2JmZjVhOGRhNWYzMzQ0MzI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-13T18:42:06Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T18:42:06Z"
        },
        "message": "Merge pull request #21345 from dmitripivkine/master\n\nAdd -Xmx512m to -Xcheck:memory GC Regression tests",
        "tree": {
          "sha": "f824c54f36d164cd68f50a656be2c58e9cf2ab20",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f824c54f36d164cd68f50a656be2c58e9cf2ab20"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0yb+CRC1aQ7uu5UhlAAAob8QABNN6ltAOxCm1F69JqNNsCcq\njiD4JgL1w806jDLU/IWegunwsvNZXutFVSE+nIbGTYG3AGPmQM2vgXCeeh6hhP2j\nn73xtp+dk8dG+6TrcNxoC5ykvtbMSDeEjCWEzf2fCGk3tEDC0Fke19gKfRxEOxWN\nZwmqs4tW/feR5gw661h14tWU9HhcGkP/AkA6bKqP6+MEda9IKjtEEhz3drTDr1cf\nZdIn5h6NykeowExxCi3GrahjprvLwgHB+ffpo1BLa6wZ8lBJWZeTwsUZA8QjaSph\nVnPDuGLpfRDlqQ0I7G57n+F0agamUNzUIjaCdjtnj67pGnkE95EhuTtyfr4H6xve\nfYsuAF97N7bcyzxznqCCFHva4mS6OP/t8CGO3qi11Ycwyh5dJATQZ5WdubAeE5dC\nkaVHB0fNQY/7ZVrkCQ6uPwbF8qCLe+NvUgEZXsI6TeYmKQyQrujgSzfTN+xtMtBJ\nd33GCzre/Ff/sfpVXgSFBpMI0WHcY8chLBN/ShROIOKJGbTqDP5DB/jzJSJulzFp\n+khd3CVUEWV7oIjw9TD/3Gq/BbIDLbSSu+1+rq2n3le3jICPebfEzqtk7QhtxWhD\nFOjOTob7SGo5dben1nTGLsEb+63mLDEooJe64boGNDj5sAZTSBbnC9KA9mHlSehq\nZvmEG4tEZvJbvCRK6ebf\n=Ossx\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f824c54f36d164cd68f50a656be2c58e9cf2ab20\nparent d9569dd5784fd6390321eaf641d96f9aaa60ed19\nparent 7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741891326 -0400\ncommitter GitHub <noreply@github.com> 1741891326 -0400\n\nMerge pull request #21345 from dmitripivkine/master\n\nAdd -Xmx512m to -Xcheck:memory GC Regression tests",
          "verified_at": "2025-03-13T18:43:31Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e0c99c82ca24c59b8eaf2127bff5a8da5f334432/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d9569dd5784fd6390321eaf641d96f9aaa60ed19",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d9569dd5784fd6390321eaf641d96f9aaa60ed19",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d9569dd5784fd6390321eaf641d96f9aaa60ed19"
        },
        {
          "sha": "7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc"
        }
      ]
    },
    {
      "sha": "c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
      "node_id": "C_kwDOBgtdddoAKGMwNmYwZjlmNTU4Mzc0MTk5NjI0ZTZkMDdmN2EwNjY1YWM1YmI5YTg",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-13T18:56:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T18:56:56Z"
        },
        "message": "Merge pull request #21347 from amicic/disable_ffi_downcall_offheap\n\nExclude Balanced testing from FFI downcall",
        "tree": {
          "sha": "bbc70b1d039833ccd3581fbbf003e42e50fcfded",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/bbc70b1d039833ccd3581fbbf003e42e50fcfded"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn0yp4CRC1aQ7uu5UhlAAAIccQAJEpqZyxZ3X+gXhcPMdltQcJ\ngBZTO3/H+VrFy9oBUenunw3GJiZuCXSqT0/xy1NPrNbD5nwcV3t3eRNhP56b1unU\n+fY3XzNrmrOrecvE+DpUCoKlrkxzb+mqkZYrC+vuhDNUufS4hPBaYs0uYE1oCMyP\nShnSoTC14g+S6x5zxep75FvTIgc3xgZTWuCPX+qW6t7xBQ7edEwip6wZRVyju6Rm\ni3mcGt6qPs4x3CZDBTWr1Xzn+h7FM7j+rHwNCM57qjaAm/niIse/XX81iKDTTRKL\nGuEPmTL40QuoxSr8MPrAViXZvt5HDUP7HYSwZLfxoZ5S4aHJkXtv5GVgYDUOuC4e\nqoyWk01IxZuXHiLgggpHrTwZBiR+GrEh35f9vZXpiVcJhrZOMFlzPG1F6D5skRST\nyo2MnrafQPqpXdFC4AUfxR1f7qZAcn+buGw+kYzhfMAi6blz3hpvDSZYwx7yHeYP\nhPPPEWclBatyL9ouGca7D+aoG+X9WzCsl4wzDcQquF+iHPQE328lzhY/bnI/KRcl\nS55FD1MsF1ixWnVsrkQTWcBbedxeJ0hS1J64I1UmbrJEHz5nS/BwfC/7lPwNA9my\nJzMe/uAVZhvAXjpXommjPAOJy/aNmMq9IgeWioeZlzAwyGvFM2F4JKMHvzwzpvZG\n7nc5L03XLBr/pY+prKi/\n=6XYl\n-----END PGP SIGNATURE-----\n",
          "payload": "tree bbc70b1d039833ccd3581fbbf003e42e50fcfded\nparent e0c99c82ca24c59b8eaf2127bff5a8da5f334432\nparent dc6a6f723cc3d33e86d076f072fb7dd1d88e3872\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741892216 -0400\ncommitter GitHub <noreply@github.com> 1741892216 -0400\n\nMerge pull request #21347 from amicic/disable_ffi_downcall_offheap\n\nExclude Balanced testing from FFI downcall",
          "verified_at": "2025-03-13T19:01:59Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c06f0f9f558374199624e6d07f7a0665ac5bb9a8/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e0c99c82ca24c59b8eaf2127bff5a8da5f334432",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e0c99c82ca24c59b8eaf2127bff5a8da5f334432"
        },
        {
          "sha": "dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dc6a6f723cc3d33e86d076f072fb7dd1d88e3872"
        }
      ]
    },
    {
      "sha": "610778c249b17dcf2922adf656bdea52bfbb1eb7",
      "node_id": "C_kwDOBgtdddoAKDYxMDc3OGMyNDliMTdkY2YyOTIyYWRmNjU2YmRlYTUyYmZiYjFlYjc",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-13T19:07:17Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-13T19:23:46Z"
        },
        "message": "Enable offheap on X, P and A\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "4385b8d44c5252f94550e3a78aa28703a75e97db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4385b8d44c5252f94550e3a78aa28703a75e97db"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/610778c249b17dcf2922adf656bdea52bfbb1eb7",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/610778c249b17dcf2922adf656bdea52bfbb1eb7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/610778c249b17dcf2922adf656bdea52bfbb1eb7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/610778c249b17dcf2922adf656bdea52bfbb1eb7/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c06f0f9f558374199624e6d07f7a0665ac5bb9a8"
        }
      ]
    },
    {
      "sha": "d95717cbabb390da926b7324a9a7519092318b3d",
      "node_id": "C_kwDOBgtdddoAKGQ5NTcxN2NiYWJiMzkwZGE5MjZiNzMyNGE5YTc1MTkwOTIzMThiM2Q",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-13T21:21:11Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T21:21:11Z"
        },
        "message": "Merge pull request #21348 from amicic/offheap_enabled\n\nEnable offheap on X, P and A",
        "tree": {
          "sha": "4385b8d44c5252f94550e3a78aa28703a75e97db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4385b8d44c5252f94550e3a78aa28703a75e97db"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d95717cbabb390da926b7324a9a7519092318b3d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn00xHCRC1aQ7uu5UhlAAAHkkQAFRYnE6LmSZSbUxqqWG//z5f\nvzTz2OzKzBeo6EY0tyWTTLwI9yexgELRc1JG0W6WT0p/x+hy1CTaNvEEsG+xHB9F\nCbB5dcztT16pIa3AYPS70/J6WCy2h/5bBwT5Zw7Q+ifvTg9TSYoLtzQH/l7P07Vq\n6Ljzui3O1E7DMsnIkxq90Airg8f8LRuRdto8PZkj8dY8nFX81Uf5bf2Wak5v9REt\nYgYcDm9cpVVFRzZYjQLAqENdfjnkVnT+T/mpflg8n9GfXlJKcHKdOX8UcS3c8yTi\n/lSXM1GbX6wuSordvwGbcOq+/hQpLRGO735MY5RLTqiKQJfjhE6DajYbrCZlOxBl\nOB/G2LdWvqErxnfl5olxmv6xooxZaNWYGAvkw8JDA6SuipO/PVXcRiIazmdDNm8E\n1mKYu1UAWvwFLvzDm0DFcAggkwUDB28mgFGblYa5oYEcYkPWbrn3Vg5wtEs6WhTf\nr652JoZq/O4HarNmpH8A3fWw45iiDpxkLTzKA716eGnERFbA5ej4kYXIrO3YRkZO\nMeaCuPFSoqv02XPfd4OU0YuqO+UHXmBx+s7KlTVhNo9LJ+7GpFp2cq5Uv8aBi8zy\n6OtMHD1z1wiw5hxP+R3vBGuDoJRs1pfG1Whjz6v80pmb7Yq6dp6MZawGas/VCiQE\nczvmqLmhjnePVVS6xSy8\n=UhV+\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 4385b8d44c5252f94550e3a78aa28703a75e97db\nparent c06f0f9f558374199624e6d07f7a0665ac5bb9a8\nparent 610778c249b17dcf2922adf656bdea52bfbb1eb7\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1741900871 -0400\ncommitter GitHub <noreply@github.com> 1741900871 -0400\n\nMerge pull request #21348 from amicic/offheap_enabled\n\nEnable offheap on X, P and A",
          "verified_at": "2025-03-13T21:26:13Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d95717cbabb390da926b7324a9a7519092318b3d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d95717cbabb390da926b7324a9a7519092318b3d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d95717cbabb390da926b7324a9a7519092318b3d/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c06f0f9f558374199624e6d07f7a0665ac5bb9a8",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c06f0f9f558374199624e6d07f7a0665ac5bb9a8"
        },
        {
          "sha": "610778c249b17dcf2922adf656bdea52bfbb1eb7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/610778c249b17dcf2922adf656bdea52bfbb1eb7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/610778c249b17dcf2922adf656bdea52bfbb1eb7"
        }
      ]
    },
    {
      "sha": "4e1c9d2835024b9a3369402e234a50f0e0375493",
      "node_id": "C_kwDOBgtdddoAKDRlMWM5ZDI4MzUwMjRiOWEzMzY5NDAyZTIzNGE1MGYwZTAzNzU0OTM",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "amicic@ca.ibm.com",
          "date": "2025-03-13T21:27:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T21:27:56Z"
        },
        "message": "Merge pull request #21147 from LinHu2016/update4virtualThreadMonitor\n\nGC update for supporting yield of pinned VirtualThread(JEP491)",
        "tree": {
          "sha": "11a0e6f03dcbd43e77645ecc603aa182fc9d189f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/11a0e6f03dcbd43e77645ecc603aa182fc9d189f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4e1c9d2835024b9a3369402e234a50f0e0375493",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn003cCRC1aQ7uu5UhlAAAFYMQAJLlyLcsA0WbOTbTZ8b1uJgX\nZpexg8hIAjpfgjgLN/dBvElMkfNvWblikO5O22Vh0LaBAglmLZOmi+mPdHbuVHkc\n43rmEMjV4894rVP7bp9AeeMkuNDiJ4XwmP0PvLZuIBL5njSwemvlRR+H/731eF7a\n0Ejr+0cw4oJjm8ZegdtIw/N8o28vTZ/8MUOEE0XhrL3r16mwO60h1GBq9aO/sa8X\nuQdhp6u2agRBZROP8Z7vVHm6IadTqx2ZOOnJyYIq1FQyyzZtkjCzaCI9IBA+RrvZ\n6ikPs0uFWmYBcBG37fsv+y6nKXKY6ZVFwqtNSAlX6OdHanhKM5ExBrlI1mBhPl+f\nsX3gNe0zFoLIaLyscqbWqrVG4YgMLEUVCDIBwNgs87byfpY4X2xREXITiDdSgBxK\neaqDkkqAJPQdNx6m3WVFi2vGKp44HBtDzSyQpzvyvwU9fAs6ga7H5F4h6Wh9WiM5\nS2q22LFu4P4OAxnqjegkRDAoQk2JpZadV9dycOyduQco1hicJdC4Nal+ieDaFGTm\nCSOZFm5FunhyxpCjP2CcXZxyeag6lXNIssjODZdTlzCLQQG12eR+cEp+G+rJ4WLV\nLdZ3Q9mO+/GCWbr+xmZ3Upm1W88tP+K9J82FDOlHtUCE4GzNurpd943dUSsN3Rjx\noXhLSiSZbuGMjctES5U0\n=PkNJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 11a0e6f03dcbd43e77645ecc603aa182fc9d189f\nparent d95717cbabb390da926b7324a9a7519092318b3d\nparent cbe2b8cda7404ca1942aa0d63f070b89efe7067a\nauthor Aleksandar Micic <amicic@ca.ibm.com> 1741901276 -0400\ncommitter GitHub <noreply@github.com> 1741901276 -0400\n\nMerge pull request #21147 from LinHu2016/update4virtualThreadMonitor\n\nGC update for supporting yield of pinned VirtualThread(JEP491)",
          "verified_at": "2025-03-13T21:32:59Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e1c9d2835024b9a3369402e234a50f0e0375493",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e1c9d2835024b9a3369402e234a50f0e0375493",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e1c9d2835024b9a3369402e234a50f0e0375493/comments",
      "author": {
        "login": "amicic",
        "id": 18264984,
        "node_id": "MDQ6VXNlcjE4MjY0OTg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/18264984?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amicic",
        "html_url": "https://github.com/amicic",
        "followers_url": "https://api.github.com/users/amicic/followers",
        "following_url": "https://api.github.com/users/amicic/following{/other_user}",
        "gists_url": "https://api.github.com/users/amicic/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/amicic/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/amicic/subscriptions",
        "organizations_url": "https://api.github.com/users/amicic/orgs",
        "repos_url": "https://api.github.com/users/amicic/repos",
        "events_url": "https://api.github.com/users/amicic/events{/privacy}",
        "received_events_url": "https://api.github.com/users/amicic/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d95717cbabb390da926b7324a9a7519092318b3d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d95717cbabb390da926b7324a9a7519092318b3d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d95717cbabb390da926b7324a9a7519092318b3d"
        },
        {
          "sha": "cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/cbe2b8cda7404ca1942aa0d63f070b89efe7067a",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/cbe2b8cda7404ca1942aa0d63f070b89efe7067a"
        }
      ]
    },
    {
      "sha": "eac2531c1e0e699eb1086d704be762f8159027b1",
      "node_id": "C_kwDOBgtdddoAKGVhYzI1MzFjMWUwZTY5OWViMTA4NmQ3MDRiZTc2MmY4MTU5MDI3YjE",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-13T21:48:33Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-13T21:48:33Z"
        },
        "message": "Merge pull request #21342 from babsingh/main12\n\nVirtual Threads: Bug fixes for JEP491",
        "tree": {
          "sha": "f4151ad5a7b7a40f16756e17101e92ce1672b6a0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f4151ad5a7b7a40f16756e17101e92ce1672b6a0"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/eac2531c1e0e699eb1086d704be762f8159027b1",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn01KxCRC1aQ7uu5UhlAAAYpcQAHnn39KgFpsX7vg6hP5bMQha\nLrRkDVD2yPW+nbHgK/WTytOCY52WH/6BKo2cAefHPIb3hBYn5KeRAfYjg7H2+3pX\n+Ep87Q+RMQ86vf/rsfNSKia3vkCS4DdXRTwTApAwSugdYXhW92+VLQBWUhJlLnl1\n/Az6asltXuOJ07aMd511mVNfQYXaPrNEKaH8WvTU7S97vE7w3wjO43odV0OmRafl\nKk7jnzCqfAhg0T/HKsyzvOO1j829f+ziU8kzPSpWR8o4teEwEGe6xkisD2Eox99O\nXOAYZMqUwjNpuLsdFuUF65F7L8/G4XWorJ6yYLj6wi8jf9KLoXXYxocQLVg5TeZB\nPtUGb1puIDgAX4DmF0x0U9TgxYedcFzPXaDdSWs4qJ5OorwPjAr3eNuI9xtVOZz/\nOowx+B7gG3aJldikCoLTiJ8q3/dZjqK3jYPAazHTkit8Nf4sxzXdbTC7rHUfMpDl\ngZudu5yZootU5Ub7MzbnSBwAAbhzE8R4GdkicNVecdGEdU91QSKBEYIWv//HfKGT\nOViIva2jfy7aRWAPKCyzKbOdeO1/84+QyNg8i3AvtyTTEtdEcfzV9E9jq5zOEPg+\nEo5hNPgusFM0ITtPh7poYym3gG29PJEUe426mBA6zPcZFe6xevsFj6C8lMTEgMm+\nul7K9l67k8SqHRXpHuZb\n=fk+I\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f4151ad5a7b7a40f16756e17101e92ce1672b6a0\nparent 4e1c9d2835024b9a3369402e234a50f0e0375493\nparent a85b6bb330437dd8baf33769e6f82f9181845e49\nauthor Tobi <atobia@ca.ibm.com> 1741902513 -0400\ncommitter GitHub <noreply@github.com> 1741902513 -0400\n\nMerge pull request #21342 from babsingh/main12\n\nVirtual Threads: Bug fixes for JEP491",
          "verified_at": "2025-03-13T21:53:36Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eac2531c1e0e699eb1086d704be762f8159027b1",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/eac2531c1e0e699eb1086d704be762f8159027b1",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eac2531c1e0e699eb1086d704be762f8159027b1/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e1c9d2835024b9a3369402e234a50f0e0375493",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e1c9d2835024b9a3369402e234a50f0e0375493",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e1c9d2835024b9a3369402e234a50f0e0375493"
        },
        {
          "sha": "a85b6bb330437dd8baf33769e6f82f9181845e49",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a85b6bb330437dd8baf33769e6f82f9181845e49",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a85b6bb330437dd8baf33769e6f82f9181845e49"
        }
      ]
    },
    {
      "sha": "d2811ca2ca2463508c521ed2848b0eee27f7c770",
      "node_id": "C_kwDOBgtdddoAKGQyODExY2EyY2EyNDYzNTA4YzUyMWVkMjg0OGIwZWVlMjdmN2M3NzA",
      "commit": {
        "author": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-13T20:22:59Z"
        },
        "committer": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-14T19:51:12Z"
        },
        "message": "Fix issue with waiting vthreads\n\nWhen a vthread is in a timed wait, it is added to the running queue\nby a Java thread directly if the timeout elapses. In this case, we\nneed to ensure it is removed from any waiting list, as it will not\npass through the takeVirtualThreadListToUnblock path.\n\nSigned-off-by: tajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "2f70a2593d9c0fa80fafcf4e06cceb5c6f8f0c48",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2f70a2593d9c0fa80fafcf4e06cceb5c6f8f0c48"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d2811ca2ca2463508c521ed2848b0eee27f7c770",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d2811ca2ca2463508c521ed2848b0eee27f7c770",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d2811ca2ca2463508c521ed2848b0eee27f7c770",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d2811ca2ca2463508c521ed2848b0eee27f7c770/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eac2531c1e0e699eb1086d704be762f8159027b1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eac2531c1e0e699eb1086d704be762f8159027b1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eac2531c1e0e699eb1086d704be762f8159027b1"
        }
      ]
    },
    {
      "sha": "9bb3c2db5b41a7db5c26e15a2d7963277102527f",
      "node_id": "C_kwDOBgtdddoAKDliYjNjMmRiNWI0MWE3ZGI1YzI2ZTE1YTJkNzk2MzI3NzEwMjUyN2Y",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-14T23:26:23Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-14T23:26:23Z"
        },
        "message": "Merge pull request #21355 from tajila/vt\n\nFix issue with waiting vthreads",
        "tree": {
          "sha": "2f70a2593d9c0fa80fafcf4e06cceb5c6f8f0c48",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/2f70a2593d9c0fa80fafcf4e06cceb5c6f8f0c48"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn1LsfCRC1aQ7uu5UhlAAA4qwQADYWYz5k0nEPDcal6hrpySH7\ndzEx94r1QFTZiWkbEhG7DXkmZpbty0kKAL4A/S6W+PMBixBTXZiNkV+S6eJ3sN1Q\nnUpMFv+bXB4Z0eLxWXfMqmV5iz1wUPFcyhuXFrRjO/jHMHu8C2nmf4DySaqLFtX6\nGWCMXdeiix4snLcr3WJVfAZ4dJkTiWubBj92RbIUkkvW5lCbiXZX2NIk4nLaWojl\nWh1xCU0bWGZYFf/R3X942lhjfcG7Bp6Jop7hA9E6BJgzKy24JWaGxj2Wo1EMOeui\np9neQBFOuSKLMhYMpWF4nj1pKXGeoaJhxOZrjdIKaEQbwqmQLI/3uzqhRl/uXloB\nWkQ/Vm4Dt+GTbbvQNeuuskQZkpfR2qDf+ew67HJZeCDEdgdDH2NXn4dITH27Mm+v\nL2z7whk6NkR6zha+ksGdaCo98r/MBZ12ttPSO1eA7V+KYWcpCrEKjuWyiXqcbct7\nrji04/bvcy0Ia/Khnr289AsJ6zoub1V09CbgxbesCYTpsnflFDHUhf7d16Q6Wqci\nBntOSJrz4lSsqiCYT2W92cpZpTHY37RdpPzGgUv3q2vo7GG3OrvoBAzyd+DquC8m\nrICUZflikf2ri0oYZMzwr6M1L2YYhKqncsIlHNMjWW3CHxZMSem38VK9yA14I+Pa\nRuNbvLowDENpikg7tz3A\n=K9p2\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 2f70a2593d9c0fa80fafcf4e06cceb5c6f8f0c48\nparent eac2531c1e0e699eb1086d704be762f8159027b1\nparent d2811ca2ca2463508c521ed2848b0eee27f7c770\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1741994783 -0400\ncommitter GitHub <noreply@github.com> 1741994783 -0400\n\nMerge pull request #21355 from tajila/vt\n\nFix issue with waiting vthreads",
          "verified_at": "2025-03-14T23:31:26Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eac2531c1e0e699eb1086d704be762f8159027b1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eac2531c1e0e699eb1086d704be762f8159027b1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eac2531c1e0e699eb1086d704be762f8159027b1"
        },
        {
          "sha": "d2811ca2ca2463508c521ed2848b0eee27f7c770",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d2811ca2ca2463508c521ed2848b0eee27f7c770",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d2811ca2ca2463508c521ed2848b0eee27f7c770"
        }
      ]
    },
    {
      "sha": "f9751980ab28d26e8fc96b51046dc63645e81e95",
      "node_id": "C_kwDOBgtdddoAKGY5NzUxOTgwYWIyOGQyNmU4ZmM5NmI1MTA0NmRjNjM2NDVlODFlOTU",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-02-27T18:30:55Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-16T01:38:44Z"
        },
        "message": "Add vthread yield support for monitors entered from JIT\n\n- Add new JIT to Interpreter transition on monitor entry\n- Add preparePinnedVirtualThreadForUnmount to internal functions\n- Move Continuation.blocker reset to enterContinuationImpl\n- Update preparePinnedVirtualThreadForMount/Unmount to use stackwalk\n  when finding entered monitors and cache them in a linked list stored\n  in the J9VMContinuation struct.\n- Add new code path to jitGetOwnedObjectMonitors to support vthread yield.\n\nCo-authored-by: Graham Chapman <graham_chapman@ca.ibm.com>\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>",
        "tree": {
          "sha": "7db654a998b803f6278a0775ace577965f93286d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/7db654a998b803f6278a0775ace577965f93286d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f9751980ab28d26e8fc96b51046dc63645e81e95",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9751980ab28d26e8fc96b51046dc63645e81e95",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f9751980ab28d26e8fc96b51046dc63645e81e95",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9751980ab28d26e8fc96b51046dc63645e81e95/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9bb3c2db5b41a7db5c26e15a2d7963277102527f"
        }
      ]
    },
    {
      "sha": "fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
      "node_id": "C_kwDOBgtdddoAKGZlZTNlZTUwNGY1ZWM1ZTc2ZDc2N2U4N2E0NTllOGUxMGUwYTUyMDU",
      "commit": {
        "author": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-16T20:08:22Z"
        },
        "committer": {
          "name": "Aleksandar Micic",
          "email": "Aleksandar_Micic@ca.ibm.com",
          "date": "2025-03-17T00:54:59Z"
        },
        "message": "currentThread for debug messages in indexableDataDisplacement\n\nUser currentThread, rather than walkThread when fetching omrVMThread and\nGC environment struct for debug message printing purposes in VLHGC\nindexableDataDisplacement.\n\nIf the walk thread is a Continuation, there is no omrVMThread struct\nassociated with it.\n\nSigned-off-by: Aleksandar Micic <Aleksandar_Micic@ca.ibm.com>",
        "tree": {
          "sha": "efa8cd24576f9fa94c268eb77a71a2aa48aae7fd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/efa8cd24576f9fa94c268eb77a71a2aa48aae7fd"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fee3ee504f5ec5e76d767e87a459e8e10e0a5205/comments",
      "author": null,
      "committer": null,
      "parents": [
        {
          "sha": "9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9bb3c2db5b41a7db5c26e15a2d7963277102527f"
        }
      ]
    },
    {
      "sha": "50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
      "node_id": "C_kwDOBgtdddoAKDUwZTY4ZmE3OTA3MmE3ZDQ4ZjJmMTE4MWEzZTJjNWFlMDAyODgyYmI",
      "commit": {
        "author": {
          "name": "Graham Chapman",
          "email": "graham_chapman@ca.ibm.com",
          "date": "2025-03-17T04:37:53Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-17T04:37:53Z"
        },
        "message": "Merge pull request #21334 from fengxue-IS/jep491-jit\n\nJIT Monitor enter support for Yielding pinned VirtualThread JEP491",
        "tree": {
          "sha": "7db654a998b803f6278a0775ace577965f93286d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/7db654a998b803f6278a0775ace577965f93286d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn16chCRC1aQ7uu5UhlAAAz4QQAEghEKcQnP4J+DtdkxWn9AVV\n39hv3xAwQwZpti4lZKutVis5tKKHADtaxkWs3VDSpVzJO8fRAK/MQnyzPDb345hs\n632If+Yr7NH5Tx5vx5UnPrPz3mSFF5LyWDcnUfOk/PrEi6UP74csiig2YkvpXlee\nM5C8jMgsEGgcloVAN0yAt0VNzJKqrYAB61wRraRtah65vm8KCQkxLUF1L9nF3nHe\n0OFbW1XxNImkXZ/HqKueKUJUBPgvr1NDfahN7fKZFm+3PWafk4K3MlVi8GVQLQDJ\nm+XKqr8wy2Jdp1soeT3SvKalbf+0RgfS4FE2B2fU3ukz1d3r5fPz8bqaro3g4IRG\n1TOyNg0Hm4gN3O+Cyfs27/htYh/CzwpW3TgpurdpH7KqxDRo67OQnCWnr9uvWlxl\nstBxQKjRWLT84oocYnB/dUvTX9vyTeSUk7J3TbA0XIQvFIvd5oXljzyEaVOEgRKC\nH0S9TFWmh9VDk7Ioc+cuMJczOC/ouJYrF9fhydQoEOcChwNM/lQaI54xS0CNTOqc\nIwg9ZNajsTK/codeZv9q72GFUiyRIh6CS9ZuonWJRtNxxjTgqFQblJ1+Tb1UgczJ\nsYDPQbY4FlxaLq/vKwWKty7UVNTM2jwYiT+0ccn4btvRnRAlARdAZqqvs62XMJfe\n6zqX4xii4PMFIBhlYsAt\n=1wB2\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 7db654a998b803f6278a0775ace577965f93286d\nparent 9bb3c2db5b41a7db5c26e15a2d7963277102527f\nparent f9751980ab28d26e8fc96b51046dc63645e81e95\nauthor Graham Chapman <graham_chapman@ca.ibm.com> 1742186273 -0400\ncommitter GitHub <noreply@github.com> 1742186273 -0400\n\nMerge pull request #21334 from fengxue-IS/jep491-jit\n\nJIT Monitor enter support for Yielding pinned VirtualThread JEP491",
          "verified_at": "2025-03-17T04:42:56Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/50e68fa79072a7d48f2f1181a3e2c5ae002882bb/comments",
      "author": {
        "login": "gacholio",
        "id": 18033688,
        "node_id": "MDQ6VXNlcjE4MDMzNjg4",
        "avatar_url": "https://avatars.githubusercontent.com/u/18033688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gacholio",
        "html_url": "https://github.com/gacholio",
        "followers_url": "https://api.github.com/users/gacholio/followers",
        "following_url": "https://api.github.com/users/gacholio/following{/other_user}",
        "gists_url": "https://api.github.com/users/gacholio/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gacholio/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gacholio/subscriptions",
        "organizations_url": "https://api.github.com/users/gacholio/orgs",
        "repos_url": "https://api.github.com/users/gacholio/repos",
        "events_url": "https://api.github.com/users/gacholio/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gacholio/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9bb3c2db5b41a7db5c26e15a2d7963277102527f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9bb3c2db5b41a7db5c26e15a2d7963277102527f"
        },
        {
          "sha": "f9751980ab28d26e8fc96b51046dc63645e81e95",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f9751980ab28d26e8fc96b51046dc63645e81e95",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f9751980ab28d26e8fc96b51046dc63645e81e95"
        }
      ]
    },
    {
      "sha": "61c2582de30bc5c7719a22cd6991287a8f0bf87b",
      "node_id": "C_kwDOBgtdddoAKDYxYzI1ODJkZTMwYmM1Yzc3MTlhMjJjZDY5OTEyODdhOGYwYmY4N2I",
      "commit": {
        "author": {
          "name": "Daryl Maier",
          "email": "maier@ca.ibm.com",
          "date": "2025-03-17T10:48:31Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-17T10:48:31Z"
        },
        "message": "Merge pull request #20475 from Spencer-Comin/acqrel-opaque\n\nImplement Unsafe opaque and acquire/release put and get methods",
        "tree": {
          "sha": "d95f6ab5b58f872811a65304dd7d61b9e3a6b070",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d95f6ab5b58f872811a65304dd7d61b9e3a6b070"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/61c2582de30bc5c7719a22cd6991287a8f0bf87b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn1/4ACRC1aQ7uu5UhlAAAGhoQAGveeXbBvM4VcgfTm+KeoDqv\nlqsd+16Kx2sGPHlZr4CFHxr1s2VbN4kzzSFuIeteHTbIVwghhNPKzsJNeE/sL4S3\nyPWVReBrzfiqhS7mJQ8a5lCKL5EneoOK0nYT3XXIPa6qpEcfu2nA3Yt5s/pkt8Ek\n3EVI+QggdYCsEMvMRFJdrh3u+i6ir7301Ipyr3qKsbOd3MCoVUhZT4wrOB0i9AF+\nOCFXzNB8sUbpt8usE0MmJZUpw41yN0IyWrXGqxgqJgDClsWbY6Qj3zr89frTNE21\n90Ccaoixvamebgiz9uwv+3HfabOSWPoTjt/MM0jRZE5QYPksE3WPVTkGxsPLTdb1\nTBrwzK8GxlJH38bn9gF3eXVpnW2gUBMvedvCzQ7dv86KPf3D/4rtddGpSGmGscTZ\n7xoOY8KdOZWMm5r08xPRh8m4ZCtwo7nxKDRJa8NEZ3iCc25SC5xDtJpLPzMcc3bm\nY1RUvhb2XvWTGhShTfpUJpThiouAZmBGzB6+gqLt2FB3o3ycaB2O9R8nkYZh0U4I\nTaBB3AcwCGnDK/WLVKpJUWJS6VCW/7rQtO8vppqi7so6MLtKmX/nq1A5xEer7WWh\nv+7JfGyasZWG5fF1LnJ8lQnkI/3dgiSVSdXS6sj+lo3wRkmfvm8xt6Z1i6fdLBYa\nBRzFSp8gW4CJv4nQHGDx\n=Np5u\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d95f6ab5b58f872811a65304dd7d61b9e3a6b070\nparent 50e68fa79072a7d48f2f1181a3e2c5ae002882bb\nparent 6254ab0085f26cbcdd08fe0008113669be3fdff1\nauthor Daryl Maier <maier@ca.ibm.com> 1742208511 -0400\ncommitter GitHub <noreply@github.com> 1742208511 -0400\n\nMerge pull request #20475 from Spencer-Comin/acqrel-opaque\n\nImplement Unsafe opaque and acquire/release put and get methods",
          "verified_at": "2025-03-17T10:53:34Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/61c2582de30bc5c7719a22cd6991287a8f0bf87b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/61c2582de30bc5c7719a22cd6991287a8f0bf87b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/61c2582de30bc5c7719a22cd6991287a8f0bf87b/comments",
      "author": {
        "login": "0xdaryl",
        "id": 17713611,
        "node_id": "MDQ6VXNlcjE3NzEzNjEx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17713611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/0xdaryl",
        "html_url": "https://github.com/0xdaryl",
        "followers_url": "https://api.github.com/users/0xdaryl/followers",
        "following_url": "https://api.github.com/users/0xdaryl/following{/other_user}",
        "gists_url": "https://api.github.com/users/0xdaryl/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/0xdaryl/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/0xdaryl/subscriptions",
        "organizations_url": "https://api.github.com/users/0xdaryl/orgs",
        "repos_url": "https://api.github.com/users/0xdaryl/repos",
        "events_url": "https://api.github.com/users/0xdaryl/events{/privacy}",
        "received_events_url": "https://api.github.com/users/0xdaryl/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/50e68fa79072a7d48f2f1181a3e2c5ae002882bb",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/50e68fa79072a7d48f2f1181a3e2c5ae002882bb"
        },
        {
          "sha": "6254ab0085f26cbcdd08fe0008113669be3fdff1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/6254ab0085f26cbcdd08fe0008113669be3fdff1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/6254ab0085f26cbcdd08fe0008113669be3fdff1"
        }
      ]
    },
    {
      "sha": "78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
      "node_id": "C_kwDOBgtdddoAKDc4ODc4ZjJmMjc3YzNjYjRhNDBjZGI4MjQ3NWZjMWNhYTFlYzYwNWU",
      "commit": {
        "author": {
          "name": "Dmitri Pivkine",
          "email": "Dmitri_Pivkine@ca.ibm.com",
          "date": "2025-03-17T11:58:29Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-17T11:58:29Z"
        },
        "message": "Merge pull request #21358 from amicic/displacement_offheap_continuation\n\ncurrentThread for debug messages in indexableDataDisplacement",
        "tree": {
          "sha": "039afe45bc713618244d35dfaa5dfad03d4bef2d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/039afe45bc713618244d35dfaa5dfad03d4bef2d"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2A5lCRC1aQ7uu5UhlAAA9cUQAAYzRqiVPuPMKQ5OX+o8VbYc\nf+Dwpicum3q1aLNUNriJGP//iR84p8IS6OCHf8Hp00tJhmW7v4Ap6P6M8Mj7/a18\nHIChTqSVlLXcB0Fdjl07r5Ml3VgX/AhIAdu8FGJ0msFal8YZWDdzhuP9N+FqRD6H\n7unsg937JxkzNe3xR3uX0ZVpsBAOwkCd1llH5bqhsMC8ZTvT5NgVi27beH4/37PG\n7Xq4ABgmggDBDjajERWH3gWrNai9F8uKDp0hkef7vKaR9vTKw85SmzEw8haqqd3E\nLzK+zYAdxmE0rqvO1+zf5WfZ05RwrKVGcuxr9L55m5UXKvlOswKJFmL5OUon/CmN\n9Vc+jw1O1TVJuiRw+HmX4CfwlOkjNu96aPxyDKEyckeIaVEHTgKdV71kl3fWRtli\n3qahI0at1nrTun9cyVLSTIH9YFV42hIP94L1zcnV9fP3gzbYZbNef7R+D6tw3vzc\nQiSwYPRCo0Y93oBwuI+qGRnCaVIrbesnjJHCZmPy9w1NMMZjtcUQYk2EUKGdiamj\noMZ66bGNrHYCJW/NmnrLP7QvY0NSMhr2VQsrnBNZijA625GJ7dW8CfboBxhlKzmW\nTDot5fRJj9bY4lYRAhmKRtQLa1GT9u2/icVBlu3CD+6f/fnuM7vHAnH7DsdXATaT\nq076VpQawa2G/2sV75ny\n=n6UI\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 039afe45bc713618244d35dfaa5dfad03d4bef2d\nparent 61c2582de30bc5c7719a22cd6991287a8f0bf87b\nparent fee3ee504f5ec5e76d767e87a459e8e10e0a5205\nauthor Dmitri Pivkine <Dmitri_Pivkine@ca.ibm.com> 1742212709 -0400\ncommitter GitHub <noreply@github.com> 1742212709 -0400\n\nMerge pull request #21358 from amicic/displacement_offheap_continuation\n\ncurrentThread for debug messages in indexableDataDisplacement",
          "verified_at": "2025-03-17T12:03:31Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/78878f2f277c3cb4a40cdb82475fc1caa1ec605e/comments",
      "author": {
        "login": "dmitripivkine",
        "id": 18148831,
        "node_id": "MDQ6VXNlcjE4MTQ4ODMx",
        "avatar_url": "https://avatars.githubusercontent.com/u/18148831?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmitripivkine",
        "html_url": "https://github.com/dmitripivkine",
        "followers_url": "https://api.github.com/users/dmitripivkine/followers",
        "following_url": "https://api.github.com/users/dmitripivkine/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmitripivkine/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmitripivkine/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmitripivkine/subscriptions",
        "organizations_url": "https://api.github.com/users/dmitripivkine/orgs",
        "repos_url": "https://api.github.com/users/dmitripivkine/repos",
        "events_url": "https://api.github.com/users/dmitripivkine/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmitripivkine/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "61c2582de30bc5c7719a22cd6991287a8f0bf87b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/61c2582de30bc5c7719a22cd6991287a8f0bf87b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/61c2582de30bc5c7719a22cd6991287a8f0bf87b"
        },
        {
          "sha": "fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fee3ee504f5ec5e76d767e87a459e8e10e0a5205",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fee3ee504f5ec5e76d767e87a459e8e10e0a5205"
        }
      ]
    },
    {
      "sha": "abda4707011bbffee55da23641fc5d2c8e9c4542",
      "node_id": "C_kwDOBgtdddoAKGFiZGE0NzA3MDExYmJmZmVlNTVkYTIzNjQxZmM1ZDJjOGU5YzQ1NDI",
      "commit": {
        "author": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-14T21:09:27Z"
        },
        "committer": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-17T13:45:11Z"
        },
        "message": "IMSE support for vthreads\n\nSigned-off-by: tajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "822ac6704a86bf542dd4bf7aae5902cdd18d17d4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/822ac6704a86bf542dd4bf7aae5902cdd18d17d4"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/abda4707011bbffee55da23641fc5d2c8e9c4542",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/abda4707011bbffee55da23641fc5d2c8e9c4542",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/abda4707011bbffee55da23641fc5d2c8e9c4542",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/abda4707011bbffee55da23641fc5d2c8e9c4542/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/78878f2f277c3cb4a40cdb82475fc1caa1ec605e"
        }
      ]
    },
    {
      "sha": "2b33c84059f2463ecd1416e2c44a9b8f555e58db",
      "node_id": "C_kwDOBgtdddoAKDJiMzNjODQwNTlmMjQ2M2VjZDE0MTZlMmM0NGE5YjhmNTU1ZTU4ZGI",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-17T17:52:10Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-17T17:52:10Z"
        },
        "message": "Merge pull request #21359 from tajila/vt2\n\nIMSE support for vthreads",
        "tree": {
          "sha": "822ac6704a86bf542dd4bf7aae5902cdd18d17d4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/822ac6704a86bf542dd4bf7aae5902cdd18d17d4"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2GFKCRC1aQ7uu5UhlAAAU48QAJxgnBv5tZdL7cTOLVq9GxNc\nOIUD5qqDaUNR7MzTTm+htIy+XVUs67TDErvrvYlQZNFT+ji0O+ueCE7BqtkgjtVA\n0vxGbckF3+Xagt39pg7LP6c0RNHwbDmdDIT3dxS/pNZBt9WXdhAHeoyRzWcQAWga\nu/7uWfLc3N+Sao6JO7NO1LL6a9t/K1icWJRK9O3Qu/Yg7b5Iz1sKwUMNmbA85ADQ\nOJUsuUoHbGLD8RoH8DMjQNwvMC4AO3mDV/NL5r5wwJMmq7JKtY0CHvYr1eFeVQfJ\nSDsCx6sPpR/SDV22aY+lHPzfxAezMtnVSuwzlVjBOAxe64BCz7AcbrD1YWqZRwXB\nfI6v5/+Lk51Md+wMOGbss0tMnlkWMmnLaPkmJstsgsTHA369Is0Q4Q83B0a5VmKP\nXh2WaPy00RPJ3qyLJ/KVjjgTLCGL70k5mR3Vlo8e//N4hoelKrO+qauohmLuvmoZ\n7/ElOhbt5aNwVlv5ilHj3+DNf9Menf8InJarNq9C0aQRQrDT46niXFPwlKj2BKXE\nHVEZMppgoZQU2TG/ABLQxI35yMz2tV1Cvqp/XwYFWFo4aWYwPNpQVZOlMouxdem0\nnMsB+AaZCPH7oDb65MhqfUar9faBNmz/OcOtINXVkdjd2WZWAvddh0oZTaXK9wjF\npJpaHVjBRLeQrOyc1V6r\n=4XwE\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 822ac6704a86bf542dd4bf7aae5902cdd18d17d4\nparent 78878f2f277c3cb4a40cdb82475fc1caa1ec605e\nparent abda4707011bbffee55da23641fc5d2c8e9c4542\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1742233930 -0400\ncommitter GitHub <noreply@github.com> 1742233930 -0400\n\nMerge pull request #21359 from tajila/vt2\n\nIMSE support for vthreads",
          "verified_at": "2025-03-17T17:57:12Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/78878f2f277c3cb4a40cdb82475fc1caa1ec605e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/78878f2f277c3cb4a40cdb82475fc1caa1ec605e"
        },
        {
          "sha": "abda4707011bbffee55da23641fc5d2c8e9c4542",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/abda4707011bbffee55da23641fc5d2c8e9c4542",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/abda4707011bbffee55da23641fc5d2c8e9c4542"
        }
      ]
    },
    {
      "sha": "b5849ba02cd74948641a19e48b4ef56c06d2439c",
      "node_id": "C_kwDOBgtdddoAKGI1ODQ5YmEwMmNkNzQ5NDg2NDFhMTllNDhiNGVmNTZjMDZkMjQzOWM",
      "commit": {
        "author": {
          "name": "Gaurav Chaudhari",
          "email": "gaurav.chaudhari@ibm.com",
          "date": "2024-07-22T18:35:45Z"
        },
        "committer": {
          "name": "Gaurav Chaudhari",
          "email": "gaurav.chaudhari@ibm.com",
          "date": "2025-03-17T18:27:48Z"
        },
        "message": "Open XL attribute packed and misc fixes\n\nThese changes includes some of the uncategorized fixes,\nheader fixes and the recommended __attribute__((packed))\nnotation usage that works with both Open XL and XLC.\n\nSigned-off-by: Gaurav Chaudhari <gaurav.chaudhari@ibm.com>",
        "tree": {
          "sha": "89632756456f3b8346f34b2d76bf3c155aa3a520",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/89632756456f3b8346f34b2d76bf3c155aa3a520"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/b5849ba02cd74948641a19e48b4ef56c06d2439c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b5849ba02cd74948641a19e48b4ef56c06d2439c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/b5849ba02cd74948641a19e48b4ef56c06d2439c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b5849ba02cd74948641a19e48b4ef56c06d2439c/comments",
      "author": {
        "login": "Deigue",
        "id": 6877595,
        "node_id": "MDQ6VXNlcjY4Nzc1OTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6877595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Deigue",
        "html_url": "https://github.com/Deigue",
        "followers_url": "https://api.github.com/users/Deigue/followers",
        "following_url": "https://api.github.com/users/Deigue/following{/other_user}",
        "gists_url": "https://api.github.com/users/Deigue/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Deigue/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Deigue/subscriptions",
        "organizations_url": "https://api.github.com/users/Deigue/orgs",
        "repos_url": "https://api.github.com/users/Deigue/repos",
        "events_url": "https://api.github.com/users/Deigue/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Deigue/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "Deigue",
        "id": 6877595,
        "node_id": "MDQ6VXNlcjY4Nzc1OTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6877595?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Deigue",
        "html_url": "https://github.com/Deigue",
        "followers_url": "https://api.github.com/users/Deigue/followers",
        "following_url": "https://api.github.com/users/Deigue/following{/other_user}",
        "gists_url": "https://api.github.com/users/Deigue/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Deigue/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Deigue/subscriptions",
        "organizations_url": "https://api.github.com/users/Deigue/orgs",
        "repos_url": "https://api.github.com/users/Deigue/repos",
        "events_url": "https://api.github.com/users/Deigue/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Deigue/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "9f917f586505ff9d4b20c374481555ce6f99c88f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9f917f586505ff9d4b20c374481555ce6f99c88f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9f917f586505ff9d4b20c374481555ce6f99c88f"
        }
      ]
    },
    {
      "sha": "c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
      "node_id": "C_kwDOBgtdddoAKGMwOGI0MTRjNjkyYTQ1YzEyYjk2ZmUxNzBmOGE5N2NiZDhkMWQ0YzA",
      "commit": {
        "author": {
          "name": "Rahil Shah",
          "email": "rahil@ca.ibm.com",
          "date": "2025-03-17T18:31:00Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-17T18:31:00Z"
        },
        "message": "Merge pull request #19900 from Deigue/openxl-fixes-1\n\nOpen XL attribute packed and misc fixes",
        "tree": {
          "sha": "22485eb2754374d32d4a40b2625fed3209c27c23",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/22485eb2754374d32d4a40b2625fed3209c27c23"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2GpkCRC1aQ7uu5UhlAAAm/8QAH785AyjE9H6buTsDr9FJt5v\nRSUat5ityegolOAHW4NV7AGNfBBWxB0lDuzng+Hz1OoO/96boD2HQ4MJwKjMBgZP\nJo0HZFMH4uNnR/78p9M86Aa6dAezfVMWMeDuGIALsDJtN5NRaroGdO5OD28Tsg+B\nT4jJebPQbq/SKN8cu4HvzBve+CPnzh3yMizrwUWMkj9m94apCjvQbAuAyFJ5+bLk\n7TdTEi54LEgFjFVH5OieFG/Difbpa8A5blbUHh3WXie0xqsSmuxg2tYEZE4nZ8iS\n+tzea8qy9SdJA/uF8LJ6AD791SbjZXqayul7XojA1TvBob+aLqEQyNX0cqJRmbYs\nN4Ke9upuVcQG4dUhEEVVgZHwLlK7zwvUp85GSPgez6MZIgjqeMTAEW2xktZ911+f\n9a3PCuqehMpfkYy1kxN3CcjsS0sXogPMheoqKBoqIF/aQl6Xt5RqZ1GZX84jKusP\n6aSn4HHORcZLbnf/0/4DpXWpaN91xngMO5MBMEj/cULX54u3hNufyve/rn2sanoQ\neatv2cv8Bed0oJP2MqYnkt5So9fjR0b3lY839nIZAux4CqnU9/Z2oPDZGK4vE7fX\nxp3cFyeCfZmrs4ReHKcLdhV+9/OfYzxNn+3lLJhXKeGRv1kIGNO1aWyxXX+LVpFy\nUKae7/Ns7nDcJ3mnksnU\n=z6SX\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 22485eb2754374d32d4a40b2625fed3209c27c23\nparent 2b33c84059f2463ecd1416e2c44a9b8f555e58db\nparent b5849ba02cd74948641a19e48b4ef56c06d2439c\nauthor Rahil Shah <rahil@ca.ibm.com> 1742236260 -0400\ncommitter GitHub <noreply@github.com> 1742236260 -0400\n\nMerge pull request #19900 from Deigue/openxl-fixes-1\n\nOpen XL attribute packed and misc fixes",
          "verified_at": "2025-03-17T18:36:03Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0/comments",
      "author": {
        "login": "r30shah",
        "id": 22353051,
        "node_id": "MDQ6VXNlcjIyMzUzMDUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22353051?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/r30shah",
        "html_url": "https://github.com/r30shah",
        "followers_url": "https://api.github.com/users/r30shah/followers",
        "following_url": "https://api.github.com/users/r30shah/following{/other_user}",
        "gists_url": "https://api.github.com/users/r30shah/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/r30shah/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/r30shah/subscriptions",
        "organizations_url": "https://api.github.com/users/r30shah/orgs",
        "repos_url": "https://api.github.com/users/r30shah/repos",
        "events_url": "https://api.github.com/users/r30shah/events{/privacy}",
        "received_events_url": "https://api.github.com/users/r30shah/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b33c84059f2463ecd1416e2c44a9b8f555e58db"
        },
        {
          "sha": "b5849ba02cd74948641a19e48b4ef56c06d2439c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/b5849ba02cd74948641a19e48b4ef56c06d2439c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/b5849ba02cd74948641a19e48b4ef56c06d2439c"
        }
      ]
    },
    {
      "sha": "4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
      "node_id": "C_kwDOBgtdddoAKDRhMTY4MTFhYjNhZGEwZTFjNjZjMWM5YWVhYTYyNzc5ZDQ5ZDU4ZDQ",
      "commit": {
        "author": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-03-17T17:29:17Z"
        },
        "committer": {
          "name": "Nazim Bhuiyan",
          "email": "nubhuiyan@ibm.com",
          "date": "2025-03-17T18:33:23Z"
        },
        "message": "Prevent callers of big callees getting marked as big during ECS\n\nDuring Estimate Code Size, if we came across a callee that\nexceeded the bigCalleeThreshold, we would mark every method\nabove the call chain as also too big. This would result in\nremoval of call targets above the callee marked too big. To\nget around this issue, we utilize the new field _bigCalleesSize\nthat is set when a callee exceeds the big callee threshold, and\nis used to adjust the analyzed size of the methods above the\nbig callee's level.\n\nCo-authored-by: Vijay Sundaresan <vijaysun@ca.ibm.com>\nSigned-off-by: Nazim Bhuiyan <nubhuiyan@ibm.com>",
        "tree": {
          "sha": "3e20f78b633320b3d5b50b033601a13265045053",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/3e20f78b633320b3d5b50b033601a13265045053"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4/comments",
      "author": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "nbhuiyan",
        "id": 23691212,
        "node_id": "MDQ6VXNlcjIzNjkxMjEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/23691212?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nbhuiyan",
        "html_url": "https://github.com/nbhuiyan",
        "followers_url": "https://api.github.com/users/nbhuiyan/followers",
        "following_url": "https://api.github.com/users/nbhuiyan/following{/other_user}",
        "gists_url": "https://api.github.com/users/nbhuiyan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nbhuiyan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nbhuiyan/subscriptions",
        "organizations_url": "https://api.github.com/users/nbhuiyan/orgs",
        "repos_url": "https://api.github.com/users/nbhuiyan/repos",
        "events_url": "https://api.github.com/users/nbhuiyan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nbhuiyan/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b33c84059f2463ecd1416e2c44a9b8f555e58db"
        }
      ]
    },
    {
      "sha": "f613aae5c80251889209b54c9a6004212020ce8c",
      "node_id": "C_kwDOBgtdddoAKGY2MTNhYWU1YzgwMjUxODg5MjA5YjU0YzlhNjAwNDIxMjAyMGNlOGM",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-14T19:49:14Z"
        },
        "committer": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-17T19:48:35Z"
        },
        "message": "Use extensions System.initProperties to help init jdk11 properties\n\nDepends on https://github.com/ibmruntimes/openj9-openjdk-jdk11/pull/880\n\nRelated to https://github.com/eclipse-openj9/openj9/issues/21189\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>",
        "tree": {
          "sha": "74a04edf4aa6c6f288852e3878c48bee51e551a5",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/74a04edf4aa6c6f288852e3878c48bee51e551a5"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f613aae5c80251889209b54c9a6004212020ce8c",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f613aae5c80251889209b54c9a6004212020ce8c",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f613aae5c80251889209b54c9a6004212020ce8c",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f613aae5c80251889209b54c9a6004212020ce8c/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "eac2531c1e0e699eb1086d704be762f8159027b1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/eac2531c1e0e699eb1086d704be762f8159027b1",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/eac2531c1e0e699eb1086d704be762f8159027b1"
        }
      ]
    },
    {
      "sha": "47e95704f006efdc8b5c7e9873381e2174714136",
      "node_id": "C_kwDOBgtdddoAKDQ3ZTk1NzA0ZjAwNmVmZGM4YjVjN2U5ODczMzgxZTIxNzQ3MTQxMzY",
      "commit": {
        "author": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-03-18T11:33:02Z"
        },
        "committer": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-03-18T12:26:24Z"
        },
        "message": "JDK25 JavaLangAccess removed exit(int status)\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
        "tree": {
          "sha": "a41c3297f090f71bee86ee969ee88a4637afc7bd",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a41c3297f090f71bee86ee969ee88a4637afc7bd"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/47e95704f006efdc8b5c7e9873381e2174714136",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.71\n\niQJFBAABCAAvBQJn2WZwFiEEiRnHsy6EAjjx24R3tcynBMHuMmMRHGZlbmdqQGNh\nLmlibS5jb20ACgkQtcynBMHuMmMslw/+M7N7/I+32zK5FN1rZBfvgfT6uPdH7Lxz\n6ZYvfdJ2J19zzjL/Gngvz/TTuQ+j+LJvrP/LL53XKCILQ8E0geBA58Vyf0Rxiips\nUvl2WaAmsa7t88lwaId7pDcAOWgkVC55MNDqrZN2BHAVeeSXVDMxMYXAAx37c54T\nPJXBTEKXcXSgNgf5Lyu0A/gxg5hfWGbZft78FRyq9lVHJ88mKoPtjZdio8M8XUNo\nrwQkJQEQUzGFeqWlOKFDsZxhc7uoEVa24iiwXgxe1nuMoJ2HSZ9BAHw9ZwMnoj+a\n9IOVVWV84S+MOyHG0yIQFqmzePcLsv4bzvLX2hR1PV/gmz/pp6viJ0gqmvELxkCy\nANZLg6tT1zhGCf/gwtMPJc/2JAbu3InQD6heDqxC8E5Txtnj21XPjaSfgRwfff2d\nDaGhzYO66+ugEIwqkPz877jazpsBzkakupUJWy7LrRAgOgbCV4hgPtDwPNn+NmgT\nCLGilMSU87MHn7vdN7fsrwEFSYY7fmaxbPyvEbsiQssyxVpAc4pXUjRcd5eeGqrt\nK/wGigK7GVPV8sfsBuCRsbrxJkWz9mb+p9ZXhFmpuAe2xCqFQzbKs3rZ7PHkwrha\nqmu+XQAnSmXNB6U1gq9Sgdm20nyIVb/3LYI2i58Zda32ty6K+sTzBUmze/Z9iHy+\nuKcLMKjsAnI=\n=hl8Q\n-----END PGP SIGNATURE-----",
          "payload": "tree a41c3297f090f71bee86ee969ee88a4637afc7bd\nparent c08b414c692a45c12b96fe170f8a97cbd8d1d4c0\nauthor Jason Feng <fengj@ca.ibm.com> 1742297582 -0400\ncommitter Jason Feng <fengj@ca.ibm.com> 1742300784 -0400\n\nJDK25 JavaLangAccess removed exit(int status)\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
          "verified_at": "2025-03-18T12:26:38Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e95704f006efdc8b5c7e9873381e2174714136",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/47e95704f006efdc8b5c7e9873381e2174714136",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e95704f006efdc8b5c7e9873381e2174714136/comments",
      "author": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0"
        }
      ]
    },
    {
      "sha": "08387a2d53578c6b79f9ab8761367062269af49d",
      "node_id": "C_kwDOBgtdddoAKDA4Mzg3YTJkNTM1NzhjNmI3OWY5YWI4NzYxMzY3MDYyMjY5YWY0OWQ",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-18T13:32:57Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-18T13:32:57Z"
        },
        "message": "Merge pull request #21357 from pshipton/sysprops11\n\nUse extensions System.initProperties to help init jdk11 properties",
        "tree": {
          "sha": "5fba8add4d2731c1bf16329d26ba2d7599b86d90",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5fba8add4d2731c1bf16329d26ba2d7599b86d90"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/08387a2d53578c6b79f9ab8761367062269af49d",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2XYJCRC1aQ7uu5UhlAAABEwQAJt4AVZFsi1bNJ7eK8lB3zhW\noM4wFjfoIeecZMS7kds7kfvn5cCHDSY2no8Tx4hxfqVv7YWh4KIT1zBfc5gg2q+4\nHf2RUHqvJPLctevmkQQn0NSDZ7TlmjD58S1aCKKqaePBaMl7YuHqLmULVIfQnosr\nvQyQVq6QP1k0mzcu495IgWNR5VBWbBjSmSppMK1Dd6gKxPgRw0ofdx5IhWxnsMqm\nKpgGtgBrqyV0ruIkjLYd4bqIeb2C24axRVElgqwkVtlbG0xDpwovOx5GxPN2KEOK\nnIEGdrwdJz27rp/AT4sWoF/nWoco33QIv2hyqiA1f4KJgrBsv+Tq4I16Yi7G8pOb\nEPnrA0fhLQrRtL87z+KuFa5SuuSDAV9pxD/SQpMAfvvzYQmdMWVKXxLOK2zvV03y\no30hq5A0d0XQUqFppjVrcIuXinnQP82DfFohwTCfW9rmhlRk1z6EZRt02sS9qbGg\npZqorMXnF9GHo3FNogLC9eVCBq7lUIn3nsY+t6I4CN8esF/VZ8vCRz7wcTCQgov/\nAe88kM7STvkm6KndWGvsYQIlGxZwCjDvgpxPRjPzAfq4WIZrWUPREn/CpoXKHgOL\nL/FL8fjfyRirY3xPnlZCUuRbQ7WiJsr3AwnqevF52p6/m61Klx7ytly+4gVUAJPm\nXpz6vIPzTq3d9OcnBGcx\n=8LnM\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 5fba8add4d2731c1bf16329d26ba2d7599b86d90\nparent c08b414c692a45c12b96fe170f8a97cbd8d1d4c0\nparent f613aae5c80251889209b54c9a6004212020ce8c\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1742304777 -0400\ncommitter GitHub <noreply@github.com> 1742304777 -0400\n\nMerge pull request #21357 from pshipton/sysprops11\n\nUse extensions System.initProperties to help init jdk11 properties",
          "verified_at": "2025-03-18T13:38:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/08387a2d53578c6b79f9ab8761367062269af49d",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/08387a2d53578c6b79f9ab8761367062269af49d",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/08387a2d53578c6b79f9ab8761367062269af49d/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0"
        },
        {
          "sha": "f613aae5c80251889209b54c9a6004212020ce8c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f613aae5c80251889209b54c9a6004212020ce8c",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f613aae5c80251889209b54c9a6004212020ce8c"
        }
      ]
    },
    {
      "sha": "de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
      "node_id": "C_kwDOBgtdddoAKGRlN2Y2NGM2YjE4MGNkYmQ4M2I5Yzk3YmZjYjQ2OGRkZjVjYjVjMDY",
      "commit": {
        "author": {
          "name": "Marius Pirvu",
          "email": "mpirvu@ca.ibm.com",
          "date": "2025-03-18T13:57:33Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-18T13:57:33Z"
        },
        "message": "Merge pull request #21364 from nbhuiyan/bigcalleesize\n\nPrevent callers of big callees getting marked as big during ECS",
        "tree": {
          "sha": "3526397722dab196bef05f5cc199bf97fcbac42f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/3526397722dab196bef05f5cc199bf97fcbac42f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2XvNCRC1aQ7uu5UhlAAAVmYQAJ7gcfmkY9Wz9T5Flyu1QWqE\na62mT3+aYL+v8kZw3i3H/CYDBKYKbHTlXHMiLHr7Ghfo73PRMyYOMFNM5cBsnKh2\n6spFLSVRZ1tgtow7ZxSifgCjk6FF+uiKO3q/ljZGHlAFnss4J8i/u7QgPzxVNimE\nMRojjjXVX0e63Vo4/NLjYLMTMgh8pbJzMa4L6xqAQ1m53NeZjL3Mp0LSwZEdgua3\nqsT0QMAIx+0EiZs5wSit8b3XopELVM0eDR3EtZF9eFavv36PW/nnCF4oldE9uUq3\nyP9SyBE101UzCq+JMQ4yho/OlHdCGxvOttkrBldLpkaiSQH6MfBGhlzxnvgEZKQX\nax3MILkcWrIj3/LsxGGdlgGb2bkVf/WkpULbCELqrDRaSdIH60vKIbfz02M8kDc8\nsNomOPb8n3zp6D1KxhWpg9ds5IzWZG80TISPu/GVjpd2V2ZZhNv0fPo2l+4tloyf\nyjzprmmFk4MJTrCGPfmhKi0P1UZfvepVQCy3iUYqHRfXbWSbAe12w/1S1Cc6+ssK\nM5Ulj3TX82L5QnHGFK+F5etqS0aWdUnUcRum+r/1Pa1FZIcLqquj8oDQdEUEOZ19\nu/MqePxRN2c2uOp5c8MrDTefVO1RduF8jcZGT/I0wy2gySfkAH+URlY2GYdMshVG\nx2gT683HUEd5AH6tNYJ7\n=hrHS\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 3526397722dab196bef05f5cc199bf97fcbac42f\nparent 08387a2d53578c6b79f9ab8761367062269af49d\nparent 4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4\nauthor Marius Pirvu <mpirvu@ca.ibm.com> 1742306253 -0400\ncommitter GitHub <noreply@github.com> 1742306253 -0400\n\nMerge pull request #21364 from nbhuiyan/bigcalleesize\n\nPrevent callers of big callees getting marked as big during ECS",
          "verified_at": "2025-03-18T14:02:37Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06/comments",
      "author": {
        "login": "mpirvu",
        "id": 22594880,
        "node_id": "MDQ6VXNlcjIyNTk0ODgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/22594880?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mpirvu",
        "html_url": "https://github.com/mpirvu",
        "followers_url": "https://api.github.com/users/mpirvu/followers",
        "following_url": "https://api.github.com/users/mpirvu/following{/other_user}",
        "gists_url": "https://api.github.com/users/mpirvu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/mpirvu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/mpirvu/subscriptions",
        "organizations_url": "https://api.github.com/users/mpirvu/orgs",
        "repos_url": "https://api.github.com/users/mpirvu/repos",
        "events_url": "https://api.github.com/users/mpirvu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/mpirvu/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "08387a2d53578c6b79f9ab8761367062269af49d",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/08387a2d53578c6b79f9ab8761367062269af49d",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/08387a2d53578c6b79f9ab8761367062269af49d"
        },
        {
          "sha": "4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4"
        }
      ]
    },
    {
      "sha": "c2816e45d4cb491761a68f30bbadb5232a39b8b7",
      "node_id": "C_kwDOBgtdddoAKGMyODE2ZTQ1ZDRjYjQ5MTc2MWE2OGYzMGJiYWRiNTIzMmEzOWI4Yjc",
      "commit": {
        "author": {
          "name": "Keith W. Campbell",
          "email": "keithc@ca.ibm.com",
          "date": "2025-03-18T14:05:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-18T14:05:56Z"
        },
        "message": "Merge pull request #21372 from JasonFengJ9/jdk25access\n\nJDK25 removed JavaLangAccess.exit(int status)",
        "tree": {
          "sha": "0faebe5cb06e3c4762974b78fa9247cce1a83190",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/0faebe5cb06e3c4762974b78fa9247cce1a83190"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/c2816e45d4cb491761a68f30bbadb5232a39b8b7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2X3ECRC1aQ7uu5UhlAAAvG0QAGwyerlqWyEX2uFjYQYtjZdR\npSZbZATqTX5ZLYlDhfzSnUhTCl5x1S0l4wNZ7jwJJw89wC/QXlhJ4HybOWiqmUY+\nLxEBVUJcZYGQlTID54ZCUo3xmqXpGFAyun8vBTJpW74eq7wF3yVsu+XysqAgpneC\nAw6c0ZowDuXgywJ41n+ydz4x+A7mMBCAH0FYZUhoc4KJtEdoYxT9zzUg159I/U70\ncF7Km/zzm5o+VH1fH5bku9H3XimBQ17RSj89OMmwfyHLYhbWZgvgF/L/HPLhmCYJ\neuYjlITYf4mshuOJ7tD0F+kO3TRwNIOBApzzKd77EyzqrOk//D+C12JMm5EbAcu6\nhn43EwhSmcU8nRlXrEN+w/847Qvh6RhvwHLibhV1NsR4gpW7GfzUBW8JuvONEU2A\nchtr9yuxWuYYj++d6U+h7uFWgM0eORlt34TaA5L9fskT4oCNveeLvtmDqBq3TvK7\nSnlQALqDRnKQudu/+7TvteslBh//qay+jXid/GDB1+vwq+3U6Y+iHNvPzy/5Fpcs\nYMGG2jxngVLODRs7+YL9qpsGcZFLP1oxngZA95FBZLwsV1nE9OEAV18NjnWiiopL\n6GZ1A0OOY+Kw4rS7aJGzoMm5yUPMZrt9sGfoIDnRMJDDnqb9TBEHBPonISyoA3AS\nV4ycN1a+cwh/yiVPkJ+4\n=5+Mh\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 0faebe5cb06e3c4762974b78fa9247cce1a83190\nparent de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06\nparent 47e95704f006efdc8b5c7e9873381e2174714136\nauthor Keith W. Campbell <keithc@ca.ibm.com> 1742306756 -0400\ncommitter GitHub <noreply@github.com> 1742306756 -0400\n\nMerge pull request #21372 from JasonFengJ9/jdk25access\n\nJDK25 removed JavaLangAccess.exit(int status)",
          "verified_at": "2025-03-18T14:10:59Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c2816e45d4cb491761a68f30bbadb5232a39b8b7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/c2816e45d4cb491761a68f30bbadb5232a39b8b7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c2816e45d4cb491761a68f30bbadb5232a39b8b7/comments",
      "author": {
        "login": "keithc-ca",
        "id": 17774687,
        "node_id": "MDQ6VXNlcjE3Nzc0Njg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/17774687?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/keithc-ca",
        "html_url": "https://github.com/keithc-ca",
        "followers_url": "https://api.github.com/users/keithc-ca/followers",
        "following_url": "https://api.github.com/users/keithc-ca/following{/other_user}",
        "gists_url": "https://api.github.com/users/keithc-ca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/keithc-ca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/keithc-ca/subscriptions",
        "organizations_url": "https://api.github.com/users/keithc-ca/orgs",
        "repos_url": "https://api.github.com/users/keithc-ca/repos",
        "events_url": "https://api.github.com/users/keithc-ca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/keithc-ca/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06"
        },
        {
          "sha": "47e95704f006efdc8b5c7e9873381e2174714136",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/47e95704f006efdc8b5c7e9873381e2174714136",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/47e95704f006efdc8b5c7e9873381e2174714136"
        }
      ]
    },
    {
      "sha": "9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
      "node_id": "C_kwDOBgtdddoAKDliMzg1ZWI5YzI0NjZlMGU1ZTA0MmIwNzcxZjQxMzdkODBkMmVhYWE",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-17T20:35:45Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-18T14:09:25Z"
        },
        "message": "Add raw thread state to Java core dump and JFR ThreadDump\n\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "4fc921051f8b14bb69bdca4f840f05dd7a0de932",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/4fc921051f8b14bb69bdca4f840f05dd7a0de932"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/2b33c84059f2463ecd1416e2c44a9b8f555e58db",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/2b33c84059f2463ecd1416e2c44a9b8f555e58db"
        }
      ]
    },
    {
      "sha": "dd7725afce409daf6284b9a8f43e6282629f1484",
      "node_id": "C_kwDOBgtdddoAKGRkNzcyNWFmY2U0MDlkYWY2Mjg0YjlhOGY0M2U2MjgyNjI5ZjE0ODQ",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-18T16:24:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-18T16:24:04Z"
        },
        "message": "Merge pull request #21368 from thallium/threaddump\n\nAdd raw thread state to Java core dump and JFR ThreadDump",
        "tree": {
          "sha": "75aff92177217deed863f47e9ab31b3c6b72a056",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/75aff92177217deed863f47e9ab31b3c6b72a056"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/dd7725afce409daf6284b9a8f43e6282629f1484",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2Z4kCRC1aQ7uu5UhlAAAt/gQAI52t+24Tftqr2MqaKhRpwgy\n2df6taRPZiwyJGm9+pF9v76dBENo8P8d6nyI9eJee7mxQ0a2Uf6Nry5OL8EBYKe7\nWkfS024U2vRl3H4CEQWesq5KhF+x4s1Dvu7jNSAsW/OSI/yJflbE52Nl80SG4oxW\njKr8TiJBonuM7pUqb8j9WKvrSp459D9kIRK+QLiJiS/2Rbt0+BLHRbAAAOBVLfZD\nL9CdUOfM6q5khcFEBu7hSFbNFQFDNbIAIGU5uCX1mdIvOKvjYprEMW2Q+NE1OJoY\nMcwC8hFxauZqhDMwVoc620lQGIr3M3HbYP4LUn3iI1A4pMFssauKkkZsylAs2X0u\nIxZ5Pk09suwfBlSeuZOpc+Uhs5ZaS9M4XjkC8HAVl15ovbltqCdLdI4p1EbWMica\nq/zUqXWdRmLfM88KC3ZFbUKgaHj2bG2+X1QVmtzPJ20TCzAedQLnvWMzRPW8XxeD\nQ2cy/gDC85lEX26p5/57lFiIETfGZBu7eqbOui5ULFyxbPAh67TDcX2kFWsijZez\nBdAQyCMowBLjitLf79GZW/9m+i15K/AzKgVwW53jaQ38o+z3R5WUViAZImQ21MwX\nwvUkNHqIS6s9CiB67S0MraKVE6I8OFt5PhlF8fYKLcGPTeBx3PrrDo7ZkhJFmRiv\nAF6rTbAYudS1TkqHXQb7\n=zzdE\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 75aff92177217deed863f47e9ab31b3c6b72a056\nparent c2816e45d4cb491761a68f30bbadb5232a39b8b7\nparent 9b385eb9c2466e0e5e042b0771f4137d80d2eaaa\nauthor Tobi <atobia@ca.ibm.com> 1742315044 -0400\ncommitter GitHub <noreply@github.com> 1742315044 -0400\n\nMerge pull request #21368 from thallium/threaddump\n\nAdd raw thread state to Java core dump and JFR ThreadDump",
          "verified_at": "2025-03-18T16:29:08Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd7725afce409daf6284b9a8f43e6282629f1484",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/dd7725afce409daf6284b9a8f43e6282629f1484",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd7725afce409daf6284b9a8f43e6282629f1484/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c2816e45d4cb491761a68f30bbadb5232a39b8b7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c2816e45d4cb491761a68f30bbadb5232a39b8b7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c2816e45d4cb491761a68f30bbadb5232a39b8b7"
        },
        {
          "sha": "9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/9b385eb9c2466e0e5e042b0771f4137d80d2eaaa"
        }
      ]
    },
    {
      "sha": "d79ddbfcb54a0e2e743435524d3928a3a820c764",
      "node_id": "C_kwDOBgtdddoAKGQ3OWRkYmZjYjU0YTBlMmU3NDM0MzU1MjRkMzkyOGEzYTgyMGM3NjQ",
      "commit": {
        "author": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-11T20:18:33Z"
        },
        "committer": {
          "name": "Jack Lu",
          "email": "Jack.S.Lu@ibm.com",
          "date": "2025-03-18T18:08:32Z"
        },
        "message": "Fix Object.wait logic\n\n- Throw InterruptedException on return fom vthread wait if interrupted field is set\n- Add timeout value to vthread object\n\nSigned-off-by: Jack Lu <Jack.S.Lu@ibm.com>",
        "tree": {
          "sha": "6db45c87a36a1799db869f92a98d703167dd060b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6db45c87a36a1799db869f92a98d703167dd060b"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d79ddbfcb54a0e2e743435524d3928a3a820c764",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d79ddbfcb54a0e2e743435524d3928a3a820c764",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d79ddbfcb54a0e2e743435524d3928a3a820c764",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d79ddbfcb54a0e2e743435524d3928a3a820c764/comments",
      "author": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "fengxue-IS",
        "id": 11132545,
        "node_id": "MDQ6VXNlcjExMTMyNTQ1",
        "avatar_url": "https://avatars.githubusercontent.com/u/11132545?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fengxue-IS",
        "html_url": "https://github.com/fengxue-IS",
        "followers_url": "https://api.github.com/users/fengxue-IS/followers",
        "following_url": "https://api.github.com/users/fengxue-IS/following{/other_user}",
        "gists_url": "https://api.github.com/users/fengxue-IS/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fengxue-IS/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fengxue-IS/subscriptions",
        "organizations_url": "https://api.github.com/users/fengxue-IS/orgs",
        "repos_url": "https://api.github.com/users/fengxue-IS/repos",
        "events_url": "https://api.github.com/users/fengxue-IS/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fengxue-IS/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/c08b414c692a45c12b96fe170f8a97cbd8d1d4c0"
        }
      ]
    },
    {
      "sha": "305e12b1e67b30b096306daee935978e439e97a2",
      "node_id": "C_kwDOBgtdddoAKDMwNWUxMmIxZTY3YjMwYjA5NjMwNmRhZWU5MzU5NzhlNDM5ZTk3YTI",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-18T17:20:45Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-18T18:55:54Z"
        },
        "message": "JEP491: Never Deflate Monitors and Synchronize virtualThreadWaitCount\n\nCurrently, there are timing holes between\nJVM_TakeVirtualThreadListToUnblock and monitor deflation. A monitor can\nbe deflated while it is being accessed in\nJVM_TakeVirtualThreadListToUnblock. This leads to a NULL dereference\ncausing a segfault. Adding more synchronization will cause a\nsignificant overhead in the object monitor exit path. Until an\nefficient solution is developed, the policy to never deflate will be\nemployed in order to support JEP491. Since the current JEP491\nimplementation always inflates monitors before usage, deflating will be\ncounter-productive.\n\nAlso, added a null check for syncObjectMonitor in\nJVM_TakeVirtualThreadListToUnblock to ensure that the monitor is\ninflated before operations are performed on it.\n\nOperations on J9ObjectMonitor's virtualThreadWaitCount field may\nhappen out of sequence. To ensure correct ordering and consistency,\natomics have been employed to modify this field.\n\nRelated: #20705\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "5e42b1875fb300193e1b0875ae60553076f82ea9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/5e42b1875fb300193e1b0875ae60553076f82ea9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/305e12b1e67b30b096306daee935978e439e97a2",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/305e12b1e67b30b096306daee935978e439e97a2",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/305e12b1e67b30b096306daee935978e439e97a2",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/305e12b1e67b30b096306daee935978e439e97a2/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dd7725afce409daf6284b9a8f43e6282629f1484",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd7725afce409daf6284b9a8f43e6282629f1484",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dd7725afce409daf6284b9a8f43e6282629f1484"
        }
      ]
    },
    {
      "sha": "946e97f94c80fd4983b3882863a4be38531ee461",
      "node_id": "C_kwDOBgtdddoAKDk0NmU5N2Y5NGM4MGZkNDk4M2IzODgyODYzYTRiZTM4NTMxZWU0NjE",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-18T20:32:00Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-18T20:32:00Z"
        },
        "message": "Merge pull request #21361 from fengxue-IS/jep491-interrupt\n\nFix Object.wait logic for vthread",
        "tree": {
          "sha": "d03942f62160e6fccf8de821601caf85bea7cdb6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d03942f62160e6fccf8de821601caf85bea7cdb6"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/946e97f94c80fd4983b3882863a4be38531ee461",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2dhACRC1aQ7uu5UhlAAAp5wQAIQttwPKWUY9AbCsRdVHOzyG\nvidIA1+pnNotn8GBaWGpkrq1lNiyLeH6HkJm35nwOFy1HugDwsIMUl6urSDOAwrI\nBpiDlcyZpv24A/vMcBX0MBPg0in7Tmc+UknR+bFy6bG2iS8Cmk8ECsMTUp8rEs67\nNmgAWcHl7vBKPoDi6ibpoUEQT2x2AcQ4WaOP5lpSPPX8ZOuKxvSXloFTAx8XPNJB\nrkCQo18Pb1tiyFTYwM+TkhsFo3R4UKKpz+wsrXbQudFK7ltkXh9jAqToll/G2UWF\nSAlDf0KAzOu6Z/rF5hckp1F2dYdoeqkAgSMlZJbyItjpYJoQRtxdCjH2ZiG2w6I8\nscxTZJeYlFI/5r3AoW7xvkx75Z+eYZTcu36RTcQaTLV7JIaP+Pfdgjbtfg6ZYh5j\nQKXuAfjznGIBhE7g5wUab/0lkeVEDKVaFfnPeSWbc+744T3zHwY4OJ+CQgIqESjM\n6bvhkzUJ3Nhb2VOx9N78imEhAs23Rv+7kfz2Lm66s7k9+geULsui4aJN4dHkto7W\n8EsWvFf5bsli6/O76jhew9PtzQC2klclDpcUitQ9Lr5ta60qH0tOFlOnXHNGSDTi\nVftFQ4CON4jF4g26F4JVVOnh2w/SjFirfffbF9aGN40C8xNyBZtRKrNuc4K4bS2j\nO5gpM1MleC1k4WXa+3Xi\n=aSsL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree d03942f62160e6fccf8de821601caf85bea7cdb6\nparent dd7725afce409daf6284b9a8f43e6282629f1484\nparent d79ddbfcb54a0e2e743435524d3928a3a820c764\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1742329920 -0400\ncommitter GitHub <noreply@github.com> 1742329920 -0400\n\nMerge pull request #21361 from fengxue-IS/jep491-interrupt\n\nFix Object.wait logic for vthread",
          "verified_at": "2025-03-18T20:37:02Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/946e97f94c80fd4983b3882863a4be38531ee461",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/946e97f94c80fd4983b3882863a4be38531ee461",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/946e97f94c80fd4983b3882863a4be38531ee461/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dd7725afce409daf6284b9a8f43e6282629f1484",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dd7725afce409daf6284b9a8f43e6282629f1484",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dd7725afce409daf6284b9a8f43e6282629f1484"
        },
        {
          "sha": "d79ddbfcb54a0e2e743435524d3928a3a820c764",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d79ddbfcb54a0e2e743435524d3928a3a820c764",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d79ddbfcb54a0e2e743435524d3928a3a820c764"
        }
      ]
    },
    {
      "sha": "87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
      "node_id": "C_kwDOBgtdddoAKDg3ZTNiN2E5NjhjYzFhNjZkZjE3ZThjOWI3ZmQyYzRkZmM3MjI0ZmU",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-19T01:59:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T01:59:51Z"
        },
        "message": "Merge pull request #21384 from babsingh/vt\n\nJEP491: Never Deflate Monitors and Synchronize virtualThreadWaitCount",
        "tree": {
          "sha": "f374339c418ad60f596d91eb36d4952d3ee75693",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/f374339c418ad60f596d91eb36d4952d3ee75693"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2iUXCRC1aQ7uu5UhlAAACJQQACol0Toi4p/QqbRFW59IHTFl\nZAf9ghWoYZGrGqKqBwnDP801gufkMCEYyGdUUp569WUjM8s70AkBNqX7ugoMQh42\n7BMZCPp/lFevFf8nGzcHdNuSQQfuDpLC6SAZnNu/eIA/430b7hOJZsf5DZqP+Cgk\nC4Ag2qbb98kUAPni7zWekCOn6fwl5z4hpfmgLIXm43BnB8EnfnxevuzRI3gGTD38\nPdcJnQtKvPz+jqG2KPJbIV23pWPqw/4WiIIeoSz2zGjF6J6xkrObU30Bw07GfBDu\nR85ty5KrzmurZHQ3F4B9GeNdvyeYfEK3Jd9r+v44RsvdXaWnGYMhtgquL/ZW/TjX\nlG9XQj0dxr+ZmnybPrMmhoIOz3hV9eP6jUlllbo7L5QwCwcRr1wVL+xdzDx7QwRA\nBlrQCGlMsrinZFCVYdVYhLw74amuJG0xSKLPIJgBStxZS1DyRT5VjcY8Um0IV/Gn\nn9HuUzC4GvEjNRgVD9ky1WR9sbkVjW40Z2+F9oOAuzFgmyHcyl4awQvChWoW7NyI\nJi+ncNb2amRsFA5U512I7O0rQej+FwD5IkpnvMmWp9U3yxrbwzAinl20KF0Ju9Pk\ne3MXfx2LGFd7PVBJD8BoG8/v0lH90l5T/OEw+rD0oSfjwFgCwYB/0npLVwp6Mnjq\n+5FUj2HWKtl61s38Zrh2\n=nbmd\n-----END PGP SIGNATURE-----\n",
          "payload": "tree f374339c418ad60f596d91eb36d4952d3ee75693\nparent 946e97f94c80fd4983b3882863a4be38531ee461\nparent 305e12b1e67b30b096306daee935978e439e97a2\nauthor Tobi <atobia@ca.ibm.com> 1742349591 -0400\ncommitter GitHub <noreply@github.com> 1742349591 -0400\n\nMerge pull request #21384 from babsingh/vt\n\nJEP491: Never Deflate Monitors and Synchronize virtualThreadWaitCount",
          "verified_at": "2025-03-19T02:04:53Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "946e97f94c80fd4983b3882863a4be38531ee461",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/946e97f94c80fd4983b3882863a4be38531ee461",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/946e97f94c80fd4983b3882863a4be38531ee461"
        },
        {
          "sha": "305e12b1e67b30b096306daee935978e439e97a2",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/305e12b1e67b30b096306daee935978e439e97a2",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/305e12b1e67b30b096306daee935978e439e97a2"
        }
      ]
    },
    {
      "sha": "a9076368adb27a46ad3e67844296d9401991f080",
      "node_id": "C_kwDOBgtdddoAKGE5MDc2MzY4YWRiMjdhNDZhZDNlNjc4NDQyOTZkOTQwMTk5MWYwODA",
      "commit": {
        "author": {
          "name": "Hang Shao",
          "email": "hangshao@ca.ibm.com",
          "date": "2025-03-19T14:22:39Z"
        },
        "committer": {
          "name": "Hang Shao",
          "email": "hangshao@ca.ibm.com",
          "date": "2025-03-19T14:56:55Z"
        },
        "message": "Add tests storing/setting extra startup hints with mprotect=all\n\nFor #21315\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>",
        "tree": {
          "sha": "153fe7838f47e6c065d6e2b0af66c91cb0dcd32f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/153fe7838f47e6c065d6e2b0af66c91cb0dcd32f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/a9076368adb27a46ad3e67844296d9401991f080",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9076368adb27a46ad3e67844296d9401991f080",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/a9076368adb27a46ad3e67844296d9401991f080",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9076368adb27a46ad3e67844296d9401991f080/comments",
      "author": {
        "login": "hangshao0",
        "id": 18008382,
        "node_id": "MDQ6VXNlcjE4MDA4Mzgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18008382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hangshao0",
        "html_url": "https://github.com/hangshao0",
        "followers_url": "https://api.github.com/users/hangshao0/followers",
        "following_url": "https://api.github.com/users/hangshao0/following{/other_user}",
        "gists_url": "https://api.github.com/users/hangshao0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hangshao0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hangshao0/subscriptions",
        "organizations_url": "https://api.github.com/users/hangshao0/orgs",
        "repos_url": "https://api.github.com/users/hangshao0/repos",
        "events_url": "https://api.github.com/users/hangshao0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hangshao0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "hangshao0",
        "id": 18008382,
        "node_id": "MDQ6VXNlcjE4MDA4Mzgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18008382?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hangshao0",
        "html_url": "https://github.com/hangshao0",
        "followers_url": "https://api.github.com/users/hangshao0/followers",
        "following_url": "https://api.github.com/users/hangshao0/following{/other_user}",
        "gists_url": "https://api.github.com/users/hangshao0/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hangshao0/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hangshao0/subscriptions",
        "organizations_url": "https://api.github.com/users/hangshao0/orgs",
        "repos_url": "https://api.github.com/users/hangshao0/repos",
        "events_url": "https://api.github.com/users/hangshao0/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hangshao0/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe"
        }
      ]
    },
    {
      "sha": "f90fff3965b758ae340f3859033ccd26100b5bd7",
      "node_id": "C_kwDOBgtdddoAKGY5MGZmZjM5NjViNzU4YWUzNDBmMzg1OTAzM2NjZDI2MTAwYjViZDc",
      "commit": {
        "author": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-03-19T14:58:58Z"
        },
        "committer": {
          "name": "Jason Feng",
          "email": "fengj@ca.ibm.com",
          "date": "2025-03-19T15:00:32Z"
        },
        "message": "CRIU restores CRIUSupport(Path imageDir) constructor\n\nSupport the original CRIUSupport(Path imageDir) constructor API with a\nsingleton InternalCRIUSupport instance.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
        "tree": {
          "sha": "97ed470ffc8ebf4dce335f42581ad474a1844d84",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/97ed470ffc8ebf4dce335f42581ad474a1844d84"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/f90fff3965b758ae340f3859033ccd26100b5bd7",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: BCPG v1.71\n\niQJFBAABCAAvBQJn2twQFiEEiRnHsy6EAjjx24R3tcynBMHuMmMRHGZlbmdqQGNh\nLmlibS5jb20ACgkQtcynBMHuMmO9hBAAqGZU8XxMo79bXuH9iuOWn/j7NFfLE/rx\nH1Ke5TSFUSTYitR5bIKWP6L0jIRvf8zFTaFirPINMqlUXe9MnkIIEsoZxooOqJR5\nT8rSwjebGlpI5rsYK3m8w63JkW8+0LrDLe+vxtNXaCZSPlKFLjolmrZWkK8AYMgV\nxjONd0FpKKL/CTJQUHmZCGyc6o1n6Wsb3o3EPtLvoqIsDtAmYIiCynM1EikvOF4l\nhdK/sh4juVsIAYhMJSPqSS1zaXY9RgoacUa6/ekyS9g9Xl4dQ5hWVIgzPSOCpsk1\nyVWWH9UYUFhQINm4kF33JeUR6r3XolbvH7A1PoR+RRkKmDckoEC0MHrluQyxBOJY\nXVX/ARe0Yu+Q1R/aVi4jn77oL5nj6bO/+jGZH+FHTQtgtcEOfHCFOFIeZ4l/ZaEn\n7jCBthZvgKZ2qGa1XWtD+5Z+hTTHBgRcXFTr9OmoFH9+/JSt8p5C7QFw5Cz4VrJG\nf/Oir6J96CiMMmuTl2CTZzLmCcGoq9jDiXGaHrFDHxmabO2Kuyz0yYVxZ7B51caH\ncatH+SmHjdhRnrpamIhBFtODgvtteyx3OxxcJwMCvLLxAy/i1Ky2NNwrvqImTGjK\nTR9ljOddDIbHZ9tLrA86QCd3hXUQPWuWAhbxlTePn+VgUiegApNqI2C3CLckaIR6\nyR96B7RGA0w=\n=6ulI\n-----END PGP SIGNATURE-----",
          "payload": "tree 97ed470ffc8ebf4dce335f42581ad474a1844d84\nparent 87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe\nauthor Jason Feng <fengj@ca.ibm.com> 1742396338 -0400\ncommitter Jason Feng <fengj@ca.ibm.com> 1742396432 -0400\n\nCRIU restores CRIUSupport(Path imageDir) constructor\n\nSupport the original CRIUSupport(Path imageDir) constructor API with a\nsingleton InternalCRIUSupport instance.\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>",
          "verified_at": "2025-03-19T15:00:58Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f90fff3965b758ae340f3859033ccd26100b5bd7",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/f90fff3965b758ae340f3859033ccd26100b5bd7",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f90fff3965b758ae340f3859033ccd26100b5bd7/comments",
      "author": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "JasonFengJ9",
        "id": 17935151,
        "node_id": "MDQ6VXNlcjE3OTM1MTUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/17935151?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JasonFengJ9",
        "html_url": "https://github.com/JasonFengJ9",
        "followers_url": "https://api.github.com/users/JasonFengJ9/followers",
        "following_url": "https://api.github.com/users/JasonFengJ9/following{/other_user}",
        "gists_url": "https://api.github.com/users/JasonFengJ9/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/JasonFengJ9/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/JasonFengJ9/subscriptions",
        "organizations_url": "https://api.github.com/users/JasonFengJ9/orgs",
        "repos_url": "https://api.github.com/users/JasonFengJ9/repos",
        "events_url": "https://api.github.com/users/JasonFengJ9/events{/privacy}",
        "received_events_url": "https://api.github.com/users/JasonFengJ9/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe"
        }
      ]
    },
    {
      "sha": "41d0f861d1ae7b420e967970c7fb8b979d4381ce",
      "node_id": "C_kwDOBgtdddoAKDQxZDBmODYxZDFhZTdiNDIwZTk2Nzk3MGM3ZmI4Yjk3OWQ0MzgxY2U",
      "commit": {
        "author": {
          "name": "Lan Xia",
          "email": "Lan_Xia@ca.ibm.com",
          "date": "2025-03-19T15:41:56Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T15:41:56Z"
        },
        "message": "Merge pull request #21398 from hangshao0/FixSCC\n\nAdd tests storing/setting extra startup hints with mprotect=all",
        "tree": {
          "sha": "153fe7838f47e6c065d6e2b0af66c91cb0dcd32f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/153fe7838f47e6c065d6e2b0af66c91cb0dcd32f"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/41d0f861d1ae7b420e967970c7fb8b979d4381ce",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2uXECRC1aQ7uu5UhlAAAENgQAJglm4LP2l1zH9fK67NUgggl\ntKQBMg74JfVsjdErKX0obHI1nM1k0yZBVi/2RSakYIaT/ItzUVf7AyzXVcXiFbjG\ndYedOuOvV+Ehlsq82dCO3W37pb6rlfpuBgbQk1UWWw3hBxWa6E+GhS4iXvhqoilM\neHxoZkt4WteS4E8DUJ+ORchayOmr6BxKUdgchC+E9b4bOe53a4wiEPedbuRa+p5S\natVObyX3rey2XoP7sZEznhlG1AzHnLv78nrlE6yJ6bW+88g4Kr7JOt8zXVZVquzL\nFBrAz638sJxTlo3cgp3FzFq+XDYTHC3xObBdiKoElQpCB5wTPAvm7OhEJohtb4Ri\nRrD+fqaoIG6r/0e4g8KWNAL1hc9kMX5lGPzZZBzhZnxxZLmc0Fl2UYMLojTgKpPE\nL1zgfoH3xqhNjy58ueyDYgxqtoZYwVQntAV2/1mlFZ9HEMwZR5MSL8C1A1dA3mks\nIeSLSl5tp//P9OBl40WCcGTp4k7gxnqa2np7cu6pNztprCEUlo4+j8FCrak/iCkf\nvkWhA5ByqxaeFSOuzdCzGW1B6mrhk1XGuyLnqPPSbkk8d1LXKz/QQcfUWc7ZAZRM\niA6G8xKTpNM1St/ZoukNogMkSA95humEU9oRt8yNNnrBjPI3cAqrQFM/dENKHfV1\npiP7WhQghHirefMHmdJW\n=HIQc\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 153fe7838f47e6c065d6e2b0af66c91cb0dcd32f\nparent 87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe\nparent a9076368adb27a46ad3e67844296d9401991f080\nauthor Lan Xia <Lan_Xia@ca.ibm.com> 1742398916 -0400\ncommitter GitHub <noreply@github.com> 1742398916 -0400\n\nMerge pull request #21398 from hangshao0/FixSCC\n\nAdd tests storing/setting extra startup hints with mprotect=all",
          "verified_at": "2025-03-19T15:47:00Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/41d0f861d1ae7b420e967970c7fb8b979d4381ce",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/41d0f861d1ae7b420e967970c7fb8b979d4381ce",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/41d0f861d1ae7b420e967970c7fb8b979d4381ce/comments",
      "author": {
        "login": "llxia",
        "id": 19273206,
        "node_id": "MDQ6VXNlcjE5MjczMjA2",
        "avatar_url": "https://avatars.githubusercontent.com/u/19273206?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/llxia",
        "html_url": "https://github.com/llxia",
        "followers_url": "https://api.github.com/users/llxia/followers",
        "following_url": "https://api.github.com/users/llxia/following{/other_user}",
        "gists_url": "https://api.github.com/users/llxia/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/llxia/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/llxia/subscriptions",
        "organizations_url": "https://api.github.com/users/llxia/orgs",
        "repos_url": "https://api.github.com/users/llxia/repos",
        "events_url": "https://api.github.com/users/llxia/events{/privacy}",
        "received_events_url": "https://api.github.com/users/llxia/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe"
        },
        {
          "sha": "a9076368adb27a46ad3e67844296d9401991f080",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/a9076368adb27a46ad3e67844296d9401991f080",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/a9076368adb27a46ad3e67844296d9401991f080"
        }
      ]
    },
    {
      "sha": "4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
      "node_id": "C_kwDOBgtdddoAKDRlMmEzM2JhOTMyYmI4ZGQ4NTRkZDU3YTlhOGJlZDBiODIyYTk0Mzk",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-19T17:26:19Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T17:26:19Z"
        },
        "message": "Merge pull request #21401 from JasonFengJ9/criuinstance\n\nCRIU restores CRIUSupport(Path imageDir) constructor",
        "tree": {
          "sha": "e662acde6f7ec524941a7a958b470ff94dffd7ee",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/e662acde6f7ec524941a7a958b470ff94dffd7ee"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2v47CRC1aQ7uu5UhlAAAvbEQAKSDpnngZWufyuMJbSjcQ3Ar\n/s0kYoYH7bKMTTq4LkkophUsTZwSUu5c5yZMYlYZElJtNdFdjIPVWgtS3x3AMrPS\n+paXVKdRTIVipza4cXmn5JBWjvFqmtnl6IZA8eZ4bjoSu1vrRZ00V9XtH+FVx+6M\nIurqsELpzxiIK47nog1TyDS7FJqHn28qtPZpbc9nFm9IhGoD5uYJ+zjhMiY9zTV4\ntvtQIKQAyirRSg72dI9L3a3YtCCWdABxyO/OkJx730jXkzn2cHCMAVUvTtrsvDIR\n5dFLdVcp5ycxxquImj16AaSM7PBMRwQ26m8Rj2jAR7W0Nk4l6kkGLPDNXaDrcP8/\nvOsE4cSYLpbYjEH+CDZB8kyufncE1ogI4npENzvCs/pjQjN7JX056neOS3vsG+bY\nFDOIqazO+DqhAGIRqF9AFqdLNH9TKcAac7zJpVJXktn1cwKGh/Bg932Xal+N8Z4j\n6ddnt/4fBdX+CxkXCe5/WxfFEdSyPhlqQHNnf0+7zHidDuPnK0PK7k5dEVDUwJJw\naQTwBXq8RWc2A31POK2A48hGLfqMNo7pdTvTiYw+mQuhr6FJDD6mAMoZaHaAbHf0\n/zw18dFuV6t0p3sbCe64Ac9Rj/lHACCgncr+2u0kRqtmarTFx+w5PKO2b4kulHgI\nfzSZFDUuL1ncv5hdFI4E\n=mChP\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e662acde6f7ec524941a7a958b470ff94dffd7ee\nparent 41d0f861d1ae7b420e967970c7fb8b979d4381ce\nparent f90fff3965b758ae340f3859033ccd26100b5bd7\nauthor Tobi <atobia@ca.ibm.com> 1742405179 -0400\ncommitter GitHub <noreply@github.com> 1742405179 -0400\n\nMerge pull request #21401 from JasonFengJ9/criuinstance\n\nCRIU restores CRIUSupport(Path imageDir) constructor",
          "verified_at": "2025-03-19T17:31:22Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "41d0f861d1ae7b420e967970c7fb8b979d4381ce",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/41d0f861d1ae7b420e967970c7fb8b979d4381ce",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/41d0f861d1ae7b420e967970c7fb8b979d4381ce"
        },
        {
          "sha": "f90fff3965b758ae340f3859033ccd26100b5bd7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/f90fff3965b758ae340f3859033ccd26100b5bd7",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/f90fff3965b758ae340f3859033ccd26100b5bd7"
        }
      ]
    },
    {
      "sha": "7039ea1e468b582500bfa82b1e488a1c0e0fd407",
      "node_id": "C_kwDOBgtdddoAKDcwMzllYTFlNDY4YjU4MjUwMGJmYTgyYjFlNDg4YTFjMGUwZmQ0MDc",
      "commit": {
        "author": {
          "name": "Tobi Ajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-19T18:52:49Z"
        },
        "committer": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-19T20:23:27Z"
        },
        "message": "Move arg parsing of continuation options\n\nPreviously, continuation options are parsed after thread parsing which\nmeans deflation policies do not take effect. This PR corrects this.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "661fbdcd216a4042dfaa3eaf13f4b731367c3868",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/661fbdcd216a4042dfaa3eaf13f4b731367c3868"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7039ea1e468b582500bfa82b1e488a1c0e0fd407",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7039ea1e468b582500bfa82b1e488a1c0e0fd407",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7039ea1e468b582500bfa82b1e488a1c0e0fd407",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7039ea1e468b582500bfa82b1e488a1c0e0fd407/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439"
        }
      ]
    },
    {
      "sha": "26699e323485b64b4165d89a77c2d84272917844",
      "node_id": "C_kwDOBgtdddoAKDI2Njk5ZTMyMzQ4NWI2NGI0MTY1ZDg5YTc3YzJkODQyNzI5MTc4NDQ",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-19T20:55:29Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T20:55:29Z"
        },
        "message": "Merge pull request #21427 from tajila/vt2\n\nMove arg parsing of continuation options",
        "tree": {
          "sha": "661fbdcd216a4042dfaa3eaf13f4b731367c3868",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/661fbdcd216a4042dfaa3eaf13f4b731367c3868"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/26699e323485b64b4165d89a77c2d84272917844",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2y9BCRC1aQ7uu5UhlAAADj0QADpKq6kNFyZWvGSrBaPEI5x6\nzEEc0fRQ6lReyIXg5l0ksXMO0VjLfgrZv1hR2SERgL2cL/94nKIe4XKRF+72ujjb\nPV8mNwXwoeWUYc2zixCkX0qQ2jm202/vrf2W/RuiOwVxFrhaIz3uxjvkTwFXoytk\nQHmOm02zVKioKeTuubAEo+see6M1E9olKUCxSYZEA2QTiffmziXI3FChZ/GPvJD2\nzt7TgF+IUAwiIonKC7oIf7zLeDKDdS2fKhT7LApTOeNTQD+l1bWba+0G5Fz2vA1b\nTeHBSii1tmX6qHgYi0K4SVkDnBzigSCqAavx3JsJPIy0rBJWR8srTuwQdN0Jka+a\njgpbuvA0Ih+ZqhjUljHHuGciJ1mXWhJ39aDTKrR7Ez/EqzkjVQrsvKQPMMCBaqHM\nocccE2in7LJP2epCpGPvVW9mU7ZxZ8vcAdyPSG7MhUmMZi32YOyK11wsAQyaZG5T\nt5RAkTvbgUkBlF4bykIgAhIACt3fab8n+QzAcNBR/Fv6AbiqC7lskdo83wEa5SzM\n03vtE7zNDPMSa3tJGMIzHPHb/sVZIjT4LbJsrjXAEVdAxeL8EM74U0P9oeABv2Ln\n5eYtlrXzSJ6Oo3lkB/wVVQP9FELCyn4+K7vJ529VvPtwLHQxPSVszm7rUdAXA90Q\nv8Jw2vVVQIS6Sfusm/5S\n=X4ZL\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 661fbdcd216a4042dfaa3eaf13f4b731367c3868\nparent 4e2a33ba932bb8dd854dd57a9a8bed0b822a9439\nparent 7039ea1e468b582500bfa82b1e488a1c0e0fd407\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1742417729 -0400\ncommitter GitHub <noreply@github.com> 1742417729 -0400\n\nMerge pull request #21427 from tajila/vt2\n\nMove arg parsing of continuation options",
          "verified_at": "2025-03-19T21:00:31Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26699e323485b64b4165d89a77c2d84272917844",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/26699e323485b64b4165d89a77c2d84272917844",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26699e323485b64b4165d89a77c2d84272917844/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4e2a33ba932bb8dd854dd57a9a8bed0b822a9439"
        },
        {
          "sha": "7039ea1e468b582500bfa82b1e488a1c0e0fd407",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7039ea1e468b582500bfa82b1e488a1c0e0fd407",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7039ea1e468b582500bfa82b1e488a1c0e0fd407"
        }
      ]
    },
    {
      "sha": "fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
      "node_id": "C_kwDOBgtdddoAKGZlMzM3NjhmNDQxYmQ4OTAwNWYyZDk0ZTFlZDI3Zjg5M2Q1ZmMxYTY",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-18T17:43:36Z"
        },
        "committer": {
          "name": "Babneet Singh",
          "email": "sbabneet@ca.ibm.com",
          "date": "2025-03-19T21:16:05Z"
        },
        "message": "Enable yielding of pinned continuations by default\n\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>",
        "tree": {
          "sha": "d71dc50b9fb04b44d44c09448e6a9ea59de4e2e1",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/d71dc50b9fb04b44d44c09448e6a9ea59de4e2e1"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fe33768f441bd89005f2d94e1ed27f893d5fc1a6/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26699e323485b64b4165d89a77c2d84272917844",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26699e323485b64b4165d89a77c2d84272917844",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26699e323485b64b4165d89a77c2d84272917844"
        }
      ]
    },
    {
      "sha": "e5890581be629926f6d928c1648415fae6d071d3",
      "node_id": "C_kwDOBgtdddoAKGU1ODkwNTgxYmU2Mjk5MjZmNmQ5MjhjMTY0ODQxNWZhZTZkMDcxZDM",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-19T21:53:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T21:53:04Z"
        },
        "message": "Revert \"Prevent callers of big callees getting marked as big during ECS\"",
        "tree": {
          "sha": "b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/e5890581be629926f6d928c1648415fae6d071d3",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2zzACRC1aQ7uu5UhlAAAVXUQAGD1cuT3Ay/j5o3yGyzTMItZ\nDyDtzPGQvCE1clAH75vrZdz0FIBMuAq8WexrnIwhNtU3V5ywKjayDk9dcNVA8qvh\n+Qq3Aaanpxz0xzMuirNqu/UrM29T+CWkrePVf1XQjcmBbK4iSs8HHY4hDe2TS68e\nwkN2AHOzQa3xCART8ll5ZXlGRF5BshyWVYHP0OtGwHKyBhtW1lCXSmeesXeu+HEe\nUcu+r22ZsJw9u9oWTn3HqKZjR2F4VNgbzB3TlU6sdpZVkB210ZYEfXWYhMDePSOg\n+kvNz5WBUkDzVEZm4HP7jQru6VulfoP23ihIMQ9t2AYje8pdiT1nJehhtB9pbYFg\nMm0PNqZESJUH+jRBnb6ExLKqvyKqz+ueQYgj/VlJnVR8PDPGAIr2ThFpZyeS3XeZ\nfqdhLdrsHs5keTOf4lyQFNs1aY3yjNQbJWoE1BHiNErvg9VXhvKNYkXWIkczA/Py\nOymaJzsJCIbA1DE1ydHzO9XINZ9ZeFEv11gWSlSZNh+129vNOHHE7cvzhbls1wWl\nX96AuAtNYHjxOFvUiAWQIwC+8Xn8uLZsUbDP0JPhkIP7E1ScKE8McxvNUQikiCyY\nCf8auDFGLpdvotHIxRhwWaDZl8UvChtAbPmdmWcXb/ZwEjrEFMjSrk2OAPzgkxtB\ndYFcK3bfHO5Z+06jGNK2\n=j29D\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed\nparent 26699e323485b64b4165d89a77c2d84272917844\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1742421184 -0400\ncommitter GitHub <noreply@github.com> 1742421184 -0400\n\nRevert \"Prevent callers of big callees getting marked as big during ECS\"\n",
          "verified_at": "2025-03-19T21:53:06Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e5890581be629926f6d928c1648415fae6d071d3",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/e5890581be629926f6d928c1648415fae6d071d3",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e5890581be629926f6d928c1648415fae6d071d3/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26699e323485b64b4165d89a77c2d84272917844",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26699e323485b64b4165d89a77c2d84272917844",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26699e323485b64b4165d89a77c2d84272917844"
        }
      ]
    },
    {
      "sha": "8e6f5dbc40df86b88e2e0498b3b633011046802b",
      "node_id": "C_kwDOBgtdddoAKDhlNmY1ZGJjNDBkZjg2Yjg4ZTJlMDQ5OGIzYjYzMzAxMTA0NjgwMmI",
      "commit": {
        "author": {
          "name": "Peter Shipton",
          "email": "Peter_Shipton@ca.ibm.com",
          "date": "2025-03-19T21:53:16Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-19T21:53:16Z"
        },
        "message": "Merge pull request #21430 from eclipse-openj9/revert-21364-bigcalleesize\n\nRevert \"Prevent callers of big callees getting marked as big during ECS\"",
        "tree": {
          "sha": "b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/8e6f5dbc40df86b88e2e0498b3b633011046802b",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn2zzMCRC1aQ7uu5UhlAAAR5wQADnBg2MyvN8bRwuoPdpnXYoJ\nMfPooYwTThyNDNYgFFMK6+nd4PefwxlY2c4m/RmhOOxvrImaDIILfdCA43T90Rxx\n4rIJcCH2pN1zn9sN14zX6cb6N/RewF27ls8Nm30qLTbjUep9nedF19h6ZusqdOIU\nVLi1Q/f6PYIungejAJl4nYFHatwf+jZlaraI0Ctj7pZB8+UAblT9SeWe1OXGgivL\nKlouwBz/SNFWb3v2I00O/kgnc2SMutqErWNgeSSBUfNUz9e4ZJfxK7JelcDtDYnu\n2aOIYyFdeO0AsmKyyayHM2DN9MbNUP9ceOV+TpYJ7ER1s/F7QHhvQTyvu66Ov7vn\niEgW3vS1LmA8zs/5iVRY9yZaHUZfj2UzrWiLWz4j7gvs8g5Ph1zv/Fg+img3na75\nTR+GLxDx98PPDZHXcloGAW4aZVYT9f0NhkzExM1NjoFQ/hxG0XUIcQT/4skC5clj\nCS+XhRm42TrNV78YuY6lTWry7SwM6XCxuhAlPnqkLFTtOB78OXTKOYA2isLgVWTG\nwXqsqBHLgxYCQ0Df4UXqYLYJp+EjHXKJVbJ4yywViCHMkY+KXPd6GkfSswdsrDVh\nCOPnsYkrPFjNfVM8a4XXO21NQspHkiHdQJUQHk3HPGqw9DIo9nj8Zzdk1BH1o5l1\nGcCtY+Ppo0dQ8T5Ax1yQ\n=1PmH\n-----END PGP SIGNATURE-----\n",
          "payload": "tree b4f695b1f9dfd2c11e59b6bdbe4823585e97d4ed\nparent 26699e323485b64b4165d89a77c2d84272917844\nparent e5890581be629926f6d928c1648415fae6d071d3\nauthor Peter Shipton <Peter_Shipton@ca.ibm.com> 1742421196 -0400\ncommitter GitHub <noreply@github.com> 1742421196 -0400\n\nMerge pull request #21430 from eclipse-openj9/revert-21364-bigcalleesize\n\nRevert \"Prevent callers of big callees getting marked as big during ECS\"",
          "verified_at": "2025-03-19T21:58:06Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8e6f5dbc40df86b88e2e0498b3b633011046802b",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/8e6f5dbc40df86b88e2e0498b3b633011046802b",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8e6f5dbc40df86b88e2e0498b3b633011046802b/comments",
      "author": {
        "login": "pshipton",
        "id": 18122812,
        "node_id": "MDQ6VXNlcjE4MTIyODEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18122812?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pshipton",
        "html_url": "https://github.com/pshipton",
        "followers_url": "https://api.github.com/users/pshipton/followers",
        "following_url": "https://api.github.com/users/pshipton/following{/other_user}",
        "gists_url": "https://api.github.com/users/pshipton/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pshipton/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pshipton/subscriptions",
        "organizations_url": "https://api.github.com/users/pshipton/orgs",
        "repos_url": "https://api.github.com/users/pshipton/repos",
        "events_url": "https://api.github.com/users/pshipton/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pshipton/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26699e323485b64b4165d89a77c2d84272917844",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/26699e323485b64b4165d89a77c2d84272917844",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/26699e323485b64b4165d89a77c2d84272917844"
        },
        {
          "sha": "e5890581be629926f6d928c1648415fae6d071d3",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/e5890581be629926f6d928c1648415fae6d071d3",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/e5890581be629926f6d928c1648415fae6d071d3"
        }
      ]
    },
    {
      "sha": "caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
      "node_id": "C_kwDOBgtdddoAKGNhYTZlYmZhYTg2M2YwYzVmMTNkZDEzY2U2Mjk2MGFiM2IzMjc0NGY",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-20T03:11:42Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-20T03:11:42Z"
        },
        "message": "Merge pull request #21389 from babsingh/vt1\n\nEnable yielding of pinned continuations by default",
        "tree": {
          "sha": "e6356853e504f830e6023617afd278149fb4c3f9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/e6356853e504f830e6023617afd278149fb4c3f9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn24duCRC1aQ7uu5UhlAAA6BEQAFBCg9U7OMZspPOm0T+iGahq\nnKRzGFC4pFw55jVOF2/UHDcF9ZBv400ZDGiAVCCgat0387crHANuZ/adTiGPZvPI\nQGlSfdHLbEQ/kK3D6vKeX4pjPP0E9JGfqUNko10pWld8ucdW+BZqnmPycXBCtHQJ\n+PJdvI8YD+7VzGj59Vn8Jwb3QTPyotVlI6MG0z6yqCLCFSocTXbYgKSmHwbSZXlR\npvyqQfBmi2HqkentVBUBo6LlUT/knEWY2DSK385VOPckgXSznXr3gPz+6hOYXBXp\ne64221D60P4Q8NyCUgdW76nEQTQDGol8r05pWVsOKWGbKIIPP/K8Wj31pZOJWM/7\nTqHHmAjPSW+mQ1qM7LOQfLpNgnhReBupk6ZycSj1MvchGDiyvVn9T/KR0qWMi1JA\nIs7ydDzUgJQdcmxKykWYtJIayqY/t4n7+aYHrZEe+aXCevg7/lHBrrf1tVoXCnb7\n9DSXjegf8jOolQq2tT4ozzAxv9ktQW/72KYO7MRAL8CjX/yvdNH4NIMlPZ6mRd9V\nCLSVZVGVBWkjk9cbO9Eq6ztnpgHFHtYALsORoRgPnr277fXbJXLwC5JARgEcVknP\ntKTk/9ANTFfX0UGx+Eipm01U8fISEKQnz57lqiOjItiFr6nKq2FjSDOS3ShWg6sE\nzmUmStuLDlzMlTfMd93E\n=qKWW\n-----END PGP SIGNATURE-----\n",
          "payload": "tree e6356853e504f830e6023617afd278149fb4c3f9\nparent 8e6f5dbc40df86b88e2e0498b3b633011046802b\nparent fe33768f441bd89005f2d94e1ed27f893d5fc1a6\nauthor Tobi <atobia@ca.ibm.com> 1742440302 -0400\ncommitter GitHub <noreply@github.com> 1742440302 -0400\n\nMerge pull request #21389 from babsingh/vt1\n\nEnable yielding of pinned continuations by default",
          "verified_at": "2025-03-20T03:16:45Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "8e6f5dbc40df86b88e2e0498b3b633011046802b",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/8e6f5dbc40df86b88e2e0498b3b633011046802b",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/8e6f5dbc40df86b88e2e0498b3b633011046802b"
        },
        {
          "sha": "fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/fe33768f441bd89005f2d94e1ed27f893d5fc1a6",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/fe33768f441bd89005f2d94e1ed27f893d5fc1a6"
        }
      ]
    },
    {
      "sha": "d71acdcb2b1f8d720ec1c79c642309f206a8596e",
      "node_id": "C_kwDOBgtdddoAKGQ3MWFjZGNiMmIxZjhkNzIwZWMxYzc5YzY0MjMwOWYyMDZhODU5NmU",
      "commit": {
        "author": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-19T20:59:07Z"
        },
        "committer": {
          "name": "tajila",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-20T03:14:25Z"
        },
        "message": "Build frame in blocking vthread monenter\n\nA frame needs to be built before attempting a stack walk in vthread\nmonenter to find owned monitors. Failure to do so may result in a crash.\n\nSigned-off-by: tajila <atobia@ca.ibm.com>",
        "tree": {
          "sha": "a961a4e2cfd16b35ae348d2cbf7563b7cbe55eb7",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/a961a4e2cfd16b35ae348d2cbf7563b7cbe55eb7"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/d71acdcb2b1f8d720ec1c79c642309f206a8596e",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d71acdcb2b1f8d720ec1c79c642309f206a8596e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/d71acdcb2b1f8d720ec1c79c642309f206a8596e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d71acdcb2b1f8d720ec1c79c642309f206a8596e/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7039ea1e468b582500bfa82b1e488a1c0e0fd407",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7039ea1e468b582500bfa82b1e488a1c0e0fd407",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7039ea1e468b582500bfa82b1e488a1c0e0fd407"
        }
      ]
    },
    {
      "sha": "7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
      "node_id": "C_kwDOBgtdddoAKDdiZjVmMWE0MzljNDdiN2EwMDQyNzEwYjdmOTkwNmZmOGJjMGI2MWU",
      "commit": {
        "author": {
          "name": "Babneet Singh",
          "email": "babsingh@users.noreply.github.com",
          "date": "2025-03-20T13:22:28Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-20T13:22:28Z"
        },
        "message": "Merge pull request #21428 from tajila/vt2\n\nBuild frame in blocking vthread monenter",
        "tree": {
          "sha": "26680390520e46d6c25e947cd635e27c61c099a4",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/26680390520e46d6c25e947cd635e27c61c099a4"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn3BaUCRC1aQ7uu5UhlAAAu7UQAIYUIeOPcsldw0MmbWugMqhE\nLqrV28+qNEJ/rZa0AgVjl7xvuM1xOkHybLqCZrR5+u4WodUPMD1MlAPKG97aTH0v\nkGkc3vODOCn57wY6A0+RRcfPI1Le7SKdqdkrsKkyoWishiGi54DoO9qfhKRqEIDK\nP7S87BoDYtfwn+nNyXQR2rkviNxcNfT3m3kH40V4BHprMZLkE3ED3MOA5VchSmx0\ncb8P+ua7o03bmt+/Psq8Tu4VgXlik8T0+91g2daDzxYU5RYOVNVvu2g3/mcd61YG\nQsmSbNipF6sMZhfEab2x3lyno8GxWMaFTi1uMt0PAUuMoMb1GEY/0u/QWj4vpZa6\nOP0DlRWblC2IZeQmZyrEjftoHH4jmq5FfErm2LcAbE3AgcQVVjL2DLBYjViCFxoI\nDsi5ZO/+KrZm13ETW/sF/ztmFdeE6fWcX3rvXMKIe+6XuqNneHm1DkP0HdZ/jreD\nqdLzxObkmSUm82e4MWUjBj/qOa6Fh005+esemnaUZsP4eCR5UO6t3nq7l5rSngtK\nfgp4scDuOmoJ9QjKooP/NOdGnJWL2WbGdIUosRpYGgRGLGDbXPvpXd2PMNFGQQQq\nTCv3KVvjGJ8Y74U9uj1wd/Q1y5N3HTuVpNAPrVlM6akdj84qYQvHjnfzMkYrrRGe\nSNSFa0YoQUZOgIfvozmS\n=qIzJ\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 26680390520e46d6c25e947cd635e27c61c099a4\nparent caa6ebfaa863f0c5f13dd13ce62960ab3b32744f\nparent d71acdcb2b1f8d720ec1c79c642309f206a8596e\nauthor Babneet Singh <babsingh@users.noreply.github.com> 1742476948 -0400\ncommitter GitHub <noreply@github.com> 1742476948 -0400\n\nMerge pull request #21428 from tajila/vt2\n\nBuild frame in blocking vthread monenter",
          "verified_at": "2025-03-20T13:27:30Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e/comments",
      "author": {
        "login": "babsingh",
        "id": 8634038,
        "node_id": "MDQ6VXNlcjg2MzQwMzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8634038?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/babsingh",
        "html_url": "https://github.com/babsingh",
        "followers_url": "https://api.github.com/users/babsingh/followers",
        "following_url": "https://api.github.com/users/babsingh/following{/other_user}",
        "gists_url": "https://api.github.com/users/babsingh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/babsingh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/babsingh/subscriptions",
        "organizations_url": "https://api.github.com/users/babsingh/orgs",
        "repos_url": "https://api.github.com/users/babsingh/repos",
        "events_url": "https://api.github.com/users/babsingh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/babsingh/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/caa6ebfaa863f0c5f13dd13ce62960ab3b32744f"
        },
        {
          "sha": "d71acdcb2b1f8d720ec1c79c642309f206a8596e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/d71acdcb2b1f8d720ec1c79c642309f206a8596e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/d71acdcb2b1f8d720ec1c79c642309f206a8596e"
        }
      ]
    },
    {
      "sha": "0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
      "node_id": "C_kwDOBgtdddoAKDBhZjdkZTU1MjdhMWY3ZjA5ZjNlNTI4NTlmYzU3ZjNkMDZlMmFhNDU",
      "commit": {
        "author": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-20T14:44:58Z"
        },
        "committer": {
          "name": "Gengchen Tuo",
          "email": "gengchen.tuo@ibm.com",
          "date": "2025-03-20T14:46:45Z"
        },
        "message": "Fix thread raw state format in dumps\n\nFixes https://github.com/eclipse-openj9/openj9/issues/21431\n\nSigned-off-by: Gengchen Tuo <gengchen.tuo@ibm.com>",
        "tree": {
          "sha": "c181e22cb4888f2738e73f2723b25fa4eb52472c",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c181e22cb4888f2738e73f2723b25fa4eb52472c"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
        "comment_count": 0,
        "verification": {
          "verified": false,
          "reason": "unsigned",
          "signature": null,
          "payload": null,
          "verified_at": null
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45/comments",
      "author": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "thallium",
        "id": 20818480,
        "node_id": "MDQ6VXNlcjIwODE4NDgw",
        "avatar_url": "https://avatars.githubusercontent.com/u/20818480?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thallium",
        "html_url": "https://github.com/thallium",
        "followers_url": "https://api.github.com/users/thallium/followers",
        "following_url": "https://api.github.com/users/thallium/following{/other_user}",
        "gists_url": "https://api.github.com/users/thallium/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/thallium/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/thallium/subscriptions",
        "organizations_url": "https://api.github.com/users/thallium/orgs",
        "repos_url": "https://api.github.com/users/thallium/repos",
        "events_url": "https://api.github.com/users/thallium/events{/privacy}",
        "received_events_url": "https://api.github.com/users/thallium/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e"
        }
      ]
    },
    {
      "sha": "dea4d163f15f411db38ec5f0269c3b5009609921",
      "node_id": "C_kwDOBgtdddoAKGRlYTRkMTYzZjE1ZjQxMWRiMzhlYzVmMDI2OWMzYjUwMDk2MDk5MjE",
      "commit": {
        "author": {
          "name": "Julian Wang",
          "email": "zlwang@ca.ibm.com",
          "date": "2025-03-20T23:03:33Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-20T23:03:33Z"
        },
        "message": "Merge pull request #21195 from rmnattas/x-arrstrchk\n\nEvaluate destination subtrees early when deferring destination eval",
        "tree": {
          "sha": "85a2f73e0ed3e745388f10323afb61c058be127a",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/85a2f73e0ed3e745388f10323afb61c058be127a"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/dea4d163f15f411db38ec5f0269c3b5009609921",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn3J7FCRC1aQ7uu5UhlAAAdwcQAHoVr4KMApt2q2NV7FMuRunr\naPGRd+X1kUgzmUPvlgSFKgdVU7xeL4tQm7mAmIEto/2rigYAlATvFxjk6TOXcy65\nU+jkhoisUHZZnB17W7ADlSst2xaiPEt1zUoYUQYk3RjZsJZ7SaQqhYjF3vy2vvgj\narI649mD234zegXThUEUI83BKUA+iz3BkcW4gDB8dlLRK2pKt61BQ5lAZ57qr3wK\nUNgm1ZmFjlKk8UY/xe4TXOT0JOOV8dQNAEHlxR5VATfxKECQE1+T38z5370oGddM\n33Y5ca516BgCp2qLRX+OAMJ9eYIbLZYaEFlfGqRu0nrSU/33o7jjSVjeM1sO16JG\nVQhHrrWa0n7CA9K8UgmsHKhgwsYGi4aZqz2Yaw2UNHL0TNl8oZ7H12mTj6xeDcuk\nzfQq15+6Ht4/Uhp0+k4Eii+YGeX+57omzguxvv3rmRc9XmlnZbOA7Fk4BHVs8RxM\n1wyD5eTFY+w9SwPpAwoXqfeylasmHNBmbeX2zyQrxjUvrJGerel9rNvPV1nYRdce\nBdW5Q5F5CVRPC2q1zpWFEvuWtSHrJXNAWcPZ/zYJvZj/jKIU93I72vsbFC9ibbO4\n6H6/FnmlZkRH56CR34PEx7D48YZDrlF/CtoI80K9kxKZmDhw63ZwonG91G3QEagq\nR/4/j5NX/qHm+A64inG4\n=vhR4\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 85a2f73e0ed3e745388f10323afb61c058be127a\nparent 7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e\nparent 4652e7bea954b2f19b3e7c5e86bb5aec5904bb90\nauthor Julian Wang <zlwang@ca.ibm.com> 1742511813 -0400\ncommitter GitHub <noreply@github.com> 1742511813 -0400\n\nMerge pull request #21195 from rmnattas/x-arrstrchk\n\nEvaluate destination subtrees early when deferring destination eval",
          "verified_at": "2025-03-20T23:08:36Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dea4d163f15f411db38ec5f0269c3b5009609921",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/dea4d163f15f411db38ec5f0269c3b5009609921",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dea4d163f15f411db38ec5f0269c3b5009609921/comments",
      "author": {
        "login": "zl-wang",
        "id": 22380239,
        "node_id": "MDQ6VXNlcjIyMzgwMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/22380239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zl-wang",
        "html_url": "https://github.com/zl-wang",
        "followers_url": "https://api.github.com/users/zl-wang/followers",
        "following_url": "https://api.github.com/users/zl-wang/following{/other_user}",
        "gists_url": "https://api.github.com/users/zl-wang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zl-wang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zl-wang/subscriptions",
        "organizations_url": "https://api.github.com/users/zl-wang/orgs",
        "repos_url": "https://api.github.com/users/zl-wang/repos",
        "events_url": "https://api.github.com/users/zl-wang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zl-wang/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e"
        },
        {
          "sha": "4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/4652e7bea954b2f19b3e7c5e86bb5aec5904bb90"
        }
      ]
    },
    {
      "sha": "ee64e344f2d4e90e06bafedcfb98ff6537f91063",
      "node_id": "C_kwDOBgtdddoAKGVlNjRlMzQ0ZjJkNGU5MGUwNmJhZmVkY2ZiOThmZjY1MzdmOTEwNjM",
      "commit": {
        "author": {
          "name": "Julian Wang",
          "email": "zlwang@ca.ibm.com",
          "date": "2025-03-20T23:03:48Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-20T23:03:48Z"
        },
        "message": "Merge pull request #21323 from rmnattas/z-arrstrchk\n\nGuard ArrayStoreCHK early subtree eval tree shape",
        "tree": {
          "sha": "c0d4b7f3bd3427afa29b860830e26ab073135278",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/c0d4b7f3bd3427afa29b860830e26ab073135278"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/ee64e344f2d4e90e06bafedcfb98ff6537f91063",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn3J7UCRC1aQ7uu5UhlAAAbz0QAG2KDSvLlAHeHgJYbLhpSn/D\n02VexIWzEMEwWawxCS4zTsX1ZYRhi7PCUvaGEnV19qsiQdEYZup6YJc5eLQlcerG\nC49Ak/SKGej/tQZ6bNkK3aWnfq7n5M9S6gbjgFgwQR/wbMSApEd7PSEbOo0kTebC\nWqkvEcZZOO+4b/7i2JhNKTvluLAtLw0mJDUGnFQYNdFt0zVVJXtGRzRXlq/yVF0Z\nzRoPHCJ1I6koULTX1GGjamKblPV7YYY89MnkqGGEGx+pJRbc8t0RUD8aPCoUbLI3\nvh34SbTDasJO2/VW+Z/CPY9xEbapHcoOtu6qnEhdgyGqSzxtAn5spyxZ3MYMTmxq\ncB2escLY+O65uFMMKcnovJcg1TEIUPB5Tja3TwMMQJYBZvu6RZrUX9+1F6xKej2q\nWqxwKFCNg1BPu0drq/+Adwz4t1Gp3pSjpgrHGwwptFBUFSCVKdK+kQGUbhHAcuO2\nMxdnLFnP8P/5iBpMdpH2gPCqnbQDz3wtRISeRWYjjW0UYihpkSo46iIQH2GATfOb\nO7BdImzEf+FFhkbsJ9ITOWDjkvMe2mczx9KZYus53HLhqt6t2EebcOVGVrVmz0gt\nfSCdMM+ZyrDQQ6PAa5r7dMp3vzDrjCItRVbvn9KE2aLXHA8745vIaebBk5vdnosE\nmJt38EkfyGFEBRAhpcVq\n=iFt1\n-----END PGP SIGNATURE-----\n",
          "payload": "tree c0d4b7f3bd3427afa29b860830e26ab073135278\nparent dea4d163f15f411db38ec5f0269c3b5009609921\nparent 0109bc472785a9e16bc88ed7bd4eac0fcb82e372\nauthor Julian Wang <zlwang@ca.ibm.com> 1742511828 -0400\ncommitter GitHub <noreply@github.com> 1742511828 -0400\n\nMerge pull request #21323 from rmnattas/z-arrstrchk\n\nGuard ArrayStoreCHK early subtree eval tree shape",
          "verified_at": "2025-03-20T23:05:59Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ee64e344f2d4e90e06bafedcfb98ff6537f91063",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/ee64e344f2d4e90e06bafedcfb98ff6537f91063",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ee64e344f2d4e90e06bafedcfb98ff6537f91063/comments",
      "author": {
        "login": "zl-wang",
        "id": 22380239,
        "node_id": "MDQ6VXNlcjIyMzgwMjM5",
        "avatar_url": "https://avatars.githubusercontent.com/u/22380239?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zl-wang",
        "html_url": "https://github.com/zl-wang",
        "followers_url": "https://api.github.com/users/zl-wang/followers",
        "following_url": "https://api.github.com/users/zl-wang/following{/other_user}",
        "gists_url": "https://api.github.com/users/zl-wang/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/zl-wang/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/zl-wang/subscriptions",
        "organizations_url": "https://api.github.com/users/zl-wang/orgs",
        "repos_url": "https://api.github.com/users/zl-wang/repos",
        "events_url": "https://api.github.com/users/zl-wang/events{/privacy}",
        "received_events_url": "https://api.github.com/users/zl-wang/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "dea4d163f15f411db38ec5f0269c3b5009609921",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/dea4d163f15f411db38ec5f0269c3b5009609921",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/dea4d163f15f411db38ec5f0269c3b5009609921"
        },
        {
          "sha": "0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0109bc472785a9e16bc88ed7bd4eac0fcb82e372",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/0109bc472785a9e16bc88ed7bd4eac0fcb82e372"
        }
      ]
    },
    {
      "sha": "9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "node_id": "C_kwDOBgtdddoAKDlkNmYzOTJlMjdkZGNmY2ZjNzFmZGIxOTJkZDc3YTAyZWExN2Q0NDg",
      "commit": {
        "author": {
          "name": "Tobi",
          "email": "atobia@ca.ibm.com",
          "date": "2025-03-21T17:58:18Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2025-03-21T17:58:18Z"
        },
        "message": "Merge pull request #21437 from thallium/threaddump\n\nFix thread raw state format in dumps",
        "tree": {
          "sha": "6e89592e8a33a00088d7d3055ac1e3b79def97b9",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/trees/6e89592e8a33a00088d7d3055ac1e3b79def97b9"
        },
        "url": "https://api.github.com/repos/eclipse-openj9/openj9/git/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
        "comment_count": 0,
        "verification": {
          "verified": true,
          "reason": "valid",
          "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJn3ai6CRC1aQ7uu5UhlAAAl4gQAHRqvUG7FFDOovko0sz7GWwh\ntMCGAGI37v1idY1eFFUaE1OUelwyrljT1CecLc8jA0v7qYHJGuyqNkK88FPK4Z7H\n+mzC/YPm8Aafjzz8x3lvRVM7YOvKthlFtLicjlac2w7fOxSsNOy7F5VTbZfOAYlJ\nL4GryR0iBsQ6iBuUvXP8LLhD+ks8PXYSvO1jAo3EW/9UTnniE0FBp5UewWRpTPy+\nQxQ7vO9+eIXzFpA2r3hbDYQpvx3HGmqH7ZQ5pf/uDnDP2F2OgEJVcE77f9E4DJ+Q\nk2+6g7Hi8l2uIul8QwvjP/+bFHbj7bEAXDOZDHWkBhlI3z+oZkWRBrFbCE2AdBzq\nm5Mq5d5Yop86qRTHQuJIwoJkmc4Csg3XMraVYlAP0XlBtMOvy5kHpF+jA866VC2V\n2/wgKaP1l8y/KCP12Z8/VFeOYeY9S+KUVf7UMVDrN65MeyX4rLlwQMHT6zLDueOG\nx1qaEQhiYg+pnc9ghelEYDKopkN1Dl1jD8mM+jQ7Fw1DjPEvOlJ07nU07e+6TYAb\nquCRc1tjsO0i8j7r8KNy07aHD7dspWTwCxi766YMlU680sKwLpan4ZWwC6km8pDZ\nBYTdCG5bAw0aqoOBsTnZwdFHZFppCHzSw1mjc4jSL+bxeZf1BSStz3lmBLq7oJro\n90cvd2KVfEjGbTEIhFYp\n=bg/p\n-----END PGP SIGNATURE-----\n",
          "payload": "tree 6e89592e8a33a00088d7d3055ac1e3b79def97b9\nparent ee64e344f2d4e90e06bafedcfb98ff6537f91063\nparent 0af7de5527a1f7f09f3e52859fc57f3d06e2aa45\nauthor Tobi <atobia@ca.ibm.com> 1742579898 -0400\ncommitter GitHub <noreply@github.com> 1742579898 -0400\n\nMerge pull request #21437 from thallium/threaddump\n\nFix thread raw state format in dumps",
          "verified_at": "2025-03-21T18:03:20Z"
        }
      },
      "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "html_url": "https://github.com/eclipse-openj9/openj9/commit/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448",
      "comments_url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/9d6f392e27ddcfcfc71fdb192dd77a02ea17d448/comments",
      "author": {
        "login": "tajila",
        "id": 12551021,
        "node_id": "MDQ6VXNlcjEyNTUxMDIx",
        "avatar_url": "https://avatars.githubusercontent.com/u/12551021?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/tajila",
        "html_url": "https://github.com/tajila",
        "followers_url": "https://api.github.com/users/tajila/followers",
        "following_url": "https://api.github.com/users/tajila/following{/other_user}",
        "gists_url": "https://api.github.com/users/tajila/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/tajila/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/tajila/subscriptions",
        "organizations_url": "https://api.github.com/users/tajila/orgs",
        "repos_url": "https://api.github.com/users/tajila/repos",
        "events_url": "https://api.github.com/users/tajila/events{/privacy}",
        "received_events_url": "https://api.github.com/users/tajila/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ee64e344f2d4e90e06bafedcfb98ff6537f91063",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/ee64e344f2d4e90e06bafedcfb98ff6537f91063",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/ee64e344f2d4e90e06bafedcfb98ff6537f91063"
        },
        {
          "sha": "0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
          "url": "https://api.github.com/repos/eclipse-openj9/openj9/commits/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45",
          "html_url": "https://github.com/eclipse-openj9/openj9/commit/0af7de5527a1f7f09f3e52859fc57f3d06e2aa45"
        }
      ]
    }
  ],
  "commit_diffs": {
    "fb6c2dc747165ce7dd86a9feb0177b696816e8d5": "diff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex 40af5779d04..645a5408d6d 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -78,7 +78,7 @@ J9::X86::CPU::enableFeatureMasks()\n                                         OMR_FEATURE_X86_FMA, OMR_FEATURE_X86_HLE, OMR_FEATURE_X86_RTM,\n                                         OMR_FEATURE_X86_SSE3, OMR_FEATURE_X86_AVX2, OMR_FEATURE_X86_AVX512F,\n                                         OMR_FEATURE_X86_AVX512VL, OMR_FEATURE_X86_AVX512BW, OMR_FEATURE_X86_AVX512DQ,\n-                                        OMR_FEATURE_X86_AVX512CD, OMR_FEATURE_X86_SSE4_2};\n+                                        OMR_FEATURE_X86_AVX512CD, OMR_FEATURE_X86_SSE4_2, OMR_FEATURE_X86_BMI2};\n \n    memset(_supportedFeatureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n    OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n@@ -360,6 +360,8 @@ J9::X86::CPU::supports_feature_test(uint32_t feature)\n          return TR::CodeGenerator::getX86ProcessorInfo().supportsHLE() == ans;\n       case OMR_FEATURE_X86_TM:\n          return TR::CodeGenerator::getX86ProcessorInfo().hasThermalMonitor() == ans;\n+      case OMR_FEATURE_X86_BMI2:\n+         return TR::CodeGenerator::getX86ProcessorInfo().supportsBMI2() == ans;\n       case OMR_FEATURE_X86_AVX:\n       case OMR_FEATURE_X86_AVX2:\n       case OMR_FEATURE_X86_AVX512F:\n",
    "91b60321c1399c4d5597be0227a152a7afd09e4f": "diff --git a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\nindex 5baaa83c008..bd5facc7d8a 100644\n--- a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n+++ b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n@@ -192,7 +192,6 @@ public void unlockAccess() {\n \t}\n \n \t@Hidden\n-\t@JvmtiMountTransition\n \tprivate static void enter(Continuation cont) {\n \t\ttry {\n \t\t\tcont.runnable.run();\n",
    "bc7ac0f24449044615c80b62adedacc0055b651c": "diff --git a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\nindex 42b0616c304..ab06f91bd9c 100644\n--- a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n+++ b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n@@ -345,6 +345,8 @@\n    java_util_HashMap_getNode,\n    java_util_HashMap_getNode_Object,\n    java_util_HashMap_findNonNullKeyEntry,\n+   java_util_HashMap_hash,\n+   java_util_HashMap_put,\n    java_util_HashMap_putImpl,\n    java_util_HashMap_resize,\n    java_util_HashMap_prepareArray,\ndiff --git a/runtime/compiler/env/j9method.cpp b/runtime/compiler/env/j9method.cpp\nindex bd2bec98b8a..a77ccff06f8 100644\n--- a/runtime/compiler/env/j9method.cpp\n+++ b/runtime/compiler/env/j9method.cpp\n@@ -2183,6 +2183,8 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::java_util_HashMap_get,                   \"get\",           \"(Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_getNode,               \"getNode\",       \"(ILjava/lang/Object;)Ljava/util/HashMap$Node;\")},\n       {x(TR::java_util_HashMap_getNode_Object,        \"getNode\",       \"(Ljava/lang/Object;)Ljava/util/HashMap$Node;\")},\n+      {x(TR::java_util_HashMap_hash,                  \"hash\",          \"(Ljava/lang/Object;)I\")},\n+      {x(TR::java_util_HashMap_put,                   \"put\",           \"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_putImpl,               \"putImpl\",       \"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_findNonNullKeyEntry,   \"findNonNullKeyEntry\",         \"(Ljava/lang/Object;II)Ljava/util/HashMap$Entry;\")},\n       {x(TR::java_util_HashMap_resize,                \"resize\",         \"()[Ljava/util/HashMap$Node;\")},\n",
    "53e3d9df6ac9e5a1c1a2263da4b815bc409676d8": "diff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex ca1cdf144be..7c0bc986ce4 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -748,6 +748,17 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             auto calleeMethod = (TR_ResolvedJ9Method*)calltarget->_calleeMethod;\n             resolvedMethod = calleeMethod->getResolvedPossiblyPrivateVirtualMethod(comp(), cpIndex, true, &isUnresolvedInCP);\n \n+            if (resolvedMethod)\n+               {\n+               TR::RecognizedMethod rm = resolvedMethod->getRecognizedMethod();\n+               if (rm == TR::java_util_HashMap_put ||\n+                   rm == TR::java_util_HashMap_get ||\n+                   rm == TR::java_lang_Object_hashCode)\n+                  {\n+                  nph.setNeedsPeekingToTrue();\n+                  heuristicTrace(tracer(), \"Depth %d: invokevirtual call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, tracer()->traceSignature(resolvedMethod));\n+                  }\n+               }\n             ///if (!resolvedMethod || isUnresolvedInCP || resolvedMethod->isCold(comp(), true))\n             if ((isUnresolvedInCP && !resolvedMethod) || (resolvedMethod\n                   && resolvedMethod->isCold(comp(), true)))\n@@ -824,6 +835,13 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             TR::Node *parent = 0;\n             TR::Node *callNode = 0;\n             TR::ResolvedMethodSymbol *resolvedSymbol = 0;\n+\n+            if (resolvedMethod &&\n+               resolvedMethod->getRecognizedMethod() == TR::java_util_HashMap_hash)\n+               {\n+               nph.setNeedsPeekingToTrue();\n+               heuristicTrace(tracer(), \"Depth %d: invokestatic call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, tracer()->traceSignature(resolvedMethod));\n+               }\n             if (!resolvedMethod || isUnresolvedInCP || resolvedMethod->isCold(comp(), false))\n                {\n                if (unresolvedSymbolsAreCold)\n@@ -846,21 +864,26 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             flags[i].set(InterpreterEmulator::BytecodePropertyFlag::isUnsanitizeable);\n             break;\n          case J9BCinvokeinterface:\n-            cpIndex = bci.next2Bytes();\n-#if JAVA_SPEC_VERSION >= 21\n             {\n+            cpIndex = bci.next2Bytes();\n             TR::Method *meth = comp()->fej9()->createMethod(comp()->trMemory(), calltarget->_calleeMethod->containingClass(), cpIndex);\n             if (meth)\n                {\n                const char * sig = meth->signature(comp()->trMemory());\n-               if (sig && (!strncmp(sig, \"java/lang/foreign/MemorySegment.get\", 35) || !strncmp(sig, \"java/lang/foreign/MemorySegment.set\", 35) ))\n+               if (sig && (!strncmp(sig, \"java/util/Map.put\", 17) || !strncmp(sig, \"java/util/Map.get\", 17)))\n+                  {\n+                  nph.setNeedsPeekingToTrue();\n+                  heuristicTrace(tracer(), \"Depth %d: invokeinterface call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, sig);\n+                  }\n+#if JAVA_SPEC_VERSION >= 21\n+               else if (sig && (!strncmp(sig, \"java/lang/foreign/MemorySegment.get\", 35) || !strncmp(sig, \"java/lang/foreign/MemorySegment.set\", 35) ))\n                   {\n                   nph.setNeedsPeekingToTrue();\n                   heuristicTrace(tracer(), \"Depth %d: invokeinterface call at bc index %d has Signature %s, enabled peeking for caller to fold layout field load necessary for VarHandle operation inlining.\", _recursionDepth, i, sig);\n                   }\n+#endif // JAVA_SPEC_VERSION >= 21\n                }\n             }\n-#endif // JAVA_SPEC_VERSION >= 21\n             flags[i].set(InterpreterEmulator::BytecodePropertyFlag::isUnsanitizeable);\n             break;\n          case J9BCgetfield:\n",
    "7bf675828edc6d49661435a80b038b595056d6e8": "diff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex dabd38724ad..60228fc2a28 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -3327,6 +3327,9 @@ void TR_MultipleCallTargetInliner::recursivelyWalkCallTargetAndPerformAction(TR_\n \n    debugTrace(tracer(),\"recursivelyWalkingCallTargetAndPerformAction: Considering Target %p. node estimate before = %d maxbcindex = %d\",ct,action.getNodeEstimate(),getPolicy()->getInitialBytecodeSize(ct->_calleeMethod, 0, comp()));\n \n+   if (canSkipCountingNodes(ct))\n+      return;\n+\n    action(ct,comp());\n \n    TR_CallSite *callsite = 0;\n@@ -3941,9 +3944,9 @@ bool TR_MultipleCallTargetInliner::inlineCallTargets(TR::ResolvedMethodSymbol *c\n          estimatedNumberOfNodes += myEstimate.getNodeEstimate();\n \n          if (comp()->trace(OMR::inlining))\n-            traceMsg(comp(), \"Estimated Number of Nodes is %d after calltarget %p\", estimatedNumberOfNodes,calltarget);\n+            traceMsg(comp(), \"Estimated Number of Nodes is %d after calltarget %p\\n\", estimatedNumberOfNodes,calltarget);\n \n-         debugTrace(tracer(),\"Estimated Number of Nodes is %d after calltarget %p\", estimatedNumberOfNodes,calltarget);\n+         debugTrace(tracer(),\"Estimated Number of Nodes is %d after calltarget %p\\n\", estimatedNumberOfNodes,calltarget);\n \n          float factor = 1.1F;          // this factor was chosen based on a study of a large WAS app that showed that getMaxBytecodeindex was 92% accurate compared to nodes generated\n \n@@ -4046,6 +4049,33 @@ bool TR_MultipleCallTargetInliner::inlineCallTargets(TR::ResolvedMethodSymbol *c\n    return anySuccess;\n    }\n \n+bool\n+TR_MultipleCallTargetInliner::canSkipCountingNodes(TR_CallTarget* callTarget)\n+   {\n+   TR::RecognizedMethod rm = callTarget->_calleeMethod->getRecognizedMethod();\n+   switch (rm)\n+      {\n+      case TR::java_lang_Object_hashCode:\n+         {\n+         if (callTarget->_myCallSite &&\n+               callTarget->_myCallSite->_ecsPrexArgInfo)\n+            {\n+            TR_PrexArgument* arg  = callTarget->_myCallSite->_ecsPrexArgInfo->get(0);\n+            if (arg && arg->getClass() && arg->classIsFixed() && arg->hasKnownObjectIndex())\n+               {\n+               if (comp()->trace(OMR::inlining))\n+                  traceMsg(comp(), \"Skipping node counting for sub call graph of java/lang/Object.hashCode()I\\n\");\n+               return true;\n+               }\n+            }\n+         }\n+         break;\n+      default:\n+         break;\n+      }\n+   return false;\n+   }\n+\n void TR_MultipleCallTargetInliner::weighCallSite( TR_CallStack * callStack , TR_CallSite *callsite, bool currentBlockHasExceptionSuccessors, bool dontAddCalls)\n    {\n    TR_J9InlinerPolicy *j9inlinerPolicy = (TR_J9InlinerPolicy *) getPolicy();\ndiff --git a/runtime/compiler/optimizer/J9Inliner.hpp b/runtime/compiler/optimizer/J9Inliner.hpp\nindex 2f7970f15d0..9f94661f863 100644\n--- a/runtime/compiler/optimizer/J9Inliner.hpp\n+++ b/runtime/compiler/optimizer/J9Inliner.hpp\n@@ -128,6 +128,20 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n        *    True if the given calltarget should be inlined\n        */\n       bool inlineSubCallGraph(TR_CallTarget* calltarget);\n+\n+      /*\n+       * \\brief\n+       *   For some call targets and their sub call graphs, it may be possible to simplify them into simple operations in\n+       *   certain situations, such as when known object info is being passed as arg. In such cases, the node count\n+       *   obtained via generateNodeEstimate would not truly reflect the number of nodes that are actually introduced. This\n+       *   function provides a mechanism for examining call targets and evaluating whether it is safe to skip counting nodes.\n+       *\n+       * \\param callTarget\n+       *    the call target to examine\n+       * \\return\n+       *    true if node counting can be skipped for callTarget, false otherwise\n+       */\n+      bool canSkipCountingNodes(TR_CallTarget* callTarget);\n    };\n \n class TR_J9InlinerUtil: public OMR_InlinerUtil\n",
    "24215b642253d08191a47d0df5a86db4d3f5e165": "diff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex 60228fc2a28..fddae7d956c 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -267,7 +267,8 @@ TR_J9InlinerPolicy::determineInliningHeuristic(TR::ResolvedMethodSymbol *callerS\n    return;\n    }\n \n-void TR_MultipleCallTargetInliner::generateNodeEstimate::operator ()(TR_CallTarget *ct, TR::Compilation *comp)\n+void\n+TR_MultipleCallTargetInliner::NodeEstimate::operator ()(TR_CallTarget *ct, TR::Compilation *comp)\n    {\n    static const char *qq1 = feGetEnv(\"TR_NodeEstimateNumerator\");\n    static const uint32_t userNumer = ( qq1 ) ? atoi(qq1) : 1;\n@@ -3321,27 +3322,25 @@ TR_Inliner::optDetailString() const throw()\n    return \"O^O INLINER: \";\n    }\n \n-template <typename FunctObj>\n-void TR_MultipleCallTargetInliner::recursivelyWalkCallTargetAndPerformAction(TR_CallTarget *ct, FunctObj &action)\n+void\n+TR_MultipleCallTargetInliner::recursivelyWalkCallTargetAndGenerateNodeEstimate(TR_CallTarget *ct, NodeEstimate &estimate)\n    {\n \n-   debugTrace(tracer(),\"recursivelyWalkingCallTargetAndPerformAction: Considering Target %p. node estimate before = %d maxbcindex = %d\",ct,action.getNodeEstimate(),getPolicy()->getInitialBytecodeSize(ct->_calleeMethod, 0, comp()));\n+   debugTrace(tracer(),\"recursivelyWalkCallTargetAndGenerateNodeEstimate: Considering Target %p. node estimate before = %d maxbcindex = %d\",ct,estimate.getNodeEstimate(),getPolicy()->getInitialBytecodeSize(ct->_calleeMethod, 0, comp()));\n \n    if (canSkipCountingNodes(ct))\n       return;\n \n-   action(ct,comp());\n+   estimate(ct,comp());\n \n    TR_CallSite *callsite = 0;\n    for(callsite = ct->_myCallees.getFirst() ; callsite ; callsite = callsite->getNext()   )\n       {\n       for (int32_t i = 0 ; i < callsite->numTargets() ; i++)\n          {\n-         recursivelyWalkCallTargetAndPerformAction(callsite->getTarget(i),action);\n+         recursivelyWalkCallTargetAndGenerateNodeEstimate(callsite->getTarget(i),estimate);\n          }\n       }\n-\n-\n    }\n \n int32_t\n@@ -3939,8 +3938,8 @@ bool TR_MultipleCallTargetInliner::inlineCallTargets(TR::ResolvedMethodSymbol *c\n       debugTrace(tracer(), \"Initially, estimatedNumberOfNodes = %d\\n\", estimatedNumberOfNodes);\n       for (calltarget = _callTargets.getFirst(); calltarget != callTargetToChop; prev = calltarget, calltarget = calltarget->getNext())\n          {\n-         generateNodeEstimate myEstimate;\n-         recursivelyWalkCallTargetAndPerformAction(calltarget, myEstimate);\n+         NodeEstimate myEstimate;\n+         recursivelyWalkCallTargetAndGenerateNodeEstimate(calltarget, myEstimate);\n          estimatedNumberOfNodes += myEstimate.getNodeEstimate();\n \n          if (comp()->trace(OMR::inlining))\n@@ -4659,8 +4658,8 @@ void TR_MultipleCallTargetInliner::processChoppedOffCallTargets(TR_CallTarget *l\n          {\n          if (inlineSubCallGraph(calltarget))\n             {\n-            generateNodeEstimate myEstimate;\n-            recursivelyWalkCallTargetAndPerformAction(calltarget, myEstimate);\n+            NodeEstimate myEstimate;\n+            recursivelyWalkCallTargetAndGenerateNodeEstimate(calltarget, myEstimate);\n             estimatedNumberOfNodes += myEstimate.getNodeEstimate();\n             /*\n              * ForceInline targets and JSR292 methods should always be inlined regarless of budget. However, with\ndiff --git a/runtime/compiler/optimizer/J9Inliner.hpp b/runtime/compiler/optimizer/J9Inliner.hpp\nindex 9f94661f863..c859c925bfb 100644\n--- a/runtime/compiler/optimizer/J9Inliner.hpp\n+++ b/runtime/compiler/optimizer/J9Inliner.hpp\n@@ -69,17 +69,12 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n    {\n    public:\n \n-      template <typename FunctObj>\n-      void recursivelyWalkCallTargetAndPerformAction(TR_CallTarget *ct, FunctObj &action);\n-\n-      //void generateNodeEstimate(TR_CallTarget *ct, TR::Compilation *comp);\n-\n-      class generateNodeEstimate\n+      struct NodeEstimate\n          {\n-         public:\n-            generateNodeEstimate() : _nodeEstimate(0){ }\n-            void operator()(TR_CallTarget *ct, TR::Compilation *comp);\n-            int32_t getNodeEstimate() { return _nodeEstimate; }\n+         NodeEstimate() : _nodeEstimate(0){ }\n+         void operator()(TR_CallTarget *ct, TR::Compilation *comp);\n+         int32_t getNodeEstimate() { return _nodeEstimate; }\n+\n          private:\n             int32_t _nodeEstimate;\n          };\n@@ -91,6 +86,16 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n \n       TR_LinkHead<TR_CallTarget> _callTargets; // This list only contains the call targets from top most level\n \n+      /*\n+       * \\brief Recursively walks call target and estimates the number of nodes of a call graph.\n+       *\n+       * \\param ct\n+       *    the TR_CallTarget to evaluate\n+       * \\param estimate\n+       *    the NodeEstimate to keep track of the number of nodes\n+       */\n+      void recursivelyWalkCallTargetAndGenerateNodeEstimate(TR_CallTarget *ct, NodeEstimate &estimate);\n+\n    protected:\n       virtual int32_t scaleSizeBasedOnBlockFrequency(int32_t bytecodeSize, int32_t frequency, int32_t borderFrequency, TR_ResolvedMethod * calleeResolvedMethod, TR::Node *callNode, int32_t coldBorderFrequency = 0);\n       float getScalingFactor(float factor);\n@@ -133,7 +138,7 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n        * \\brief\n        *   For some call targets and their sub call graphs, it may be possible to simplify them into simple operations in\n        *   certain situations, such as when known object info is being passed as arg. In such cases, the node count\n-       *   obtained via generateNodeEstimate would not truly reflect the number of nodes that are actually introduced. This\n+       *   obtained via NodeEstimate would not truly reflect the number of nodes that are actually introduced. This\n        *   function provides a mechanism for examining call targets and evaluating whether it is safe to skip counting nodes.\n        *\n        * \\param callTarget\n",
    "4e5d2264d93b860ca9d97c1eb340e35c39bd48e9": "diff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex f06806e42ad..69880f4ce41 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -79,9 +79,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t<impl>openj9</impl>\n \t\t\t<impl>ibm</impl>\n \t\t</impls>\n-\t\t<!-- For the time being, JFR tests are only limited to JDK11+. -->\n+\t\t<!-- For the time being, these tests are limited to JDK17+. -->\n \t\t<versions>\n-\t\t\t<version>11+</version>\n+\t\t\t<version>17+</version>\n \t\t</versions>\n \t\t<features>\n \t\t\t<feature>JFR:required</feature>\n",
    "b4a08b0f76e5daeb58f44cc05be09938b114a367": "diff --git a/runtime/compiler/control/J9Options.cpp b/runtime/compiler/control/J9Options.cpp\nindex 248414cb1c6..15bd7b1c62f 100644\n--- a/runtime/compiler/control/J9Options.cpp\n+++ b/runtime/compiler/control/J9Options.cpp\n@@ -3280,7 +3280,13 @@ bool J9::Options::feLatePostProcess(void * base, TR::OptionSet * optionSet)\n       vm->initializeHasResumableTrapHandler();\n       }\n \n-   // The trap handler currently is working (jitt fails) on Ottawa's IA32 Hardhat machine.\n+   // If Control Flow Guard (CFG) is enabled in Windows, set TR_NoResumableTrapHandler.\n+   if (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED))\n+      {\n+      self()->setOption(TR_NoResumableTrapHandler);\n+      }\n+\n+   // The trap handler currently is working (jit fails) on Ottawa's IA32 Hardhat machine.\n    // The platform isn't shipping so the priority of fixing the problem is currently low.\n    //\n    #if defined(HARDHAT) && defined(TR_TARGET_X86)\ndiff --git a/runtime/compiler/runtime/SignalHandler.c b/runtime/compiler/runtime/SignalHandler.c\nindex 4507febccf1..2f659f719aa 100644\n--- a/runtime/compiler/runtime/SignalHandler.c\n+++ b/runtime/compiler/runtime/SignalHandler.c\n@@ -194,17 +194,17 @@ static IDATA jitX86decodeIdivInstruction(J9PortLibrary* portLib, void* sigInfo,\n \t\tU_8 rm = modRM & 0x7;\n \n \t\t/*\n-\t\t Mod R/M\t  SIB\t Total Instruction Size\n-\t\t 1 11xxxxxx\t n/a\t\t\t   2\n-\t\t 2 00xxx101\t n/a\t\t\t   6\n-\t\t 3 00xxx100   xxxxx101\t\t\t7\n-\t\t 4 00xxx100   xxxxxyyy\t\t\t3\n-\t\t 5 00xxxyyy\t n/a\t\t\t   2\n-\t\t 6 01xxx100   xxxxxxxx\t\t\t4\n-\t\t 7 01xxxyyy\t n/a\t\t\t   3\n-\t\t 8 10xxx100   xxxxxxxx\t\t\t7\n-\t\t 9 10xxxyyy\t n/a\t\t\t   6\n-\t*/\n+\t\t\tMod R/M      SIB     Total Instruction Size\n+\t\t\t1 11xxxxxx   n/a             2\n+\t\t\t2 00xxx101   n/a             6\n+\t\t\t3 00xxx100   xxxxx101        7\n+\t\t\t4 00xxx100   xxxxxyyy        3\n+\t\t\t5 00xxxyyy   n/a             2\n+\t\t\t6 01xxx100   xxxxxxxx        4\n+\t\t\t7 01xxxyyy   n/a             3\n+\t\t\t8 10xxx100   xxxxxxxx        7\n+\t\t\t9 10xxxyyy   n/a             6\n+\t\t */\n \n \n \t\treg = rm;\n@@ -241,15 +241,15 @@ static IDATA jitX86decodeIdivInstruction(J9PortLibrary* portLib, void* sigInfo,\n \n \t\t}\n \n-\t if (mod == 1) {\n-\t\t /* one byte displacement */\n-\t\t disp = *(signed char *)eip;\n-\t } else if (mod == 2 || (mod==0 && rm ==5)) {\n-\t\t /* 4 byte displacement */\n-\t\t disp = *(int *)eip;\n-\t } else {\n-\t\t /* no disp */\n-\t }\n+\t\tif (mod == 1) {\n+\t\t\t/* one byte displacement */\n+\t\t\tdisp = *(signed char *)eip;\n+\t\t} else if (mod == 2 || (mod==0 && rm ==5)) {\n+\t\t\t/* 4 byte displacement */\n+\t\t\tdisp = *(int *)eip;\n+\t\t} else {\n+\t\t\t/* no disp */\n+\t\t}\n \n \n \t\tif (rm==4) {\n@@ -337,86 +337,93 @@ UDATA jitX86Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n \t\t} else {\n \t\t\tvoid * stackMap;\n \t\t\tUDATA registerMap;\n-\n-\t\t\tswitch (sigType) {\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n-\t\t\t\tif (0xF7 == *eip ) {\n-\t\t\t\t\t/* find the divisor */\n-\t\t\t\t\tUDATA div = jitX86decodeIdivInstruction(PORTLIB, sigInfo, eip);\n-\t\t\t\t\tif (div != 0 ) {\n-\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n-\t\t\t\t\t\t*eaxPtr = 0x80000000;\n-\t\t\t\t\t\t*edxPtr = 0;\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t/*\n+\t\t\t * When Control Flow Guard (CFG) is enabled in Windows, it can terminate the program unexpectedly\n+\t\t\t * if the stack pointer is not within the system stack limit and no log files will be generated.\n+\t\t\t * We should skip the attempt to throw an exception here so that the log files can be generated.\n+\t\t\t */\n+\t\t\tBOOLEAN isCFGEnabled = J9_ARE_ANY_BITS_SET(vmThread->javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED);\n+\n+\t\t\tif (!isCFGEnabled) {\n+\t\t\t\tswitch (sigType) {\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n+\t\t\t\t\tif (0xF7 == *eip ) {\n+\t\t\t\t\t\t/* find the divisor */\n+\t\t\t\t\t\tUDATA div = jitX86decodeIdivInstruction(PORTLIB, sigInfo, eip);\n+\t\t\t\t\t\tif (div != 0 ) {\n+\t\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n+\t\t\t\t\t\t\t*eaxPtr = 0x80000000;\n+\t\t\t\t\t\t\t*edxPtr = 0;\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif (((J9JITExceptionTable *)1) == exceptionTable) {\n-\t\t\t\t\t/* did we come from the long divide helper? */\n-\n-\t\t\t\t\tvmThread->jitException = (J9Object *) *((UDATA *) *espPtr);\n-\t\t\t\t\t/* 4 pushes + ret addr */\n-\t\t\t\t\t*espPtr += 5 * sizeof(UDATA);\n-\t\t\t\t} else if (((J9JITExceptionTable *)2) == exceptionTable) {\n-\t\t\t\t\t/* did we come from the long remainder helper? */\n-\n-\t\t\t\t\tvmThread->jitException = (J9Object *) *(((UDATA *) *espPtr) + 3);\n-\t\t\t\t\t*ecxPtr = *(((UDATA *) *espPtr) + 1);\n-\t\t\t\t\t*espPtr += 8 * sizeof(UDATA); /* 7 pushes + ret addr */\n-\t\t\t\t} else {\n-\t\t\t\t\t/* add 1 so as to move past the instruction so that the exception thrower will -1 like it would in all other cases. */\n-\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA)eip + 1);\n-\t\t\t\t}\n \n-\t\t\t\t*eipPtr = (UDATA) ((void *) &jitHandleIntegerDivideByZeroTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = *ebpPtr;\n-\t\t\t\t*ebpPtr = (UDATA) vmThread;\n+\t\t\t\t\tif (((J9JITExceptionTable *)1) == exceptionTable) {\n+\t\t\t\t\t\t/* did we come from the long divide helper? */\n+\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) *((UDATA *) *espPtr);\n+\t\t\t\t\t\t/* 4 pushes + ret addr */\n+\t\t\t\t\t\t*espPtr += 5 * sizeof(UDATA);\n+\t\t\t\t\t} else if (((J9JITExceptionTable *)2) == exceptionTable) {\n+\t\t\t\t\t\t/* did we come from the long remainder helper? */\n+\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) *(((UDATA *) *espPtr) + 3);\n+\t\t\t\t\t\t*ecxPtr = *(((UDATA *) *espPtr) + 1);\n+\t\t\t\t\t\t*espPtr += 8 * sizeof(UDATA); /* 7 pushes + ret addr */\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t/* add 1 so as to move past the instruction so that the exception thrower will -1 like it would in all other cases. */\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA)eip + 1);\n+\t\t\t\t\t}\n \n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t*eipPtr = (UDATA) ((void *) &jitHandleIntegerDivideByZeroTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = *ebpPtr;\n+\t\t\t\t\t*ebpPtr = (UDATA) vmThread;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n-\t\t\t\tif (0xF7 == *eip) {\n-\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n-\t\t\t\t\t*eaxPtr = 0x80000000;\n-\t\t\t\t\t*edxPtr = 0;\n \t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n-\t\t\t\t}\n-\t\t\t\t/* unexpected SIGFPE */\n-\t\t\t\tbreak;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n-\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\t\t\t\t\tif (0xF7 == *eip) {\n+\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n+\t\t\t\t\t\t*eaxPtr = 0x80000000;\n+\t\t\t\t\t\t*edxPtr = 0;\n+\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* unexpected SIGFPE */\n \t\t\t\t\tbreak;\n-\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n \n-\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n-\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n-\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {\n-\t\t\t\t\t\t/* we know where the fault occurred, and it wasn't within the first page. This is an unexpected error */\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n \t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\n+\t\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {\n+\t\t\t\t\t\t\t/* we know where the fault occurred, and it wasn't within the first page. This is an unexpected error */\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n \n-\t\t\t\tstackMap = jitConfig->jitGetStackMapFromPC(vmThread, vmThread->javaVM, exceptionTable, (UDATA) (eip + 1));\n-\t\t\t\tif (stackMap ) {\n-\t\t\t\t\tregisterMap = jitConfig->getJitRegisterMap(exceptionTable, stackMap);\n-\t\t\t\t\t*espPtr += (((registerMap >> 16) & 0xFF) * sizeof(UDATA));\n-\t\t\t\t}\n+\t\t\t\t\tstackMap = jitConfig->jitGetStackMapFromPC(vmThread, vmThread->javaVM, exceptionTable, (UDATA) (eip + 1));\n+\t\t\t\t\tif (stackMap ) {\n+\t\t\t\t\t\tregisterMap = jitConfig->getJitRegisterMap(exceptionTable, stackMap);\n+\t\t\t\t\t\t*espPtr += (((registerMap >> 16) & 0xFF) * sizeof(UDATA));\n+\t\t\t\t\t}\n \n-\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) eip + 1);\n-\t\t\t\t*eipPtr = (UDATA)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = (UDATA) *ebpPtr;\n-\t\t\t\t*ebpPtr = (UDATA) vmThread;\n+\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) eip + 1);\n+\t\t\t\t\t*eipPtr = (UDATA)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = (UDATA) *ebpPtr;\n+\t\t\t\t\t*ebpPtr = (UDATA) vmThread;\n \n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n-\t\t\t\t/* unexpected SIGILL */\n-\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n+\t\t\t\t\t/* unexpected SIGILL */\n+\t\t\t\t\tbreak;\n \n+\t\t\t\t}\n \t\t\t}\n-\n \t\t\t/*\n \t\t\t * if we reached here, then this is an unexpected error. Build a resolve\n \t\t\t * frame so that the stack is walkable and allow normal fault handling\n@@ -1699,7 +1706,7 @@ static I_64 jitAMD64decodeDiv(J9PortLibrary* portLib, U_8 *rip, void *sigInfo, U\n \n \t\t/* calculate scale*index except when index = 0x4, and REX.X is not set\n \t\t * i.e., can't encode index = rSP\n-\t\t*/\n+\t\t */\n \t\tif ((index == 0x4) && !(IS_REXX(REX_PREFIX))) {\n \t\t\t/* do nothing  */\n \t\t} else {\n@@ -1777,105 +1784,114 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \t\t} else {\n \t\t\tvoid * stackMap;\n \t\t\tUDATA registerMap;\n-\t\t\tswitch (sigType) {\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n+\t\t\t/*\n+\t\t\t * When Control Flow Guard (CFG) is enabled in Windows, it can terminate the program unexpectedly\n+\t\t\t * if the stack pointer is not within the system stack limit and no log files will be generated.\n+\t\t\t * We should skip the attempt to throw an exception here so that the log files can be generated.\n+\t\t\t */\n+\t\t\tBOOLEAN isCFGEnabled = J9_ARE_ANY_BITS_SET(vmThread->javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED);\n+\n+\t\t\tif (!isCFGEnabled) {\n+\t\t\t\tswitch (sigType) {\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n #if !defined(LINUX)\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n #endif\n-\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n-\n-\t\t\t\t\tIDATA div;\n-\t\t\t\t\tUDATA ins_size, operand_size;\n-\n-\t \t\t\t\t/* find divisor */\n-\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n-\n-\t\t\t\t\tif (div != 0 ) {\n-\n-\t\t\t\t\t\t*ripPtr += ins_size;\n-\t\t\t\t\t\tswitch (operand_size) {\n-\t\t\t\t\t\tcase 64:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 32:\n-\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n-\t\t\t\t\t\t\t break;\n-\t\t\t\t\t\tcase 16:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 8:\n-\t\t\t\t\t\t\t*raxPtr = 0x80;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tdefault:\n-\t\t\t\t   \t\t\t/* error */\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n+\n+\t\t\t\t\t\tIDATA div;\n+\t\t\t\t\t\tUDATA ins_size, operand_size;\n+\n+\t\t\t\t\t\t/* find divisor */\n+\t\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n+\n+\t\t\t\t\t\tif (div != 0 ) {\n+\n+\t\t\t\t\t\t\t*ripPtr += ins_size;\n+\t\t\t\t\t\t\tswitch (operand_size) {\n+\t\t\t\t\t\t\tcase 64:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 32:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 16:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 8:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t/* error */\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t*rdxPtr = 0;\n+\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t*rdxPtr = 0;\n-\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t}\n-\t\t\t\t}\n \n-\t \t\t\t/* Add 1 to make rip point inside the instruction\n-\t \t\t\t*   since we assume most pc values are after a call instruction\n-\t \t\t\t*   the first byte of an instruction might not be in the exception range\n-\t \t\t\t*   Note, adding the instruction length is also incorrect, since it is possible\n-\t \t\t\t*   that exactly one instruction was in the range\n-\t\t\t\t*/\n-\t\t\t\tvmThread->jitException = (J9Object *) (*ripPtr + 1);\n-\n-\t\t\t\t*ripPtr = (U_64) ((void *) &jitHandleIntegerDivideByZeroTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n-\t\t\t\t*rbpPtr = (U_64) vmThread;\n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t/* Add 1 to make rip point inside the instruction\n+\t\t\t\t\t*   since we assume most pc values are after a call instruction\n+\t\t\t\t\t*   the first byte of an instruction might not be in the exception range\n+\t\t\t\t\t*   Note, adding the instruction length is also incorrect, since it is possible\n+\t\t\t\t\t*   that exactly one instruction was in the range\n+\t\t\t\t\t*/\n+\t\t\t\t\tvmThread->jitException = (J9Object *) (*ripPtr + 1);\n+\n+\t\t\t\t\t*ripPtr = (U_64) ((void *) &jitHandleIntegerDivideByZeroTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n+\t\t\t\t\t*rbpPtr = (U_64) vmThread;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n #ifdef LINUX\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n-\n-\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n-\t\t\t\t\tI_64 div;\n-\t\t\t\t\tUDATA ins_size, operand_size;\n-\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n-\n-\t\t\t\t\tif ( div != 0) {\n-\t\t\t\t\t\t*ripPtr += ins_size;\n-\t\t\t\t\t\tswitch (operand_size) {\n-\t\t\t\t\t\tcase 64:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n-\t\t\t\t\t\t\t break;\n-\t\t\t\t\t\tcase 32:\n-\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 16:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 8:\n-\t\t\t\t\t\t\t*raxPtr = 0x80;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t/* error */\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\n+\t\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n+\t\t\t\t\t\tI_64 div;\n+\t\t\t\t\t\tUDATA ins_size, operand_size;\n+\t\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n+\n+\t\t\t\t\t\tif ( div != 0) {\n+\t\t\t\t\t\t\t*ripPtr += ins_size;\n+\t\t\t\t\t\t\tswitch (operand_size) {\n+\t\t\t\t\t\t\tcase 64:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 32:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 16:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 8:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t/* error */\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t*rdxPtr = 0;\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t*rdxPtr = 0;\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-#endif\n-\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n-\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n \t\t\t\t\tbreak;\n-\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+#endif\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n+\t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n \n-\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) rip + 1);\n-\t\t\t\t*ripPtr = (U_64)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n-\t\t\t\t*rbpPtr = (U_64) vmThread;\n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) rip + 1);\n+\t\t\t\t\t*ripPtr = (U_64)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n+\t\t\t\t\t*rbpPtr = (U_64) vmThread;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n-\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t/*\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 4aa61beccbf..579f20925da 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -649,6 +649,7 @@ extern \"C\" {\n #define J9_SIG_NO_SIG_USR2 0x80\n #define J9_SIG_PERCOLATE_CONDITIONS 0x100\n #define J9_SIG_POSIX_COOPERATIVE_SHUTDOWN 0x200\n+#define J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED 0x400\n \n #define J9_THREAD_START_NO_ERROR 0x0\n #define J9_THREAD_START_FAILED_VMTHREAD_ALLOC 0x1\ndiff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 7c1a39d972f..6c4fbf83e48 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -136,8 +136,8 @@ extern vmiError J9VMI_Initialize(J9JavaVM* vm);\n void sidecarInit (J9VMThread *mainThread);\n #endif\n \n-typedef void (JNICALL * J9_EXIT_HANDLER_PROC) (jint);\n-typedef void (JNICALL * J9_ABORT_HANDLER_PROC) (void);\n+typedef void (JNICALL *J9_EXIT_HANDLER_PROC)(jint);\n+typedef void (JNICALL *J9_ABORT_HANDLER_PROC)(void);\n \n struct J9VMIgnoredOption {\n \tchar *optionName;\n@@ -8111,6 +8111,28 @@ setSignalOptions(J9JavaVM *vm, J9PortLibrary *portLibrary)\n \t\t}\n \t}\n \n+#if defined(WIN32) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\tHMODULE h_kernel32 = GetModuleHandle(TEXT(\"kernel32.dll\"));\n+\n+\tif ((NULL != h_kernel32) && IsWindows8OrGreater()) {\n+\t\ttypedef BOOL (WINAPI *PMP_func)(HANDLE, PROCESS_MITIGATION_POLICY, PVOID, SIZE_T);\n+\t\tPMP_func getProcessMitigationPolicyFunc = (PMP_func)GetProcAddress(h_kernel32, \"GetProcessMitigationPolicy\");\n+\n+\t\tPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY cfgPolicy = {0};\n+\n+\t\tif (((PMP_func)NULL != getProcessMitigationPolicyFunc)\n+\t\t\t&& getProcessMitigationPolicyFunc(\n+\t\t\t\t\tGetCurrentProcess(),\n+\t\t\t\t\tProcessControlFlowGuardPolicy,\n+\t\t\t\t\t&cfgPolicy,\n+\t\t\t\t\tsizeof(cfgPolicy))\n+\t\t\t&& cfgPolicy.EnableControlFlowGuard\n+\t\t) {\n+\t\t\tvm->sigFlags |= J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED;\n+\t\t}\n+\t}\n+#endif /* defined(WIN32) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\n \targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOHANDLESIGABRT, NULL);\n \targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXHANDLESIGABRT, NULL);\n \n",
    "d6d0fe6bd93306010e045cf01d303db9d34990b7": "diff --git a/runtime/compiler/control/J9Options.cpp b/runtime/compiler/control/J9Options.cpp\nindex 248414cb1c6..15bd7b1c62f 100644\n--- a/runtime/compiler/control/J9Options.cpp\n+++ b/runtime/compiler/control/J9Options.cpp\n@@ -3280,7 +3280,13 @@ bool J9::Options::feLatePostProcess(void * base, TR::OptionSet * optionSet)\n       vm->initializeHasResumableTrapHandler();\n       }\n \n-   // The trap handler currently is working (jitt fails) on Ottawa's IA32 Hardhat machine.\n+   // If Control Flow Guard (CFG) is enabled in Windows, set TR_NoResumableTrapHandler.\n+   if (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED))\n+      {\n+      self()->setOption(TR_NoResumableTrapHandler);\n+      }\n+\n+   // The trap handler currently is working (jit fails) on Ottawa's IA32 Hardhat machine.\n    // The platform isn't shipping so the priority of fixing the problem is currently low.\n    //\n    #if defined(HARDHAT) && defined(TR_TARGET_X86)\ndiff --git a/runtime/compiler/runtime/SignalHandler.c b/runtime/compiler/runtime/SignalHandler.c\nindex 4507febccf1..2f659f719aa 100644\n--- a/runtime/compiler/runtime/SignalHandler.c\n+++ b/runtime/compiler/runtime/SignalHandler.c\n@@ -194,17 +194,17 @@ static IDATA jitX86decodeIdivInstruction(J9PortLibrary* portLib, void* sigInfo,\n \t\tU_8 rm = modRM & 0x7;\n \n \t\t/*\n-\t\t Mod R/M\t  SIB\t Total Instruction Size\n-\t\t 1 11xxxxxx\t n/a\t\t\t   2\n-\t\t 2 00xxx101\t n/a\t\t\t   6\n-\t\t 3 00xxx100   xxxxx101\t\t\t7\n-\t\t 4 00xxx100   xxxxxyyy\t\t\t3\n-\t\t 5 00xxxyyy\t n/a\t\t\t   2\n-\t\t 6 01xxx100   xxxxxxxx\t\t\t4\n-\t\t 7 01xxxyyy\t n/a\t\t\t   3\n-\t\t 8 10xxx100   xxxxxxxx\t\t\t7\n-\t\t 9 10xxxyyy\t n/a\t\t\t   6\n-\t*/\n+\t\t\tMod R/M      SIB     Total Instruction Size\n+\t\t\t1 11xxxxxx   n/a             2\n+\t\t\t2 00xxx101   n/a             6\n+\t\t\t3 00xxx100   xxxxx101        7\n+\t\t\t4 00xxx100   xxxxxyyy        3\n+\t\t\t5 00xxxyyy   n/a             2\n+\t\t\t6 01xxx100   xxxxxxxx        4\n+\t\t\t7 01xxxyyy   n/a             3\n+\t\t\t8 10xxx100   xxxxxxxx        7\n+\t\t\t9 10xxxyyy   n/a             6\n+\t\t */\n \n \n \t\treg = rm;\n@@ -241,15 +241,15 @@ static IDATA jitX86decodeIdivInstruction(J9PortLibrary* portLib, void* sigInfo,\n \n \t\t}\n \n-\t if (mod == 1) {\n-\t\t /* one byte displacement */\n-\t\t disp = *(signed char *)eip;\n-\t } else if (mod == 2 || (mod==0 && rm ==5)) {\n-\t\t /* 4 byte displacement */\n-\t\t disp = *(int *)eip;\n-\t } else {\n-\t\t /* no disp */\n-\t }\n+\t\tif (mod == 1) {\n+\t\t\t/* one byte displacement */\n+\t\t\tdisp = *(signed char *)eip;\n+\t\t} else if (mod == 2 || (mod==0 && rm ==5)) {\n+\t\t\t/* 4 byte displacement */\n+\t\t\tdisp = *(int *)eip;\n+\t\t} else {\n+\t\t\t/* no disp */\n+\t\t}\n \n \n \t\tif (rm==4) {\n@@ -337,86 +337,93 @@ UDATA jitX86Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n \t\t} else {\n \t\t\tvoid * stackMap;\n \t\t\tUDATA registerMap;\n-\n-\t\t\tswitch (sigType) {\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n-\t\t\t\tif (0xF7 == *eip ) {\n-\t\t\t\t\t/* find the divisor */\n-\t\t\t\t\tUDATA div = jitX86decodeIdivInstruction(PORTLIB, sigInfo, eip);\n-\t\t\t\t\tif (div != 0 ) {\n-\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n-\t\t\t\t\t\t*eaxPtr = 0x80000000;\n-\t\t\t\t\t\t*edxPtr = 0;\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t/*\n+\t\t\t * When Control Flow Guard (CFG) is enabled in Windows, it can terminate the program unexpectedly\n+\t\t\t * if the stack pointer is not within the system stack limit and no log files will be generated.\n+\t\t\t * We should skip the attempt to throw an exception here so that the log files can be generated.\n+\t\t\t */\n+\t\t\tBOOLEAN isCFGEnabled = J9_ARE_ANY_BITS_SET(vmThread->javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED);\n+\n+\t\t\tif (!isCFGEnabled) {\n+\t\t\t\tswitch (sigType) {\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n+\t\t\t\t\tif (0xF7 == *eip ) {\n+\t\t\t\t\t\t/* find the divisor */\n+\t\t\t\t\t\tUDATA div = jitX86decodeIdivInstruction(PORTLIB, sigInfo, eip);\n+\t\t\t\t\t\tif (div != 0 ) {\n+\t\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n+\t\t\t\t\t\t\t*eaxPtr = 0x80000000;\n+\t\t\t\t\t\t\t*edxPtr = 0;\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif (((J9JITExceptionTable *)1) == exceptionTable) {\n-\t\t\t\t\t/* did we come from the long divide helper? */\n-\n-\t\t\t\t\tvmThread->jitException = (J9Object *) *((UDATA *) *espPtr);\n-\t\t\t\t\t/* 4 pushes + ret addr */\n-\t\t\t\t\t*espPtr += 5 * sizeof(UDATA);\n-\t\t\t\t} else if (((J9JITExceptionTable *)2) == exceptionTable) {\n-\t\t\t\t\t/* did we come from the long remainder helper? */\n-\n-\t\t\t\t\tvmThread->jitException = (J9Object *) *(((UDATA *) *espPtr) + 3);\n-\t\t\t\t\t*ecxPtr = *(((UDATA *) *espPtr) + 1);\n-\t\t\t\t\t*espPtr += 8 * sizeof(UDATA); /* 7 pushes + ret addr */\n-\t\t\t\t} else {\n-\t\t\t\t\t/* add 1 so as to move past the instruction so that the exception thrower will -1 like it would in all other cases. */\n-\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA)eip + 1);\n-\t\t\t\t}\n \n-\t\t\t\t*eipPtr = (UDATA) ((void *) &jitHandleIntegerDivideByZeroTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = *ebpPtr;\n-\t\t\t\t*ebpPtr = (UDATA) vmThread;\n+\t\t\t\t\tif (((J9JITExceptionTable *)1) == exceptionTable) {\n+\t\t\t\t\t\t/* did we come from the long divide helper? */\n+\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) *((UDATA *) *espPtr);\n+\t\t\t\t\t\t/* 4 pushes + ret addr */\n+\t\t\t\t\t\t*espPtr += 5 * sizeof(UDATA);\n+\t\t\t\t\t} else if (((J9JITExceptionTable *)2) == exceptionTable) {\n+\t\t\t\t\t\t/* did we come from the long remainder helper? */\n+\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) *(((UDATA *) *espPtr) + 3);\n+\t\t\t\t\t\t*ecxPtr = *(((UDATA *) *espPtr) + 1);\n+\t\t\t\t\t\t*espPtr += 8 * sizeof(UDATA); /* 7 pushes + ret addr */\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t/* add 1 so as to move past the instruction so that the exception thrower will -1 like it would in all other cases. */\n+\t\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA)eip + 1);\n+\t\t\t\t\t}\n \n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t*eipPtr = (UDATA) ((void *) &jitHandleIntegerDivideByZeroTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = *ebpPtr;\n+\t\t\t\t\t*ebpPtr = (UDATA) vmThread;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n-\t\t\t\tif (0xF7 == *eip) {\n-\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n-\t\t\t\t\t*eaxPtr = 0x80000000;\n-\t\t\t\t\t*edxPtr = 0;\n \t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n-\t\t\t\t}\n-\t\t\t\t/* unexpected SIGFPE */\n-\t\t\t\tbreak;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n-\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\t\t\t\t\tif (0xF7 == *eip) {\n+\t\t\t\t\t\t*eipPtr += jitX86decodeInstruction(eip);\n+\t\t\t\t\t\t*eaxPtr = 0x80000000;\n+\t\t\t\t\t\t*edxPtr = 0;\n+\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* unexpected SIGFPE */\n \t\t\t\t\tbreak;\n-\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n \n-\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n-\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n-\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {\n-\t\t\t\t\t\t/* we know where the fault occurred, and it wasn't within the first page. This is an unexpected error */\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n \t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\n+\t\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {\n+\t\t\t\t\t\t\t/* we know where the fault occurred, and it wasn't within the first page. This is an unexpected error */\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n \n-\t\t\t\tstackMap = jitConfig->jitGetStackMapFromPC(vmThread, vmThread->javaVM, exceptionTable, (UDATA) (eip + 1));\n-\t\t\t\tif (stackMap ) {\n-\t\t\t\t\tregisterMap = jitConfig->getJitRegisterMap(exceptionTable, stackMap);\n-\t\t\t\t\t*espPtr += (((registerMap >> 16) & 0xFF) * sizeof(UDATA));\n-\t\t\t\t}\n+\t\t\t\t\tstackMap = jitConfig->jitGetStackMapFromPC(vmThread, vmThread->javaVM, exceptionTable, (UDATA) (eip + 1));\n+\t\t\t\t\tif (stackMap ) {\n+\t\t\t\t\t\tregisterMap = jitConfig->getJitRegisterMap(exceptionTable, stackMap);\n+\t\t\t\t\t\t*espPtr += (((registerMap >> 16) & 0xFF) * sizeof(UDATA));\n+\t\t\t\t\t}\n \n-\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) eip + 1);\n-\t\t\t\t*eipPtr = (UDATA)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = (UDATA) *ebpPtr;\n-\t\t\t\t*ebpPtr = (UDATA) vmThread;\n+\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) eip + 1);\n+\t\t\t\t\t*eipPtr = (UDATA)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_ebp = (UDATA) *ebpPtr;\n+\t\t\t\t\t*ebpPtr = (UDATA) vmThread;\n \n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n-\t\t\t\t/* unexpected SIGILL */\n-\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n+\t\t\t\t\t/* unexpected SIGILL */\n+\t\t\t\t\tbreak;\n \n+\t\t\t\t}\n \t\t\t}\n-\n \t\t\t/*\n \t\t\t * if we reached here, then this is an unexpected error. Build a resolve\n \t\t\t * frame so that the stack is walkable and allow normal fault handling\n@@ -1699,7 +1706,7 @@ static I_64 jitAMD64decodeDiv(J9PortLibrary* portLib, U_8 *rip, void *sigInfo, U\n \n \t\t/* calculate scale*index except when index = 0x4, and REX.X is not set\n \t\t * i.e., can't encode index = rSP\n-\t\t*/\n+\t\t */\n \t\tif ((index == 0x4) && !(IS_REXX(REX_PREFIX))) {\n \t\t\t/* do nothing  */\n \t\t} else {\n@@ -1777,105 +1784,114 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \t\t} else {\n \t\t\tvoid * stackMap;\n \t\t\tUDATA registerMap;\n-\t\t\tswitch (sigType) {\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n+\t\t\t/*\n+\t\t\t * When Control Flow Guard (CFG) is enabled in Windows, it can terminate the program unexpectedly\n+\t\t\t * if the stack pointer is not within the system stack limit and no log files will be generated.\n+\t\t\t * We should skip the attempt to throw an exception here so that the log files can be generated.\n+\t\t\t */\n+\t\t\tBOOLEAN isCFGEnabled = J9_ARE_ANY_BITS_SET(vmThread->javaVM->sigFlags, J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED);\n+\n+\t\t\tif (!isCFGEnabled) {\n+\t\t\t\tswitch (sigType) {\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_DIV_BY_ZERO:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_DIV_BY_ZERO:\n #if !defined(LINUX)\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n #endif\n-\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n-\n-\t\t\t\t\tIDATA div;\n-\t\t\t\t\tUDATA ins_size, operand_size;\n-\n-\t \t\t\t\t/* find divisor */\n-\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n-\n-\t\t\t\t\tif (div != 0 ) {\n-\n-\t\t\t\t\t\t*ripPtr += ins_size;\n-\t\t\t\t\t\tswitch (operand_size) {\n-\t\t\t\t\t\tcase 64:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 32:\n-\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n-\t\t\t\t\t\t\t break;\n-\t\t\t\t\t\tcase 16:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 8:\n-\t\t\t\t\t\t\t*raxPtr = 0x80;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tdefault:\n-\t\t\t\t   \t\t\t/* error */\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n+\n+\t\t\t\t\t\tIDATA div;\n+\t\t\t\t\t\tUDATA ins_size, operand_size;\n+\n+\t\t\t\t\t\t/* find divisor */\n+\t\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n+\n+\t\t\t\t\t\tif (div != 0 ) {\n+\n+\t\t\t\t\t\t\t*ripPtr += ins_size;\n+\t\t\t\t\t\t\tswitch (operand_size) {\n+\t\t\t\t\t\t\tcase 64:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 32:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 16:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 8:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t/* error */\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t*rdxPtr = 0;\n+\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t*rdxPtr = 0;\n-\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t}\n-\t\t\t\t}\n \n-\t \t\t\t/* Add 1 to make rip point inside the instruction\n-\t \t\t\t*   since we assume most pc values are after a call instruction\n-\t \t\t\t*   the first byte of an instruction might not be in the exception range\n-\t \t\t\t*   Note, adding the instruction length is also incorrect, since it is possible\n-\t \t\t\t*   that exactly one instruction was in the range\n-\t\t\t\t*/\n-\t\t\t\tvmThread->jitException = (J9Object *) (*ripPtr + 1);\n-\n-\t\t\t\t*ripPtr = (U_64) ((void *) &jitHandleIntegerDivideByZeroTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n-\t\t\t\t*rbpPtr = (U_64) vmThread;\n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\t/* Add 1 to make rip point inside the instruction\n+\t\t\t\t\t*   since we assume most pc values are after a call instruction\n+\t\t\t\t\t*   the first byte of an instruction might not be in the exception range\n+\t\t\t\t\t*   Note, adding the instruction length is also incorrect, since it is possible\n+\t\t\t\t\t*   that exactly one instruction was in the range\n+\t\t\t\t\t*/\n+\t\t\t\t\tvmThread->jitException = (J9Object *) (*ripPtr + 1);\n+\n+\t\t\t\t\t*ripPtr = (U_64) ((void *) &jitHandleIntegerDivideByZeroTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n+\t\t\t\t\t*rbpPtr = (U_64) vmThread;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n #ifdef LINUX\n-\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n-\n-\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n-\t\t\t\t\tI_64 div;\n-\t\t\t\t\tUDATA ins_size, operand_size;\n-\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n-\n-\t\t\t\t\tif ( div != 0) {\n-\t\t\t\t\t\t*ripPtr += ins_size;\n-\t\t\t\t\t\tswitch (operand_size) {\n-\t\t\t\t\t\tcase 64:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n-\t\t\t\t\t\t\t break;\n-\t\t\t\t\t\tcase 32:\n-\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 16:\n-\t\t\t\t\t\t\t*raxPtr = 0x8000;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 8:\n-\t\t\t\t\t\t\t*raxPtr = 0x80;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t/* error */\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGFPE_INT_OVERFLOW:\n+\n+\t\t\t\t\tif (jitAMD64isDivInstruction(rip)) {\n+\t\t\t\t\t\tI_64 div;\n+\t\t\t\t\t\tUDATA ins_size, operand_size;\n+\t\t\t\t\t\tdiv = jitAMD64decodeDiv(PORTLIB, rip, sigInfo, &ins_size, &operand_size);\n+\n+\t\t\t\t\t\tif ( div != 0) {\n+\t\t\t\t\t\t\t*ripPtr += ins_size;\n+\t\t\t\t\t\t\tswitch (operand_size) {\n+\t\t\t\t\t\t\tcase 64:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000000000000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 32:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80000000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 16:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x8000;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 8:\n+\t\t\t\t\t\t\t\t*raxPtr = 0x80;\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\t/* error */\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t*rdxPtr = 0;\n+\t\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t*rdxPtr = 0;\n-\t\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-#endif\n-\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n-\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n \t\t\t\t\tbreak;\n-\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+#endif\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\t\tif (isDfSet(vmThread, sigInfo) == TRUE)\n+\t\t\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n \n-\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) rip + 1);\n-\t\t\t\t*ripPtr = (U_64)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n-\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n-\t\t\t\t*rbpPtr = (U_64) vmThread;\n-\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t\t\t\tvmThread->jitException = (J9Object *) ((UDATA) rip + 1);\n+\t\t\t\t\t*ripPtr = (U_64)(void*)(sigType == J9PORT_SIG_FLAG_SIGSEGV ? jitHandleNullPointerExceptionTrap : jitHandleInternalErrorTrap);\n+\t\t\t\t\t((J9VMJITRegisterState*)vmThread->entryLocalStorage->jitGlobalStorageBase)->jit_rbp = (UDATA) *rbpPtr;\n+\t\t\t\t\t*rbpPtr = (U_64) vmThread;\n+\t\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n \n-\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n-\t\t\t\tbreak;\n+\t\t\t\tcase J9PORT_SIG_FLAG_SIGILL:\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t/*\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 4aa61beccbf..579f20925da 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -649,6 +649,7 @@ extern \"C\" {\n #define J9_SIG_NO_SIG_USR2 0x80\n #define J9_SIG_PERCOLATE_CONDITIONS 0x100\n #define J9_SIG_POSIX_COOPERATIVE_SHUTDOWN 0x200\n+#define J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED 0x400\n \n #define J9_THREAD_START_NO_ERROR 0x0\n #define J9_THREAD_START_FAILED_VMTHREAD_ALLOC 0x1\ndiff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 7c1a39d972f..6c4fbf83e48 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -136,8 +136,8 @@ extern vmiError J9VMI_Initialize(J9JavaVM* vm);\n void sidecarInit (J9VMThread *mainThread);\n #endif\n \n-typedef void (JNICALL * J9_EXIT_HANDLER_PROC) (jint);\n-typedef void (JNICALL * J9_ABORT_HANDLER_PROC) (void);\n+typedef void (JNICALL *J9_EXIT_HANDLER_PROC)(jint);\n+typedef void (JNICALL *J9_ABORT_HANDLER_PROC)(void);\n \n struct J9VMIgnoredOption {\n \tchar *optionName;\n@@ -8111,6 +8111,28 @@ setSignalOptions(J9JavaVM *vm, J9PortLibrary *portLibrary)\n \t\t}\n \t}\n \n+#if defined(WIN32) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\tHMODULE h_kernel32 = GetModuleHandle(TEXT(\"kernel32.dll\"));\n+\n+\tif ((NULL != h_kernel32) && IsWindows8OrGreater()) {\n+\t\ttypedef BOOL (WINAPI *PMP_func)(HANDLE, PROCESS_MITIGATION_POLICY, PVOID, SIZE_T);\n+\t\tPMP_func getProcessMitigationPolicyFunc = (PMP_func)GetProcAddress(h_kernel32, \"GetProcessMitigationPolicy\");\n+\n+\t\tPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY cfgPolicy = {0};\n+\n+\t\tif (((PMP_func)NULL != getProcessMitigationPolicyFunc)\n+\t\t\t&& getProcessMitigationPolicyFunc(\n+\t\t\t\t\tGetCurrentProcess(),\n+\t\t\t\t\tProcessControlFlowGuardPolicy,\n+\t\t\t\t\t&cfgPolicy,\n+\t\t\t\t\tsizeof(cfgPolicy))\n+\t\t\t&& cfgPolicy.EnableControlFlowGuard\n+\t\t) {\n+\t\t\tvm->sigFlags |= J9_SIG_WINDOWS_MITIGATION_POLICY_CFG_ENABLED;\n+\t\t}\n+\t}\n+#endif /* defined(WIN32) && defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\n \targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOHANDLESIGABRT, NULL);\n \targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXHANDLESIGABRT, NULL);\n \n",
    "bf0a1005e26b3176d5a09c088a883ea58f5d353b": "diff --git a/jcl/src/java.base/share/classes/jdk/crac/Core.java b/jcl/src/java.base/share/classes/jdk/crac/Core.java\nindex 2b39cca9c86..16ae52921f6 100644\n--- a/jcl/src/java.base/share/classes/jdk/crac/Core.java\n+++ b/jcl/src/java.base/share/classes/jdk/crac/Core.java\n@@ -73,8 +73,8 @@ public static void checkpointRestore() throws CheckpointException, RestoreExcept\n class CRIUSupportContext<R extends Resource> extends Context<R> {\n \t// InternalCRIUSupport.getCRaCCheckpointToDir() is not null if\n \t// InternalCRIUSupport.isCRaCSupportEnabled() returns true before creating CRIUSupportContext<>().\n-\tprivate final InternalCRIUSupport internalCRIUSupport = new InternalCRIUSupport(\n-\t\t\tPaths.get(InternalCRIUSupport.getCRaCCheckpointToDir()))\n+\tprivate final InternalCRIUSupport internalCRIUSupport = InternalCRIUSupport.getInternalCRIUSupport()\n+\t\t\t.setImageDir(Paths.get(InternalCRIUSupport.getCRaCCheckpointToDir()))\n \t\t\t.setLeaveRunning(false)\n \t\t\t.setShellJob(true)\n \t\t\t.setTCPEstablished(true)\ndiff --git a/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java b/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\nindex dcbe72b65e3..11515af98fc 100644\n--- a/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\n+++ b/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\n@@ -86,6 +86,55 @@ public final class InternalCRIUSupport {\n \tprivate static native String getCRaCCheckpointToDirImpl();\n /*[ENDIF] CRAC_SUPPORT */\n \n+\t/**\n+\t * A singleton {@code InternalCRIUSupport} instance.\n+\t *\n+\t * The default CRIU dump options are:\n+\t * <p>\n+\t * {@code imageDir} = CWD, current Java process working directory.\n+\t * <p>\n+\t * {@code leaveRunning} = false\n+\t * <p>\n+\t * {@code shellJob} = false\n+\t * <p>\n+\t * {@code extUnixSupport} = false\n+\t * <p>\n+\t * {@code logLevel} = 2\n+\t * <p>\n+\t * {@code logFile} = criu.log\n+\t * <p>\n+\t * {@code fileLocks} = false\n+\t * <p>\n+\t * {@code ghostFileLimit} = 1 MB\n+\t * <p>\n+\t * {@code workDir} = imageDir, the directory where the images are to be created.\n+\t */\n+\tprivate static final InternalCRIUSupport singletonInternalCRIUSupport = new InternalCRIUSupport();\n+\n+\t// no public construtors\n+\tprivate InternalCRIUSupport() {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tSecurityManager manager = System.getSecurityManager();\n+\t\tif (manager != null) {\n+\t\t\tmanager.checkPermission(CRIU_DUMP_PERMISSION);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t\t// use current working directory\n+\t\tsetImageDir(java.nio.file.FileSystems.getDefault().getPath(\"\").toAbsolutePath());\n+\t}\n+\n+\t/**\n+\t * Returns the singleton InternalCRIUSupport object.\n+\t *\n+\t * Most methods of class {@code InternalCRIUSupport} are instance methods and\n+\t * must be invoked via this object.\n+\t *\n+\t * @return the singleton {@code InternalCRIUSupport} object\n+\t */\n+\tpublic static InternalCRIUSupport getInternalCRIUSupport() {\n+\t\treturn singletonInternalCRIUSupport;\n+\t}\n+\n \t/**\n \t * Retrieve the elapsed time between Checkpoint and Restore.\n \t * Only support one Checkpoint.\n@@ -299,47 +348,6 @@ private static void init() {\n \t\t}\n \t}\n \n-\t/**\n-\t * Constructs a new {@code InternalCRIUSupport}.\n-\t *\n-\t * The default CRIU dump options are:\n-\t * <p>\n-\t * {@code imageDir} = imageDir, the directory where the images are to be\n-\t * created.\n-\t * <p>\n-\t * {@code leaveRunning} = false\n-\t * <p>\n-\t * {@code shellJob} = false\n-\t * <p>\n-\t * {@code extUnixSupport} = false\n-\t * <p>\n-\t * {@code logLevel} = 2\n-\t * <p>\n-\t * {@code logFile} = criu.log\n-\t * <p>\n-\t * {@code fileLocks} = false\n-\t * <p>\n-\t * {@code workDir} = imageDir, the directory where the images are to be created.\n-\t *\n-\t * @param imageDir the directory that will hold the dump files as a\n-\t *                 java.nio.file.Path\n-\t * @throws NullPointerException     if imageDir is null\n-\t/*[IF JAVA_SPEC_VERSION < 24]\n-\t * @throws SecurityException        if no permission to access imageDir or no\n-\t *                                  CRIU_DUMP_PERMISSION\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 24\n-\t * @throws IllegalArgumentException if imageDir is not a valid directory\n-\t */\n-\tpublic InternalCRIUSupport(Path imageDir) {\n-\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n-\t\tSecurityManager manager = System.getSecurityManager();\n-\t\tif (manager != null) {\n-\t\t\tmanager.checkPermission(CRIU_DUMP_PERMISSION);\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n-\t\tsetImageDir(imageDir);\n-\t}\n-\n \t/**\n \t * Queries if the criu library has been loaded.\n \t *\ndiff --git a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\nindex de9ce7c2b87..559f54cada8 100644\n--- a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n+++ b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n@@ -54,15 +54,12 @@ public static enum HookMode {\n \t\tCONCURRENT_MODE\n \t}\n \n-\tprivate InternalCRIUSupport internalCRIUSupport;\n-\n \t/**\n-\t * Constructs a new {@code CRIUSupport}.\n+\t * A singleton {@code CRIUSupport} instance.\n \t *\n \t * The default CRIU dump options are:\n \t * <p>\n-\t * {@code imageDir} = imageDir, the directory where the images are to be\n-\t * created.\n+\t * {@code imageDir} = CWD, current Java process working directory.\n \t * <p>\n \t * {@code leaveRunning} = false\n \t * <p>\n@@ -79,6 +76,30 @@ public static enum HookMode {\n \t * {@code ghostFileLimit} = 1 MB\n \t * <p>\n \t * {@code workDir} = imageDir, the directory where the images are to be created.\n+\t */\n+\tprivate static final CRIUSupport singletonCRIUSupport = new CRIUSupport();\n+\n+\tprivate static final InternalCRIUSupport singletonInternalCRIUSupport = InternalCRIUSupport\n+\t\t\t.getInternalCRIUSupport();\n+\n+\t// no public construtors\n+\tprivate CRIUSupport() {\n+\t}\n+\n+\t/**\n+\t * Returns the singleton CRIUSupport object.\n+\t *\n+\t * Most methods of class {@code CRIUSupport} are instance methods and must be\n+\t * invoked via this object.\n+\t *\n+\t * @return the singleton {@code CRIUSupport} object\n+\t */\n+\tpublic static CRIUSupport getCRIUSupport() {\n+\t\treturn singletonCRIUSupport;\n+\t}\n+\n+\t/**\n+\t * Constructs a new {@code CRIUSupport}.\n \t *\n \t * @param imageDir the directory that will hold the dump files as a\n \t *                 java.nio.file.Path\n@@ -89,8 +110,9 @@ public static enum HookMode {\n \t/*[ENDIF] JAVA_SPEC_VERSION < 24\n \t * @throws IllegalArgumentException if imageDir is not a valid directory\n \t */\n+\t@Deprecated(forRemoval=true)\n \tpublic CRIUSupport(Path imageDir) {\n-\t\tinternalCRIUSupport = new InternalCRIUSupport(imageDir);\n+\t\tSystem.err.println(\"WARNING: CRIUSupport(imageDir) constructor is deprecated, please use CRIUSupport.getCRIUSupport() and setImageDir(imageDir)\"); //$NON-NLS-1$\n \t}\n \n \t/**\n@@ -146,7 +168,7 @@ public static String getErrorMessage() {\n \t * @throws IllegalArgumentException if imageDir is not a valid directory\n \t */\n \tpublic CRIUSupport setImageDir(Path imageDir) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setImageDir(imageDir);\n+\t\tsingletonInternalCRIUSupport.setImageDir(imageDir);\n \t\treturn this;\n \t}\n \n@@ -159,7 +181,7 @@ public CRIUSupport setImageDir(Path imageDir) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setLeaveRunning(boolean leaveRunning) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLeaveRunning(leaveRunning);\n+\t\tsingletonInternalCRIUSupport.setLeaveRunning(leaveRunning);\n \t\treturn this;\n \t}\n \n@@ -172,7 +194,7 @@ public CRIUSupport setLeaveRunning(boolean leaveRunning) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setShellJob(boolean shellJob) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setShellJob(shellJob);\n+\t\tsingletonInternalCRIUSupport.setShellJob(shellJob);\n \t\treturn this;\n \t}\n \n@@ -185,7 +207,7 @@ public CRIUSupport setShellJob(boolean shellJob) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setExtUnixSupport(boolean extUnixSupport) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setExtUnixSupport(extUnixSupport);\n+\t\tsingletonInternalCRIUSupport.setExtUnixSupport(extUnixSupport);\n \t\treturn this;\n \t}\n \n@@ -205,7 +227,7 @@ public CRIUSupport setExtUnixSupport(boolean extUnixSupport) {\n \t * @throws IllegalArgumentException if logLevel is not valid\n \t */\n \tpublic CRIUSupport setLogLevel(int logLevel) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLogLevel(logLevel);\n+\t\tsingletonInternalCRIUSupport.setLogLevel(logLevel);\n \t\treturn this;\n \t}\n \n@@ -220,7 +242,7 @@ public CRIUSupport setLogLevel(int logLevel) {\n \t * @throws IllegalArgumentException if logFile is null or a path\n \t */\n \tpublic CRIUSupport setLogFile(String logFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLogFile(logFile);\n+\t\tsingletonInternalCRIUSupport.setLogFile(logFile);\n \t\treturn this;\n \t}\n \n@@ -233,7 +255,7 @@ public CRIUSupport setLogFile(String logFile) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setFileLocks(boolean fileLocks) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setFileLocks(fileLocks);\n+\t\tsingletonInternalCRIUSupport.setFileLocks(fileLocks);\n \t\treturn this;\n \t}\n \n@@ -246,7 +268,7 @@ public CRIUSupport setFileLocks(boolean fileLocks) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPEstablished(boolean tcpEstablished) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPEstablished(tcpEstablished);\n+\t\tsingletonInternalCRIUSupport.setTCPEstablished(tcpEstablished);\n \t\treturn this;\n \t}\n \n@@ -259,7 +281,7 @@ public CRIUSupport setTCPEstablished(boolean tcpEstablished) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setAutoDedup(boolean autoDedup) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setAutoDedup(autoDedup);\n+\t\tsingletonInternalCRIUSupport.setAutoDedup(autoDedup);\n \t\treturn this;\n \t}\n \n@@ -272,7 +294,7 @@ public CRIUSupport setAutoDedup(boolean autoDedup) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTrackMemory(boolean trackMemory) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTrackMemory(trackMemory);\n+\t\tsingletonInternalCRIUSupport.setTrackMemory(trackMemory);\n \t\treturn this;\n \t}\n \n@@ -290,7 +312,7 @@ public CRIUSupport setTrackMemory(boolean trackMemory) {\n \t * @throws IllegalArgumentException if workDir is not a valid directory\n \t */\n \tpublic CRIUSupport setWorkDir(Path workDir) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setWorkDir(workDir);\n+\t\tsingletonInternalCRIUSupport.setWorkDir(workDir);\n \t\treturn this;\n \t}\n \n@@ -303,7 +325,7 @@ public CRIUSupport setWorkDir(Path workDir) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setUnprivileged(boolean unprivileged) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setUnprivileged(unprivileged);\n+\t\tsingletonInternalCRIUSupport.setUnprivileged(unprivileged);\n \t\treturn this;\n \t}\n \n@@ -318,7 +340,7 @@ public CRIUSupport setUnprivileged(boolean unprivileged) {\n \t * @throws UnsupportedOperationException if file limit is greater than 2^32 - 1 or negative.\n \t */\n \tpublic CRIUSupport setGhostFileLimit(long limit) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setGhostFileLimit(limit);\n+\t\tsingletonInternalCRIUSupport.setGhostFileLimit(limit);\n \t\treturn this;\n \t}\n \n@@ -331,7 +353,7 @@ public CRIUSupport setGhostFileLimit(long limit) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPClose(boolean tcpClose) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPClose(tcpClose);\n+\t\tsingletonInternalCRIUSupport.setTCPClose(tcpClose);\n \t\treturn this;\n \t}\n \n@@ -344,7 +366,7 @@ public CRIUSupport setTCPClose(boolean tcpClose) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPSkipInFlight(boolean tcpSkipInFlight) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPSkipInFlight(tcpSkipInFlight);\n+\t\tsingletonInternalCRIUSupport.setTCPSkipInFlight(tcpSkipInFlight);\n \t\treturn this;\n \t}\n \n@@ -365,7 +387,7 @@ public CRIUSupport setTCPSkipInFlight(boolean tcpSkipInFlight) {\n \t * @return this\n \t */\n \tpublic CRIUSupport registerRestoreEnvFile(Path envFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.registerRestoreEnvFile(envFile);\n+\t\tsingletonInternalCRIUSupport.registerRestoreEnvFile(envFile);\n \t\treturn this;\n \t}\n \n@@ -381,7 +403,7 @@ public CRIUSupport registerRestoreEnvFile(Path envFile) {\n \t * @return this\n \t */\n \tpublic CRIUSupport registerRestoreOptionsFile(Path optionsFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.registerRestoreOptionsFile(optionsFile);\n+\t\tsingletonInternalCRIUSupport.registerRestoreOptionsFile(optionsFile);\n \t\treturn this;\n \t}\n \n@@ -402,7 +424,7 @@ public CRIUSupport registerRestoreOptionsFile(Path optionsFile) {\n \t */\n \tpublic CRIUSupport registerPostRestoreHook(Runnable hook) {\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPostRestoreHook(hook);\n+\t\t\tsingletonInternalCRIUSupport.registerPostRestoreHook(hook);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -455,7 +477,7 @@ public CRIUSupport registerPostRestoreHook(Runnable hook, HookMode mode, int pri\n \t\t\tinternalMode = InternalCRIUSupport.HookMode.CONCURRENT_MODE;\n \t\t}\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPostRestoreHook(hook, internalMode, priority);\n+\t\t\tsingletonInternalCRIUSupport.registerPostRestoreHook(hook, internalMode, priority);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -482,7 +504,7 @@ public CRIUSupport registerPostRestoreHook(Runnable hook, HookMode mode, int pri\n \t */\n \tpublic CRIUSupport registerPreCheckpointHook(Runnable hook) {\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPreCheckpointHook(hook);\n+\t\t\tsingletonInternalCRIUSupport.registerPreCheckpointHook(hook);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -535,7 +557,7 @@ public CRIUSupport registerPreCheckpointHook(Runnable hook, HookMode mode, int p\n \t\t\tinternalMode = InternalCRIUSupport.HookMode.CONCURRENT_MODE;\n \t\t}\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPreCheckpointHook(hook, internalMode, priority);\n+\t\t\tsingletonInternalCRIUSupport.registerPreCheckpointHook(hook, internalMode, priority);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -559,7 +581,7 @@ public CRIUSupport registerPreCheckpointHook(Runnable hook, HookMode mode, int p\n \tpublic synchronized void checkpointJVM() {\n \t\tif (isCRIUSupportEnabled()) {\n \t\t\ttry {\n-\t\t\t\tinternalCRIUSupport.checkpointJVM();\n+\t\t\t\tsingletonInternalCRIUSupport.checkpointJVM();\n \t\t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\nindex 061175d6e21..5ff71a69349 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\n@@ -86,7 +86,7 @@ public static void checkPointJVM(CRIUSupport criu, Path path, boolean deleteDir)\n \t\t\tcreateCheckpointDirectory(path);\n \t\t\ttry {\n \t\t\t\tif (criu == null) {\n-\t\t\t\t\tcriu = new CRIUSupport(path);\n+\t\t\t\t\tcriu = CRIUSupport.getCRIUSupport().setImageDir(path);\n \t\t\t\t}\n \t\t\t\tshowThreadCurrentTime(\"Performing CRIUSupport.checkpointJVM()\");\n \t\t\t\tcriu.setLogLevel(4).setLeaveRunning(false).setShellJob(true).setFileLocks(true).checkpointJVM();\n@@ -108,7 +108,7 @@ public static CRIUSupport prepareCheckPointJVM(Path path) {\n \t\tif (CRIUSupport.isCRIUSupportEnabled()) {\n \t\t\tdeleteCheckpointDirectory(path);\n \t\t\tcreateCheckpointDirectory(path);\n-\t\t\treturn (new CRIUSupport(path)).setLeaveRunning(false).setShellJob(true).setFileLocks(true);\n+\t\t\treturn CRIUSupport.getCRIUSupport().setImageDir(path).setLeaveRunning(false).setShellJob(true).setFileLocks(true);\n \t\t} else {\n \t\t\tthrow new RuntimeException(\"CRIU is not enabled\");\n \t\t}\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\nindex 08f4078cd8a..275de6ee1af 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\n@@ -92,8 +92,7 @@ public static void checkpointDeadlock() {\n \n \t\tt1.start();\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n-\t\tcriuSupport.registerPreCheckpointHook(() -> {\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path).registerPreCheckpointHook(() -> {\n \t\t\tsynchronized (lock) {\n \t\t\t\tCRIUTestUtils.showThreadCurrentTime(\"Precheckpoint hook inside monitor with testResult.lockStatus = \"\n \t\t\t\t\t\t+ testResult.lockStatus.get());\n@@ -178,7 +177,7 @@ public static void notCheckpointSafeDeadlock() {\n \n \t\tt1.start();\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path);\n \n \t\twhile (testResult.lockStatus.get() == 0) {\n \t\t\tThread.yield();\n@@ -243,8 +242,7 @@ public static void methodTypeDeadlockTest() {\n \t\tbyte[] bytes = getClassBytesFromResource(A.class);\n \t\tClass clazz = unsafe.defineClass(A.class.getName(), bytes, 0, bytes.length, loader, null);\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n-\t\tcriuSupport.registerPreCheckpointHook(()->{\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path).registerPreCheckpointHook(() -> {\n \t\t\tMethodType type = MethodType.methodType(clazz);\n \t\t});\n \ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\nindex 79982470b9a..bf29ae8af7e 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\n@@ -98,8 +98,8 @@ static void envVarFileTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -124,8 +124,8 @@ static void envVarFileTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.setProperty(\"prop1\", \"val1\");\n \t\tSystem.setProperty(\"prop2\", \"val2\");\n@@ -154,8 +154,8 @@ static void envVarFileTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -180,8 +180,8 @@ static void envVarFileTest4() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -197,8 +197,8 @@ static void envVarFileTest5() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -211,8 +211,8 @@ static void envVarFileTest6() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -225,8 +225,8 @@ static void envVarFileTest7() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -241,8 +241,8 @@ static void envVarFileTest8() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -256,8 +256,8 @@ static void envVarFileTest9() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -286,8 +286,8 @@ static void envVarFileTest10() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -303,8 +303,8 @@ static void envVarFileTest11() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -329,8 +329,8 @@ static void envVarFileTest12() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -355,8 +355,8 @@ static void envVarFileTest13() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -370,8 +370,8 @@ static void envVarFileTest14() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -385,8 +385,8 @@ static void envVarFileTest15() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -399,8 +399,8 @@ static void envVarFileTest16() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -413,8 +413,8 @@ static void envVarFileTest17() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\nindex 55ca614247d..26484298d43 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\n@@ -86,8 +86,8 @@ static void propertiesTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -112,8 +112,8 @@ static void propertiesTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.setProperty(\"prop1\", \"val1\");\n \t\tSystem.setProperty(\"prop2\", \"val2\");\n@@ -142,8 +142,8 @@ static void propertiesTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -168,8 +168,8 @@ static void propertiesTest4() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -189,8 +189,8 @@ static void traceOptionsTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -211,8 +211,8 @@ static void traceOptionsTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -231,8 +231,8 @@ static void traceOptionsTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -246,8 +246,8 @@ static void dumpOptionsTest() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -262,7 +262,7 @@ static void dumpOptionsTest() {\n \tstatic void criuDumpOptionsTest() {\n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -275,8 +275,8 @@ static void criuRestoreDumpOptionsTest() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -291,8 +291,8 @@ static void dumpOptionsTestRequireDynamic() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -320,8 +320,8 @@ static void jitOptionsTest(String[] args) {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -341,8 +341,8 @@ static void testTransitionToDebugInterpreterViaXXDebugInterpreterWithOptionsFile\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\nindex 2d5590ca967..c447ee6d59d 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\n@@ -96,8 +96,8 @@ else if (3 == percent_type) {\n \t\tPath optionsFilePath = CRIUTestUtils.createOptionsFile(\"options\", optionsContents);\n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\nindex 4b19146081a..4a295eb8165 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\n@@ -52,7 +52,7 @@ private static void badDir() throws Throwable {\n \t\tPath path = Paths.get(\"badDir\");\n \t\tpath.toFile().mkdir();\n \t\tFiles.setPosixFilePermissions(path, PosixFilePermissions.fromString(\"r--r--r--\"));\n-\t\tCRIUSupport criu = new CRIUSupport(path);\n+\t\tCRIUSupport criu = CRIUSupport.getCRIUSupport().setImageDir(path);\n \n \t\ttry {\n \t\t\tCRIUTestUtils.checkPointJVMNoSetup(criu, path, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\nindex dd9d2406345..4407a667360 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\n@@ -38,7 +38,7 @@ private void testDelayedThreadInterrupt() {\n \t\t\tPath imagePath = Paths.get(\"cpData\");\n \t\t\tCRIUTestUtils.deleteCheckpointDirectory(imagePath);\n \t\t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\t\tCRIUSupport criu = new CRIUSupport(imagePath);\n+\t\t\tCRIUSupport criu = CRIUSupport.getCRIUSupport().setImageDir(imagePath);\n \t\t\tfinal Thread currentThread = Thread.currentThread();\n \t\t\tCRIUTestUtils.showThreadCurrentTime(\n \t\t\t\t\t\"currentThread : \" + currentThread + \" with name : \" + currentThread.getName());\n",
    "28e013ce84fd78a5926ddd8685675a891409904e": "diff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex 7d3be109aaa..fa203d7e7fa 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -299,9 +299,6 @@ MM_VLHGCAccessBarrier::jniGetPrimitiveArrayCritical(J9VMThread* vmThread, jarray\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/* alwaysCopyInCritical or discontiguous (including 0 size array) */\n \t\tcopyArrayCritical(vmThread, &data, arrayObject, isCopy);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n-\t\t/* off heap enabled and not adjacent */\n-\t\tdata = (void *)indexableObjectModel->getDataPointerForContiguous(arrayObject);\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(arrayObject)) {\n \t\t/* an array having discontiguous extents is another reason to force the critical section to be a copy */\n@@ -336,6 +333,9 @@ MM_VLHGCAccessBarrier::jniGetPrimitiveArrayCritical(J9VMThread* vmThread, jarray\n \t\t\tcopyArrayCritical(vmThread, &data, arrayObject, isCopy);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n+\t\t/* off heap enabled and not adjacent */\n+\t\tdata = (void *)indexableObjectModel->getDataPointerForContiguous(arrayObject);\n \t} else {\n \t\t/* Adjacent for offheap enabled and contiguous for offheap disabled.\n \t\t   acquire access to prevent object being moved by GC access and return a direct pointer. */\n@@ -369,8 +369,6 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/* alwaysCopyInCritical or discontiguous (including 0 size array) */\n \t\tcopyBackArrayCritical(vmThread, elems, &arrayObject, mode);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n-\t\t/* off heap enabled and not adjacent */\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(arrayObject)) {\n \t\t/* an array having discontiguous extents is another reason to force the critical section to be a copy */\n@@ -406,6 +404,8 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n \t\t\tcopyBackArrayCritical(vmThread, elems, &arrayObject, mode);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n+\t\t/* off heap enabled and not adjacent */\n \t} else {\n \t\t/* adjacent for offheap enabled and contiguous for offheap disabled,\n \t\t * Objects can not be moved if critical section is active\n@@ -451,9 +451,6 @@ MM_VLHGCAccessBarrier::jniGetStringCritical(J9VMThread* vmThread, jstring str, j\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/*  alwaysCopyInCritical or isCompressed  or discontiguous (including 0 size array) */\n \t\tcopyStringCritical(vmThread, &data, valueObject, stringObject, isCopy, isCompressed);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n-\t\t/* off heap enabled and not adjacent */\n-\t\tdata = (jchar *)indexableObjectModel->getDataPointerForContiguous(valueObject);\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(valueObject)) {\n \t\tMM_EnvironmentVLHGC *env = MM_EnvironmentVLHGC::getEnvironment(vmThread);\n@@ -487,6 +484,9 @@ MM_VLHGCAccessBarrier::jniGetStringCritical(J9VMThread* vmThread, jstring str, j\n \t\t\tcopyStringCritical(vmThread, &data, valueObject, stringObject, isCopy, isCompressed);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n+\t\t/* off heap enabled and not adjacent */\n+\t\tdata = (jchar *)indexableObjectModel->getDataPointerForContiguous(valueObject);\n \t} else {\n \t\t/**\n \t\t *  adjacent for offheap enabled and contiguous for offheap disabled\n@@ -530,8 +530,6 @@ MM_VLHGCAccessBarrier::jniReleaseStringCritical(J9VMThread* vmThread, jstring st\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/*  alwaysCopyInCritical or isCompressed  or discontiguous (including 0 size array) */\n \t\tfreeStringCritical(vmThread, elems);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n-\t\t/* off heap enabled and not adjacent */\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(valueObject)) {\n \t\t/* an array having discontiguous extents can use double mapping if enabled in the critical section */\n@@ -558,6 +556,8 @@ MM_VLHGCAccessBarrier::jniReleaseStringCritical(J9VMThread* vmThread, jstring st\n \t\t\tfreeStringCritical(vmThread, elems);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n+\t\t/* off heap enabled and not adjacent */\n \t} else {\n \t\t/**\n \t\t *  adjacent for offheap enabled and contiguous for offheap disabled,\n",
    "4e49a3bac10a3ec39bd56836cd88e94efb5e435c": "diff --git a/runtime/compiler/optimizer/DataAccessAccelerator.cpp b/runtime/compiler/optimizer/DataAccessAccelerator.cpp\nindex 345771ac67f..883def246da 100644\n--- a/runtime/compiler/optimizer/DataAccessAccelerator.cpp\n+++ b/runtime/compiler/optimizer/DataAccessAccelerator.cpp\n@@ -90,11 +90,19 @@ int32_t TR_DataAccessAccelerator::perform()\n    {\n    int32_t result = 0;\n \n+   /* Disable DAA optimization for non-vectorized paths to unblock off-heap\n+    * enablement while we continue to investigate the bug in non-vectorized\n+    * pdload evaluator.\n+    *\n+    * TODO: Enable non-vectorized paths for off-heap.\n+    *     - Issue: https://github.com/eclipse-openj9/openj9/issues/21246\n+    */\n    if (!comp()->getOption(TR_DisableIntrinsics) &&\n        !comp()->getOption(TR_MimicInterpreterFrameShape) &&\n \n        // We cannot handle arraylets because hardware intrinsics act on contiguous memory\n-       !comp()->generateArraylets()&& !TR::Compiler->om.useHybridArraylets())\n+       !comp()->generateArraylets() && !TR::Compiler->om.useHybridArraylets() &&\n+       (!TR::Compiler->om.isOffHeapAllocationEnabled() || comp()->getOption(TR_DisableVectorBCD)))\n      {\n \n      // A vector to keep track of variable packed decimal calls\n",
    "f5141a6bb7df5d64ae45bbb9050e2d13bc156b94": "diff --git a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\nindex 11e3ce12581..da01f9cc899 100644\n--- a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n+++ b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n@@ -182,7 +182,6 @@ public void unlockAccess() {\n \t}\n \n \t@Hidden\n-\t@JvmtiMountTransition\n \tprivate static void enter(Continuation cont) {\n \t\ttry {\n \t\t\tcont.runnable.run();\n",
    "eb5b49de0186a480428320d0701609a76c31cc88": "diff --git a/runtime/compiler/optimizer/DataAccessAccelerator.cpp b/runtime/compiler/optimizer/DataAccessAccelerator.cpp\nindex 345771ac67f..883def246da 100644\n--- a/runtime/compiler/optimizer/DataAccessAccelerator.cpp\n+++ b/runtime/compiler/optimizer/DataAccessAccelerator.cpp\n@@ -90,11 +90,19 @@ int32_t TR_DataAccessAccelerator::perform()\n    {\n    int32_t result = 0;\n \n+   /* Disable DAA optimization for non-vectorized paths to unblock off-heap\n+    * enablement while we continue to investigate the bug in non-vectorized\n+    * pdload evaluator.\n+    *\n+    * TODO: Enable non-vectorized paths for off-heap.\n+    *     - Issue: https://github.com/eclipse-openj9/openj9/issues/21246\n+    */\n    if (!comp()->getOption(TR_DisableIntrinsics) &&\n        !comp()->getOption(TR_MimicInterpreterFrameShape) &&\n \n        // We cannot handle arraylets because hardware intrinsics act on contiguous memory\n-       !comp()->generateArraylets()&& !TR::Compiler->om.useHybridArraylets())\n+       !comp()->generateArraylets() && !TR::Compiler->om.useHybridArraylets() &&\n+       (!TR::Compiler->om.isOffHeapAllocationEnabled() || comp()->getOption(TR_DisableVectorBCD)))\n      {\n \n      // A vector to keep track of variable packed decimal calls\n",
    "878b3c4e7d3da82cdb03e3db104a342e3818645d": "diff --git a/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java b/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\nindex ed2c12c0f1d..3b21ff42ad4 100644\n--- a/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\n+++ b/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\n@@ -189,6 +189,9 @@ void clear() {\n \tprivate static synchronized native void resolveRequiredFields();\n \tprivate native void initCifNativeThunkData(String[] argLayouts, String retLayout, boolean newArgTypes, int varArgIndex);\n \tprivate native long invokeNative(\n+\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\tObject returnStateMemBase,\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t/*[IF JAVA_SPEC_VERSION >= 22]*/\n \t\t\tObject[] bases,\n \t\t\tlong[] offsets,\n@@ -887,9 +890,29 @@ Object runNativeMethod(Addressable downcallAddr, SegmentAllocator segmtAllocator\n \t\t * Note: memArgScopeSet is not empty with the downcall address added to the set.\n \t\t */\n \t\t/*[IF JAVA_SPEC_VERSION >= 21]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tlong returnStateMemAddr;\n+\t\tObject returnStateMemBase;\n+\t\tif (linkerOpts.hasCapturedCallState() && !stateSegmt.isNative()) {\n+\t\t\t/* The CaptureCallState option can only use heap memory if allowed by the Critical option. */\n+\t\t\tif (!linkerOpts.isCritical()) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Heap segment not allowed\");\n+\t\t\t}\n+\t\t\tAbstractMemorySegmentImpl segment = (AbstractMemorySegmentImpl)stateSegmt;\n+\t\t\treturnStateMemAddr = segment.unsafeGetOffset();\n+\t\t\treturnStateMemBase = segment.unsafeGetBase();\n+\t\t} else {\n+\t\t\treturnStateMemAddr = getValidDowncallMemAddr(stateSegmt);\n+\t\t\treturnStateMemBase = null;\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n+\n \t\ttry (Arena arena = Arena.ofConfined()) {\n \t\t\tSetDependency(arena.scope());\n \t\t\treturnVal = invokeNative(\n+\t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t\t\treturnStateMemBase,\n+\t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 22]*/\n \t\t\t\t\t(info != null) ? info.bases : null,\n \t\t\t\t\t(info != null) ? info.offsets : null,\n@@ -897,7 +920,11 @@ Object runNativeMethod(Addressable downcallAddr, SegmentAllocator segmtAllocator\n \t\t\t\t\t/*[ELSE] JAVA_SPEC_VERSION >= 22 */\n \t\t\t\t\tlinkerOpts.isTrivial(),\n \t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 22 */\n+\t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t\t\treturnStateMemAddr,\n+\t\t\t\t\t/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tgetValidDowncallMemAddr(stateSegmt),\n+\t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tretMemAddr,\n \t\t\t\t\tgetValidDowncallMemAddr(downcallAddr),\n \t\t\t\t\tcifNativeThunkAddr,\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex e6a7aeaa91e..43d51041b44 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5185,7 +5185,11 @@ class INTERPRETER_CLASS\n \t}\n \n #if JAVA_SPEC_VERSION >= 16\n-#if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t/* openj9.internal.foreign.abi.InternalDowncallHandler:\n+\t * private native long invokeNative(Object returnStateMemBase, Object[] bases, long[] offsets, boolean isInCriticalDownCall, long returnStateMemAddr, long returnStructMemAddr, long functionAddr, long calloutThunk, long[] argValues);\n+\t */\n+#elif JAVA_SPEC_VERSION >= 22\n \t/* openj9.internal.foreign.abi.InternalDowncallHandler:\n \t * private native long invokeNative(Object[] bases, long[] offsets, boolean isInCriticalDownCall, long returnStateMemAddr, long returnStructMemAddr, long functionAddr, long calloutThunk, long[] argValues);\n \t */\n@@ -5227,7 +5231,13 @@ class INTERPRETER_CLASS\n \t\tU_64 *ffiArgs = _currentThread->ffiArgs;\n \t\tU_64 sFfiArgs[16];\n #if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tUDATA argSlots = 14;\n+\t\tUDATA returnStateMemAddr;\n+\t\tj9object_t returnStateMemBase = NULL;\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\tUDATA argSlots = 13;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tI_32 *returnState = NULL;\n \t\tUDATA curPtrArgIdx = 0;\n \t\tj9object_t heapBase = NULL;\n@@ -5258,9 +5268,19 @@ class INTERPRETER_CLASS\n \n #if JAVA_SPEC_VERSION >= 21\n \t\t/* The native memory is allocated at java level to save the execution state after performing the downcall. */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\treturnStateMemAddr = (UDATA)*(I_64 *)(_sp + 7); /* returnStateMemAddr */\n+\t\treturnStateMemBase = *(j9object_t *)(_sp + 12); /* returnStateMemBase */\n+\t\tif (NULL != returnStateMemBase) {\n+\t\t\treturnState = (I_32 *)((UDATA)returnStateMemBase + returnStateMemAddr);\n+\t\t} else {\n+\t\t\treturnState = (I_32 *)returnStateMemAddr;\n+\t\t}\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\treturnState = (I_32 *)(UDATA)*(I_64 *)(_sp + 7); /* returnStateMemAddr */\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n-\t\t/* Set the linker option to the current thread for the trivial downcall. */\n+\t\t/* Set the linker option to the current thread for the critical downcall. */\n \t\t_currentThread->isInCriticalDownCall = (0 == *(U_32*)(_sp + 9)) ? FALSE : TRUE;\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \n@@ -5465,7 +5485,7 @@ class INTERPRETER_CLASS\n \n done:\n #if JAVA_SPEC_VERSION >= 21\n-\t\t/* Clear the trivial downcall flag. */\n+\t\t/* Clear the critical downcall flag. */\n \t\t_currentThread->isInCriticalDownCall = FALSE;\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \ndiff --git a/runtime/vm/bindnatv.cpp b/runtime/vm/bindnatv.cpp\nindex b71c3760f18..40e4c966d69 100644\n--- a/runtime/vm/bindnatv.cpp\n+++ b/runtime/vm/bindnatv.cpp\n@@ -301,7 +301,9 @@ static inlMapping mappings[] = {\n \t{ \"Java_sun_reflect_Reflection_getClassAccessFlags__Ljava_lang_Class_2\", J9_BCLOOP_SEND_TARGET_INL_REFLECTION_GETCLASSACCESSFLAGS },\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n-#if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__Ljava_lang_Object_2_3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n+#elif JAVA_SPEC_VERSION >= 22\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative___3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n #elif JAVA_SPEC_VERSION == 21\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__ZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n",
    "38a18d4270bec8080eae9131ecfd983473cbd02c": "diff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 579f20925da..f05c316834c 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -955,6 +955,7 @@ extern \"C\" {\n #define J9JFR_EVENT_TYPE_THREAD_CONTEXT_SWITCH_RATE 8\n #define J9JFR_EVENT_TYPE_THREAD_PARK 9\n #define J9JFR_EVENT_TYPE_THREAD_STATISTICS 10\n+#define J9JFR_EVENT_TYPE_MONITOR_ENTER 11\n \n /* JFR thread states */\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 26563117ef6..c1878cd035f 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -441,6 +441,17 @@ typedef struct J9JFRThreadParked {\n \n #define J9JFRTHREADPARKED_STACKTRACE(jfrEvent) ((UDATA*)(((J9JFRThreadParked*)(jfrEvent)) + 1))\n \n+typedef struct J9JFRMonitorEntered {\n+\tJ9JFR_EVENT_WITH_STACKTRACE_FIELDS\n+\tI_64 duration;\n+\tstruct J9VMThread *thread;\n+\tstruct J9Class *monitorClass;\n+\tstruct J9VMThread *previousOwner;\n+\tUDATA monitorAddress;\n+} J9JFRMonitorEntered;\n+\n+#define J9JFRMONITORENTERED_STACKTRACE(jfrEvent) ((UDATA *)(((J9JFRMonitorEntered *)(jfrEvent)) + 1))\n+\n typedef struct J9JFRCPULoad {\n \tJ9JFR_EVENT_COMMON_FIELDS\n \tfloat jvmUser;\ndiff --git a/runtime/oti/j9vm.hdf b/runtime/oti/j9vm.hdf\nindex bd496eb5420..b16db4f6377 100644\n--- a/runtime/oti/j9vm.hdf\n+++ b/runtime/oti/j9vm.hdf\n@@ -229,6 +229,9 @@ typedef UDATA (* lookupNativeAddressCallback)(struct J9VMThread *currentThread,\n \t\t<struct>J9VMMonitorContendedEnteredEvent</struct>\n \t\t<data type=\"struct J9VMThread*\" name=\"currentThread\" description=\"current thread\" />\n \t\t<data type=\"omrthread_monitor_t\" name=\"monitor\" description=\"the contended monitor\" />\n+\t\t<data type=\"I_64\" name=\"startTicks\" description=\"current ticks when wait began\" />\n+\t\t<data type=\"struct J9Class*\" name=\"monitorClass\" description=\"object monitor class\" />\n+\t\t<data type=\"struct J9VMThread*\" name=\"previousOwner\" description=\"previous owner thread\" />\n \t</event>\n \n \t<event>\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 9f737337942..29f69ec440e 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -66,6 +66,7 @@ enum MetadataTypeID {\n \tThreadEndID = 3,\n \tThreadSleepID = 4,\n \tThreadParkID = 5,\n+\tMonitorEnterID = 6,\n \tMonitorWaitID = 7,\n \tJVMInformationID = 87,\n \tOSInformationID = 88,\n@@ -140,6 +141,8 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int JFR_CHUNK_HEADER_SIZE = 68;\n \n \t/* conservative sizing for JFR chunk */\n+\tstatic constexpr int LEB128_32_SIZE = 5;\n+\tstatic constexpr int LEB128_64_SIZE = 9;\n \tstatic constexpr int STRING_HEADER_LENGTH = sizeof(U_64);\n \tstatic constexpr int CHECKPOINT_EVENT_HEADER_AND_FOOTER = 68;\n \tstatic constexpr int STRING_CONSTANT_SIZE = 128;\n@@ -159,6 +162,7 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int THREAD_END_EVENT_SIZE = (4 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int THREAD_SLEEP_EVENT_SIZE = (7 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int MONITOR_WAIT_EVENT_SIZE = (9 * sizeof(U_64)) + sizeof(U_32);\n+\tstatic constexpr int MONITOR_ENTER_EVENT_SIZE = sizeof(U_32) + (3 * LEB128_64_SIZE) + (5 * LEB128_32_SIZE);\n \tstatic constexpr int THREAD_PARK_EVENT_SIZE = (9 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int JVM_INFORMATION_EVENT_SIZE = 3000;\n \tstatic constexpr int PHYSICAL_MEMORY_EVENT_SIZE = (4 * sizeof(U_64)) + sizeof(U_32);\n@@ -366,6 +370,8 @@ class VM_JFRChunkWriter {\n \n \t\t\tpool_do(_constantPoolTypes.getMonitorWaitTable(), &writeMonitorWaitEvent, _bufferWriter);\n \n+\t\t\tpool_do(_constantPoolTypes.getMonitorEnterTable(), &writeMonitorEnterEvent, _bufferWriter);\n+\n \t\t\tpool_do(_constantPoolTypes.getThreadParkTable(), &writeThreadParkEvent, _bufferWriter);\n \n \t\t\tpool_do(_constantPoolTypes.getCPULoadTable(), &writeCPULoadEvent, _bufferWriter);\n@@ -583,6 +589,45 @@ class VM_JFRChunkWriter {\n \t\twriteEventSize(_bufferWriter, dataStart);\n \t}\n \n+\tstatic void\n+\twriteMonitorEnterEvent(void *anElement, void *userData)\n+\t{\n+\t\tMonitorEnterEntry *entry = (MonitorEnterEntry *)anElement;\n+\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n+\n+\t\t/* reserve size field */\n+\t\tU_8 *dataStart = _bufferWriter->getAndIncCursor(sizeof(U_32));\n+\n+\t\t/* write event type */\n+\t\t_bufferWriter->writeLEB128(MonitorEnterID);\n+\n+\t\t/* write start time - this is when the sleep started not when it ended so we\n+\t\t * need to subtract the duration since the event is emitted when the sleep ends.\n+\t\t */\n+\t\t_bufferWriter->writeLEB128(entry->ticks - entry->duration);\n+\n+\t\t/* write duration time which is always in ticks, in our case nanos */\n+\t\t_bufferWriter->writeLEB128(entry->duration);\n+\n+\t\t/* write event thread index */\n+\t\t_bufferWriter->writeLEB128(entry->eventThreadIndex);\n+\n+\t\t/* stacktrace index */\n+\t\t_bufferWriter->writeLEB128(entry->stackTraceIndex);\n+\n+\t\t/* monitor class index */\n+\t\t_bufferWriter->writeLEB128(entry->monitorClass);\n+\n+\t\t/* notifier thread index */\n+\t\t_bufferWriter->writeLEB128(entry->previousOwnerThread);\n+\n+\t\t/* address of monitor */\n+\t\t_bufferWriter->writeLEB128(entry->monitorAddress);\n+\n+\t\t/* write size */\n+\t\twriteEventSize(_bufferWriter, dataStart);\n+\t}\n+\n \tstatic void\n \twriteThreadParkEvent(void *anElement, void *userData)\n \t{\n@@ -797,6 +842,8 @@ class VM_JFRChunkWriter {\n \n \t\trequiredBufferSize += (_constantPoolTypes.getMonitorWaitCount() * MONITOR_WAIT_EVENT_SIZE);\n \n+\t\trequiredBufferSize += (_constantPoolTypes.getMonitorEnterCount() * MONITOR_ENTER_EVENT_SIZE);\n+\n \t\trequiredBufferSize += (_constantPoolTypes.getThreadParkCount() * THREAD_PARK_EVENT_SIZE);\n \n \t\trequiredBufferSize += JVM_INFORMATION_EVENT_SIZE;\ndiff --git a/runtime/vm/JFRConstantPoolTypes.cpp b/runtime/vm/JFRConstantPoolTypes.cpp\nindex 0cb514158d5..093bf2b70cc 100644\n--- a/runtime/vm/JFRConstantPoolTypes.cpp\n+++ b/runtime/vm/JFRConstantPoolTypes.cpp\n@@ -1086,6 +1086,37 @@ VM_JFRConstantPoolTypes::addMonitorWaitEntry(J9JFRMonitorWaited* threadWaitData)\n \treturn;\n }\n \n+void\n+VM_JFRConstantPoolTypes::addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterData)\n+{\n+\tMonitorEnterEntry *entry = (MonitorEnterEntry *)pool_newElement(_monitorEnterTable);\n+\n+\tif (NULL == entry) {\n+\t\t_buildResult = OutOfMemory;\n+\t\tgoto done;\n+\t}\n+\tentry->ticks = monitorEnterData->startTicks;\n+\tentry->duration = monitorEnterData->duration;\n+\tentry->monitorAddress = monitorEnterData->monitorAddress;\n+\n+\tentry->threadIndex = addThreadEntry(monitorEnterData->vmThread);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->eventThreadIndex = addThreadEntry(monitorEnterData->vmThread);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->stackTraceIndex = consumeStackTrace(monitorEnterData->vmThread, J9JFRMONITORENTERED_STACKTRACE(monitorEnterData), monitorEnterData->stackTraceSize);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->monitorClass = getClassEntry(monitorEnterData->monitorClass);\n+\tif (isResultNotOKay()) goto done;\n+\n+\t_monitorEnterCount += 1;\n+\n+done:\n+\treturn;\n+}\n+\n void\n VM_JFRConstantPoolTypes::addThreadParkEntry(J9JFRThreadParked* threadParkData)\n {\ndiff --git a/runtime/vm/JFRConstantPoolTypes.hpp b/runtime/vm/JFRConstantPoolTypes.hpp\nindex aaa3b92c55f..826d2170a2c 100644\n--- a/runtime/vm/JFRConstantPoolTypes.hpp\n+++ b/runtime/vm/JFRConstantPoolTypes.hpp\n@@ -204,6 +204,17 @@ struct MonitorWaitEntry {\n \tBOOLEAN timedOut;\n };\n \n+struct MonitorEnterEntry {\n+\tI_64 ticks;\n+\tI_64 duration;\n+\tI_64 monitorAddress;\n+\tU_32 monitorClass;\n+\tU_32 previousOwnerThread;\n+\tU_32 threadIndex;\n+\tU_32 eventThreadIndex;\n+\tU_32 stackTraceIndex;\n+};\n+\n struct ThreadParkEntry {\n \tI_64 ticks;\n \tI_64 duration;\n@@ -336,6 +347,8 @@ class VM_JFRConstantPoolTypes {\n \tUDATA _threadSleepCount;\n \tJ9Pool *_monitorWaitTable;\n \tUDATA _monitorWaitCount;\n+\tJ9Pool *_monitorEnterTable;\n+\tUDATA _monitorEnterCount;\n \tJ9Pool *_threadParkTable;\n \tUDATA _threadParkCount;\n \tJ9Pool *_cpuLoadTable;\n@@ -611,6 +624,8 @@ class VM_JFRConstantPoolTypes {\n \n \tvoid addMonitorWaitEntry(J9JFRMonitorWaited* threadWaitData);\n \n+\tvoid addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterData);\n+\n \tvoid addThreadParkEntry(J9JFRThreadParked* threadParkData);\n \n \tvoid addCPULoadEntry(J9JFRCPULoad *cpuLoadData);\n@@ -648,6 +663,11 @@ class VM_JFRConstantPoolTypes {\n \t\treturn _monitorWaitTable;\n \t}\n \n+\tJ9Pool *getMonitorEnterTable()\n+\t{\n+\t\treturn _monitorEnterTable;\n+\t}\n+\n \tJ9Pool *getThreadParkTable()\n \t{\n \t\treturn _threadParkTable;\n@@ -703,6 +723,11 @@ class VM_JFRConstantPoolTypes {\n \t\treturn _monitorWaitCount;\n \t}\n \n+\tUDATA getMonitorEnterCount()\n+\t{\n+\t\treturn _monitorEnterCount;\n+\t}\n+\n \tUDATA getThreadParkCount()\n \t{\n \t\treturn _threadParkCount;\n@@ -876,6 +901,9 @@ class VM_JFRConstantPoolTypes {\n \t\t\tcase J9JFR_EVENT_TYPE_OBJECT_WAIT:\n \t\t\t\taddMonitorWaitEntry((J9JFRMonitorWaited*) event);\n \t\t\t\tbreak;\n+\t\t\tcase J9JFR_EVENT_TYPE_MONITOR_ENTER:\n+\t\t\t\taddMonitorEnterEntry((J9JFRMonitorEntered *) event);\n+\t\t\t\tbreak;\n \t\t\tcase J9JFR_EVENT_TYPE_THREAD_PARK:\n \t\t\t\taddThreadParkEntry((J9JFRThreadParked*) event);\n \t\t\t\tbreak;\n@@ -1216,6 +1244,8 @@ class VM_JFRConstantPoolTypes {\n \t\t, _threadSleepCount(0)\n \t\t, _monitorWaitTable(NULL)\n \t\t, _monitorWaitCount(0)\n+\t\t, _monitorEnterTable(NULL)\n+\t\t, _monitorEnterCount(0)\n \t\t, _threadParkTable(NULL)\n \t\t, _threadParkCount(0)\n \t\t, _cpuLoadTable(NULL)\n@@ -1330,6 +1360,12 @@ class VM_JFRConstantPoolTypes {\n \t\t\tgoto done;\n \t\t}\n \n+\t\t_monitorEnterTable = pool_new(sizeof(MonitorEnterEntry), 0, sizeof(U_64), 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(privatePortLibrary));\n+\t\tif (NULL == _monitorEnterTable) {\n+\t\t\t_buildResult = OutOfMemory;\n+\t\t\tgoto done;\n+\t\t}\n+\n \t\t_threadParkTable = pool_new(sizeof(ThreadParkEntry), 0, sizeof(U_64), 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(privatePortLibrary));\n \t\tif (NULL == _threadParkTable) {\n \t\t\t_buildResult = OutOfMemory;\n@@ -1452,6 +1488,7 @@ class VM_JFRConstantPoolTypes {\n \t\tpool_kill(_threadEndTable);\n \t\tpool_kill(_threadSleepTable);\n \t\tpool_kill(_monitorWaitTable);\n+\t\tpool_kill(_monitorEnterTable);\n \t\tpool_kill(_threadParkTable);\n \t\tpool_kill(_cpuLoadTable);\n \t\tpool_kill(_threadCPULoadTable);\ndiff --git a/runtime/vm/ObjectMonitor.cpp b/runtime/vm/ObjectMonitor.cpp\nindex 2e903c12850..520f5140c8e 100644\n--- a/runtime/vm/ObjectMonitor.cpp\n+++ b/runtime/vm/ObjectMonitor.cpp\n@@ -140,6 +140,9 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \tUDATA result = 0;\n \tj9object_t object = J9VMTHREAD_BLOCKINGENTEROBJECT(currentThread, currentThread);\n \tJ9Class *ramClass = J9OBJECT_CLAZZ(currentThread, object);\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tI_64 startTicks = j9time_nano_time();\n \t/* Throughout this function, note that inlineGetLockAddress cannot run into out of memory case because\n \t * an entry in monitor table will have been created by the earlier call in objectMonitorEnterNonBlocking.\n \t */\n@@ -159,7 +162,6 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t}\n #endif /* J9VM_THR_LOCK_RESERVATION */\n \t{\n-\t\tJ9JavaVM *vm = currentThread->javaVM;\n \t\tJ9ObjectMonitor *objectMonitor = monitorTableAt(currentThread, object);\n \t\t/* Table entry was created by the nonblocking case, so this peek cannot fail */\n \t\tAssert_VM_notNull(objectMonitor);\n@@ -289,8 +291,9 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\t((J9ThreadMonitor*)monitor)->flags &= ~(UDATA)J9THREAD_MONITOR_SUPPRESS_CONTENDED_EXIT;\n \t\tVM_AtomicSupport::subtract(&monitor->pinCount, 1);\n \t\tif (J9_EVENT_IS_HOOKED(vm->hookInterface, J9HOOK_VM_MONITOR_CONTENDED_ENTERED)) {\n+\t\t\tJ9VMThread *ownerThread = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\t\tbool frameBuilt = saveBlockingEnterObject(currentThread);\n-\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor);\n+\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, ownerThread);\n \t\t\trestoreBlockingEnterObject(currentThread, frameBuilt);\n \t\t}\n \t}\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex a295b15a4f5..2809a0d64b3 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -93,6 +93,9 @@ jfrEventSize(J9JFREvent *jfrEvent)\n \tcase J9JFR_EVENT_TYPE_OBJECT_WAIT:\n \t\tsize = sizeof(J9JFRMonitorWaited) + (((J9JFRMonitorWaited*)jfrEvent)->stackTraceSize * sizeof(UDATA));\n \t\tbreak;\n+\tcase J9JFR_EVENT_TYPE_MONITOR_ENTER:\n+\t\tsize = sizeof(J9JFRMonitorEntered) + (((J9JFRMonitorEntered *)jfrEvent)->stackTraceSize * sizeof(UDATA));\n+\t\tbreak;\n \tcase J9JFR_EVENT_TYPE_THREAD_PARK:\n \t\tsize = sizeof(J9JFRThreadParked) + (((J9JFRThreadParked*)jfrEvent)->stackTraceSize * sizeof(UDATA));\n \t\tbreak;\n@@ -650,6 +653,35 @@ jfrVMMonitorWaited(J9HookInterface **hook, UDATA eventNum, void *eventData, void\n \t}\n }\n \n+/**\n+ * Hook for VM monitor entered. Called without VM access.\n+ *\n+ * @param hook[in] the VM hook interface\n+ * @param eventNum[in] the event number\n+ * @param eventData[in] the event data\n+ * @param userData[in] the registered user data\n+ */\n+static void\n+jfrVMMonitorEntered(J9HookInterface **hook, UDATA eventNum, void *eventData, void *userData)\n+{\n+\tJ9VMMonitorContendedEnteredEvent *event = (J9VMMonitorContendedEnteredEvent *)eventData;\n+\tJ9VMThread *currentThread = event->currentThread;\n+\tPORT_ACCESS_FROM_VMC(currentThread);\n+\n+#if defined(DEBUG)\n+\tj9tty_printf(PORTLIB, \"\\n!!! VM monitor entered %p\\n\", currentThread);\n+#endif /* defined(DEBUG) */\n+\n+\tJ9JFRMonitorEntered *jfrEvent = (J9JFRMonitorEntered *)reserveBufferWithStackTrace(currentThread, currentThread, J9JFR_EVENT_TYPE_MONITOR_ENTER, sizeof(*jfrEvent));\n+\tif (NULL != jfrEvent) {\n+\t\tinitializeEventFields(currentThread, (J9JFREvent *)jfrEvent, J9JFR_EVENT_TYPE_MONITOR_ENTER);\n+\n+\t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n+\t\tjfrEvent->monitorClass = event->monitorClass;\n+\t\tjfrEvent->monitorAddress = (UDATA)event->monitor;\n+\t}\n+}\n+\n /**\n  * Hook for VM thread parked. Called without VM access.\n  *\n@@ -732,7 +764,9 @@ initializeJFR(J9JavaVM *vm, BOOLEAN lateInit)\n \tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_MONITOR_WAITED, jfrVMMonitorWaited, OMR_GET_CALLSITE(), NULL)) {\n \t\tgoto fail;\n \t}\n-\n+\tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_MONITOR_CONTENDED_ENTERED, jfrVMMonitorEntered, OMR_GET_CALLSITE(), NULL)) {\n+\t\tgoto fail;\n+\t}\n \tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_UNPARKED, jfrVMThreadParked, OMR_GET_CALLSITE(), NULL)) {\n \t\tgoto fail;\n \t}\n@@ -867,6 +901,7 @@ tearDownJFR(J9JavaVM *vm)\n \t/* Unregister it anyway even it wasn't registered for initializeJFR(vm, TRUE). */\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_INITIALIZED, jfrVMInitialized, NULL);\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_MONITOR_WAITED, jfrVMMonitorWaited, NULL);\n+\t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_MONITOR_CONTENDED_ENTERED, jfrVMMonitorEntered, NULL);\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_UNPARKED, jfrVMThreadParked, NULL);\n \n \t/* Free global data */\n",
    "47e00d8ad9acd017f981b9defc6c9f20d122c19e": "diff --git a/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java b/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\nindex ed2c12c0f1d..3b21ff42ad4 100644\n--- a/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\n+++ b/jcl/src/java.base/share/classes/openj9/internal/foreign/abi/InternalDowncallHandler.java\n@@ -189,6 +189,9 @@ void clear() {\n \tprivate static synchronized native void resolveRequiredFields();\n \tprivate native void initCifNativeThunkData(String[] argLayouts, String retLayout, boolean newArgTypes, int varArgIndex);\n \tprivate native long invokeNative(\n+\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\tObject returnStateMemBase,\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t/*[IF JAVA_SPEC_VERSION >= 22]*/\n \t\t\tObject[] bases,\n \t\t\tlong[] offsets,\n@@ -887,9 +890,29 @@ Object runNativeMethod(Addressable downcallAddr, SegmentAllocator segmtAllocator\n \t\t * Note: memArgScopeSet is not empty with the downcall address added to the set.\n \t\t */\n \t\t/*[IF JAVA_SPEC_VERSION >= 21]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tlong returnStateMemAddr;\n+\t\tObject returnStateMemBase;\n+\t\tif (linkerOpts.hasCapturedCallState() && !stateSegmt.isNative()) {\n+\t\t\t/* The CaptureCallState option can only use heap memory if allowed by the Critical option. */\n+\t\t\tif (!linkerOpts.isCritical()) {\n+\t\t\t\tthrow new IllegalArgumentException(\"Heap segment not allowed\");\n+\t\t\t}\n+\t\t\tAbstractMemorySegmentImpl segment = (AbstractMemorySegmentImpl)stateSegmt;\n+\t\t\treturnStateMemAddr = segment.unsafeGetOffset();\n+\t\t\treturnStateMemBase = segment.unsafeGetBase();\n+\t\t} else {\n+\t\t\treturnStateMemAddr = getValidDowncallMemAddr(stateSegmt);\n+\t\t\treturnStateMemBase = null;\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n+\n \t\ttry (Arena arena = Arena.ofConfined()) {\n \t\t\tSetDependency(arena.scope());\n \t\t\treturnVal = invokeNative(\n+\t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t\t\treturnStateMemBase,\n+\t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 22]*/\n \t\t\t\t\t(info != null) ? info.bases : null,\n \t\t\t\t\t(info != null) ? info.offsets : null,\n@@ -897,7 +920,11 @@ Object runNativeMethod(Addressable downcallAddr, SegmentAllocator segmtAllocator\n \t\t\t\t\t/*[ELSE] JAVA_SPEC_VERSION >= 22 */\n \t\t\t\t\tlinkerOpts.isTrivial(),\n \t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 22 */\n+\t\t\t\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t\t\treturnStateMemAddr,\n+\t\t\t\t\t/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tgetValidDowncallMemAddr(stateSegmt),\n+\t\t\t\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tretMemAddr,\n \t\t\t\t\tgetValidDowncallMemAddr(downcallAddr),\n \t\t\t\t\tcifNativeThunkAddr,\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex e6a7aeaa91e..43d51041b44 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5185,7 +5185,11 @@ class INTERPRETER_CLASS\n \t}\n \n #if JAVA_SPEC_VERSION >= 16\n-#if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t/* openj9.internal.foreign.abi.InternalDowncallHandler:\n+\t * private native long invokeNative(Object returnStateMemBase, Object[] bases, long[] offsets, boolean isInCriticalDownCall, long returnStateMemAddr, long returnStructMemAddr, long functionAddr, long calloutThunk, long[] argValues);\n+\t */\n+#elif JAVA_SPEC_VERSION >= 22\n \t/* openj9.internal.foreign.abi.InternalDowncallHandler:\n \t * private native long invokeNative(Object[] bases, long[] offsets, boolean isInCriticalDownCall, long returnStateMemAddr, long returnStructMemAddr, long functionAddr, long calloutThunk, long[] argValues);\n \t */\n@@ -5227,7 +5231,13 @@ class INTERPRETER_CLASS\n \t\tU_64 *ffiArgs = _currentThread->ffiArgs;\n \t\tU_64 sFfiArgs[16];\n #if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tUDATA argSlots = 14;\n+\t\tUDATA returnStateMemAddr;\n+\t\tj9object_t returnStateMemBase = NULL;\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\tUDATA argSlots = 13;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tI_32 *returnState = NULL;\n \t\tUDATA curPtrArgIdx = 0;\n \t\tj9object_t heapBase = NULL;\n@@ -5258,9 +5268,19 @@ class INTERPRETER_CLASS\n \n #if JAVA_SPEC_VERSION >= 21\n \t\t/* The native memory is allocated at java level to save the execution state after performing the downcall. */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\treturnStateMemAddr = (UDATA)*(I_64 *)(_sp + 7); /* returnStateMemAddr */\n+\t\treturnStateMemBase = *(j9object_t *)(_sp + 12); /* returnStateMemBase */\n+\t\tif (NULL != returnStateMemBase) {\n+\t\t\treturnState = (I_32 *)((UDATA)returnStateMemBase + returnStateMemAddr);\n+\t\t} else {\n+\t\t\treturnState = (I_32 *)returnStateMemAddr;\n+\t\t}\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\treturnState = (I_32 *)(UDATA)*(I_64 *)(_sp + 7); /* returnStateMemAddr */\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n-\t\t/* Set the linker option to the current thread for the trivial downcall. */\n+\t\t/* Set the linker option to the current thread for the critical downcall. */\n \t\t_currentThread->isInCriticalDownCall = (0 == *(U_32*)(_sp + 9)) ? FALSE : TRUE;\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \n@@ -5465,7 +5485,7 @@ class INTERPRETER_CLASS\n \n done:\n #if JAVA_SPEC_VERSION >= 21\n-\t\t/* Clear the trivial downcall flag. */\n+\t\t/* Clear the critical downcall flag. */\n \t\t_currentThread->isInCriticalDownCall = FALSE;\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \ndiff --git a/runtime/vm/bindnatv.cpp b/runtime/vm/bindnatv.cpp\nindex b71c3760f18..40e4c966d69 100644\n--- a/runtime/vm/bindnatv.cpp\n+++ b/runtime/vm/bindnatv.cpp\n@@ -301,7 +301,9 @@ static inlMapping mappings[] = {\n \t{ \"Java_sun_reflect_Reflection_getClassAccessFlags__Ljava_lang_Class_2\", J9_BCLOOP_SEND_TARGET_INL_REFLECTION_GETCLASSACCESSFLAGS },\n #endif /* JAVA_SPEC_VERSION >= 11 */\n \n-#if JAVA_SPEC_VERSION >= 22\n+#if JAVA_SPEC_VERSION >= 24\n+\t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__Ljava_lang_Object_2_3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n+#elif JAVA_SPEC_VERSION >= 22\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative___3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n #elif JAVA_SPEC_VERSION == 21\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__ZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n",
    "36382ff89394dc8c0203535b8e766baf78ae630a": "diff --git a/runtime/vm/bindnatv.cpp b/runtime/vm/bindnatv.cpp\nindex 40e4c966d69..d893a767eb5 100644\n--- a/runtime/vm/bindnatv.cpp\n+++ b/runtime/vm/bindnatv.cpp\n@@ -303,13 +303,14 @@ static inlMapping mappings[] = {\n \n #if JAVA_SPEC_VERSION >= 24\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__Ljava_lang_Object_2_3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION >= 22\n+#elif JAVA_SPEC_VERSION >= 22 /* JAVA_SPEC_VERSION >= 24 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative___3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION == 21\n+#elif JAVA_SPEC_VERSION == 21 /* JAVA_SPEC_VERSION >= 22 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__ZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION >= 16\n+#elif JAVA_SPEC_VERSION >= 16 /* JAVA_SPEC_VERSION == 21 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__JJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#endif /* JAVA_SPEC_VERSION >= 22 */\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n #if JAVA_SPEC_VERSION >= 19\n \t{ \"Java_jdk_internal_vm_Continuation_enterImpl__\", J9_BCLOOP_SEND_TARGET_ENTER_CONTINUATION },\n \t{ \"Java_jdk_internal_vm_Continuation_yieldImpl__Z\", J9_BCLOOP_SEND_TARGET_YIELD_CONTINUATION },\n",
    "54fa206273a0aa19a5ac3c2f666d7a84c63cebd8": "diff --git a/runtime/vm/bindnatv.cpp b/runtime/vm/bindnatv.cpp\nindex 40e4c966d69..d893a767eb5 100644\n--- a/runtime/vm/bindnatv.cpp\n+++ b/runtime/vm/bindnatv.cpp\n@@ -303,13 +303,14 @@ static inlMapping mappings[] = {\n \n #if JAVA_SPEC_VERSION >= 24\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__Ljava_lang_Object_2_3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION >= 22\n+#elif JAVA_SPEC_VERSION >= 22 /* JAVA_SPEC_VERSION >= 24 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative___3Ljava_lang_Object_2_3JZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION == 21\n+#elif JAVA_SPEC_VERSION == 21 /* JAVA_SPEC_VERSION >= 22 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__ZJJJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#elif JAVA_SPEC_VERSION >= 16\n+#elif JAVA_SPEC_VERSION >= 16 /* JAVA_SPEC_VERSION == 21 */\n \t{ \"Java_openj9_internal_foreign_abi_InternalDowncallHandler_invokeNative__JJJ_3J\", J9_BCLOOP_SEND_TARGET_INL_INTERNALDOWNCALLHANDLER_INVOKENATIVE },\n-#endif /* JAVA_SPEC_VERSION >= 22 */\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n #if JAVA_SPEC_VERSION >= 19\n \t{ \"Java_jdk_internal_vm_Continuation_enterImpl__\", J9_BCLOOP_SEND_TARGET_ENTER_CONTINUATION },\n \t{ \"Java_jdk_internal_vm_Continuation_yieldImpl__Z\", J9_BCLOOP_SEND_TARGET_YIELD_CONTINUATION },\n",
    "39368ae517ea84efadbbd72d09cdbc378fa8bb9a": "diff --git a/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java b/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\nindex 4c259292839..30368d3bc4a 100644\n--- a/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\n+++ b/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\n@@ -25,7 +25,6 @@\n import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodType;\n \n-import jdk.incubator.foreign.Addressable;\n import jdk.incubator.foreign.FunctionDescriptor;\n import openj9.internal.foreign.abi.InternalDowncallHandler;\n \n@@ -38,7 +37,6 @@ public class ProgrammableInvoker {\n \t * The method is ultimately invoked by Clinker on the specific platforms to generate the requested\n \t * method handle to the underlying C function.\n \t *\n-\t * @param downcallAddr the downcall symbol\n \t * @param functionMethodType the MethodType of the specified native function\n \t * @param funcDesc the function descriptor of the specified native function\n \t * @return a method handle bound to the native method\n",
    "3c6fa084e657e5f0128087102366725c1df49e6e": "diff --git a/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java b/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\nindex 4c259292839..30368d3bc4a 100644\n--- a/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\n+++ b/jcl/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java\n@@ -25,7 +25,6 @@\n import java.lang.invoke.MethodHandle;\n import java.lang.invoke.MethodType;\n \n-import jdk.incubator.foreign.Addressable;\n import jdk.incubator.foreign.FunctionDescriptor;\n import openj9.internal.foreign.abi.InternalDowncallHandler;\n \n@@ -38,7 +37,6 @@ public class ProgrammableInvoker {\n \t * The method is ultimately invoked by Clinker on the specific platforms to generate the requested\n \t * method handle to the underlying C function.\n \t *\n-\t * @param downcallAddr the downcall symbol\n \t * @param functionMethodType the MethodType of the specified native function\n \t * @param funcDesc the function descriptor of the specified native function\n \t * @return a method handle bound to the native method\n",
    "ad6eabb461deec92c11ab9a5bc3f9d1fb2977deb": "diff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex 7d3be109aaa..fa203d7e7fa 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -299,9 +299,6 @@ MM_VLHGCAccessBarrier::jniGetPrimitiveArrayCritical(J9VMThread* vmThread, jarray\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/* alwaysCopyInCritical or discontiguous (including 0 size array) */\n \t\tcopyArrayCritical(vmThread, &data, arrayObject, isCopy);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n-\t\t/* off heap enabled and not adjacent */\n-\t\tdata = (void *)indexableObjectModel->getDataPointerForContiguous(arrayObject);\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(arrayObject)) {\n \t\t/* an array having discontiguous extents is another reason to force the critical section to be a copy */\n@@ -336,6 +333,9 @@ MM_VLHGCAccessBarrier::jniGetPrimitiveArrayCritical(J9VMThread* vmThread, jarray\n \t\t\tcopyArrayCritical(vmThread, &data, arrayObject, isCopy);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n+\t\t/* off heap enabled and not adjacent */\n+\t\tdata = (void *)indexableObjectModel->getDataPointerForContiguous(arrayObject);\n \t} else {\n \t\t/* Adjacent for offheap enabled and contiguous for offheap disabled.\n \t\t   acquire access to prevent object being moved by GC access and return a direct pointer. */\n@@ -369,8 +369,6 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/* alwaysCopyInCritical or discontiguous (including 0 size array) */\n \t\tcopyBackArrayCritical(vmThread, elems, &arrayObject, mode);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n-\t\t/* off heap enabled and not adjacent */\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(arrayObject)) {\n \t\t/* an array having discontiguous extents is another reason to force the critical section to be a copy */\n@@ -406,6 +404,8 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n \t\t\tcopyBackArrayCritical(vmThread, elems, &arrayObject, mode);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(arrayObject)) {\n+\t\t/* off heap enabled and not adjacent */\n \t} else {\n \t\t/* adjacent for offheap enabled and contiguous for offheap disabled,\n \t\t * Objects can not be moved if critical section is active\n@@ -451,9 +451,6 @@ MM_VLHGCAccessBarrier::jniGetStringCritical(J9VMThread* vmThread, jstring str, j\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/*  alwaysCopyInCritical or isCompressed  or discontiguous (including 0 size array) */\n \t\tcopyStringCritical(vmThread, &data, valueObject, stringObject, isCopy, isCompressed);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n-\t\t/* off heap enabled and not adjacent */\n-\t\tdata = (jchar *)indexableObjectModel->getDataPointerForContiguous(valueObject);\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(valueObject)) {\n \t\tMM_EnvironmentVLHGC *env = MM_EnvironmentVLHGC::getEnvironment(vmThread);\n@@ -487,6 +484,9 @@ MM_VLHGCAccessBarrier::jniGetStringCritical(J9VMThread* vmThread, jstring str, j\n \t\t\tcopyStringCritical(vmThread, &data, valueObject, stringObject, isCopy, isCompressed);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n+\t\t/* off heap enabled and not adjacent */\n+\t\tdata = (jchar *)indexableObjectModel->getDataPointerForContiguous(valueObject);\n \t} else {\n \t\t/**\n \t\t *  adjacent for offheap enabled and contiguous for offheap disabled\n@@ -530,8 +530,6 @@ MM_VLHGCAccessBarrier::jniReleaseStringCritical(J9VMThread* vmThread, jstring st\n #endif /* defined(J9VM_GC_ENABLE_DOUBLE_MAP) */\n \t\t/*  alwaysCopyInCritical or isCompressed  or discontiguous (including 0 size array) */\n \t\tfreeStringCritical(vmThread, elems);\n-\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n-\t\t/* off heap enabled and not adjacent */\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t} else if (!indexableObjectModel->isInlineContiguousArraylet(valueObject)) {\n \t\t/* an array having discontiguous extents can use double mapping if enabled in the critical section */\n@@ -558,6 +556,8 @@ MM_VLHGCAccessBarrier::jniReleaseStringCritical(J9VMThread* vmThread, jstring st\n \t\t\tfreeStringCritical(vmThread, elems);\n \t\t}\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+\t} else if (indexableObjectModel->isVirtualLargeObjectHeapEnabled() && !indexableObjectModel->isDataAdjacentToHeader(valueObject)) {\n+\t\t/* off heap enabled and not adjacent */\n \t} else {\n \t\t/**\n \t\t *  adjacent for offheap enabled and contiguous for offheap disabled,\n",
    "aa5d891d0f6b36f44ac244ef429a92f4c995ef21": "diff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 579f20925da..f05c316834c 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -955,6 +955,7 @@ extern \"C\" {\n #define J9JFR_EVENT_TYPE_THREAD_CONTEXT_SWITCH_RATE 8\n #define J9JFR_EVENT_TYPE_THREAD_PARK 9\n #define J9JFR_EVENT_TYPE_THREAD_STATISTICS 10\n+#define J9JFR_EVENT_TYPE_MONITOR_ENTER 11\n \n /* JFR thread states */\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 26563117ef6..c1878cd035f 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -441,6 +441,17 @@ typedef struct J9JFRThreadParked {\n \n #define J9JFRTHREADPARKED_STACKTRACE(jfrEvent) ((UDATA*)(((J9JFRThreadParked*)(jfrEvent)) + 1))\n \n+typedef struct J9JFRMonitorEntered {\n+\tJ9JFR_EVENT_WITH_STACKTRACE_FIELDS\n+\tI_64 duration;\n+\tstruct J9VMThread *thread;\n+\tstruct J9Class *monitorClass;\n+\tstruct J9VMThread *previousOwner;\n+\tUDATA monitorAddress;\n+} J9JFRMonitorEntered;\n+\n+#define J9JFRMONITORENTERED_STACKTRACE(jfrEvent) ((UDATA *)(((J9JFRMonitorEntered *)(jfrEvent)) + 1))\n+\n typedef struct J9JFRCPULoad {\n \tJ9JFR_EVENT_COMMON_FIELDS\n \tfloat jvmUser;\ndiff --git a/runtime/oti/j9vm.hdf b/runtime/oti/j9vm.hdf\nindex bd496eb5420..b16db4f6377 100644\n--- a/runtime/oti/j9vm.hdf\n+++ b/runtime/oti/j9vm.hdf\n@@ -229,6 +229,9 @@ typedef UDATA (* lookupNativeAddressCallback)(struct J9VMThread *currentThread,\n \t\t<struct>J9VMMonitorContendedEnteredEvent</struct>\n \t\t<data type=\"struct J9VMThread*\" name=\"currentThread\" description=\"current thread\" />\n \t\t<data type=\"omrthread_monitor_t\" name=\"monitor\" description=\"the contended monitor\" />\n+\t\t<data type=\"I_64\" name=\"startTicks\" description=\"current ticks when wait began\" />\n+\t\t<data type=\"struct J9Class*\" name=\"monitorClass\" description=\"object monitor class\" />\n+\t\t<data type=\"struct J9VMThread*\" name=\"previousOwner\" description=\"previous owner thread\" />\n \t</event>\n \n \t<event>\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 9f737337942..29f69ec440e 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -66,6 +66,7 @@ enum MetadataTypeID {\n \tThreadEndID = 3,\n \tThreadSleepID = 4,\n \tThreadParkID = 5,\n+\tMonitorEnterID = 6,\n \tMonitorWaitID = 7,\n \tJVMInformationID = 87,\n \tOSInformationID = 88,\n@@ -140,6 +141,8 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int JFR_CHUNK_HEADER_SIZE = 68;\n \n \t/* conservative sizing for JFR chunk */\n+\tstatic constexpr int LEB128_32_SIZE = 5;\n+\tstatic constexpr int LEB128_64_SIZE = 9;\n \tstatic constexpr int STRING_HEADER_LENGTH = sizeof(U_64);\n \tstatic constexpr int CHECKPOINT_EVENT_HEADER_AND_FOOTER = 68;\n \tstatic constexpr int STRING_CONSTANT_SIZE = 128;\n@@ -159,6 +162,7 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int THREAD_END_EVENT_SIZE = (4 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int THREAD_SLEEP_EVENT_SIZE = (7 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int MONITOR_WAIT_EVENT_SIZE = (9 * sizeof(U_64)) + sizeof(U_32);\n+\tstatic constexpr int MONITOR_ENTER_EVENT_SIZE = sizeof(U_32) + (3 * LEB128_64_SIZE) + (5 * LEB128_32_SIZE);\n \tstatic constexpr int THREAD_PARK_EVENT_SIZE = (9 * sizeof(U_64)) + sizeof(U_32);\n \tstatic constexpr int JVM_INFORMATION_EVENT_SIZE = 3000;\n \tstatic constexpr int PHYSICAL_MEMORY_EVENT_SIZE = (4 * sizeof(U_64)) + sizeof(U_32);\n@@ -366,6 +370,8 @@ class VM_JFRChunkWriter {\n \n \t\t\tpool_do(_constantPoolTypes.getMonitorWaitTable(), &writeMonitorWaitEvent, _bufferWriter);\n \n+\t\t\tpool_do(_constantPoolTypes.getMonitorEnterTable(), &writeMonitorEnterEvent, _bufferWriter);\n+\n \t\t\tpool_do(_constantPoolTypes.getThreadParkTable(), &writeThreadParkEvent, _bufferWriter);\n \n \t\t\tpool_do(_constantPoolTypes.getCPULoadTable(), &writeCPULoadEvent, _bufferWriter);\n@@ -583,6 +589,45 @@ class VM_JFRChunkWriter {\n \t\twriteEventSize(_bufferWriter, dataStart);\n \t}\n \n+\tstatic void\n+\twriteMonitorEnterEvent(void *anElement, void *userData)\n+\t{\n+\t\tMonitorEnterEntry *entry = (MonitorEnterEntry *)anElement;\n+\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n+\n+\t\t/* reserve size field */\n+\t\tU_8 *dataStart = _bufferWriter->getAndIncCursor(sizeof(U_32));\n+\n+\t\t/* write event type */\n+\t\t_bufferWriter->writeLEB128(MonitorEnterID);\n+\n+\t\t/* write start time - this is when the sleep started not when it ended so we\n+\t\t * need to subtract the duration since the event is emitted when the sleep ends.\n+\t\t */\n+\t\t_bufferWriter->writeLEB128(entry->ticks - entry->duration);\n+\n+\t\t/* write duration time which is always in ticks, in our case nanos */\n+\t\t_bufferWriter->writeLEB128(entry->duration);\n+\n+\t\t/* write event thread index */\n+\t\t_bufferWriter->writeLEB128(entry->eventThreadIndex);\n+\n+\t\t/* stacktrace index */\n+\t\t_bufferWriter->writeLEB128(entry->stackTraceIndex);\n+\n+\t\t/* monitor class index */\n+\t\t_bufferWriter->writeLEB128(entry->monitorClass);\n+\n+\t\t/* notifier thread index */\n+\t\t_bufferWriter->writeLEB128(entry->previousOwnerThread);\n+\n+\t\t/* address of monitor */\n+\t\t_bufferWriter->writeLEB128(entry->monitorAddress);\n+\n+\t\t/* write size */\n+\t\twriteEventSize(_bufferWriter, dataStart);\n+\t}\n+\n \tstatic void\n \twriteThreadParkEvent(void *anElement, void *userData)\n \t{\n@@ -797,6 +842,8 @@ class VM_JFRChunkWriter {\n \n \t\trequiredBufferSize += (_constantPoolTypes.getMonitorWaitCount() * MONITOR_WAIT_EVENT_SIZE);\n \n+\t\trequiredBufferSize += (_constantPoolTypes.getMonitorEnterCount() * MONITOR_ENTER_EVENT_SIZE);\n+\n \t\trequiredBufferSize += (_constantPoolTypes.getThreadParkCount() * THREAD_PARK_EVENT_SIZE);\n \n \t\trequiredBufferSize += JVM_INFORMATION_EVENT_SIZE;\ndiff --git a/runtime/vm/JFRConstantPoolTypes.cpp b/runtime/vm/JFRConstantPoolTypes.cpp\nindex 0cb514158d5..093bf2b70cc 100644\n--- a/runtime/vm/JFRConstantPoolTypes.cpp\n+++ b/runtime/vm/JFRConstantPoolTypes.cpp\n@@ -1086,6 +1086,37 @@ VM_JFRConstantPoolTypes::addMonitorWaitEntry(J9JFRMonitorWaited* threadWaitData)\n \treturn;\n }\n \n+void\n+VM_JFRConstantPoolTypes::addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterData)\n+{\n+\tMonitorEnterEntry *entry = (MonitorEnterEntry *)pool_newElement(_monitorEnterTable);\n+\n+\tif (NULL == entry) {\n+\t\t_buildResult = OutOfMemory;\n+\t\tgoto done;\n+\t}\n+\tentry->ticks = monitorEnterData->startTicks;\n+\tentry->duration = monitorEnterData->duration;\n+\tentry->monitorAddress = monitorEnterData->monitorAddress;\n+\n+\tentry->threadIndex = addThreadEntry(monitorEnterData->vmThread);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->eventThreadIndex = addThreadEntry(monitorEnterData->vmThread);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->stackTraceIndex = consumeStackTrace(monitorEnterData->vmThread, J9JFRMONITORENTERED_STACKTRACE(monitorEnterData), monitorEnterData->stackTraceSize);\n+\tif (isResultNotOKay()) goto done;\n+\n+\tentry->monitorClass = getClassEntry(monitorEnterData->monitorClass);\n+\tif (isResultNotOKay()) goto done;\n+\n+\t_monitorEnterCount += 1;\n+\n+done:\n+\treturn;\n+}\n+\n void\n VM_JFRConstantPoolTypes::addThreadParkEntry(J9JFRThreadParked* threadParkData)\n {\ndiff --git a/runtime/vm/JFRConstantPoolTypes.hpp b/runtime/vm/JFRConstantPoolTypes.hpp\nindex aaa3b92c55f..826d2170a2c 100644\n--- a/runtime/vm/JFRConstantPoolTypes.hpp\n+++ b/runtime/vm/JFRConstantPoolTypes.hpp\n@@ -204,6 +204,17 @@ struct MonitorWaitEntry {\n \tBOOLEAN timedOut;\n };\n \n+struct MonitorEnterEntry {\n+\tI_64 ticks;\n+\tI_64 duration;\n+\tI_64 monitorAddress;\n+\tU_32 monitorClass;\n+\tU_32 previousOwnerThread;\n+\tU_32 threadIndex;\n+\tU_32 eventThreadIndex;\n+\tU_32 stackTraceIndex;\n+};\n+\n struct ThreadParkEntry {\n \tI_64 ticks;\n \tI_64 duration;\n@@ -336,6 +347,8 @@ class VM_JFRConstantPoolTypes {\n \tUDATA _threadSleepCount;\n \tJ9Pool *_monitorWaitTable;\n \tUDATA _monitorWaitCount;\n+\tJ9Pool *_monitorEnterTable;\n+\tUDATA _monitorEnterCount;\n \tJ9Pool *_threadParkTable;\n \tUDATA _threadParkCount;\n \tJ9Pool *_cpuLoadTable;\n@@ -611,6 +624,8 @@ class VM_JFRConstantPoolTypes {\n \n \tvoid addMonitorWaitEntry(J9JFRMonitorWaited* threadWaitData);\n \n+\tvoid addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterData);\n+\n \tvoid addThreadParkEntry(J9JFRThreadParked* threadParkData);\n \n \tvoid addCPULoadEntry(J9JFRCPULoad *cpuLoadData);\n@@ -648,6 +663,11 @@ class VM_JFRConstantPoolTypes {\n \t\treturn _monitorWaitTable;\n \t}\n \n+\tJ9Pool *getMonitorEnterTable()\n+\t{\n+\t\treturn _monitorEnterTable;\n+\t}\n+\n \tJ9Pool *getThreadParkTable()\n \t{\n \t\treturn _threadParkTable;\n@@ -703,6 +723,11 @@ class VM_JFRConstantPoolTypes {\n \t\treturn _monitorWaitCount;\n \t}\n \n+\tUDATA getMonitorEnterCount()\n+\t{\n+\t\treturn _monitorEnterCount;\n+\t}\n+\n \tUDATA getThreadParkCount()\n \t{\n \t\treturn _threadParkCount;\n@@ -876,6 +901,9 @@ class VM_JFRConstantPoolTypes {\n \t\t\tcase J9JFR_EVENT_TYPE_OBJECT_WAIT:\n \t\t\t\taddMonitorWaitEntry((J9JFRMonitorWaited*) event);\n \t\t\t\tbreak;\n+\t\t\tcase J9JFR_EVENT_TYPE_MONITOR_ENTER:\n+\t\t\t\taddMonitorEnterEntry((J9JFRMonitorEntered *) event);\n+\t\t\t\tbreak;\n \t\t\tcase J9JFR_EVENT_TYPE_THREAD_PARK:\n \t\t\t\taddThreadParkEntry((J9JFRThreadParked*) event);\n \t\t\t\tbreak;\n@@ -1216,6 +1244,8 @@ class VM_JFRConstantPoolTypes {\n \t\t, _threadSleepCount(0)\n \t\t, _monitorWaitTable(NULL)\n \t\t, _monitorWaitCount(0)\n+\t\t, _monitorEnterTable(NULL)\n+\t\t, _monitorEnterCount(0)\n \t\t, _threadParkTable(NULL)\n \t\t, _threadParkCount(0)\n \t\t, _cpuLoadTable(NULL)\n@@ -1330,6 +1360,12 @@ class VM_JFRConstantPoolTypes {\n \t\t\tgoto done;\n \t\t}\n \n+\t\t_monitorEnterTable = pool_new(sizeof(MonitorEnterEntry), 0, sizeof(U_64), 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(privatePortLibrary));\n+\t\tif (NULL == _monitorEnterTable) {\n+\t\t\t_buildResult = OutOfMemory;\n+\t\t\tgoto done;\n+\t\t}\n+\n \t\t_threadParkTable = pool_new(sizeof(ThreadParkEntry), 0, sizeof(U_64), 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(privatePortLibrary));\n \t\tif (NULL == _threadParkTable) {\n \t\t\t_buildResult = OutOfMemory;\n@@ -1452,6 +1488,7 @@ class VM_JFRConstantPoolTypes {\n \t\tpool_kill(_threadEndTable);\n \t\tpool_kill(_threadSleepTable);\n \t\tpool_kill(_monitorWaitTable);\n+\t\tpool_kill(_monitorEnterTable);\n \t\tpool_kill(_threadParkTable);\n \t\tpool_kill(_cpuLoadTable);\n \t\tpool_kill(_threadCPULoadTable);\ndiff --git a/runtime/vm/ObjectMonitor.cpp b/runtime/vm/ObjectMonitor.cpp\nindex 2e903c12850..520f5140c8e 100644\n--- a/runtime/vm/ObjectMonitor.cpp\n+++ b/runtime/vm/ObjectMonitor.cpp\n@@ -140,6 +140,9 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \tUDATA result = 0;\n \tj9object_t object = J9VMTHREAD_BLOCKINGENTEROBJECT(currentThread, currentThread);\n \tJ9Class *ramClass = J9OBJECT_CLAZZ(currentThread, object);\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\tI_64 startTicks = j9time_nano_time();\n \t/* Throughout this function, note that inlineGetLockAddress cannot run into out of memory case because\n \t * an entry in monitor table will have been created by the earlier call in objectMonitorEnterNonBlocking.\n \t */\n@@ -159,7 +162,6 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t}\n #endif /* J9VM_THR_LOCK_RESERVATION */\n \t{\n-\t\tJ9JavaVM *vm = currentThread->javaVM;\n \t\tJ9ObjectMonitor *objectMonitor = monitorTableAt(currentThread, object);\n \t\t/* Table entry was created by the nonblocking case, so this peek cannot fail */\n \t\tAssert_VM_notNull(objectMonitor);\n@@ -289,8 +291,9 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\t((J9ThreadMonitor*)monitor)->flags &= ~(UDATA)J9THREAD_MONITOR_SUPPRESS_CONTENDED_EXIT;\n \t\tVM_AtomicSupport::subtract(&monitor->pinCount, 1);\n \t\tif (J9_EVENT_IS_HOOKED(vm->hookInterface, J9HOOK_VM_MONITOR_CONTENDED_ENTERED)) {\n+\t\t\tJ9VMThread *ownerThread = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\t\tbool frameBuilt = saveBlockingEnterObject(currentThread);\n-\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor);\n+\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, ownerThread);\n \t\t\trestoreBlockingEnterObject(currentThread, frameBuilt);\n \t\t}\n \t}\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex a295b15a4f5..2809a0d64b3 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -93,6 +93,9 @@ jfrEventSize(J9JFREvent *jfrEvent)\n \tcase J9JFR_EVENT_TYPE_OBJECT_WAIT:\n \t\tsize = sizeof(J9JFRMonitorWaited) + (((J9JFRMonitorWaited*)jfrEvent)->stackTraceSize * sizeof(UDATA));\n \t\tbreak;\n+\tcase J9JFR_EVENT_TYPE_MONITOR_ENTER:\n+\t\tsize = sizeof(J9JFRMonitorEntered) + (((J9JFRMonitorEntered *)jfrEvent)->stackTraceSize * sizeof(UDATA));\n+\t\tbreak;\n \tcase J9JFR_EVENT_TYPE_THREAD_PARK:\n \t\tsize = sizeof(J9JFRThreadParked) + (((J9JFRThreadParked*)jfrEvent)->stackTraceSize * sizeof(UDATA));\n \t\tbreak;\n@@ -650,6 +653,35 @@ jfrVMMonitorWaited(J9HookInterface **hook, UDATA eventNum, void *eventData, void\n \t}\n }\n \n+/**\n+ * Hook for VM monitor entered. Called without VM access.\n+ *\n+ * @param hook[in] the VM hook interface\n+ * @param eventNum[in] the event number\n+ * @param eventData[in] the event data\n+ * @param userData[in] the registered user data\n+ */\n+static void\n+jfrVMMonitorEntered(J9HookInterface **hook, UDATA eventNum, void *eventData, void *userData)\n+{\n+\tJ9VMMonitorContendedEnteredEvent *event = (J9VMMonitorContendedEnteredEvent *)eventData;\n+\tJ9VMThread *currentThread = event->currentThread;\n+\tPORT_ACCESS_FROM_VMC(currentThread);\n+\n+#if defined(DEBUG)\n+\tj9tty_printf(PORTLIB, \"\\n!!! VM monitor entered %p\\n\", currentThread);\n+#endif /* defined(DEBUG) */\n+\n+\tJ9JFRMonitorEntered *jfrEvent = (J9JFRMonitorEntered *)reserveBufferWithStackTrace(currentThread, currentThread, J9JFR_EVENT_TYPE_MONITOR_ENTER, sizeof(*jfrEvent));\n+\tif (NULL != jfrEvent) {\n+\t\tinitializeEventFields(currentThread, (J9JFREvent *)jfrEvent, J9JFR_EVENT_TYPE_MONITOR_ENTER);\n+\n+\t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n+\t\tjfrEvent->monitorClass = event->monitorClass;\n+\t\tjfrEvent->monitorAddress = (UDATA)event->monitor;\n+\t}\n+}\n+\n /**\n  * Hook for VM thread parked. Called without VM access.\n  *\n@@ -732,7 +764,9 @@ initializeJFR(J9JavaVM *vm, BOOLEAN lateInit)\n \tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_MONITOR_WAITED, jfrVMMonitorWaited, OMR_GET_CALLSITE(), NULL)) {\n \t\tgoto fail;\n \t}\n-\n+\tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_MONITOR_CONTENDED_ENTERED, jfrVMMonitorEntered, OMR_GET_CALLSITE(), NULL)) {\n+\t\tgoto fail;\n+\t}\n \tif ((*vmHooks)->J9HookRegisterWithCallSite(vmHooks, J9HOOK_VM_UNPARKED, jfrVMThreadParked, OMR_GET_CALLSITE(), NULL)) {\n \t\tgoto fail;\n \t}\n@@ -867,6 +901,7 @@ tearDownJFR(J9JavaVM *vm)\n \t/* Unregister it anyway even it wasn't registered for initializeJFR(vm, TRUE). */\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_INITIALIZED, jfrVMInitialized, NULL);\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_MONITOR_WAITED, jfrVMMonitorWaited, NULL);\n+\t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_MONITOR_CONTENDED_ENTERED, jfrVMMonitorEntered, NULL);\n \t(*vmHooks)->J9HookUnregister(vmHooks, J9HOOK_VM_UNPARKED, jfrVMThreadParked, NULL);\n \n \t/* Free global data */\n",
    "1581ac8f412f2f3b22adda42834d0888eb30dd07": "diff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex f06806e42ad..69880f4ce41 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -79,9 +79,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t<impl>openj9</impl>\n \t\t\t<impl>ibm</impl>\n \t\t</impls>\n-\t\t<!-- For the time being, JFR tests are only limited to JDK11+. -->\n+\t\t<!-- For the time being, these tests are limited to JDK17+. -->\n \t\t<versions>\n-\t\t\t<version>11+</version>\n+\t\t\t<version>17+</version>\n \t\t</versions>\n \t\t<features>\n \t\t\t<feature>JFR:required</feature>\n",
    "3ec9566312c48fb9f31574c2c22325afc453fa96": "diff --git a/runtime/compiler/control/CompilationThread.cpp b/runtime/compiler/control/CompilationThread.cpp\nindex f37743828a5..8d4fe887155 100644\n--- a/runtime/compiler/control/CompilationThread.cpp\n+++ b/runtime/compiler/control/CompilationThread.cpp\n@@ -6103,7 +6103,8 @@ void *TR::CompilationInfo::compileOnSeparateThread(J9VMThread * vmThread, TR::Il\n #if defined(J9VM_OPT_CRIU_SUPPORT)\n         || getCRRuntime()->shouldSuspendThreadsForCheckpoint()\n #endif\n-        || getPersistentInfo()->getDisableFurtherCompilation())\n+        || getPersistentInfo()->getDisableFurtherCompilation()\n+        || (_jitConfig->runtimeFlags & (J9JIT_CODE_CACHE_FULL | J9JIT_DATA_CACHE_FULL)))\n        && !details.isJitDumpMethod())\n       {\n       bool shouldReturn = true;\n@@ -8532,12 +8533,9 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          }\n       else if (jitConfig->runtimeFlags & (J9JIT_CODE_CACHE_FULL | J9JIT_DATA_CACHE_FULL))\n          {\n-         // Optimization to disable future first time compilations from reaching the queue\n-         that->getCompilationInfo()->getPersistentInfo()->setDisableFurtherCompilation(true);\n-\n          if (TR::Options::isAnyVerboseOptionSet(TR_VerboseCompileEnd, TR_VerboseCompFailure, TR_VerbosePerformance))\n             {\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_PERF,\"t=%6u <WARNING: JIT CACHES FULL> Disable further compilation\",\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_PERF,\"t=%6u <WARNING: JIT CACHES FULL>\",\n                (uint32_t)that->getCompilationInfo()->getPersistentInfo()->getElapsedTime());\n             }\n          if (jitConfig->runtimeFlags & J9JIT_CODE_CACHE_FULL)\n",
    "06e7899bc27b5141ea1ebb2781d3ac2cfaa12536": "diff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex 69880f4ce41..88f1fa1e51e 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -50,9 +50,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<versions>\n \t\t\t<version>11+</version>\n \t\t</versions>\n-\t\t<features>\n-\t\t\t<feature>JFR:required</feature>\n-\t\t</features>\n \t</test>\n \t<test>\n \t\t<testCaseName>cmdLineTester_jfrEvents</testCaseName>\n@@ -83,8 +80,5 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<versions>\n \t\t\t<version>17+</version>\n \t\t</versions>\n-\t\t<features>\n-\t\t\t<feature>JFR:required</feature>\n-\t\t</features>\n \t</test>\n </playlist>\n",
    "0fba63c1941caf926699ebe716a380687965fbf4": "diff --git a/test/functional/Valhalla/playlist.xml b/test/functional/Valhalla/playlist.xml\nindex 9d630f5d832..abb644403b4 100644\n--- a/test/functional/Valhalla/playlist.xml\n+++ b/test/functional/Valhalla/playlist.xml\n@@ -36,7 +36,7 @@\n \t\t\t<variation>-Xnocompressedrefs -Xgcpolicy:gencon</variation>\n \t\t</variations>\n \t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n-\t\t-Xint -Xdump:system+java+snap:events=systhrow,filter=java/lang/LinkageError,msg_filter=*Triangle2D* --enable-preview \\\n+\t\t-Xint --enable-preview \\\n \t\t--add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n \t\t--add-exports java.base/jdk.internal.value=ALL-UNNAMED \\\n \t\t--patch-module java.base=$(TEST_JDK_HOME)$(D)lib$(D)valueclasses$(D)java.base-valueclasses.jar \\\n@@ -74,7 +74,7 @@\n \t\t\t<variation>-Xjit:count=1,disableAsyncCompilation -Xnocompressedrefs -Xgcpolicy:gencon</variation>\n \t\t</variations>\n \t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n-\t\t-Xdump:system+java+snap:events=systhrow,filter=java/lang/LinkageError,msg_filter=*Triangle2D* --enable-preview \\\n+\t\t--enable-preview \\\n \t\t--add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n \t\t--add-exports java.base/jdk.internal.value=ALL-UNNAMED \\\n \t\t--patch-module java.base=$(TEST_JDK_HOME)$(D)lib$(D)valueclasses$(D)java.base-valueclasses.jar \\\n",
    "cd6a33d6dfb6325c5151caf29afe78a83c0a8d09": "diff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex 69880f4ce41..88f1fa1e51e 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -50,9 +50,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<versions>\n \t\t\t<version>11+</version>\n \t\t</versions>\n-\t\t<features>\n-\t\t\t<feature>JFR:required</feature>\n-\t\t</features>\n \t</test>\n \t<test>\n \t\t<testCaseName>cmdLineTester_jfrEvents</testCaseName>\n@@ -83,8 +80,5 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<versions>\n \t\t\t<version>17+</version>\n \t\t</versions>\n-\t\t<features>\n-\t\t\t<feature>JFR:required</feature>\n-\t\t</features>\n \t</test>\n </playlist>\n",
    "172a32eb3ff5033a69906f957b7baebbca72d543": "diff --git a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\nindex da01f9cc899..bd5facc7d8a 100644\n--- a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n+++ b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n@@ -38,6 +38,10 @@ public class Continuation {\n \tprivate long vmRef; /* J9VMContinuation */\n \tprotected Thread vthread; /* Parent VirtualThread */\n \n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\tprivate Object blocker;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n+\n \t/* The live thread's scopedValueCache is always kept in J9VMThread->scopedValueCache\n \t * whereas the unmounted thread's scopedValueCache is stored in this field. This\n \t * field is modified in ContinuationHelpers.hpp::swapFieldsWithContinuation. This\n@@ -71,7 +75,13 @@ public enum Pinned {\n \t\t/** Holding monitor(s) */\n \t\tMONITOR(2),\n \t\t/** In critical section */\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tCRITICAL_SECTION(3),\n+\t\t/** Exception */\n+\t\tEXCEPTION(4);\n+/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\tCRITICAL_SECTION(3);\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \n \t\tprivate final int errorCode;\n \n@@ -250,6 +260,10 @@ private boolean yield0() {\n \t\t\t\treason = Pinned.MONITOR;\n \t\t\t} else if (rcPinned == Pinned.NATIVE.errorCode()) {\n \t\t\t\treason = Pinned.NATIVE;\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t} else if (rcPinned == Pinned.EXCEPTION.errorCode()) {\n+\t\t\t\treason = Pinned.EXCEPTION;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t} else {\n \t\t\t\tthrow new AssertionError(\"Unknown pinned error code: \" + rcPinned);\n \t\t\t}\ndiff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex 4d7a08ff5fa..e33d1408eab 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -35,6 +35,9 @@\n #include \"VMHelpers.hpp\"\n #include \"ContinuationHelpers.hpp\"\n #endif /* JAVA_SPEC_VERSION >= 19 */\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"j9protos.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n extern \"C\" {\n \n@@ -720,17 +723,19 @@ JVM_IsStaticallyLinked(void)\n }\n \n JNIEXPORT void JNICALL\n-JVM_VirtualThreadPinnedEvent(JNIEnv* env, jclass clazz, jstring op)\n+JVM_VirtualThreadPinnedEvent(JNIEnv *env, jclass clazz, jstring op)\n {\n \t// TODO: emit JFR Event\n \treturn;\n }\n \n JNIEXPORT jobject JNICALL\n-JVM_TakeVirtualThreadListToUnblock(JNIEnv* env, jclass ignored)\n+JVM_TakeVirtualThreadListToUnblock(JNIEnv *env, jclass ignored)\n {\n-\t// TODO: return the unblocked list\n-\treturn NULL;\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\n+\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread, vm);\n }\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \ndiff --git a/runtime/oti/ContinuationHelpers.hpp b/runtime/oti/ContinuationHelpers.hpp\nindex 336816a8b47..7c274a98b89 100644\n--- a/runtime/oti/ContinuationHelpers.hpp\n+++ b/runtime/oti/ContinuationHelpers.hpp\n@@ -30,6 +30,9 @@\n #define J9VM_CONTINUATION_PINNED_REASON_NATIVE 1\n #define J9VM_CONTINUATION_PINNED_REASON_MONITOR 2\n #define J9VM_CONTINUATION_PINNED_REASON_CRITICAL_SECTION 3\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9VM_CONTINUATION_PINNED_REASON_EXCEPTION 4\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n class VM_ContinuationHelpers {\n \t/*\n@@ -88,6 +91,15 @@ class VM_ContinuationHelpers {\n \t\tj9object_t scopedValueCache = J9VMJDKINTERNALVMCONTINUATION_SCOPEDVALUECACHE(vmThread, continuationObject);\n \t\tJ9VMJDKINTERNALVMCONTINUATION_SET_SCOPEDVALUECACHE(vmThread, continuationObject, vmThread->scopedValueCache);\n \t\tvmThread->scopedValueCache = scopedValueCache;\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tSWAP_MEMBER(ownedMonitorCount, UDATA, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(monitorEnterRecordPool, J9Pool*, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(monitorEnterRecords, J9MonitorEnterRecord*, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(jniMonitorEnterRecords, J9MonitorEnterRecord*, vmThread, continuation);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n \n \tstatic VMINLINE ContinuationState volatile *\n@@ -261,6 +273,24 @@ class VM_ContinuationHelpers {\n \n \t\treturn threadObject;\n \t}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t/**\n+\t * Check if the threadObject mounted on a J9VMThread is a virtual thread and can be yielded.\n+\t *\n+\t * @param[in] vmThread the J9VMThread\n+\t *\n+\t * @return true if the virtual thread is yieldable, otherwise false\n+\t */\n+\tstatic VMINLINE bool\n+\tisYieldableVirtualThread(J9VMThread *vmThread)\n+\t{\n+\t\treturn (J9_ARE_ANY_BITS_SET(vmThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t\t\t&& IS_JAVA_LANG_VIRTUALTHREAD(vmThread, vmThread->threadObject)\n+\t\t\t\t&& (0 == vmThread->continuationPinCount)\n+\t\t\t\t&& (0 == vmThread->callOutCount));\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n };\n \n #endif /* CONTINUATIONHELPERS_HPP_ */\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 579f20925da..013fc6b8f46 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -371,6 +371,7 @@ extern \"C\" {\n \n /* constants for J9JavaVM.extendedRuntimeFlags3 */\n #define J9_EXTENDED_RUNTIME3_START_FLIGHT_RECORDING 0x1\n+#define J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION 0x2\n \n #define J9_OBJECT_HEADER_AGE_DEFAULT 0xA /* OBJECT_HEADER_AGE_DEFAULT */\n #define J9_OBJECT_HEADER_SHAPE_MASK 0xE /* OBJECT_HEADER_SHAPE_MASK */\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 26563117ef6..06d9d9f3815 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -298,6 +298,15 @@\n typedef void(*j9_tls_finalizer_t)(void *);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/* Constants from java.lang.VirutalThread.state that are used by the VM.\n+ * The full mapping is under jvmtiInternals.h <JVMTI_VTHREAD_STATE_*>.\n+ */\n+#define JAVA_LANG_VIRTUALTHREAD_BLOCKING 12\n+#define JAVA_LANG_VIRTUALTHREAD_WAITING  13\n+#define JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING 17\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n typedef enum {\n \tJ9FlushCompQueueDataBreakpoint\n } J9JITFlushCompilationQueueReason;\n@@ -1706,6 +1715,11 @@ typedef struct J9ObjectMonitor {\n #endif /* defined(J9VM_THR_SMART_DEFLATION) */\n \tj9objectmonitor_t alternateLockword;\n \tU_32 hash;\n+#if JAVA_SPEC_VERSION >= 24\n+\tU_32 virtualThreadWaitCount;\n+\tstruct J9VMContinuation* ownerContinuation;\n+\tstruct J9VMContinuation* waitingContinuations;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9ObjectMonitor;\n \n typedef struct J9ClassWalkState {\n@@ -5318,6 +5332,10 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9Class * (*initializeSnapshotClassObject)(struct J9JavaVM *javaVM, struct J9ClassLoader *classLoader, struct J9Class *clazz);\n \tBOOLEAN (*loadWarmClassFromSnapshot)(struct J9VMThread *vmThread, struct J9ClassLoader *classLoader, struct J9Class *clazz);\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n+\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread, struct J9JavaVM *vm);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\n@@ -5396,6 +5414,13 @@ typedef struct J9JITGPRSpillArea {\n typedef uintptr_t ContinuationState;\n \n #if JAVA_SPEC_VERSION >= 19\n+#define J9VM_CONTINUATION_RETURN_FROM_YIELD 1\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER 0\n+#define J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT   2\n+#define J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD   3\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n typedef struct J9VMContinuation {\n \tUDATA* arg0EA;\n \tUDATA* bytecodes;\n@@ -5411,6 +5436,16 @@ typedef struct J9VMContinuation {\n \tstruct J9I2JState i2jState;\n \tstruct J9VMEntryLocalStorage* oldEntryLocalStorage;\n \tUDATA dropFlags;\n+\tUDATA returnState;\n+#if JAVA_SPEC_VERSION >= 24\n+\tIDATA waitingMonitorEnterCount;\n+\tUDATA ownedMonitorCount;\n+\tstruct J9Pool* monitorEnterRecordPool;\n+\tstruct J9MonitorEnterRecord* monitorEnterRecords;\n+\tstruct J9MonitorEnterRecord* jniMonitorEnterRecords;\n+\tj9object_t vthread;\n+\tstruct J9VMContinuation* nextWaitingContinuation;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n@@ -6330,6 +6365,10 @@ typedef struct J9JavaVM {\n #if defined(J9VM_OPT_JFR)\n \tUDATA loadedClassCount;\n #endif /* defined(J9VM_OPT_JFR) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tJ9VMContinuation *blockedContinuations;\n+\tomrthread_monitor_t blockedVirtualThreadsMutex;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9JavaVM;\n \n #define J9JFR_SAMPLER_STATE_UNINITIALIZED 0\n@@ -6369,7 +6408,10 @@ typedef struct J9JavaVM {\n #if defined(J9VM_OPT_CRIU_SUPPORT)\n #define J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW 2\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-#define J9_OBJECT_MONITOR_BLOCKING 3\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9_OBJECT_MONITOR_YIELD_VIRTUAL 3\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+#define J9_OBJECT_MONITOR_BLOCKING 4\n \n #if (JAVA_SPEC_VERSION >= 16) || defined(J9VM_OPT_CRIU_SUPPORT)\n #define J9_OBJECT_MONITOR_ENTER_FAILED(rc) ((UDATA)(rc) < J9_OBJECT_MONITOR_BLOCKING)\ndiff --git a/runtime/oti/jvminit.h b/runtime/oti/jvminit.h\nindex 6538530e8a3..4b617ad021e 100644\n--- a/runtime/oti/jvminit.h\n+++ b/runtime/oti/jvminit.h\n@@ -471,6 +471,12 @@ enum INIT_STAGE {\n #define VMOPT_XXNOSHOWUNMOUNTEDTHREADSTACKS \"-XX:-ShowUnmountedThreadStacks\"\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/* Option to toggle on/off the feature to yield pinned virtual threads. */\n+#define VMOPT_XXYIELDPINNEDVIRTUALTHREADS \"-XX:+YieldPinnedVirtualThreads\"\n+#define VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS \"-XX:-YieldPinnedVirtualThreads\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /* Option to turn on exception on synchronization on instances of value-based classes */\n #define VMOPT_XXDIAGNOSE_SYNC_ON_VALUEBASED_CLASSES_EQUALS1 \"-XX:DiagnoseSyncOnValueBasedClasses=1\"\n /* Option to turn on warning on synchronization on instances of value-based classes */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 4cdbadc6b53..9ac10a42602 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -2451,6 +2451,26 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object);\n void\n cacheObjectMonitorForLookup(J9JavaVM* vm, J9VMThread* vmStruct, J9ObjectMonitor* objectMonitor);\n \n+/* ---------------- thrinfo.c ---------------- */\n+\n+/**\n+ * @brief Search the monitor tables in vm->monitorTable for the inflated monitor corresponding to an\n+ * object. Similar to monitorTableAt(), but doesn't add the monitor if it isn't found in the hashtable.\n+ *\n+ * This function may block on vm->monitorTableMutex.\n+ * This function can work out-of-process.\n+ *\n+ * @param[in] vm the JavaVM. For out-of-process: may be a local or target pointer.\n+ * vm->monitorTable must be a target value.\n+ * @param[in] object the object. For out-of-process: a target pointer.\n+ *\n+ * @return a J9ObjectMonitor from the monitor hashtable or a NULL if there is no corresponding monitor\n+ * in vm->monitorTable.\n+ *\n+ * @see monitorTablePeekMonitor in util_internal.h\n+ */\n+J9ObjectMonitor *\n+monitorTablePeek(J9JavaVM *vm, j9object_t object);\n \n /* ---------------- PackageIDHashTable.c ---------------- */\n \n@@ -4579,12 +4599,13 @@ enterContinuation(struct J9VMThread *currentThread, j9object_t continuationObjec\n /**\n  * @brief Suspends the Continuation runnable.\n  *\n- * @param currentThread\n+ * @param currentThread the thread whose Continuation is being yielded\n  * @param isFinished true if it is last unmount\n+ * @param returnState thread execution state when it is re-mounted\n  * @return BOOLEAN\n  */\n BOOLEAN\n-yieldContinuation(struct J9VMThread *currentThread, BOOLEAN isFinished);\n+yieldContinuation(struct J9VMThread *currentThread, BOOLEAN isFinished, UDATA returnState);\n \n /**\n  * @brief Free the native memory allocated by Continuation.\n@@ -4669,6 +4690,41 @@ void\n releaseVThreadInspector(J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @brief Attach all yielded VirtualThread monitors to carrier thread.\n+ *\n+ * @param currentThread the current thread\n+ * @param continuationObject the Continuation object\n+ */\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject);\n+\n+/**\n+ * @brief Inflate all monitors and prepare the VirtualThread to yield.\n+ *\n+ * @param currentThread the current thread\n+ * @param syncObj object to block/wait on\n+ * @param isObjectWait if the call is from Object.wait()\n+ *\n+ * @return J9_OBJECT_MONITOR_YIELD_VIRTUAL if the can be successfully yielded;\n+ * otherwise, an error code is returned\n+ */\n+UDATA\n+preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait);\n+\n+/**\n+ * @brief Find a list of virtual thread to be unblocked. This is a helper method for\n+ * JVM_TakeVirtualThreadListToUnblock (see javanextvmi.cpp).\n+ *\n+ * @param currentThread the current thread\n+ * @param vm pointer to J9JavaVM\n+ *\n+ * @return a list of virtual threads to be unblocked\n+ */\n+jobject\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \n /**\ndiff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex a269e864cb6..521ebf3dffa 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -265,6 +265,11 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"carrierThread\" signature=\"Ljava/lang/Thread;\" versions=\"19-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"cont\" signature=\"Ljdk/internal/vm/Continuation;\" versions=\"19-\"/>\n \n+\t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"blockPermit\" signature=\"Z\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n+\n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"detailMessage\" signature=\"Ljava/lang/String;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"walkback\" signature=\"Ljava/lang/Object;\"/>\n@@ -426,6 +431,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"vthread\" signature=\"Ljava/lang/Thread;\" versions=\"19-\"/>\n \t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"scopedValueCache\" signature=\"[Ljava/lang/Object;\" versions=\"19-\"/>\n \n+\t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n+\t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"blocker\" signature=\"Ljava/lang/Object;\" versions=\"24-\"/>\n+\n \t<!-- Field references needed to support Foreign Linker API. -->\n \t<fieldref class=\"java/lang/invoke/NativeMethodHandle\" name=\"invokeCache\" signature=\"[Ljava/lang/Object;\" flags=\"opt_openjdkFfi\" versions=\"22-\"/>\n \t<fieldref class=\"java/lang/invoke/NativeMethodHandle\" name=\"nep\" signature=\"Ljava/lang/invoke/MethodHandle;\" flags=\"opt_openjdkFfi\" versions=\"22-\"/>\ndiff --git a/runtime/util/util_internal.h b/runtime/util/util_internal.h\nindex 5966a85609c..5029bb41e37 100644\n--- a/runtime/util/util_internal.h\n+++ b/runtime/util/util_internal.h\n@@ -198,24 +198,6 @@ char *node_key(node *aNode);\n J9ThreadAbstractMonitor *\n monitorTablePeekMonitor(J9JavaVM *vm, j9object_t object);\n \n-/**\n- * Search the monitor tables in vm->monitorTableList for the inflated monitor corresponding to an object.\n- * Similar to monitorTableAt(), but doesn't add the monitor if it isn't found in the hashtable.\n- *\n- * This function may block on vm->monitorTableMutex.\n- * This function can work out-of-process.\n- *\n- * @param[in] vm the JavaVM. For out-of-process: may be a local or target pointer.\n- * vm->monitorTable must be a target value.\n- * @param[in] object the object. For out-of-process: a target pointer.\n- * @returns a J9ObjectMonitor from the monitor hashtable\n- * @retval NULL There is no corresponding monitor in vm->monitorTable.\n- *\n- * @see monitorTablePeekMonitor\n- */\n-J9ObjectMonitor *\n-monitorTablePeek(J9JavaVM *vm, j9object_t object);\n-\n #ifdef __cplusplus\n }\n #endif\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 43d51041b44..a44a9878727 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -78,6 +78,12 @@\n #if JAVA_SPEC_VERSION >= 16\n #include \"LayoutFFITypeHelpers.hpp\"\n #endif /* JAVA_SPEC_VERSION >= 16 */\n+#if JAVA_SPEC_VERSION >= 21\n+#include \"ContinuationHelpers.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"thrtypes.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n #if 0\n #define DEBUG_MUST_HAVE_VM_ACCESS(vmThread) Assert_VM_mustHaveVMAccess(vmThread)\n@@ -1182,9 +1188,17 @@ class INTERPRETER_CLASS\n \t\tif (!VM_ObjectMonitor::inlineFastObjectMonitorEnter(_currentThread, obj)) {\n \t\t\trc = objectMonitorEnterNonBlocking(_currentThread, obj);\n \t\t\tif (J9_OBJECT_MONITOR_BLOCKING == rc) {\n-\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n-\t\t\t\trc = objectMonitorEnterBlocking(_currentThread);\n-\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n+\t\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\t\trc = preparePinnedVirtualThreadForUnmount(_currentThread, obj, false);\n+\t\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t{\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\t\t\t\trc = objectMonitorEnterBlocking(_currentThread);\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn rc;\n@@ -1493,6 +1507,37 @@ class INTERPRETER_CLASS\n \t}\n #endif /* DEBUG_VERSION */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tVMINLINE VM_BytecodeAction\n+\tyieldPinnedContinuation(REGISTER_ARGS_LIST, U_32 newThreadState, UDATA returnState)\n+\t{\n+\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(_currentThread, _currentThread->threadObject, newThreadState);\n+\n+\t\tif (JAVA_LANG_VIRTUALTHREAD_BLOCKING == newThreadState) {\n+\t\t\t/* Add the thread object to the blocked list. */\n+\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t_currentThread->currentContinuation->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t_vm->blockedContinuations = _currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t}\n+\n+\t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n+\t\tyieldContinuation(_currentThread, FALSE, returnState);\n+\n+\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\n+\t\t/* The return behavior will mimic that of continuation.enterImpl(), requiring the\n+\t\t * boolean return value to be pushed.\n+\t\t */\n+\t\treturnSingleFromINL(REGISTER_ARGS, JNI_FALSE, 1);\n+\n+\t\treturn EXECUTE_BYTECODE;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tVMINLINE VM_BytecodeAction\n \tcheckAsync(REGISTER_ARGS_LIST)\n \t{\n@@ -1705,6 +1750,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\t\tbreak;\n@@ -1782,6 +1833,12 @@ class INTERPRETER_CLASS\n \t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\tbreak;\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t/* Monitor was not entered - hide the frame to prevent exception throw from processing it.\n \t\t\t\t * Note that BP can not have changed during a failed enter.\n@@ -1911,6 +1968,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\t\tbreak;\n@@ -2281,6 +2344,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\tbreak;\n@@ -2856,6 +2925,51 @@ class INTERPRETER_CLASS\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n \t\t{\n \t\t\tif (VM_ObjectMonitor::getMonitorForNotify(_currentThread, receiver, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET(_vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\t\tif (!LN_HAS_LOCKWORD(_currentThread, receiver)) {\n+\t\t\t\t\t\tobjectMonitor = monitorTablePeek(_vm, receiver);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(_currentThread, receiver);\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(_currentThread, lockEA);\n+\t\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\n+\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n+\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tif (0 != notifyFunction(monitorPtr)) {\n \t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t\trc = THROW_ILLEGAL_MONITOR_STATE;\n@@ -5043,6 +5157,23 @@ class INTERPRETER_CLASS\n \t\tj9object_t object = *(j9object_t*)(_sp + 3);\n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n+\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n+\t\t\tif ((millis > 0) || (nanos > 0)) {\n+\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n+\t\t\t}\n+\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t} else {\n+\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t}\n+\t\t\treturn rc;\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tIDATA waitResult = monitorWaitImpl(_currentThread, object, millis, nanos, TRUE);\n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\tif (0 == waitResult) {\n@@ -5564,6 +5695,61 @@ class INTERPRETER_CLASS\n \t\t} else if (VM_VMHelpers::exceptionPending(_currentThread)) {\n \t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n \t\t}\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tswitch (_currentThread->currentContinuation->returnState) {\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_YIELD:\n+\t\t\treturnSingleFromINL(REGISTER_ARGS, JNI_TRUE, 1);\n+\t\t\tbreak;\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER:\n+\t\t\tbreak;\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n+\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n+\t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n+\n+\t\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n+\t\t\t * release VM access. So, the immediate async and failed enter cases are\n+\t\t\t * mutually exclusive.\n+\t\t\t */\n+\t\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n+\t\t\t\tswitch (monitorRC) {\n+\t\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n+\t\t\t\t\t_currentThread->tempSlot = (UDATA)waitObject;\n+\t\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n+\t\t\t\t\tbreak;\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n+\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n+\t\t\t\t\tbreak;\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n+\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tAssert_VM_unreachable();\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n+\t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n+\t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n+\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD:\n+\t\t\tUDATA *bp = ((UDATA *)(((J9SFMethodFrame *)_sp) + 1)) - 1;\n+\t\t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, bp);\n+\t\t\trc = inlineSendTarget(REGISTER_ARGS, VM_MAYBE, VM_MAYBE, VM_MAYBE, VM_MAYBE);\n+\t\t\tbreak;\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\treturn rc;\n \t}\n \n@@ -5577,14 +5763,14 @@ class INTERPRETER_CLASS\n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n \n-\t\t/* store the current Continuation state and swap to carrier thread stack */\n-\t\tyieldContinuation(_currentThread, isFinished);\n+\t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n+\t\tyieldContinuation(_currentThread, isFinished, J9VM_CONTINUATION_RETURN_FROM_YIELD);\n \n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \n-\t\t/* its going to return as if it were returning from continuation.enterImpl()\n-\t\t * so we need to push the boolean return val\n+\t\t/* The return behavior will mimic that of continuation.enterImpl(), requiring the\n+\t\t * boolean return value to be pushed.\n \t\t */\n \t\treturnSingleFromINL(REGISTER_ARGS, JNI_FALSE, 1);\n \t\treturn rc;\n@@ -8691,6 +8877,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\tbreak;\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 7587600043b..4ec703f16ca 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -24,6 +24,9 @@\n #include \"j9protos.h\"\n #include \"j9vmnls.h\"\n #include \"objhelp.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"thrtypes.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"ut_j9vm.h\"\n #include \"vm_api.h\"\n #include \"AtomicSupport.hpp\"\n@@ -127,6 +130,13 @@ createContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t/* Reset all fields in the new or recycled continuation. */\n \tmemset(continuation, 0, sizeof(J9VMContinuation));\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcontinuation->nextWaitingContinuation = NULL;\n+\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tcontinuation->monitorEnterRecordPool = pool_new(sizeof(J9MonitorEnterRecord), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(PORTLIB));\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tcontinuation->stackObject = stack;\n \tcontinuation->stackOverflowMark2 = J9JAVASTACK_STACKOVERFLOWMARK(stack);\n \tcontinuation->stackOverflowMark = continuation->stackOverflowMark2;\n@@ -225,6 +235,9 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\tcurrentThread->javaVM->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n \n \t\tcontinuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcontinuation->vthread = currentThread->threadObject;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n \tAssert_VM_notNull(continuation);\n \n@@ -244,14 +257,22 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \tcurrentThread->currentContinuation = continuation;\n \t/* Reset counters which determine if the current continuation is pinned. */\n \tcurrentThread->continuationPinCount = 0;\n-\tcurrentThread->ownedMonitorCount = 0;\n \tcurrentThread->callOutCount = 0;\n \n \tif (started) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject);\n+\n+\t\t}\n+\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\tresult = FALSE;\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* resuming Continuation from yieldImpl */\n \t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n \t\tVM_OutOfLineINL_Helpers::returnSingle(currentThread, JNI_TRUE, 1);\n \t\tresult = FALSE;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t} else {\n \t\t/* start new Continuation execution */\n \t\tVM_ContinuationHelpers::setStarted(continuationStatePtr);\n@@ -277,7 +298,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n }\n \n BOOLEAN\n-yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished)\n+yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished, UDATA returnState)\n {\n \tBOOLEAN result = TRUE;\n \tJ9VMContinuation *continuation = currentThread->currentContinuation;\n@@ -323,6 +344,8 @@ yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished)\n \t} else {\n \t\t/* Notify GC of Continuation stack swap */\n \t\tcurrentThread->javaVM->memoryManagerFunctions->postUnmountContinuation(currentThread, continuationObject);\n+\t\t/* Only set returnState if continuation is not finished. */\n+\t\tcontinuation->returnState = returnState;\n \t}\n \n \treturn result;\n@@ -338,6 +361,11 @@ freeContinuation(J9VMThread *currentThread, j9object_t continuationObject, BOOLE\n \t\t\t\t\t!VM_ContinuationHelpers::isConcurrentlyScanned(continuationState)\n \t\t\t\t\t&& (NULL == VM_ContinuationHelpers::getCarrierThread(continuationState)));\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\t/* Remove reverse link to vthread object. */\n+\t\tcontinuation->vthread = NULL;\n+\t\tAssert_VM_true(NULL == continuation->nextWaitingContinuation);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* Free old stack used by continuation. */\n \t\tJ9JavaStack *currentStack = continuation->stackObject->previous;\n \t\twhile (NULL != currentStack) {\n@@ -403,6 +431,11 @@ recycleContinuation(J9JavaVM *vm, J9VMThread *vmThread, J9VMContinuation* contin\n \t\t\tvm->cacheFree += 1;\n \t\t\t/* Caching failed, free the J9VMContinuation struct. */\n \t\t\tfreeJavaStack(vm, continuation->stackObject);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tpool_kill(continuation->monitorEnterRecordPool);\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tj9mem_free_memory(continuation);\n \t\t}\n \t}\n@@ -452,6 +485,14 @@ copyFieldsFromContinuation(J9VMThread *currentThread, J9VMThread *vmThread, J9VM\n \t * benefit to a single walk and the cache memory must be managed.\n \t */\n \tvmThread->jitArtifactSearchCache = (void*)((UDATA)vmThread->jitArtifactSearchCache | J9_STACKWALK_NO_JIT_CACHE);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\tvmThread->ownedMonitorCount = continuation->ownedMonitorCount;\n+\t\tvmThread->monitorEnterRecords = continuation->monitorEnterRecords;\n+\t\tvmThread->jniMonitorEnterRecords = continuation->jniMonitorEnterRecords;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n }\n \n UDATA\n@@ -619,4 +660,270 @@ releaseVThreadInspector(J9VMThread *currentThread, jobject thread)\n \t\t}\n \t}\n }\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+{\n+\tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n+\tmonitor->owner = (J9Thread*)1;\n+\tobjectMonitor->ownerContinuation = currentThread->currentContinuation;\n+}\n+\n+void\n+updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+{\n+\tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n+\tmonitor->owner = currentThread->osThread;\n+\tobjectMonitor->ownerContinuation = NULL;\n+}\n+\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject)\n+{\n+\tUDATA monitorCount = 0;\n+\tif (0 < currentThread->ownedMonitorCount) {\n+\t\t/* Inflate all owned monitors. */\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t}\n+\n+\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\n+\t\t/* Repeat for JNI monitor records. */\n+\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t}\n+\n+\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\t}\n+\n+\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n+\n+\t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n+\tcurrentThread->osThread->lockedmonitorcount += monitorCount;\n+}\n+\n+UDATA\n+preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait)\n+{\n+\tUDATA result = J9_OBJECT_MONITOR_YIELD_VIRTUAL;\n+\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\tj9objectmonitor_t lock = 0;\n+\tj9object_t continuationObj = NULL;\n+\tUDATA monitorCount = 0;\n+\n+\tif (0 < currentThread->ownedMonitorCount) {\n+\t\t/* Inflate all owned monitors. */\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = 0;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t}\n+\n+\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\n+\t\t/* Repeat for JNI monitor records. */\n+\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = 0;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t}\n+\n+\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\t}\n+\n+\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n+\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\tif (NULL != syncObjectMonitor) {\n+\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\t\t} else {\n+\t\t\tlock = 0;\n+\t\t}\n+\t} else {\n+\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n+\t}\n+\n+\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n+\t\tif (NULL == syncObjectMonitor) {\n+\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\n+\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n+\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n+\n+\tif (isObjectWait) {\n+\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n+\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\n+\t\t/* Record wait monitor state. */\n+\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n+\n+\t\t/* Reset monitor entry count to 1.*/\n+\t\tmonitor->count = 1;\n+\n+\t\t/* Add Continuation struct to the monitor's waiting list. */\n+\t\tomrthread_monitor_exit(monitor);\n+\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n+\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n+\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t} else {\n+\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t}\n+\n+\t/* Subtract the detached monitor from the carrier thread's lockedmonitorcount. */\n+\tcurrentThread->osThread->lockedmonitorcount -= monitorCount;\n+\n+\t/* Clear the blocking object on the carrier thread. */\n+\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n+\n+done:\n+\treturn result;\n+}\n+\n+jobject\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n+{\n+\tj9object_t unblockedList = NULL;\n+\tjobject result = NULL;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t|| (NULL == vm->blockedContinuations)\n+\t) {\n+\t\treturn NULL;\n+\t}\n+\n+\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\twhile (NULL == unblockedList) {\n+\t\tif (NULL != vm->blockedContinuations) {\n+restart:\n+\t\t\tJ9VMContinuation *listHead = vm->blockedContinuations;\n+\t\t\tJ9VMContinuation *next = NULL;\n+\t\t\tvm->blockedContinuations = NULL;\n+\t\t\twhile (NULL != listHead) {\n+\t\t\t\tbool unblocked = false;\n+\t\t\t\tnext = listHead->nextWaitingContinuation;\n+\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n+\t\t\t\t\tunblocked = true;\n+\t\t\t\t} else {\n+\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, listHead->vthread);\n+\t\t\t\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObj);\n+\t\t\t\t\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\t\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, syncObject)) {\n+\t\t\t\t\t\tsyncObjectMonitor = vmFuncs->monitorTablePeek(vm, syncObject);\n+\t\t\t\t\t\tif (NULL != syncObjectMonitor){\n+\t\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD_VM(vm, &syncObjectMonitor->alternateLockword);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n+\t\t\t\t\t}\n+\t\t\t\t\tJ9ThreadAbstractMonitor *monitor = getInflatedObjectMonitor(vm, syncObject, lock);\n+\t\t\t\t\tif (0 == monitor->count) {\n+\t\t\t\t\t\tunblocked = true;\n+\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n+\t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, listHead->vthread, JNI_TRUE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (unblocked) {\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, listHead->vthread, unblockedList);\n+\t\t\t\t\tunblockedList = listHead->vthread;\n+\t\t\t\t} else {\n+\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t}\n+\t\t\t\tlistHead = next;\n+\t\t\t}\n+\t\t\tif (NULL == unblockedList) {\n+\t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n+\t\t\t\tomrthread_monitor_wait(vm->blockedVirtualThreadsMutex);\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\tgoto restart;\n+\t\t\t} else {\n+\t\t\t\tresult = vmFuncs->j9jni_createLocalRef((JNIEnv *)currentThread, unblockedList);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\n+\treturn result;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } /* extern \"C\" */\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 72e3b6fb045..5cfdd0003fe 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -480,4 +480,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tinitializeSnapshotClassObject,\n \tloadWarmClassFromSnapshot,\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tmonitorTablePeek,\n+\ttakeVirtualThreadListToUnblock,\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n };\ndiff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 6c4fbf83e48..faed688d00a 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -2822,6 +2822,16 @@ VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved)\n \t\t\t\tgoto _memParseError;\n \t\t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t{\n+\t\t\t\targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\t\t\tif (argIndex > argIndex2) {\n+\t\t\t\t\t/* Enable yielding of pinned continuation. */\n+\t\t\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif ((argIndex = FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, VMOPT_XXDUMPLOADEDCLASSLIST, NULL)) >= 0) {\n \t\t\t\tJ9HookInterface **vmHooks = vm->internalVMFunctions->getVMHookInterface(vm);\n \t\t\t\tGET_OPTION_VALUE(argIndex, '=', &optionValue);\ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex 430843f467b..e5b524fb436 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -178,7 +178,11 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t *   iff the deflation policy in effect decides it's ok.\n \t\t */\n \t\tif (monitor->count == 1) {\n-\t\t\tif (0 == monitor->pinCount) {\n+\t\t\tif ((0 == monitor->pinCount)\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t) {\n \t\t\t\tif (deflate) {\n \t\t\t\t\tdeflate = 0;\n \t\t\t\t\tswitch (vmStruct->javaVM->thrDeflationPolicy) {\n@@ -220,6 +224,15 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t\t}\n \t\t}\n \t\trc = omrthread_monitor_exit((omrthread_monitor_t)monitor);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(vmStruct->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t&& (0 != objectMonitor->virtualThreadWaitCount)\n+\t\t) {\n+\t\t\tomrthread_monitor_enter(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_notify(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_exit(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tTrc_VM_objectMonitorExit_Exit_InflatedLock(vmStruct, rc);\n \t\tgoto done;\n \t} else {\ndiff --git a/runtime/vm/montable.c b/runtime/vm/montable.c\nindex caf9397242d..bcc4ce8700c 100644\n--- a/runtime/vm/montable.c\n+++ b/runtime/vm/montable.c\n@@ -320,7 +320,13 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object)\n #ifdef J9VM_THR_SMART_DEFLATION\n \t\t\t\tkey_objectMonitor.proDeflationCount = 0;\n \t\t\t\tkey_objectMonitor.antiDeflationCount = 0;\n-#endif\n+#endif /* J9VM_THR_SMART_DEFLATION */\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tkey_objectMonitor.virtualThreadWaitCount = 0;\n+\t\t\t\tkey_objectMonitor.ownerContinuation = NULL;\n+\t\t\t\tkey_objectMonitor.waitingContinuations = NULL;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n \t\t\t\tobjectMonitor = hashTableAdd(monitorTable, &key_objectMonitor);\n \t\t\t\tif (objectMonitor == NULL) {\ndiff --git a/runtime/vm/vmthinit.c b/runtime/vm/vmthinit.c\nindex e7ea6fe7db3..1cfc937422c 100644\n--- a/runtime/vm/vmthinit.c\n+++ b/runtime/vm/vmthinit.c\n@@ -103,6 +103,10 @@ UDATA initializeVMThreading(J9JavaVM *vm)\n \t\tomrthread_monitor_init_with_name(&vm->closeScopeMutex, 0, \"ScopedMemoryAccess closeScope0 mutex\") ||\n #endif /* JAVA_SPEC_VERSION >= 22 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\tomrthread_monitor_init_with_name(&vm->blockedVirtualThreadsMutex, 0, \"Blocked VirtualThreads mutex\") ||\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tinitializeMonitorTable(vm)\n \t)\n \t{\n",
    "9f49b942c3915e7c23aff5918adcf9888d7cb9c0": "diff --git a/runtime/compiler/runtime/IProfiler.cpp b/runtime/compiler/runtime/IProfiler.cpp\nindex beb7095c064..03da612afcc 100644\n--- a/runtime/compiler/runtime/IProfiler.cpp\n+++ b/runtime/compiler/runtime/IProfiler.cpp\n@@ -2683,11 +2683,11 @@ TR_IPBCDataFourBytes::copyFromEntry(TR_IPBytecodeHashTableEntry* originalEntry,\n    data = entry->data;\n    }\n \n-int16_t\n+int32_t\n TR_IPBCDataFourBytes::getSumBranchCount()\n    {\n-   uint16_t fallThroughCount = (uint16_t)(data & 0x0000FFFF) | 0x1;\n-   uint16_t branchToCount = (uint16_t)((data & 0xFFFF0000)>>16) | 0x1;\n+   int32_t fallThroughCount = (int32_t)(data & 0x0000FFFF) | 0x1;\n+   int32_t branchToCount = (int32_t)((data & 0xFFFF0000)>>16) | 0x1;\n    return (fallThroughCount + branchToCount);\n    }\n \ndiff --git a/runtime/compiler/runtime/IProfiler.hpp b/runtime/compiler/runtime/IProfiler.hpp\nindex 0f5d8bdc48f..9b81aa112b6 100644\n--- a/runtime/compiler/runtime/IProfiler.hpp\n+++ b/runtime/compiler/runtime/IProfiler.hpp\n@@ -322,7 +322,7 @@ class TR_IPBCDataFourBytes : public TR_IPBytecodeHashTableEntry\n #endif\n    virtual void createPersistentCopy(TR_J9SharedCache *sharedCache, TR_IPBCDataStorageHeader *storage, TR::PersistentInfo *info);\n    virtual void loadFromPersistentCopy(TR_IPBCDataStorageHeader *storage, TR::Compilation *comp);\n-   int16_t getSumBranchCount();\n+   int32_t getSumBranchCount();\n    virtual void copyFromEntry(TR_IPBytecodeHashTableEntry * originalEntry, TR::Compilation *comp);\n private:\n    uint32_t data;\n",
    "fd2b4466e08b2535f714d52070a2ba3b35fe3b10": "diff --git a/test/functional/Valhalla/playlist.xml b/test/functional/Valhalla/playlist.xml\nindex 9d630f5d832..abb644403b4 100644\n--- a/test/functional/Valhalla/playlist.xml\n+++ b/test/functional/Valhalla/playlist.xml\n@@ -36,7 +36,7 @@\n \t\t\t<variation>-Xnocompressedrefs -Xgcpolicy:gencon</variation>\n \t\t</variations>\n \t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n-\t\t-Xint -Xdump:system+java+snap:events=systhrow,filter=java/lang/LinkageError,msg_filter=*Triangle2D* --enable-preview \\\n+\t\t-Xint --enable-preview \\\n \t\t--add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n \t\t--add-exports java.base/jdk.internal.value=ALL-UNNAMED \\\n \t\t--patch-module java.base=$(TEST_JDK_HOME)$(D)lib$(D)valueclasses$(D)java.base-valueclasses.jar \\\n@@ -74,7 +74,7 @@\n \t\t\t<variation>-Xjit:count=1,disableAsyncCompilation -Xnocompressedrefs -Xgcpolicy:gencon</variation>\n \t\t</variations>\n \t\t<command>$(JAVA_COMMAND) $(JVM_OPTIONS) \\\n-\t\t-Xdump:system+java+snap:events=systhrow,filter=java/lang/LinkageError,msg_filter=*Triangle2D* --enable-preview \\\n+\t\t--enable-preview \\\n \t\t--add-opens java.base/jdk.internal.misc=ALL-UNNAMED \\\n \t\t--add-exports java.base/jdk.internal.value=ALL-UNNAMED \\\n \t\t--patch-module java.base=$(TEST_JDK_HOME)$(D)lib$(D)valueclasses$(D)java.base-valueclasses.jar \\\n",
    "1e5cec9f5c1a8052052f779a6560ad9dcb99d302": "diff --git a/buildenv/jenkins/variables/defaults.yml b/buildenv/jenkins/variables/defaults.yml\nindex b23a3964b08..73effab1fd7 100644\n--- a/buildenv/jenkins/variables/defaults.yml\n+++ b/buildenv/jenkins/variables/defaults.yml\n@@ -138,7 +138,7 @@ jitserver:\n # OpenSSL\n #========================================#\n openssl:\n-  extra_getsource_options: '-openssl-repo=https://github.com/ibmruntimes/openssl.git -openssl-branch=openssl-3.0.15+CVEs2'\n+  extra_getsource_options: '-openssl-branch=openssl-3.0.16'\n   extra_configure_options: '--with-openssl=fetched'\n #========================================#\n # OpenSSL Bundling\n",
    "cbcc870cfe3092cea41afa80cb1b0eba2ad7366a": "diff --git a/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java b/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\nindex 0e376ae8039..88564616892 100644\n--- a/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\n+++ b/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\n@@ -134,7 +134,7 @@ private void runTestDisclaimMemoryEffects() {\n \n \t\t//waiting for maximum 5 min (300000ms)\n \t\twhile ((System.currentTimeMillis() - startTime) < 300000) {\n-\t\t\tif (ibmMemoryMBean.getHeapMemoryUsage().getCommitted() < new_softmx_value) {\n+\t\t\tif (ibmMemoryMBean.getHeapMemoryUsage().getCommitted() <= new_softmx_value) {\n \t\t\t\tif (enableDisclaimMemory) {\n \t\t\t\t\tif (ibmOSMBean.getFreePhysicalMemorySize() > preMemSize) {\n \t\t\t\t\t\tisShrink = true;\n",
    "23b2cdcf21ee6a412991fc2253f00bb17a082fb2": "diff --git a/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java b/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\nindex 0e376ae8039..88564616892 100644\n--- a/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\n+++ b/test/functional/JLM_Tests/src/j9vm/test/softmx/SoftmxAdvanceTest.java\n@@ -134,7 +134,7 @@ private void runTestDisclaimMemoryEffects() {\n \n \t\t//waiting for maximum 5 min (300000ms)\n \t\twhile ((System.currentTimeMillis() - startTime) < 300000) {\n-\t\t\tif (ibmMemoryMBean.getHeapMemoryUsage().getCommitted() < new_softmx_value) {\n+\t\t\tif (ibmMemoryMBean.getHeapMemoryUsage().getCommitted() <= new_softmx_value) {\n \t\t\t\tif (enableDisclaimMemory) {\n \t\t\t\t\tif (ibmOSMBean.getFreePhysicalMemorySize() > preMemSize) {\n \t\t\t\t\t\tisShrink = true;\n",
    "4d799e0f717fe7805256166f128b20a66d4c46dc": "diff --git a/runtime/compiler/runtime/IProfiler.cpp b/runtime/compiler/runtime/IProfiler.cpp\nindex beb7095c064..03da612afcc 100644\n--- a/runtime/compiler/runtime/IProfiler.cpp\n+++ b/runtime/compiler/runtime/IProfiler.cpp\n@@ -2683,11 +2683,11 @@ TR_IPBCDataFourBytes::copyFromEntry(TR_IPBytecodeHashTableEntry* originalEntry,\n    data = entry->data;\n    }\n \n-int16_t\n+int32_t\n TR_IPBCDataFourBytes::getSumBranchCount()\n    {\n-   uint16_t fallThroughCount = (uint16_t)(data & 0x0000FFFF) | 0x1;\n-   uint16_t branchToCount = (uint16_t)((data & 0xFFFF0000)>>16) | 0x1;\n+   int32_t fallThroughCount = (int32_t)(data & 0x0000FFFF) | 0x1;\n+   int32_t branchToCount = (int32_t)((data & 0xFFFF0000)>>16) | 0x1;\n    return (fallThroughCount + branchToCount);\n    }\n \ndiff --git a/runtime/compiler/runtime/IProfiler.hpp b/runtime/compiler/runtime/IProfiler.hpp\nindex 0f5d8bdc48f..9b81aa112b6 100644\n--- a/runtime/compiler/runtime/IProfiler.hpp\n+++ b/runtime/compiler/runtime/IProfiler.hpp\n@@ -322,7 +322,7 @@ class TR_IPBCDataFourBytes : public TR_IPBytecodeHashTableEntry\n #endif\n    virtual void createPersistentCopy(TR_J9SharedCache *sharedCache, TR_IPBCDataStorageHeader *storage, TR::PersistentInfo *info);\n    virtual void loadFromPersistentCopy(TR_IPBCDataStorageHeader *storage, TR::Compilation *comp);\n-   int16_t getSumBranchCount();\n+   int32_t getSumBranchCount();\n    virtual void copyFromEntry(TR_IPBytecodeHashTableEntry * originalEntry, TR::Compilation *comp);\n private:\n    uint32_t data;\n",
    "9ed344211e8268be2bd0e90308d21c6436d1c2fa": "diff --git a/buildenv/jenkins/variables/defaults.yml b/buildenv/jenkins/variables/defaults.yml\nindex b23a3964b08..73effab1fd7 100644\n--- a/buildenv/jenkins/variables/defaults.yml\n+++ b/buildenv/jenkins/variables/defaults.yml\n@@ -138,7 +138,7 @@ jitserver:\n # OpenSSL\n #========================================#\n openssl:\n-  extra_getsource_options: '-openssl-repo=https://github.com/ibmruntimes/openssl.git -openssl-branch=openssl-3.0.15+CVEs2'\n+  extra_getsource_options: '-openssl-branch=openssl-3.0.16'\n   extra_configure_options: '--with-openssl=fetched'\n #========================================#\n # OpenSSL Bundling\n",
    "9dce4dc82d79b86f01aff9cf23859aa72d73eb3d": "diff --git a/runtime/compiler/control/CompilationThread.cpp b/runtime/compiler/control/CompilationThread.cpp\nindex f37743828a5..8d4fe887155 100644\n--- a/runtime/compiler/control/CompilationThread.cpp\n+++ b/runtime/compiler/control/CompilationThread.cpp\n@@ -6103,7 +6103,8 @@ void *TR::CompilationInfo::compileOnSeparateThread(J9VMThread * vmThread, TR::Il\n #if defined(J9VM_OPT_CRIU_SUPPORT)\n         || getCRRuntime()->shouldSuspendThreadsForCheckpoint()\n #endif\n-        || getPersistentInfo()->getDisableFurtherCompilation())\n+        || getPersistentInfo()->getDisableFurtherCompilation()\n+        || (_jitConfig->runtimeFlags & (J9JIT_CODE_CACHE_FULL | J9JIT_DATA_CACHE_FULL)))\n        && !details.isJitDumpMethod())\n       {\n       bool shouldReturn = true;\n@@ -8532,12 +8533,9 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n          }\n       else if (jitConfig->runtimeFlags & (J9JIT_CODE_CACHE_FULL | J9JIT_DATA_CACHE_FULL))\n          {\n-         // Optimization to disable future first time compilations from reaching the queue\n-         that->getCompilationInfo()->getPersistentInfo()->setDisableFurtherCompilation(true);\n-\n          if (TR::Options::isAnyVerboseOptionSet(TR_VerboseCompileEnd, TR_VerboseCompFailure, TR_VerbosePerformance))\n             {\n-            TR_VerboseLog::writeLineLocked(TR_Vlog_PERF,\"t=%6u <WARNING: JIT CACHES FULL> Disable further compilation\",\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_PERF,\"t=%6u <WARNING: JIT CACHES FULL>\",\n                (uint32_t)that->getCompilationInfo()->getPersistentInfo()->getElapsedTime());\n             }\n          if (jitConfig->runtimeFlags & J9JIT_CODE_CACHE_FULL)\n",
    "eea7d48b2a4f2f86cbbc7894bb9b2fb1f8165e36": "diff --git a/buildenv/jenkins/variables/defaults.yml b/buildenv/jenkins/variables/defaults.yml\nindex 73effab1fd7..0f4571cd276 100644\n--- a/buildenv/jenkins/variables/defaults.yml\n+++ b/buildenv/jenkins/variables/defaults.yml\n@@ -398,13 +398,9 @@ x86-64_mac:\n     8: '--with-toolchain-type=clang'\n   openjdk_reference_repo: '/Users/jenkins/openjdk_cache'\n   node_labels:\n-    build: 'ci.role.build && hw.arch.x86 && sw.os.mac.10_15'\n+    build: 'ci.role.build && hw.arch.x86 && sw.os.mac && sw.tool.xcode.15_2'\n   build_env:\n     vars: 'OPENJ9_JAVA_OPTIONS=-Xdump:system+java:events=systhrow,filter=java/lang/ClassCastException,request=exclusive+prepwalk+preempt'\n-  extra_test_labels:\n-    23: '!sw.os.mac.10_15'\n-    24: '!sw.os.mac.10_15'\n-    next: '!sw.os.mac.10_15'\n   fail_pattern: 'IOException caught during compilation: Resource deadlock avoided'\n #========================================#\n # Mac Aarch64\n@@ -424,7 +420,7 @@ aarch64_mac:\n     all: '--with-noncompressedrefs'\n   openjdk_reference_repo: '/Users/jenkins/openjdk_cache'\n   node_labels:\n-    build: 'ci.role.build && hw.arch.aarch64 && sw.os.mac'\n+    build: 'ci.role.build && hw.arch.aarch64 && sw.os.mac && sw.tool.xcode.15_2'\n   fail_pattern: 'IOException caught during compilation: Resource deadlock avoided'\n #========================================#\n # Linux PPCLE 64bits /w OpenJDK JSR292\n",
    "5daa110e0a3d53ae88a25ee1f8c72e569b2a01cb": "diff --git a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\nindex da01f9cc899..bd5facc7d8a 100644\n--- a/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n+++ b/jcl/src/java.base/share/classes/jdk/internal/vm/Continuation.java\n@@ -38,6 +38,10 @@ public class Continuation {\n \tprivate long vmRef; /* J9VMContinuation */\n \tprotected Thread vthread; /* Parent VirtualThread */\n \n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\tprivate Object blocker;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n+\n \t/* The live thread's scopedValueCache is always kept in J9VMThread->scopedValueCache\n \t * whereas the unmounted thread's scopedValueCache is stored in this field. This\n \t * field is modified in ContinuationHelpers.hpp::swapFieldsWithContinuation. This\n@@ -71,7 +75,13 @@ public enum Pinned {\n \t\t/** Holding monitor(s) */\n \t\tMONITOR(2),\n \t\t/** In critical section */\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tCRITICAL_SECTION(3),\n+\t\t/** Exception */\n+\t\tEXCEPTION(4);\n+/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\tCRITICAL_SECTION(3);\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \n \t\tprivate final int errorCode;\n \n@@ -250,6 +260,10 @@ private boolean yield0() {\n \t\t\t\treason = Pinned.MONITOR;\n \t\t\t} else if (rcPinned == Pinned.NATIVE.errorCode()) {\n \t\t\t\treason = Pinned.NATIVE;\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\t\t} else if (rcPinned == Pinned.EXCEPTION.errorCode()) {\n+\t\t\t\treason = Pinned.EXCEPTION;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t\t} else {\n \t\t\t\tthrow new AssertionError(\"Unknown pinned error code: \" + rcPinned);\n \t\t\t}\ndiff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex 4d7a08ff5fa..e33d1408eab 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -35,6 +35,9 @@\n #include \"VMHelpers.hpp\"\n #include \"ContinuationHelpers.hpp\"\n #endif /* JAVA_SPEC_VERSION >= 19 */\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"j9protos.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n extern \"C\" {\n \n@@ -720,17 +723,19 @@ JVM_IsStaticallyLinked(void)\n }\n \n JNIEXPORT void JNICALL\n-JVM_VirtualThreadPinnedEvent(JNIEnv* env, jclass clazz, jstring op)\n+JVM_VirtualThreadPinnedEvent(JNIEnv *env, jclass clazz, jstring op)\n {\n \t// TODO: emit JFR Event\n \treturn;\n }\n \n JNIEXPORT jobject JNICALL\n-JVM_TakeVirtualThreadListToUnblock(JNIEnv* env, jclass ignored)\n+JVM_TakeVirtualThreadListToUnblock(JNIEnv *env, jclass ignored)\n {\n-\t// TODO: return the unblocked list\n-\treturn NULL;\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\n+\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread, vm);\n }\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \ndiff --git a/runtime/oti/ContinuationHelpers.hpp b/runtime/oti/ContinuationHelpers.hpp\nindex 336816a8b47..7c274a98b89 100644\n--- a/runtime/oti/ContinuationHelpers.hpp\n+++ b/runtime/oti/ContinuationHelpers.hpp\n@@ -30,6 +30,9 @@\n #define J9VM_CONTINUATION_PINNED_REASON_NATIVE 1\n #define J9VM_CONTINUATION_PINNED_REASON_MONITOR 2\n #define J9VM_CONTINUATION_PINNED_REASON_CRITICAL_SECTION 3\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9VM_CONTINUATION_PINNED_REASON_EXCEPTION 4\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n class VM_ContinuationHelpers {\n \t/*\n@@ -88,6 +91,15 @@ class VM_ContinuationHelpers {\n \t\tj9object_t scopedValueCache = J9VMJDKINTERNALVMCONTINUATION_SCOPEDVALUECACHE(vmThread, continuationObject);\n \t\tJ9VMJDKINTERNALVMCONTINUATION_SET_SCOPEDVALUECACHE(vmThread, continuationObject, vmThread->scopedValueCache);\n \t\tvmThread->scopedValueCache = scopedValueCache;\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(vmThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tSWAP_MEMBER(ownedMonitorCount, UDATA, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(monitorEnterRecordPool, J9Pool*, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(monitorEnterRecords, J9MonitorEnterRecord*, vmThread, continuation);\n+\t\t\tSWAP_MEMBER(jniMonitorEnterRecords, J9MonitorEnterRecord*, vmThread, continuation);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n \n \tstatic VMINLINE ContinuationState volatile *\n@@ -261,6 +273,24 @@ class VM_ContinuationHelpers {\n \n \t\treturn threadObject;\n \t}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t/**\n+\t * Check if the threadObject mounted on a J9VMThread is a virtual thread and can be yielded.\n+\t *\n+\t * @param[in] vmThread the J9VMThread\n+\t *\n+\t * @return true if the virtual thread is yieldable, otherwise false\n+\t */\n+\tstatic VMINLINE bool\n+\tisYieldableVirtualThread(J9VMThread *vmThread)\n+\t{\n+\t\treturn (J9_ARE_ANY_BITS_SET(vmThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t\t\t&& IS_JAVA_LANG_VIRTUALTHREAD(vmThread, vmThread->threadObject)\n+\t\t\t\t&& (0 == vmThread->continuationPinCount)\n+\t\t\t\t&& (0 == vmThread->callOutCount));\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n };\n \n #endif /* CONTINUATIONHELPERS_HPP_ */\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex f05c316834c..070db280bcb 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -371,6 +371,7 @@ extern \"C\" {\n \n /* constants for J9JavaVM.extendedRuntimeFlags3 */\n #define J9_EXTENDED_RUNTIME3_START_FLIGHT_RECORDING 0x1\n+#define J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION 0x2\n \n #define J9_OBJECT_HEADER_AGE_DEFAULT 0xA /* OBJECT_HEADER_AGE_DEFAULT */\n #define J9_OBJECT_HEADER_SHAPE_MASK 0xE /* OBJECT_HEADER_SHAPE_MASK */\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex c1878cd035f..ff227c107f5 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -298,6 +298,15 @@\n typedef void(*j9_tls_finalizer_t)(void *);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/* Constants from java.lang.VirutalThread.state that are used by the VM.\n+ * The full mapping is under jvmtiInternals.h <JVMTI_VTHREAD_STATE_*>.\n+ */\n+#define JAVA_LANG_VIRTUALTHREAD_BLOCKING 12\n+#define JAVA_LANG_VIRTUALTHREAD_WAITING  13\n+#define JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING 17\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n typedef enum {\n \tJ9FlushCompQueueDataBreakpoint\n } J9JITFlushCompilationQueueReason;\n@@ -1717,6 +1726,11 @@ typedef struct J9ObjectMonitor {\n #endif /* defined(J9VM_THR_SMART_DEFLATION) */\n \tj9objectmonitor_t alternateLockword;\n \tU_32 hash;\n+#if JAVA_SPEC_VERSION >= 24\n+\tU_32 virtualThreadWaitCount;\n+\tstruct J9VMContinuation* ownerContinuation;\n+\tstruct J9VMContinuation* waitingContinuations;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9ObjectMonitor;\n \n typedef struct J9ClassWalkState {\n@@ -5329,6 +5343,10 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9Class * (*initializeSnapshotClassObject)(struct J9JavaVM *javaVM, struct J9ClassLoader *classLoader, struct J9Class *clazz);\n \tBOOLEAN (*loadWarmClassFromSnapshot)(struct J9VMThread *vmThread, struct J9ClassLoader *classLoader, struct J9Class *clazz);\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n+\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread, struct J9JavaVM *vm);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\n@@ -5407,6 +5425,13 @@ typedef struct J9JITGPRSpillArea {\n typedef uintptr_t ContinuationState;\n \n #if JAVA_SPEC_VERSION >= 19\n+#define J9VM_CONTINUATION_RETURN_FROM_YIELD 1\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER 0\n+#define J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT   2\n+#define J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD   3\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n typedef struct J9VMContinuation {\n \tUDATA* arg0EA;\n \tUDATA* bytecodes;\n@@ -5422,6 +5447,16 @@ typedef struct J9VMContinuation {\n \tstruct J9I2JState i2jState;\n \tstruct J9VMEntryLocalStorage* oldEntryLocalStorage;\n \tUDATA dropFlags;\n+\tUDATA returnState;\n+#if JAVA_SPEC_VERSION >= 24\n+\tIDATA waitingMonitorEnterCount;\n+\tUDATA ownedMonitorCount;\n+\tstruct J9Pool* monitorEnterRecordPool;\n+\tstruct J9MonitorEnterRecord* monitorEnterRecords;\n+\tstruct J9MonitorEnterRecord* jniMonitorEnterRecords;\n+\tj9object_t vthread;\n+\tstruct J9VMContinuation* nextWaitingContinuation;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n@@ -6341,6 +6376,10 @@ typedef struct J9JavaVM {\n #if defined(J9VM_OPT_JFR)\n \tUDATA loadedClassCount;\n #endif /* defined(J9VM_OPT_JFR) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tJ9VMContinuation *blockedContinuations;\n+\tomrthread_monitor_t blockedVirtualThreadsMutex;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } J9JavaVM;\n \n #define J9JFR_SAMPLER_STATE_UNINITIALIZED 0\n@@ -6380,7 +6419,10 @@ typedef struct J9JavaVM {\n #if defined(J9VM_OPT_CRIU_SUPPORT)\n #define J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW 2\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-#define J9_OBJECT_MONITOR_BLOCKING 3\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9_OBJECT_MONITOR_YIELD_VIRTUAL 3\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+#define J9_OBJECT_MONITOR_BLOCKING 4\n \n #if (JAVA_SPEC_VERSION >= 16) || defined(J9VM_OPT_CRIU_SUPPORT)\n #define J9_OBJECT_MONITOR_ENTER_FAILED(rc) ((UDATA)(rc) < J9_OBJECT_MONITOR_BLOCKING)\ndiff --git a/runtime/oti/jvminit.h b/runtime/oti/jvminit.h\nindex 6538530e8a3..4b617ad021e 100644\n--- a/runtime/oti/jvminit.h\n+++ b/runtime/oti/jvminit.h\n@@ -471,6 +471,12 @@ enum INIT_STAGE {\n #define VMOPT_XXNOSHOWUNMOUNTEDTHREADSTACKS \"-XX:-ShowUnmountedThreadStacks\"\n #endif /* JAVA_SPEC_VERSION >= 21 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/* Option to toggle on/off the feature to yield pinned virtual threads. */\n+#define VMOPT_XXYIELDPINNEDVIRTUALTHREADS \"-XX:+YieldPinnedVirtualThreads\"\n+#define VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS \"-XX:-YieldPinnedVirtualThreads\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /* Option to turn on exception on synchronization on instances of value-based classes */\n #define VMOPT_XXDIAGNOSE_SYNC_ON_VALUEBASED_CLASSES_EQUALS1 \"-XX:DiagnoseSyncOnValueBasedClasses=1\"\n /* Option to turn on warning on synchronization on instances of value-based classes */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 4cdbadc6b53..9ac10a42602 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -2451,6 +2451,26 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object);\n void\n cacheObjectMonitorForLookup(J9JavaVM* vm, J9VMThread* vmStruct, J9ObjectMonitor* objectMonitor);\n \n+/* ---------------- thrinfo.c ---------------- */\n+\n+/**\n+ * @brief Search the monitor tables in vm->monitorTable for the inflated monitor corresponding to an\n+ * object. Similar to monitorTableAt(), but doesn't add the monitor if it isn't found in the hashtable.\n+ *\n+ * This function may block on vm->monitorTableMutex.\n+ * This function can work out-of-process.\n+ *\n+ * @param[in] vm the JavaVM. For out-of-process: may be a local or target pointer.\n+ * vm->monitorTable must be a target value.\n+ * @param[in] object the object. For out-of-process: a target pointer.\n+ *\n+ * @return a J9ObjectMonitor from the monitor hashtable or a NULL if there is no corresponding monitor\n+ * in vm->monitorTable.\n+ *\n+ * @see monitorTablePeekMonitor in util_internal.h\n+ */\n+J9ObjectMonitor *\n+monitorTablePeek(J9JavaVM *vm, j9object_t object);\n \n /* ---------------- PackageIDHashTable.c ---------------- */\n \n@@ -4579,12 +4599,13 @@ enterContinuation(struct J9VMThread *currentThread, j9object_t continuationObjec\n /**\n  * @brief Suspends the Continuation runnable.\n  *\n- * @param currentThread\n+ * @param currentThread the thread whose Continuation is being yielded\n  * @param isFinished true if it is last unmount\n+ * @param returnState thread execution state when it is re-mounted\n  * @return BOOLEAN\n  */\n BOOLEAN\n-yieldContinuation(struct J9VMThread *currentThread, BOOLEAN isFinished);\n+yieldContinuation(struct J9VMThread *currentThread, BOOLEAN isFinished, UDATA returnState);\n \n /**\n  * @brief Free the native memory allocated by Continuation.\n@@ -4669,6 +4690,41 @@ void\n releaseVThreadInspector(J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @brief Attach all yielded VirtualThread monitors to carrier thread.\n+ *\n+ * @param currentThread the current thread\n+ * @param continuationObject the Continuation object\n+ */\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject);\n+\n+/**\n+ * @brief Inflate all monitors and prepare the VirtualThread to yield.\n+ *\n+ * @param currentThread the current thread\n+ * @param syncObj object to block/wait on\n+ * @param isObjectWait if the call is from Object.wait()\n+ *\n+ * @return J9_OBJECT_MONITOR_YIELD_VIRTUAL if the can be successfully yielded;\n+ * otherwise, an error code is returned\n+ */\n+UDATA\n+preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait);\n+\n+/**\n+ * @brief Find a list of virtual thread to be unblocked. This is a helper method for\n+ * JVM_TakeVirtualThreadListToUnblock (see javanextvmi.cpp).\n+ *\n+ * @param currentThread the current thread\n+ * @param vm pointer to J9JavaVM\n+ *\n+ * @return a list of virtual threads to be unblocked\n+ */\n+jobject\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \n /**\ndiff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex a269e864cb6..521ebf3dffa 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -265,6 +265,11 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"carrierThread\" signature=\"Ljava/lang/Thread;\" versions=\"19-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"cont\" signature=\"Ljdk/internal/vm/Continuation;\" versions=\"19-\"/>\n \n+\t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"blockPermit\" signature=\"Z\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n+\n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"detailMessage\" signature=\"Ljava/lang/String;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"walkback\" signature=\"Ljava/lang/Object;\"/>\n@@ -426,6 +431,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"vthread\" signature=\"Ljava/lang/Thread;\" versions=\"19-\"/>\n \t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"scopedValueCache\" signature=\"[Ljava/lang/Object;\" versions=\"19-\"/>\n \n+\t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n+\t<fieldref class=\"jdk/internal/vm/Continuation\" name=\"blocker\" signature=\"Ljava/lang/Object;\" versions=\"24-\"/>\n+\n \t<!-- Field references needed to support Foreign Linker API. -->\n \t<fieldref class=\"java/lang/invoke/NativeMethodHandle\" name=\"invokeCache\" signature=\"[Ljava/lang/Object;\" flags=\"opt_openjdkFfi\" versions=\"22-\"/>\n \t<fieldref class=\"java/lang/invoke/NativeMethodHandle\" name=\"nep\" signature=\"Ljava/lang/invoke/MethodHandle;\" flags=\"opt_openjdkFfi\" versions=\"22-\"/>\ndiff --git a/runtime/util/util_internal.h b/runtime/util/util_internal.h\nindex 5966a85609c..5029bb41e37 100644\n--- a/runtime/util/util_internal.h\n+++ b/runtime/util/util_internal.h\n@@ -198,24 +198,6 @@ char *node_key(node *aNode);\n J9ThreadAbstractMonitor *\n monitorTablePeekMonitor(J9JavaVM *vm, j9object_t object);\n \n-/**\n- * Search the monitor tables in vm->monitorTableList for the inflated monitor corresponding to an object.\n- * Similar to monitorTableAt(), but doesn't add the monitor if it isn't found in the hashtable.\n- *\n- * This function may block on vm->monitorTableMutex.\n- * This function can work out-of-process.\n- *\n- * @param[in] vm the JavaVM. For out-of-process: may be a local or target pointer.\n- * vm->monitorTable must be a target value.\n- * @param[in] object the object. For out-of-process: a target pointer.\n- * @returns a J9ObjectMonitor from the monitor hashtable\n- * @retval NULL There is no corresponding monitor in vm->monitorTable.\n- *\n- * @see monitorTablePeekMonitor\n- */\n-J9ObjectMonitor *\n-monitorTablePeek(J9JavaVM *vm, j9object_t object);\n-\n #ifdef __cplusplus\n }\n #endif\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 43d51041b44..a44a9878727 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -78,6 +78,12 @@\n #if JAVA_SPEC_VERSION >= 16\n #include \"LayoutFFITypeHelpers.hpp\"\n #endif /* JAVA_SPEC_VERSION >= 16 */\n+#if JAVA_SPEC_VERSION >= 21\n+#include \"ContinuationHelpers.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"thrtypes.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n #if 0\n #define DEBUG_MUST_HAVE_VM_ACCESS(vmThread) Assert_VM_mustHaveVMAccess(vmThread)\n@@ -1182,9 +1188,17 @@ class INTERPRETER_CLASS\n \t\tif (!VM_ObjectMonitor::inlineFastObjectMonitorEnter(_currentThread, obj)) {\n \t\t\trc = objectMonitorEnterNonBlocking(_currentThread, obj);\n \t\t\tif (J9_OBJECT_MONITOR_BLOCKING == rc) {\n-\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n-\t\t\t\trc = objectMonitorEnterBlocking(_currentThread);\n-\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n+\t\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\t\trc = preparePinnedVirtualThreadForUnmount(_currentThread, obj, false);\n+\t\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t{\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\t\t\t\trc = objectMonitorEnterBlocking(_currentThread);\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn rc;\n@@ -1493,6 +1507,37 @@ class INTERPRETER_CLASS\n \t}\n #endif /* DEBUG_VERSION */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tVMINLINE VM_BytecodeAction\n+\tyieldPinnedContinuation(REGISTER_ARGS_LIST, U_32 newThreadState, UDATA returnState)\n+\t{\n+\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(_currentThread, _currentThread->threadObject, newThreadState);\n+\n+\t\tif (JAVA_LANG_VIRTUALTHREAD_BLOCKING == newThreadState) {\n+\t\t\t/* Add the thread object to the blocked list. */\n+\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t_currentThread->currentContinuation->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t_vm->blockedContinuations = _currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t}\n+\n+\t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n+\t\tyieldContinuation(_currentThread, FALSE, returnState);\n+\n+\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\n+\t\t/* The return behavior will mimic that of continuation.enterImpl(), requiring the\n+\t\t * boolean return value to be pushed.\n+\t\t */\n+\t\treturnSingleFromINL(REGISTER_ARGS, JNI_FALSE, 1);\n+\n+\t\treturn EXECUTE_BYTECODE;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tVMINLINE VM_BytecodeAction\n \tcheckAsync(REGISTER_ARGS_LIST)\n \t{\n@@ -1705,6 +1750,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\t\tbreak;\n@@ -1782,6 +1833,12 @@ class INTERPRETER_CLASS\n \t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\tbreak;\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t/* Monitor was not entered - hide the frame to prevent exception throw from processing it.\n \t\t\t\t * Note that BP can not have changed during a failed enter.\n@@ -1911,6 +1968,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\t\tbreak;\n@@ -2281,6 +2344,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\tbreak;\n@@ -2856,6 +2925,51 @@ class INTERPRETER_CLASS\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n \t\t{\n \t\t\tif (VM_ObjectMonitor::getMonitorForNotify(_currentThread, receiver, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET(_vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\t\tif (!LN_HAS_LOCKWORD(_currentThread, receiver)) {\n+\t\t\t\t\t\tobjectMonitor = monitorTablePeek(_vm, receiver);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(_currentThread, receiver);\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(_currentThread, lockEA);\n+\t\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\n+\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n+\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tif (0 != notifyFunction(monitorPtr)) {\n \t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t\trc = THROW_ILLEGAL_MONITOR_STATE;\n@@ -5043,6 +5157,23 @@ class INTERPRETER_CLASS\n \t\tj9object_t object = *(j9object_t*)(_sp + 3);\n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n+\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n+\t\t\tif ((millis > 0) || (nanos > 0)) {\n+\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n+\t\t\t}\n+\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t} else {\n+\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t}\n+\t\t\treturn rc;\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tIDATA waitResult = monitorWaitImpl(_currentThread, object, millis, nanos, TRUE);\n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\tif (0 == waitResult) {\n@@ -5564,6 +5695,61 @@ class INTERPRETER_CLASS\n \t\t} else if (VM_VMHelpers::exceptionPending(_currentThread)) {\n \t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n \t\t}\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tswitch (_currentThread->currentContinuation->returnState) {\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_YIELD:\n+\t\t\treturnSingleFromINL(REGISTER_ARGS, JNI_TRUE, 1);\n+\t\t\tbreak;\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER:\n+\t\t\tbreak;\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n+\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n+\t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n+\n+\t\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n+\t\t\t * release VM access. So, the immediate async and failed enter cases are\n+\t\t\t * mutually exclusive.\n+\t\t\t */\n+\t\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n+\t\t\t\tswitch (monitorRC) {\n+\t\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n+\t\t\t\t\t_currentThread->tempSlot = (UDATA)waitObject;\n+\t\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n+\t\t\t\t\tbreak;\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n+\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n+\t\t\t\t\tbreak;\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n+\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tAssert_VM_unreachable();\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n+\t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n+\t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n+\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD:\n+\t\t\tUDATA *bp = ((UDATA *)(((J9SFMethodFrame *)_sp) + 1)) - 1;\n+\t\t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, bp);\n+\t\t\trc = inlineSendTarget(REGISTER_ARGS, VM_MAYBE, VM_MAYBE, VM_MAYBE, VM_MAYBE);\n+\t\t\tbreak;\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\treturn rc;\n \t}\n \n@@ -5577,14 +5763,14 @@ class INTERPRETER_CLASS\n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n \n-\t\t/* store the current Continuation state and swap to carrier thread stack */\n-\t\tyieldContinuation(_currentThread, isFinished);\n+\t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n+\t\tyieldContinuation(_currentThread, isFinished, J9VM_CONTINUATION_RETURN_FROM_YIELD);\n \n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \n-\t\t/* its going to return as if it were returning from continuation.enterImpl()\n-\t\t * so we need to push the boolean return val\n+\t\t/* The return behavior will mimic that of continuation.enterImpl(), requiring the\n+\t\t * boolean return value to be pushed.\n \t\t */\n \t\treturnSingleFromINL(REGISTER_ARGS, JNI_FALSE, 1);\n \t\treturn rc;\n@@ -8691,6 +8877,12 @@ class INTERPRETER_CLASS\n \t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n \t\t\t\t\tbreak;\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n \t\t\t\t\tbreak;\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 7587600043b..4ec703f16ca 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -24,6 +24,9 @@\n #include \"j9protos.h\"\n #include \"j9vmnls.h\"\n #include \"objhelp.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"thrtypes.h\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"ut_j9vm.h\"\n #include \"vm_api.h\"\n #include \"AtomicSupport.hpp\"\n@@ -127,6 +130,13 @@ createContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t/* Reset all fields in the new or recycled continuation. */\n \tmemset(continuation, 0, sizeof(J9VMContinuation));\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcontinuation->nextWaitingContinuation = NULL;\n+\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tcontinuation->monitorEnterRecordPool = pool_new(sizeof(J9MonitorEnterRecord), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(PORTLIB));\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tcontinuation->stackObject = stack;\n \tcontinuation->stackOverflowMark2 = J9JAVASTACK_STACKOVERFLOWMARK(stack);\n \tcontinuation->stackOverflowMark = continuation->stackOverflowMark2;\n@@ -225,6 +235,9 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\tcurrentThread->javaVM->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n \n \t\tcontinuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcontinuation->vthread = currentThread->threadObject;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n \tAssert_VM_notNull(continuation);\n \n@@ -244,14 +257,22 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \tcurrentThread->currentContinuation = continuation;\n \t/* Reset counters which determine if the current continuation is pinned. */\n \tcurrentThread->continuationPinCount = 0;\n-\tcurrentThread->ownedMonitorCount = 0;\n \tcurrentThread->callOutCount = 0;\n \n \tif (started) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject);\n+\n+\t\t}\n+\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\tresult = FALSE;\n+#else /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* resuming Continuation from yieldImpl */\n \t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n \t\tVM_OutOfLineINL_Helpers::returnSingle(currentThread, JNI_TRUE, 1);\n \t\tresult = FALSE;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t} else {\n \t\t/* start new Continuation execution */\n \t\tVM_ContinuationHelpers::setStarted(continuationStatePtr);\n@@ -277,7 +298,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n }\n \n BOOLEAN\n-yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished)\n+yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished, UDATA returnState)\n {\n \tBOOLEAN result = TRUE;\n \tJ9VMContinuation *continuation = currentThread->currentContinuation;\n@@ -323,6 +344,8 @@ yieldContinuation(J9VMThread *currentThread, BOOLEAN isFinished)\n \t} else {\n \t\t/* Notify GC of Continuation stack swap */\n \t\tcurrentThread->javaVM->memoryManagerFunctions->postUnmountContinuation(currentThread, continuationObject);\n+\t\t/* Only set returnState if continuation is not finished. */\n+\t\tcontinuation->returnState = returnState;\n \t}\n \n \treturn result;\n@@ -338,6 +361,11 @@ freeContinuation(J9VMThread *currentThread, j9object_t continuationObject, BOOLE\n \t\t\t\t\t!VM_ContinuationHelpers::isConcurrentlyScanned(continuationState)\n \t\t\t\t\t&& (NULL == VM_ContinuationHelpers::getCarrierThread(continuationState)));\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\t/* Remove reverse link to vthread object. */\n+\t\tcontinuation->vthread = NULL;\n+\t\tAssert_VM_true(NULL == continuation->nextWaitingContinuation);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* Free old stack used by continuation. */\n \t\tJ9JavaStack *currentStack = continuation->stackObject->previous;\n \t\twhile (NULL != currentStack) {\n@@ -403,6 +431,11 @@ recycleContinuation(J9JavaVM *vm, J9VMThread *vmThread, J9VMContinuation* contin\n \t\t\tvm->cacheFree += 1;\n \t\t\t/* Caching failed, free the J9VMContinuation struct. */\n \t\t\tfreeJavaStack(vm, continuation->stackObject);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tpool_kill(continuation->monitorEnterRecordPool);\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tj9mem_free_memory(continuation);\n \t\t}\n \t}\n@@ -452,6 +485,14 @@ copyFieldsFromContinuation(J9VMThread *currentThread, J9VMThread *vmThread, J9VM\n \t * benefit to a single walk and the cache memory must be managed.\n \t */\n \tvmThread->jitArtifactSearchCache = (void*)((UDATA)vmThread->jitArtifactSearchCache | J9_STACKWALK_NO_JIT_CACHE);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\tvmThread->ownedMonitorCount = continuation->ownedMonitorCount;\n+\t\tvmThread->monitorEnterRecords = continuation->monitorEnterRecords;\n+\t\tvmThread->jniMonitorEnterRecords = continuation->jniMonitorEnterRecords;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n }\n \n UDATA\n@@ -619,4 +660,270 @@ releaseVThreadInspector(J9VMThread *currentThread, jobject thread)\n \t\t}\n \t}\n }\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+{\n+\tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n+\tmonitor->owner = (J9Thread*)1;\n+\tobjectMonitor->ownerContinuation = currentThread->currentContinuation;\n+}\n+\n+void\n+updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+{\n+\tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n+\tmonitor->owner = currentThread->osThread;\n+\tobjectMonitor->ownerContinuation = NULL;\n+}\n+\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject)\n+{\n+\tUDATA monitorCount = 0;\n+\tif (0 < currentThread->ownedMonitorCount) {\n+\t\t/* Inflate all owned monitors. */\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t}\n+\n+\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\n+\t\t/* Repeat for JNI monitor records. */\n+\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t}\n+\n+\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\t}\n+\n+\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n+\n+\t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n+\tcurrentThread->osThread->lockedmonitorcount += monitorCount;\n+}\n+\n+UDATA\n+preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait)\n+{\n+\tUDATA result = J9_OBJECT_MONITOR_YIELD_VIRTUAL;\n+\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\tj9objectmonitor_t lock = 0;\n+\tj9object_t continuationObj = NULL;\n+\tUDATA monitorCount = 0;\n+\n+\tif (0 < currentThread->ownedMonitorCount) {\n+\t\t/* Inflate all owned monitors. */\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = 0;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t}\n+\n+\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\n+\t\t/* Repeat for JNI monitor records. */\n+\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\twhile (NULL != monitorRecords) {\n+\t\t\tj9object_t object = monitorRecords->object;\n+\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = 0;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t}\n+\n+\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\tmonitorCount++;\n+\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t}\n+\t}\n+\n+\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n+\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\tif (NULL != syncObjectMonitor) {\n+\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\t\t} else {\n+\t\t\tlock = 0;\n+\t\t}\n+\t} else {\n+\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n+\t}\n+\n+\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n+\t\tif (NULL == syncObjectMonitor) {\n+\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\tgoto done;\n+\t\t}\n+\t}\n+\n+\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n+\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n+\n+\tif (isObjectWait) {\n+\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n+\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\n+\t\t/* Record wait monitor state. */\n+\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n+\n+\t\t/* Reset monitor entry count to 1.*/\n+\t\tmonitor->count = 1;\n+\n+\t\t/* Add Continuation struct to the monitor's waiting list. */\n+\t\tomrthread_monitor_exit(monitor);\n+\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n+\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n+\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t} else {\n+\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t}\n+\n+\t/* Subtract the detached monitor from the carrier thread's lockedmonitorcount. */\n+\tcurrentThread->osThread->lockedmonitorcount -= monitorCount;\n+\n+\t/* Clear the blocking object on the carrier thread. */\n+\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n+\n+done:\n+\treturn result;\n+}\n+\n+jobject\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n+{\n+\tj9object_t unblockedList = NULL;\n+\tjobject result = NULL;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t|| (NULL == vm->blockedContinuations)\n+\t) {\n+\t\treturn NULL;\n+\t}\n+\n+\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\twhile (NULL == unblockedList) {\n+\t\tif (NULL != vm->blockedContinuations) {\n+restart:\n+\t\t\tJ9VMContinuation *listHead = vm->blockedContinuations;\n+\t\t\tJ9VMContinuation *next = NULL;\n+\t\t\tvm->blockedContinuations = NULL;\n+\t\t\twhile (NULL != listHead) {\n+\t\t\t\tbool unblocked = false;\n+\t\t\t\tnext = listHead->nextWaitingContinuation;\n+\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n+\t\t\t\t\tunblocked = true;\n+\t\t\t\t} else {\n+\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, listHead->vthread);\n+\t\t\t\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObj);\n+\t\t\t\t\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\t\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, syncObject)) {\n+\t\t\t\t\t\tsyncObjectMonitor = vmFuncs->monitorTablePeek(vm, syncObject);\n+\t\t\t\t\t\tif (NULL != syncObjectMonitor){\n+\t\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD_VM(vm, &syncObjectMonitor->alternateLockword);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n+\t\t\t\t\t}\n+\t\t\t\t\tJ9ThreadAbstractMonitor *monitor = getInflatedObjectMonitor(vm, syncObject, lock);\n+\t\t\t\t\tif (0 == monitor->count) {\n+\t\t\t\t\t\tunblocked = true;\n+\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n+\t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, listHead->vthread, JNI_TRUE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (unblocked) {\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, listHead->vthread, unblockedList);\n+\t\t\t\t\tunblockedList = listHead->vthread;\n+\t\t\t\t} else {\n+\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t}\n+\t\t\t\tlistHead = next;\n+\t\t\t}\n+\t\t\tif (NULL == unblockedList) {\n+\t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n+\t\t\t\tomrthread_monitor_wait(vm->blockedVirtualThreadsMutex);\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\tgoto restart;\n+\t\t\t} else {\n+\t\t\t\tresult = vmFuncs->j9jni_createLocalRef((JNIEnv *)currentThread, unblockedList);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\n+\treturn result;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n } /* extern \"C\" */\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 72e3b6fb045..5cfdd0003fe 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -480,4 +480,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tinitializeSnapshotClassObject,\n \tloadWarmClassFromSnapshot,\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n+#if JAVA_SPEC_VERSION >= 24\n+\tmonitorTablePeek,\n+\ttakeVirtualThreadListToUnblock,\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n };\ndiff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 6c4fbf83e48..faed688d00a 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -2822,6 +2822,16 @@ VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved)\n \t\t\t\tgoto _memParseError;\n \t\t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t{\n+\t\t\t\targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\t\t\tif (argIndex > argIndex2) {\n+\t\t\t\t\t/* Enable yielding of pinned continuation. */\n+\t\t\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif ((argIndex = FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, VMOPT_XXDUMPLOADEDCLASSLIST, NULL)) >= 0) {\n \t\t\t\tJ9HookInterface **vmHooks = vm->internalVMFunctions->getVMHookInterface(vm);\n \t\t\t\tGET_OPTION_VALUE(argIndex, '=', &optionValue);\ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex 430843f467b..e5b524fb436 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -178,7 +178,11 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t *   iff the deflation policy in effect decides it's ok.\n \t\t */\n \t\tif (monitor->count == 1) {\n-\t\t\tif (0 == monitor->pinCount) {\n+\t\t\tif ((0 == monitor->pinCount)\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t) {\n \t\t\t\tif (deflate) {\n \t\t\t\t\tdeflate = 0;\n \t\t\t\t\tswitch (vmStruct->javaVM->thrDeflationPolicy) {\n@@ -220,6 +224,15 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t\t}\n \t\t}\n \t\trc = omrthread_monitor_exit((omrthread_monitor_t)monitor);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(vmStruct->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t&& (0 != objectMonitor->virtualThreadWaitCount)\n+\t\t) {\n+\t\t\tomrthread_monitor_enter(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_notify(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_exit(vmStruct->javaVM->blockedVirtualThreadsMutex);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tTrc_VM_objectMonitorExit_Exit_InflatedLock(vmStruct, rc);\n \t\tgoto done;\n \t} else {\ndiff --git a/runtime/vm/montable.c b/runtime/vm/montable.c\nindex caf9397242d..bcc4ce8700c 100644\n--- a/runtime/vm/montable.c\n+++ b/runtime/vm/montable.c\n@@ -320,7 +320,13 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object)\n #ifdef J9VM_THR_SMART_DEFLATION\n \t\t\t\tkey_objectMonitor.proDeflationCount = 0;\n \t\t\t\tkey_objectMonitor.antiDeflationCount = 0;\n-#endif\n+#endif /* J9VM_THR_SMART_DEFLATION */\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tkey_objectMonitor.virtualThreadWaitCount = 0;\n+\t\t\t\tkey_objectMonitor.ownerContinuation = NULL;\n+\t\t\t\tkey_objectMonitor.waitingContinuations = NULL;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n \t\t\t\tobjectMonitor = hashTableAdd(monitorTable, &key_objectMonitor);\n \t\t\t\tif (objectMonitor == NULL) {\ndiff --git a/runtime/vm/vmthinit.c b/runtime/vm/vmthinit.c\nindex e7ea6fe7db3..1cfc937422c 100644\n--- a/runtime/vm/vmthinit.c\n+++ b/runtime/vm/vmthinit.c\n@@ -103,6 +103,10 @@ UDATA initializeVMThreading(J9JavaVM *vm)\n \t\tomrthread_monitor_init_with_name(&vm->closeScopeMutex, 0, \"ScopedMemoryAccess closeScope0 mutex\") ||\n #endif /* JAVA_SPEC_VERSION >= 22 */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t\tomrthread_monitor_init_with_name(&vm->blockedVirtualThreadsMutex, 0, \"Blocked VirtualThreads mutex\") ||\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tinitializeMonitorTable(vm)\n \t)\n \t{\n",
    "774e298d762c526e0036c0b5dfc1ea0b5069d426": "diff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex e33d1408eab..72404a77423 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -735,7 +735,7 @@ JVM_TakeVirtualThreadListToUnblock(JNIEnv *env, jclass ignored)\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n \n-\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread, vm);\n+\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread);\n }\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex ff227c107f5..bd363c73ecf 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5345,7 +5345,7 @@ typedef struct J9InternalVMFunctions {\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n #if JAVA_SPEC_VERSION >= 24\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n-\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread, struct J9JavaVM *vm);\n+\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9InternalVMFunctions;\n \ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 9ac10a42602..93a94507515 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4718,12 +4718,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n  * JVM_TakeVirtualThreadListToUnblock (see javanextvmi.cpp).\n  *\n  * @param currentThread the current thread\n- * @param vm pointer to J9JavaVM\n  *\n  * @return a list of virtual threads to be unblocked\n  */\n jobject\n-takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm);\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 4ec703f16ca..82f77290bc1 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -852,10 +852,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n }\n \n jobject\n-takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n {\n \tj9object_t unblockedList = NULL;\n \tjobject result = NULL;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n",
    "9f917f586505ff9d4b20c374481555ce6f99c88f": "diff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex e33d1408eab..72404a77423 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -735,7 +735,7 @@ JVM_TakeVirtualThreadListToUnblock(JNIEnv *env, jclass ignored)\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n \n-\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread, vm);\n+\treturn vm->internalVMFunctions->takeVirtualThreadListToUnblock(currentThread);\n }\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex ff227c107f5..bd363c73ecf 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5345,7 +5345,7 @@ typedef struct J9InternalVMFunctions {\n #endif /* defined(J9VM_OPT_SNAPSHOTS) */\n #if JAVA_SPEC_VERSION >= 24\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n-\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread, struct J9JavaVM *vm);\n+\tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9InternalVMFunctions;\n \ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 9ac10a42602..93a94507515 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4718,12 +4718,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n  * JVM_TakeVirtualThreadListToUnblock (see javanextvmi.cpp).\n  *\n  * @param currentThread the current thread\n- * @param vm pointer to J9JavaVM\n  *\n  * @return a list of virtual threads to be unblocked\n  */\n jobject\n-takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm);\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 4ec703f16ca..82f77290bc1 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -852,10 +852,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n }\n \n jobject\n-takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n+takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n {\n \tj9object_t unblockedList = NULL;\n \tjobject result = NULL;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n",
    "b930d0ca25daadcc83a22f7b0cb23a026e821ac2": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex a854447199e..07d4cea3fdb 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,17 +116,6 @@\n #include <strings.h>\n #endif\n \n-#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n-#include <intrin.h>\n-#elif defined(TR_TARGET_X86)\n-inline unsigned long long _xgetbv(unsigned int ecx)\n-   {\n-   unsigned int eax, edx;\n-   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n-   return ((unsigned long long)edx << 32) | eax;\n-   }\n-#endif\n-\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -345,43 +334,6 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n-      bool disableAVX = true;\n-      bool disableAVX512 = true;\n-\n-#if defined(TR_TARGET_X86)\n-      // Check XCRO register for OS support of xmm/ymm/zmm\n-      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n-         {\n-         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n-         disableAVX = ((6 & _xgetbv(0)) != 6);\n-         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n-         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n-         }\n-#endif\n-\n-      if (disableAVX)\n-         {\n-         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n-         }\n-\n-      if (disableAVX512)\n-         {\n-         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n-         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n-         }\n-\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex 4cf1782cda1..ddde9002cc0 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,6 +67,16 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n+TR::CPU\n+J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n+   {\n+   if (omrPortLib == NULL)\n+      return TR::CPU();\n+\n+   TR::CPU::enableFeatureMasks();\n+   return OMR::X86::CPU::detect(omrPortLib);\n+   }\n+\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex ce53cdde422..9baba2d4a47 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,6 +59,13 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n+   /**\n+    * @brief A factory method used to construct a CPU object based on the underlying hardware\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "d78b6095be5e7a79d8b34890a7f42a7312bcc9c6": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 37cba04d128..9dcc30e3fbe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -163,7 +163,9 @@ public final class System {\n \t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \tprivate static boolean hasSetErrEncoding;\n \tprivate static boolean hasSetOutEncoding;\n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate static String consoleDefaultEncoding;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t/* The consoleDefaultCharset is different from the default console encoding when the encoding\n \t * doesn't exist, or isn't available at startup. Some character sets are not available in the\n \t * java.base module, there are more in the jdk.charsets module, and so are not used at startup.\n@@ -228,7 +230,9 @@ public final class System {\n \t * if different from the default console Charset.\n \t *\n \t * consoleDefaultCharset must be initialized before calling.\n+\t/*[IF JAVA_SPEC_VERSION < 24]\n \t * consoleDefaultEncoding must be initialized before calling with fallback set to true.\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n@@ -248,6 +252,7 @@ static Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t\t\t// ignore unsupported or invalid encodings\n \t\t\t}\n \t\t}\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tif (fallback && (consoleDefaultEncoding != null)) {\n \t\t\ttry {\n \t\t\t\tCharset newCharset = Charset.forName(consoleDefaultEncoding);\n@@ -260,6 +265,7 @@ static Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t\t\t// ignore unsupported or invalid encodings\n \t\t\t}\n \t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\treturn null;\n \t}\n \n@@ -419,8 +425,12 @@ static void afterClinitInitialization() {\n \t\tProperties props = internalGetProperties();\n \t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \t\t/*[IF JAVA_SPEC_VERSION >= 18]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tconsoleDefaultCharset = sun.nio.cs.UTF_8.INSTANCE;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\tconsoleDefaultEncoding = props.getProperty(\"native.encoding\"); //$NON-NLS-1$\n \t\tconsoleDefaultCharset = Charset.forName(consoleDefaultEncoding, sun.nio.cs.UTF_8.INSTANCE);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 18 */\n \t\tString fileEncodingProp = props.getProperty(\"file.encoding\"); //$NON-NLS-1$\n \t\t// Do not call Charset.defaultEncoding() since this would initialize the default encoding\n",
    "40febba0c4d91850a90b5611721676f417ac7bac": "diff --git a/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java b/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\nindex a9f3939a49b..46d75d80b0e 100644\n--- a/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\n+++ b/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\n@@ -61,7 +61,14 @@ public boolean usePercentageOfHeap( double percentage ) {\n \t\ttry {\n \t\t\twhile ( ibmMemoryMBean.getHeapMemoryUsage().getCommitted() < ((long) ( original_softmx_value * percentage ))){\n \t\t\t\ttry {\n-\t\t\t\t\tmyObjects[i] = new byte[OBJECT_SIZE];\n+\t\t\t\t\tbyte myObject[] = new byte[OBJECT_SIZE];\n+\n+\t\t\t\t\tmyObjects[i] = myObject;\n+\n+\t\t\t\t\tfor (int j = 0; j < OBJECT_SIZE; j += 4 * 1024) {\n+\t\t\t\t\t\tmyObject[j] = (byte)(i + 1);\n+\t\t\t\t\t}\n+\n \t\t\t\t\ti++;\n \t\t\t\t} catch (OutOfMemoryError e){\n \t\t\t\t\t// at this point we stop\n",
    "de6f631bf53183e8d84b7b4831e81de63eb3ca67": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 37cba04d128..9dcc30e3fbe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -163,7 +163,9 @@ public final class System {\n \t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \tprivate static boolean hasSetErrEncoding;\n \tprivate static boolean hasSetOutEncoding;\n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate static String consoleDefaultEncoding;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t/* The consoleDefaultCharset is different from the default console encoding when the encoding\n \t * doesn't exist, or isn't available at startup. Some character sets are not available in the\n \t * java.base module, there are more in the jdk.charsets module, and so are not used at startup.\n@@ -228,7 +230,9 @@ public final class System {\n \t * if different from the default console Charset.\n \t *\n \t * consoleDefaultCharset must be initialized before calling.\n+\t/*[IF JAVA_SPEC_VERSION < 24]\n \t * consoleDefaultEncoding must be initialized before calling with fallback set to true.\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n@@ -248,6 +252,7 @@ static Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t\t\t// ignore unsupported or invalid encodings\n \t\t\t}\n \t\t}\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tif (fallback && (consoleDefaultEncoding != null)) {\n \t\t\ttry {\n \t\t\t\tCharset newCharset = Charset.forName(consoleDefaultEncoding);\n@@ -260,6 +265,7 @@ static Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t\t\t// ignore unsupported or invalid encodings\n \t\t\t}\n \t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\treturn null;\n \t}\n \n@@ -419,8 +425,12 @@ static void afterClinitInitialization() {\n \t\tProperties props = internalGetProperties();\n \t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \t\t/*[IF JAVA_SPEC_VERSION >= 18]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 24]*/\n+\t\tconsoleDefaultCharset = sun.nio.cs.UTF_8.INSTANCE;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION >= 24 */\n \t\tconsoleDefaultEncoding = props.getProperty(\"native.encoding\"); //$NON-NLS-1$\n \t\tconsoleDefaultCharset = Charset.forName(consoleDefaultEncoding, sun.nio.cs.UTF_8.INSTANCE);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 18 */\n \t\tString fileEncodingProp = props.getProperty(\"file.encoding\"); //$NON-NLS-1$\n \t\t// Do not call Charset.defaultEncoding() since this would initialize the default encoding\n",
    "7ce2c018ee828c2ab5828d4ff7688d463a4a81e7": "diff --git a/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java b/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\nindex a9f3939a49b..46d75d80b0e 100644\n--- a/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\n+++ b/test/functional/JLM_Tests/src/j9vm/test/softmx/MemoryExhauster.java\n@@ -61,7 +61,14 @@ public boolean usePercentageOfHeap( double percentage ) {\n \t\ttry {\n \t\t\twhile ( ibmMemoryMBean.getHeapMemoryUsage().getCommitted() < ((long) ( original_softmx_value * percentage ))){\n \t\t\t\ttry {\n-\t\t\t\t\tmyObjects[i] = new byte[OBJECT_SIZE];\n+\t\t\t\t\tbyte myObject[] = new byte[OBJECT_SIZE];\n+\n+\t\t\t\t\tmyObjects[i] = myObject;\n+\n+\t\t\t\t\tfor (int j = 0; j < OBJECT_SIZE; j += 4 * 1024) {\n+\t\t\t\t\t\tmyObject[j] = (byte)(i + 1);\n+\t\t\t\t\t}\n+\n \t\t\t\t\ti++;\n \t\t\t\t} catch (OutOfMemoryError e){\n \t\t\t\t\t// at this point we stop\n",
    "96b2f0f6c9da92f4b3f98474b1bb3db977533131": "diff --git a/runtime/codert_vm/arm64nathelp.m4 b/runtime/codert_vm/arm64nathelp.m4\nindex 28180df95b9..f9e62899380 100644\n--- a/runtime/codert_vm/arm64nathelp.m4\n+++ b/runtime/codert_vm/arm64nathelp.m4\n@@ -378,6 +378,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/armnathelp.m4 b/runtime/codert_vm/armnathelp.m4\nindex 8158c3f1e68..05e533e5eca 100644\n--- a/runtime/codert_vm/armnathelp.m4\n+++ b/runtime/codert_vm/armnathelp.m4\n@@ -364,6 +364,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/cnathelp.cpp b/runtime/codert_vm/cnathelp.cpp\nindex fde7a7f0dee..44cf7b26b41 100644\n--- a/runtime/codert_vm/cnathelp.cpp\n+++ b/runtime/codert_vm/cnathelp.cpp\n@@ -2731,6 +2731,20 @@ old_slow_jitThrowArrayIndexOutOfBounds(J9VMThread *currentThread)\n \treturn setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGARRAYINDEXOUTOFBOUNDSEXCEPTION, NULL);\n }\n \n+void* J9FASTCALL\n+old_slow_jitThrowIdentityException(J9VMThread *currentThread)\n+{\n+\tvoid *exception = NULL;\n+#if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n+\tOLD_JIT_HELPER_PROLOGUE(0);\n+\tbuildJITResolveFrameForRuntimeCheck(currentThread);\n+\texception = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGIDENTITYEXCEPTION, NULL);\n+#else /* defined(J9VM_OPT_VALHALLA_VALUE_TYPES) */\n+\texception = (void *)-1;\n+#endif /* defined(J9VM_OPT_VALHALLA_VALUE_TYPES) */\n+\treturn exception;\n+}\n+\n void* J9FASTCALL\n impl_jitReferenceArrayCopy(J9VMThread *currentThread, UDATA lengthInBytes)\n {\n@@ -4000,6 +4014,7 @@ initPureCFunctionTable(J9JavaVM *vm)\n \tjitConfig->old_slow_jitThrowInstantiationException = (void*)old_slow_jitThrowInstantiationException;\n \tjitConfig->old_slow_jitThrowNullPointerException = (void*)old_slow_jitThrowNullPointerException;\n \tjitConfig->old_slow_jitThrowWrongMethodTypeException = (void*)old_slow_jitThrowWrongMethodTypeException;\n+\tjitConfig->old_slow_jitThrowIdentityException = (void*)old_slow_jitThrowIdentityException;\n \tjitConfig->old_fast_jitTypeCheckArrayStoreWithNullCheck = (void*)old_fast_jitTypeCheckArrayStoreWithNullCheck;\n \tjitConfig->old_slow_jitTypeCheckArrayStoreWithNullCheck = (void*)old_slow_jitTypeCheckArrayStoreWithNullCheck;\n \tjitConfig->old_fast_jitTypeCheckArrayStore = (void*)old_fast_jitTypeCheckArrayStore;\ndiff --git a/runtime/codert_vm/pnathelp.m4 b/runtime/codert_vm/pnathelp.m4\nindex 99613389a46..ed567a8f1a3 100644\n--- a/runtime/codert_vm/pnathelp.m4\n+++ b/runtime/codert_vm/pnathelp.m4\n@@ -428,6 +428,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/riscvnathelp.m4 b/runtime/codert_vm/riscvnathelp.m4\nindex 1a7483f8f13..4c3d3f594be 100644\n--- a/runtime/codert_vm/riscvnathelp.m4\n+++ b/runtime/codert_vm/riscvnathelp.m4\n@@ -356,6 +356,7 @@ EXCEPTION_THROW_HELPER(jitThrowIncompatibleClassChangeError,0)\n EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n \n dnl Write barrier helpers\ndiff --git a/runtime/codert_vm/xnathelp.m4 b/runtime/codert_vm/xnathelp.m4\nindex f27ee9334a7..f78289fff83 100644\n--- a/runtime/codert_vm/xnathelp.m4\n+++ b/runtime/codert_vm/xnathelp.m4\n@@ -478,6 +478,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/znathelp.m4 b/runtime/codert_vm/znathelp.m4\nindex e30782ba4b9..3687dd828e4 100644\n--- a/runtime/codert_vm/znathelp.m4\n+++ b/runtime/codert_vm/znathelp.m4\n@@ -409,6 +409,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/compiler/compile/J9AliasBuilder.cpp b/runtime/compiler/compile/J9AliasBuilder.cpp\nindex e9613c7ee23..fe2da185621 100644\n--- a/runtime/compiler/compile/J9AliasBuilder.cpp\n+++ b/runtime/compiler/compile/J9AliasBuilder.cpp\n@@ -293,7 +293,8 @@ J9::AliasBuilder::createAliasInfo()\n       TR_methodTypeCheck,\n       TR_incompatibleReceiver,\n       TR_IncompatibleClassChangeError,\n-      TR_multiANewArray\n+      TR_multiANewArray,\n+      TR_identityException\n       };\n \n    for (i = 0; i < (sizeof(helpersThatMayThrow) / 4); ++i)\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.cpp b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\nindex f0a9df6b856..35d97d49545 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n@@ -1318,6 +1318,12 @@ J9::SymbolReferenceTable::findOrCreateIncompatibleReceiverSymbolRef(TR::Resolved\n    return findOrCreateRuntimeHelper(TR_incompatibleReceiver, false, true, true);\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateIdentityExceptionSymbolRef(TR::ResolvedMethodSymbol *)\n+   {\n+   return findOrCreateRuntimeHelper(TR_identityException, false, true, true);\n+   }\n+\n TR::SymbolReference *\n J9::SymbolReferenceTable::findOrCreateIncompatibleClassChangeErrorSymbolRef(TR::ResolvedMethodSymbol *)\n    {\n@@ -2712,6 +2718,19 @@ J9::SymbolReferenceTable::findOrCreateStoreFlattenableArrayElementNonHelperSymbo\n    return symRef;\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateIsIdentityObjectNonHelperSymbolRef()\n+   {\n+   TR::SymbolReference *symRef = element(isIdentityObjectNonHelperSymbol);\n+   if (symRef != NULL)\n+      {\n+      return symRef;\n+      }\n+\n+   symRef = self()->findOrCreateCodeGenInlinedHelper(isIdentityObjectNonHelperSymbol);\n+   return symRef;\n+   }\n+\n TR::ParameterSymbol *\n J9::SymbolReferenceTable::createParameterSymbol(\n       TR::ResolvedMethodSymbol *owningMethodSymbol,\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.hpp b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\nindex bec43f03fb0..d32af6d9487 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n@@ -246,6 +246,18 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n    TR::SymbolReference * findOrCreateArrayComponentTypeAsPrimitiveSymbolRef();\n    TR::SymbolReference * findOrCreateMethodTypeCheckSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateIncompatibleReceiverSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n+\n+   /**\n+    * Used to find the symbol reference for \\c java/lang/IdentityException.  If it does not already exist,\n+    * it will be created.\n+    *\n+    * \\param owningMethodSymbol\n+    *     The method in which the IdentityException symbol reference needs to be created.\n+    *\n+    * \\returns\n+    *     A symbol reference for \\c java/lang/IdentityException\n+    */\n+   TR::SymbolReference * findOrCreateIdentityExceptionSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateIncompatibleClassChangeErrorSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateReportStaticMethodEnterSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateReportMethodExitSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n@@ -415,6 +427,18 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     */\n    TR::SymbolReference *findOrCreateStoreFlattenableArrayElementNonHelperSymbolRef();\n \n+   /**\n+    * \\brief\n+    *    Finds the <isIdentityObject> \"non-helper\" symbol reference, creating it if\n+    *    necessary.  The non-helper is used to test whether an object is an instance\n+    *    of an identity class, in which case it returns the value one, or a value type\n+    *    class, in which case it returns the value zero.\n+    *\n+    * \\return\n+    *    The <isIdentityObject> symbol reference\n+    */\n+   TR::SymbolReference *findOrCreateIsIdentityObjectNonHelperSymbolRef();\n+\n    /**\n     * \\brief\n     *    Creates a new symbol for a parameter within the supplied owning method of the\ndiff --git a/runtime/compiler/ilgen/Walker.cpp b/runtime/compiler/ilgen/Walker.cpp\nindex 50ef6a547b0..fc22a0da33d 100644\n--- a/runtime/compiler/ilgen/Walker.cpp\n+++ b/runtime/compiler/ilgen/Walker.cpp\n@@ -6047,11 +6047,31 @@ TR_J9ByteCodeIlGenerator::genMonitorEnter()\n       }\n    */\n \n-   node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n-   if (isStatic)\n-      node->setStaticMonitor(true);\n+   static const bool disableMonentIdentityException = (feGetEnv(\"TR_disableMonentIdentityException\") != NULL);\n \n-   genTreeTop(genNullCheck(node));\n+   if (disableMonentIdentityException || !TR::Compiler->om.areValueTypesEnabled())\n+      {\n+      node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n+      if (isStatic)\n+         node->setStaticMonitor(true);\n+\n+      genTreeTop(genNullCheck(node));\n+      }\n+   else\n+      {\n+      genTreeTop(genNullCheck(TR::Node::create(TR::PassThrough, 1, node)));\n+\n+      TR::SymbolReference *isIdentitySymRef = comp()->getSymRefTab()->findOrCreateIsIdentityObjectNonHelperSymbolRef();\n+      TR::Node *isIdentityObjectTestNode = TR::Node::createWithSymRef(TR::icall, 1, 1, node, isIdentitySymRef);\n+      TR::SymbolReference *identityExceptionSymRef = comp()->getSymRefTab()->findOrCreateIdentityExceptionSymbolRef(_methodSymbol);\n+      genTreeTop(TR::Node::createWithSymRef(TR::ZEROCHK, 1, 1, isIdentityObjectTestNode, identityExceptionSymRef));\n+\n+      node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n+      if (isStatic)\n+         node->setStaticMonitor(true);\n+\n+      genTreeTop(node);\n+      }\n \n    if (!comp()->getOption(TR_DisableLiveMonitorMetadata))\n       {\ndiff --git a/runtime/compiler/optimizer/TreeLowering.cpp b/runtime/compiler/optimizer/TreeLowering.cpp\nindex 300d5a65957..b483f6ef120 100644\n--- a/runtime/compiler/optimizer/TreeLowering.cpp\n+++ b/runtime/compiler/optimizer/TreeLowering.cpp\n@@ -1536,6 +1536,60 @@ StoreArrayElementTransformer::lower(TR::Node* const node, TR::TreeTop* const tt)\n       }\n    }\n \n+class IsIdentityObjectTransformer: public TR::TreeLowering::Transformer\n+   {\n+   public:\n+   explicit IsIdentityObjectTransformer(TR::TreeLowering* opt)\n+      : TR::TreeLowering::Transformer(opt)\n+      {}\n+\n+   void lower(TR::Node* const node, TR::TreeTop* const tt);\n+   };\n+\n+\n+/**\n+ * @brief Perform lowering of calls to the <isIdentityObject> non-helper function\n+ *\n+ * A call like the following\n+ *\n+ * @verbatim\n+   n88n  icall  <isIdentityObject>\n+   n77n    aload  x\n+ * @endverbatim\n+ *\n+ * will be transformed into\n+ *\n+ * @verbatim\n+   n88n  PassThrough\n+   n99n    iand       // Test whether class is an identity class\n+   n98n      iloadi  <isClassFlags>\n+   n97n        aloadi  <vft-symbol>\n+   n77n          aload x\n+   n96n      iconst 0x80000\n+ * @endverbatim\n+ */\n+void\n+IsIdentityObjectTransformer::lower(TR::Node* const node, TR::TreeTop* const tt)\n+   {\n+   // If the argument to the call of the <isIdentityObject> non-helper is the\n+   // object of a NULLCHK, pull the NULLCHK into a separate tree before\n+   // transforming the call to <isIdentityObject>.  Otherwise, we'll end up\n+   // with the NULLCHK operating on something meaningless.\n+   //\n+   if (tt->getNode()->getOpCode().isNullCheck() && tt->getNode()->getFirstChild() == node)\n+      {\n+      J9::TransformUtil::separateNullCheck(comp(), tt, trace());\n+      }\n+\n+   TR::SymbolReference *vftSymRef = comp()->getSymRefTab()->findOrCreateVftSymbolRef();\n+   TR::Node *objNode = node->getFirstChild();\n+   TR::Node *vftNode = TR::Node::createWithSymRef(TR::aloadi, 1, 1, objNode, vftSymRef);\n+   TR::Node *testFlagsNode = comp()->fej9()->testIsClassIdentityType(vftNode);\n+   TR::Node::recreate(node, TR::PassThrough);\n+   objNode->decReferenceCount();\n+   node->setAndIncChild(0, testFlagsNode);\n+   }\n+\n /**\n  * @brief Perform lowering related to Valhalla value types\n  *\n@@ -1601,5 +1655,9 @@ TR::TreeLowering::lowerValueTypeOperations(TransformationManager& transformation\n             transformations.addTransformation(getTransformer<StoreArrayElementTransformer>(), node, tt);\n             }\n          }\n+      else if (symRefTab->isNonHelper(node->getSymbolReference(), TR::SymbolReferenceTable::isIdentityObjectNonHelperSymbol))\n+         {\n+         transformations.addTransformation(getTransformer<IsIdentityObjectTransformer>(), node, tt);\n+         }\n       }\n    }\ndiff --git a/runtime/compiler/runtime/Runtime.cpp b/runtime/compiler/runtime/Runtime.cpp\nindex 7f67fef5323..d68dd8f9405 100644\n--- a/runtime/compiler/runtime/Runtime.cpp\n+++ b/runtime/compiler/runtime/Runtime.cpp\n@@ -1052,12 +1052,12 @@ void initializeCodeRuntimeHelperTable(J9JITConfig *jitConfig, char isSMP)\n    SET(TR_newValueNoZeroInit,         (void *)jitNewValueNoZeroInit,     TR_CHelper);\n \n    SET(TR_getFlattenableField,        (void *)jitGetFlattenableField, TR_Helper);\n-   SET(TR_withFlattenableField,        (void *)jitWithFlattenableField, TR_Helper);\n+   SET(TR_withFlattenableField,       (void *)jitWithFlattenableField, TR_Helper);\n    SET(TR_putFlattenableField,        (void *)jitPutFlattenableField, TR_Helper);\n-   SET(TR_getFlattenableStaticField,        (void *)jitGetFlattenableStaticField, TR_Helper);\n-   SET(TR_putFlattenableStaticField,        (void *)jitPutFlattenableStaticField, TR_Helper);\n-   SET(TR_ldFlattenableArrayElement,        (void *)jitLoadFlattenableArrayElement, TR_Helper);\n-   SET(TR_strFlattenableArrayElement,        (void *)jitStoreFlattenableArrayElement, TR_Helper);\n+   SET(TR_getFlattenableStaticField,  (void *)jitGetFlattenableStaticField, TR_Helper);\n+   SET(TR_putFlattenableStaticField,  (void *)jitPutFlattenableStaticField, TR_Helper);\n+   SET(TR_ldFlattenableArrayElement,  (void *)jitLoadFlattenableArrayElement, TR_Helper);\n+   SET(TR_strFlattenableArrayElement, (void *)jitStoreFlattenableArrayElement, TR_Helper);\n \n    SET(TR_acmpeqHelper,               (void *)jitAcmpeqHelper, TR_Helper);\n    SET(TR_acmpneHelper,               (void *)jitAcmpneHelper, TR_Helper);\n@@ -1081,6 +1081,8 @@ void initializeCodeRuntimeHelperTable(J9JITConfig *jitConfig, char isSMP)\n    SET(TR_typeCheckArrayStore,        (void *)jitTypeCheckArrayStoreWithNullCheck,   TR_Helper);\n #endif\n \n+   SET(TR_identityException,          (void *)jitThrowIdentityException, TR_Helper);\n+\n #if defined(TR_HOST_X86) || defined(TR_HOST_POWER) || defined(TR_HOST_S390) || defined(TR_HOST_ARM64)\n    SET(TR_softwareReadBarrier,                              (void *)jitSoftwareReadBarrier,                         TR_Helper);\n #endif\ndiff --git a/runtime/compiler/runtime/asmprotos.h b/runtime/compiler/runtime/asmprotos.h\nindex d9de61e70aa..16b31fbbdf5 100644\n--- a/runtime/compiler/runtime/asmprotos.h\n+++ b/runtime/compiler/runtime/asmprotos.h\n@@ -143,6 +143,7 @@ JIT_HELPER(jitThrowCurrentException);  // asm calling-convention helper\n JIT_HELPER(jitThrowException);  // asm calling-convention helper\n JIT_HELPER(jitThrowUnreportedException);  // asm calling-convention helper\n JIT_HELPER(jitThrowExceptionInInitializerError);  // asm calling-convention helper\n+JIT_HELPER(jitThrowIdentityException);  // asm calling-convention helper\n JIT_HELPER(jitThrowInstantiationException);  // asm calling-convention helper\n JIT_HELPER(jitThrowNullPointerException);  // asm calling-convention helper\n JIT_HELPER(jitThrowWrongMethodTypeException);  // asm calling-convention helper\ndiff --git a/runtime/jilgen/jilconsts.c b/runtime/jilgen/jilconsts.c\nindex ce832f13aed..df685e30be4 100644\n--- a/runtime/jilgen/jilconsts.c\n+++ b/runtime/jilgen/jilconsts.c\n@@ -638,6 +638,7 @@ writeConstants(OMRPortLibrary *OMRPORTLIB, IDATA fd)\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowInstantiationException\", offsetof(J9JITConfig, old_slow_jitThrowInstantiationException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowNullPointerException\", offsetof(J9JITConfig, old_slow_jitThrowNullPointerException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowWrongMethodTypeException\", offsetof(J9JITConfig, old_slow_jitThrowWrongMethodTypeException)) |\n+\t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowIdentityException\", offsetof(J9JITConfig, old_slow_jitThrowIdentityException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_fast_jitTypeCheckArrayStoreWithNullCheck\", offsetof(J9JITConfig, old_fast_jitTypeCheckArrayStoreWithNullCheck)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitTypeCheckArrayStoreWithNullCheck\", offsetof(J9JITConfig, old_slow_jitTypeCheckArrayStoreWithNullCheck)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_fast_jitTypeCheckArrayStore\", offsetof(J9JITConfig, old_fast_jitTypeCheckArrayStore)) |\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 6c24b3f2b3f..e9af0e368a4 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -4107,6 +4107,7 @@ typedef struct J9JITConfig {\n \tvoid *old_slow_jitThrowInstantiationException;\n \tvoid *old_slow_jitThrowNullPointerException;\n \tvoid *old_slow_jitThrowWrongMethodTypeException;\n+\tvoid *old_slow_jitThrowIdentityException;\n \tvoid *old_fast_jitTypeCheckArrayStoreWithNullCheck;\n \tvoid *old_slow_jitTypeCheckArrayStoreWithNullCheck;\n \tvoid *old_fast_jitTypeCheckArrayStore;\n",
    "c363b26afeec17efc60ab87926144bfd4ac448ab": "diff --git a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\nindex 42b0616c304..ab06f91bd9c 100644\n--- a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n+++ b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n@@ -345,6 +345,8 @@\n    java_util_HashMap_getNode,\n    java_util_HashMap_getNode_Object,\n    java_util_HashMap_findNonNullKeyEntry,\n+   java_util_HashMap_hash,\n+   java_util_HashMap_put,\n    java_util_HashMap_putImpl,\n    java_util_HashMap_resize,\n    java_util_HashMap_prepareArray,\ndiff --git a/runtime/compiler/env/j9method.cpp b/runtime/compiler/env/j9method.cpp\nindex bd2bec98b8a..a77ccff06f8 100644\n--- a/runtime/compiler/env/j9method.cpp\n+++ b/runtime/compiler/env/j9method.cpp\n@@ -2183,6 +2183,8 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::java_util_HashMap_get,                   \"get\",           \"(Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_getNode,               \"getNode\",       \"(ILjava/lang/Object;)Ljava/util/HashMap$Node;\")},\n       {x(TR::java_util_HashMap_getNode_Object,        \"getNode\",       \"(Ljava/lang/Object;)Ljava/util/HashMap$Node;\")},\n+      {x(TR::java_util_HashMap_hash,                  \"hash\",          \"(Ljava/lang/Object;)I\")},\n+      {x(TR::java_util_HashMap_put,                   \"put\",           \"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_putImpl,               \"putImpl\",       \"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\")},\n       {x(TR::java_util_HashMap_findNonNullKeyEntry,   \"findNonNullKeyEntry\",         \"(Ljava/lang/Object;II)Ljava/util/HashMap$Entry;\")},\n       {x(TR::java_util_HashMap_resize,                \"resize\",         \"()[Ljava/util/HashMap$Node;\")},\ndiff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex dabd38724ad..fddae7d956c 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -267,7 +267,8 @@ TR_J9InlinerPolicy::determineInliningHeuristic(TR::ResolvedMethodSymbol *callerS\n    return;\n    }\n \n-void TR_MultipleCallTargetInliner::generateNodeEstimate::operator ()(TR_CallTarget *ct, TR::Compilation *comp)\n+void\n+TR_MultipleCallTargetInliner::NodeEstimate::operator ()(TR_CallTarget *ct, TR::Compilation *comp)\n    {\n    static const char *qq1 = feGetEnv(\"TR_NodeEstimateNumerator\");\n    static const uint32_t userNumer = ( qq1 ) ? atoi(qq1) : 1;\n@@ -3321,24 +3322,25 @@ TR_Inliner::optDetailString() const throw()\n    return \"O^O INLINER: \";\n    }\n \n-template <typename FunctObj>\n-void TR_MultipleCallTargetInliner::recursivelyWalkCallTargetAndPerformAction(TR_CallTarget *ct, FunctObj &action)\n+void\n+TR_MultipleCallTargetInliner::recursivelyWalkCallTargetAndGenerateNodeEstimate(TR_CallTarget *ct, NodeEstimate &estimate)\n    {\n \n-   debugTrace(tracer(),\"recursivelyWalkingCallTargetAndPerformAction: Considering Target %p. node estimate before = %d maxbcindex = %d\",ct,action.getNodeEstimate(),getPolicy()->getInitialBytecodeSize(ct->_calleeMethod, 0, comp()));\n+   debugTrace(tracer(),\"recursivelyWalkCallTargetAndGenerateNodeEstimate: Considering Target %p. node estimate before = %d maxbcindex = %d\",ct,estimate.getNodeEstimate(),getPolicy()->getInitialBytecodeSize(ct->_calleeMethod, 0, comp()));\n+\n+   if (canSkipCountingNodes(ct))\n+      return;\n \n-   action(ct,comp());\n+   estimate(ct,comp());\n \n    TR_CallSite *callsite = 0;\n    for(callsite = ct->_myCallees.getFirst() ; callsite ; callsite = callsite->getNext()   )\n       {\n       for (int32_t i = 0 ; i < callsite->numTargets() ; i++)\n          {\n-         recursivelyWalkCallTargetAndPerformAction(callsite->getTarget(i),action);\n+         recursivelyWalkCallTargetAndGenerateNodeEstimate(callsite->getTarget(i),estimate);\n          }\n       }\n-\n-\n    }\n \n int32_t\n@@ -3936,14 +3938,14 @@ bool TR_MultipleCallTargetInliner::inlineCallTargets(TR::ResolvedMethodSymbol *c\n       debugTrace(tracer(), \"Initially, estimatedNumberOfNodes = %d\\n\", estimatedNumberOfNodes);\n       for (calltarget = _callTargets.getFirst(); calltarget != callTargetToChop; prev = calltarget, calltarget = calltarget->getNext())\n          {\n-         generateNodeEstimate myEstimate;\n-         recursivelyWalkCallTargetAndPerformAction(calltarget, myEstimate);\n+         NodeEstimate myEstimate;\n+         recursivelyWalkCallTargetAndGenerateNodeEstimate(calltarget, myEstimate);\n          estimatedNumberOfNodes += myEstimate.getNodeEstimate();\n \n          if (comp()->trace(OMR::inlining))\n-            traceMsg(comp(), \"Estimated Number of Nodes is %d after calltarget %p\", estimatedNumberOfNodes,calltarget);\n+            traceMsg(comp(), \"Estimated Number of Nodes is %d after calltarget %p\\n\", estimatedNumberOfNodes,calltarget);\n \n-         debugTrace(tracer(),\"Estimated Number of Nodes is %d after calltarget %p\", estimatedNumberOfNodes,calltarget);\n+         debugTrace(tracer(),\"Estimated Number of Nodes is %d after calltarget %p\\n\", estimatedNumberOfNodes,calltarget);\n \n          float factor = 1.1F;          // this factor was chosen based on a study of a large WAS app that showed that getMaxBytecodeindex was 92% accurate compared to nodes generated\n \n@@ -4046,6 +4048,33 @@ bool TR_MultipleCallTargetInliner::inlineCallTargets(TR::ResolvedMethodSymbol *c\n    return anySuccess;\n    }\n \n+bool\n+TR_MultipleCallTargetInliner::canSkipCountingNodes(TR_CallTarget* callTarget)\n+   {\n+   TR::RecognizedMethod rm = callTarget->_calleeMethod->getRecognizedMethod();\n+   switch (rm)\n+      {\n+      case TR::java_lang_Object_hashCode:\n+         {\n+         if (callTarget->_myCallSite &&\n+               callTarget->_myCallSite->_ecsPrexArgInfo)\n+            {\n+            TR_PrexArgument* arg  = callTarget->_myCallSite->_ecsPrexArgInfo->get(0);\n+            if (arg && arg->getClass() && arg->classIsFixed() && arg->hasKnownObjectIndex())\n+               {\n+               if (comp()->trace(OMR::inlining))\n+                  traceMsg(comp(), \"Skipping node counting for sub call graph of java/lang/Object.hashCode()I\\n\");\n+               return true;\n+               }\n+            }\n+         }\n+         break;\n+      default:\n+         break;\n+      }\n+   return false;\n+   }\n+\n void TR_MultipleCallTargetInliner::weighCallSite( TR_CallStack * callStack , TR_CallSite *callsite, bool currentBlockHasExceptionSuccessors, bool dontAddCalls)\n    {\n    TR_J9InlinerPolicy *j9inlinerPolicy = (TR_J9InlinerPolicy *) getPolicy();\n@@ -4629,8 +4658,8 @@ void TR_MultipleCallTargetInliner::processChoppedOffCallTargets(TR_CallTarget *l\n          {\n          if (inlineSubCallGraph(calltarget))\n             {\n-            generateNodeEstimate myEstimate;\n-            recursivelyWalkCallTargetAndPerformAction(calltarget, myEstimate);\n+            NodeEstimate myEstimate;\n+            recursivelyWalkCallTargetAndGenerateNodeEstimate(calltarget, myEstimate);\n             estimatedNumberOfNodes += myEstimate.getNodeEstimate();\n             /*\n              * ForceInline targets and JSR292 methods should always be inlined regarless of budget. However, with\ndiff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex ca1cdf144be..7c0bc986ce4 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -748,6 +748,17 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             auto calleeMethod = (TR_ResolvedJ9Method*)calltarget->_calleeMethod;\n             resolvedMethod = calleeMethod->getResolvedPossiblyPrivateVirtualMethod(comp(), cpIndex, true, &isUnresolvedInCP);\n \n+            if (resolvedMethod)\n+               {\n+               TR::RecognizedMethod rm = resolvedMethod->getRecognizedMethod();\n+               if (rm == TR::java_util_HashMap_put ||\n+                   rm == TR::java_util_HashMap_get ||\n+                   rm == TR::java_lang_Object_hashCode)\n+                  {\n+                  nph.setNeedsPeekingToTrue();\n+                  heuristicTrace(tracer(), \"Depth %d: invokevirtual call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, tracer()->traceSignature(resolvedMethod));\n+                  }\n+               }\n             ///if (!resolvedMethod || isUnresolvedInCP || resolvedMethod->isCold(comp(), true))\n             if ((isUnresolvedInCP && !resolvedMethod) || (resolvedMethod\n                   && resolvedMethod->isCold(comp(), true)))\n@@ -824,6 +835,13 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             TR::Node *parent = 0;\n             TR::Node *callNode = 0;\n             TR::ResolvedMethodSymbol *resolvedSymbol = 0;\n+\n+            if (resolvedMethod &&\n+               resolvedMethod->getRecognizedMethod() == TR::java_util_HashMap_hash)\n+               {\n+               nph.setNeedsPeekingToTrue();\n+               heuristicTrace(tracer(), \"Depth %d: invokestatic call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, tracer()->traceSignature(resolvedMethod));\n+               }\n             if (!resolvedMethod || isUnresolvedInCP || resolvedMethod->isCold(comp(), false))\n                {\n                if (unresolvedSymbolsAreCold)\n@@ -846,21 +864,26 @@ TR_J9EstimateCodeSize::processBytecodeAndGenerateCFG(TR_CallTarget *calltarget,\n             flags[i].set(InterpreterEmulator::BytecodePropertyFlag::isUnsanitizeable);\n             break;\n          case J9BCinvokeinterface:\n-            cpIndex = bci.next2Bytes();\n-#if JAVA_SPEC_VERSION >= 21\n             {\n+            cpIndex = bci.next2Bytes();\n             TR::Method *meth = comp()->fej9()->createMethod(comp()->trMemory(), calltarget->_calleeMethod->containingClass(), cpIndex);\n             if (meth)\n                {\n                const char * sig = meth->signature(comp()->trMemory());\n-               if (sig && (!strncmp(sig, \"java/lang/foreign/MemorySegment.get\", 35) || !strncmp(sig, \"java/lang/foreign/MemorySegment.set\", 35) ))\n+               if (sig && (!strncmp(sig, \"java/util/Map.put\", 17) || !strncmp(sig, \"java/util/Map.get\", 17)))\n+                  {\n+                  nph.setNeedsPeekingToTrue();\n+                  heuristicTrace(tracer(), \"Depth %d: invokeinterface call at bc index %d has Signature %s, enabled peeking for caller to propagate prex arg info from caller.\", _recursionDepth, i, sig);\n+                  }\n+#if JAVA_SPEC_VERSION >= 21\n+               else if (sig && (!strncmp(sig, \"java/lang/foreign/MemorySegment.get\", 35) || !strncmp(sig, \"java/lang/foreign/MemorySegment.set\", 35) ))\n                   {\n                   nph.setNeedsPeekingToTrue();\n                   heuristicTrace(tracer(), \"Depth %d: invokeinterface call at bc index %d has Signature %s, enabled peeking for caller to fold layout field load necessary for VarHandle operation inlining.\", _recursionDepth, i, sig);\n                   }\n+#endif // JAVA_SPEC_VERSION >= 21\n                }\n             }\n-#endif // JAVA_SPEC_VERSION >= 21\n             flags[i].set(InterpreterEmulator::BytecodePropertyFlag::isUnsanitizeable);\n             break;\n          case J9BCgetfield:\ndiff --git a/runtime/compiler/optimizer/J9Inliner.hpp b/runtime/compiler/optimizer/J9Inliner.hpp\nindex 2f7970f15d0..c859c925bfb 100644\n--- a/runtime/compiler/optimizer/J9Inliner.hpp\n+++ b/runtime/compiler/optimizer/J9Inliner.hpp\n@@ -69,17 +69,12 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n    {\n    public:\n \n-      template <typename FunctObj>\n-      void recursivelyWalkCallTargetAndPerformAction(TR_CallTarget *ct, FunctObj &action);\n-\n-      //void generateNodeEstimate(TR_CallTarget *ct, TR::Compilation *comp);\n-\n-      class generateNodeEstimate\n+      struct NodeEstimate\n          {\n-         public:\n-            generateNodeEstimate() : _nodeEstimate(0){ }\n-            void operator()(TR_CallTarget *ct, TR::Compilation *comp);\n-            int32_t getNodeEstimate() { return _nodeEstimate; }\n+         NodeEstimate() : _nodeEstimate(0){ }\n+         void operator()(TR_CallTarget *ct, TR::Compilation *comp);\n+         int32_t getNodeEstimate() { return _nodeEstimate; }\n+\n          private:\n             int32_t _nodeEstimate;\n          };\n@@ -91,6 +86,16 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n \n       TR_LinkHead<TR_CallTarget> _callTargets; // This list only contains the call targets from top most level\n \n+      /*\n+       * \\brief Recursively walks call target and estimates the number of nodes of a call graph.\n+       *\n+       * \\param ct\n+       *    the TR_CallTarget to evaluate\n+       * \\param estimate\n+       *    the NodeEstimate to keep track of the number of nodes\n+       */\n+      void recursivelyWalkCallTargetAndGenerateNodeEstimate(TR_CallTarget *ct, NodeEstimate &estimate);\n+\n    protected:\n       virtual int32_t scaleSizeBasedOnBlockFrequency(int32_t bytecodeSize, int32_t frequency, int32_t borderFrequency, TR_ResolvedMethod * calleeResolvedMethod, TR::Node *callNode, int32_t coldBorderFrequency = 0);\n       float getScalingFactor(float factor);\n@@ -128,6 +133,20 @@ class TR_MultipleCallTargetInliner : public TR_InlinerBase\n        *    True if the given calltarget should be inlined\n        */\n       bool inlineSubCallGraph(TR_CallTarget* calltarget);\n+\n+      /*\n+       * \\brief\n+       *   For some call targets and their sub call graphs, it may be possible to simplify them into simple operations in\n+       *   certain situations, such as when known object info is being passed as arg. In such cases, the node count\n+       *   obtained via NodeEstimate would not truly reflect the number of nodes that are actually introduced. This\n+       *   function provides a mechanism for examining call targets and evaluating whether it is safe to skip counting nodes.\n+       *\n+       * \\param callTarget\n+       *    the call target to examine\n+       * \\return\n+       *    true if node counting can be skipped for callTarget, false otherwise\n+       */\n+      bool canSkipCountingNodes(TR_CallTarget* callTarget);\n    };\n \n class TR_J9InlinerUtil: public OMR_InlinerUtil\n",
    "c94546d9434d9d0116a024066ca2f11d65b11c1f": "diff --git a/jcl/src/java.base/share/classes/jdk/crac/Core.java b/jcl/src/java.base/share/classes/jdk/crac/Core.java\nindex 2b39cca9c86..16ae52921f6 100644\n--- a/jcl/src/java.base/share/classes/jdk/crac/Core.java\n+++ b/jcl/src/java.base/share/classes/jdk/crac/Core.java\n@@ -73,8 +73,8 @@ public static void checkpointRestore() throws CheckpointException, RestoreExcept\n class CRIUSupportContext<R extends Resource> extends Context<R> {\n \t// InternalCRIUSupport.getCRaCCheckpointToDir() is not null if\n \t// InternalCRIUSupport.isCRaCSupportEnabled() returns true before creating CRIUSupportContext<>().\n-\tprivate final InternalCRIUSupport internalCRIUSupport = new InternalCRIUSupport(\n-\t\t\tPaths.get(InternalCRIUSupport.getCRaCCheckpointToDir()))\n+\tprivate final InternalCRIUSupport internalCRIUSupport = InternalCRIUSupport.getInternalCRIUSupport()\n+\t\t\t.setImageDir(Paths.get(InternalCRIUSupport.getCRaCCheckpointToDir()))\n \t\t\t.setLeaveRunning(false)\n \t\t\t.setShellJob(true)\n \t\t\t.setTCPEstablished(true)\ndiff --git a/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java b/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\nindex dcbe72b65e3..11515af98fc 100644\n--- a/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\n+++ b/jcl/src/java.base/share/classes/openj9/internal/criu/InternalCRIUSupport.java\n@@ -86,6 +86,55 @@ public final class InternalCRIUSupport {\n \tprivate static native String getCRaCCheckpointToDirImpl();\n /*[ENDIF] CRAC_SUPPORT */\n \n+\t/**\n+\t * A singleton {@code InternalCRIUSupport} instance.\n+\t *\n+\t * The default CRIU dump options are:\n+\t * <p>\n+\t * {@code imageDir} = CWD, current Java process working directory.\n+\t * <p>\n+\t * {@code leaveRunning} = false\n+\t * <p>\n+\t * {@code shellJob} = false\n+\t * <p>\n+\t * {@code extUnixSupport} = false\n+\t * <p>\n+\t * {@code logLevel} = 2\n+\t * <p>\n+\t * {@code logFile} = criu.log\n+\t * <p>\n+\t * {@code fileLocks} = false\n+\t * <p>\n+\t * {@code ghostFileLimit} = 1 MB\n+\t * <p>\n+\t * {@code workDir} = imageDir, the directory where the images are to be created.\n+\t */\n+\tprivate static final InternalCRIUSupport singletonInternalCRIUSupport = new InternalCRIUSupport();\n+\n+\t// no public construtors\n+\tprivate InternalCRIUSupport() {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tSecurityManager manager = System.getSecurityManager();\n+\t\tif (manager != null) {\n+\t\t\tmanager.checkPermission(CRIU_DUMP_PERMISSION);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t\t// use current working directory\n+\t\tsetImageDir(java.nio.file.FileSystems.getDefault().getPath(\"\").toAbsolutePath());\n+\t}\n+\n+\t/**\n+\t * Returns the singleton InternalCRIUSupport object.\n+\t *\n+\t * Most methods of class {@code InternalCRIUSupport} are instance methods and\n+\t * must be invoked via this object.\n+\t *\n+\t * @return the singleton {@code InternalCRIUSupport} object\n+\t */\n+\tpublic static InternalCRIUSupport getInternalCRIUSupport() {\n+\t\treturn singletonInternalCRIUSupport;\n+\t}\n+\n \t/**\n \t * Retrieve the elapsed time between Checkpoint and Restore.\n \t * Only support one Checkpoint.\n@@ -299,47 +348,6 @@ private static void init() {\n \t\t}\n \t}\n \n-\t/**\n-\t * Constructs a new {@code InternalCRIUSupport}.\n-\t *\n-\t * The default CRIU dump options are:\n-\t * <p>\n-\t * {@code imageDir} = imageDir, the directory where the images are to be\n-\t * created.\n-\t * <p>\n-\t * {@code leaveRunning} = false\n-\t * <p>\n-\t * {@code shellJob} = false\n-\t * <p>\n-\t * {@code extUnixSupport} = false\n-\t * <p>\n-\t * {@code logLevel} = 2\n-\t * <p>\n-\t * {@code logFile} = criu.log\n-\t * <p>\n-\t * {@code fileLocks} = false\n-\t * <p>\n-\t * {@code workDir} = imageDir, the directory where the images are to be created.\n-\t *\n-\t * @param imageDir the directory that will hold the dump files as a\n-\t *                 java.nio.file.Path\n-\t * @throws NullPointerException     if imageDir is null\n-\t/*[IF JAVA_SPEC_VERSION < 24]\n-\t * @throws SecurityException        if no permission to access imageDir or no\n-\t *                                  CRIU_DUMP_PERMISSION\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 24\n-\t * @throws IllegalArgumentException if imageDir is not a valid directory\n-\t */\n-\tpublic InternalCRIUSupport(Path imageDir) {\n-\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n-\t\tSecurityManager manager = System.getSecurityManager();\n-\t\tif (manager != null) {\n-\t\t\tmanager.checkPermission(CRIU_DUMP_PERMISSION);\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n-\t\tsetImageDir(imageDir);\n-\t}\n-\n \t/**\n \t * Queries if the criu library has been loaded.\n \t *\ndiff --git a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\nindex de9ce7c2b87..559f54cada8 100644\n--- a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n+++ b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n@@ -54,15 +54,12 @@ public static enum HookMode {\n \t\tCONCURRENT_MODE\n \t}\n \n-\tprivate InternalCRIUSupport internalCRIUSupport;\n-\n \t/**\n-\t * Constructs a new {@code CRIUSupport}.\n+\t * A singleton {@code CRIUSupport} instance.\n \t *\n \t * The default CRIU dump options are:\n \t * <p>\n-\t * {@code imageDir} = imageDir, the directory where the images are to be\n-\t * created.\n+\t * {@code imageDir} = CWD, current Java process working directory.\n \t * <p>\n \t * {@code leaveRunning} = false\n \t * <p>\n@@ -79,6 +76,30 @@ public static enum HookMode {\n \t * {@code ghostFileLimit} = 1 MB\n \t * <p>\n \t * {@code workDir} = imageDir, the directory where the images are to be created.\n+\t */\n+\tprivate static final CRIUSupport singletonCRIUSupport = new CRIUSupport();\n+\n+\tprivate static final InternalCRIUSupport singletonInternalCRIUSupport = InternalCRIUSupport\n+\t\t\t.getInternalCRIUSupport();\n+\n+\t// no public construtors\n+\tprivate CRIUSupport() {\n+\t}\n+\n+\t/**\n+\t * Returns the singleton CRIUSupport object.\n+\t *\n+\t * Most methods of class {@code CRIUSupport} are instance methods and must be\n+\t * invoked via this object.\n+\t *\n+\t * @return the singleton {@code CRIUSupport} object\n+\t */\n+\tpublic static CRIUSupport getCRIUSupport() {\n+\t\treturn singletonCRIUSupport;\n+\t}\n+\n+\t/**\n+\t * Constructs a new {@code CRIUSupport}.\n \t *\n \t * @param imageDir the directory that will hold the dump files as a\n \t *                 java.nio.file.Path\n@@ -89,8 +110,9 @@ public static enum HookMode {\n \t/*[ENDIF] JAVA_SPEC_VERSION < 24\n \t * @throws IllegalArgumentException if imageDir is not a valid directory\n \t */\n+\t@Deprecated(forRemoval=true)\n \tpublic CRIUSupport(Path imageDir) {\n-\t\tinternalCRIUSupport = new InternalCRIUSupport(imageDir);\n+\t\tSystem.err.println(\"WARNING: CRIUSupport(imageDir) constructor is deprecated, please use CRIUSupport.getCRIUSupport() and setImageDir(imageDir)\"); //$NON-NLS-1$\n \t}\n \n \t/**\n@@ -146,7 +168,7 @@ public static String getErrorMessage() {\n \t * @throws IllegalArgumentException if imageDir is not a valid directory\n \t */\n \tpublic CRIUSupport setImageDir(Path imageDir) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setImageDir(imageDir);\n+\t\tsingletonInternalCRIUSupport.setImageDir(imageDir);\n \t\treturn this;\n \t}\n \n@@ -159,7 +181,7 @@ public CRIUSupport setImageDir(Path imageDir) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setLeaveRunning(boolean leaveRunning) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLeaveRunning(leaveRunning);\n+\t\tsingletonInternalCRIUSupport.setLeaveRunning(leaveRunning);\n \t\treturn this;\n \t}\n \n@@ -172,7 +194,7 @@ public CRIUSupport setLeaveRunning(boolean leaveRunning) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setShellJob(boolean shellJob) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setShellJob(shellJob);\n+\t\tsingletonInternalCRIUSupport.setShellJob(shellJob);\n \t\treturn this;\n \t}\n \n@@ -185,7 +207,7 @@ public CRIUSupport setShellJob(boolean shellJob) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setExtUnixSupport(boolean extUnixSupport) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setExtUnixSupport(extUnixSupport);\n+\t\tsingletonInternalCRIUSupport.setExtUnixSupport(extUnixSupport);\n \t\treturn this;\n \t}\n \n@@ -205,7 +227,7 @@ public CRIUSupport setExtUnixSupport(boolean extUnixSupport) {\n \t * @throws IllegalArgumentException if logLevel is not valid\n \t */\n \tpublic CRIUSupport setLogLevel(int logLevel) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLogLevel(logLevel);\n+\t\tsingletonInternalCRIUSupport.setLogLevel(logLevel);\n \t\treturn this;\n \t}\n \n@@ -220,7 +242,7 @@ public CRIUSupport setLogLevel(int logLevel) {\n \t * @throws IllegalArgumentException if logFile is null or a path\n \t */\n \tpublic CRIUSupport setLogFile(String logFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setLogFile(logFile);\n+\t\tsingletonInternalCRIUSupport.setLogFile(logFile);\n \t\treturn this;\n \t}\n \n@@ -233,7 +255,7 @@ public CRIUSupport setLogFile(String logFile) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setFileLocks(boolean fileLocks) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setFileLocks(fileLocks);\n+\t\tsingletonInternalCRIUSupport.setFileLocks(fileLocks);\n \t\treturn this;\n \t}\n \n@@ -246,7 +268,7 @@ public CRIUSupport setFileLocks(boolean fileLocks) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPEstablished(boolean tcpEstablished) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPEstablished(tcpEstablished);\n+\t\tsingletonInternalCRIUSupport.setTCPEstablished(tcpEstablished);\n \t\treturn this;\n \t}\n \n@@ -259,7 +281,7 @@ public CRIUSupport setTCPEstablished(boolean tcpEstablished) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setAutoDedup(boolean autoDedup) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setAutoDedup(autoDedup);\n+\t\tsingletonInternalCRIUSupport.setAutoDedup(autoDedup);\n \t\treturn this;\n \t}\n \n@@ -272,7 +294,7 @@ public CRIUSupport setAutoDedup(boolean autoDedup) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTrackMemory(boolean trackMemory) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTrackMemory(trackMemory);\n+\t\tsingletonInternalCRIUSupport.setTrackMemory(trackMemory);\n \t\treturn this;\n \t}\n \n@@ -290,7 +312,7 @@ public CRIUSupport setTrackMemory(boolean trackMemory) {\n \t * @throws IllegalArgumentException if workDir is not a valid directory\n \t */\n \tpublic CRIUSupport setWorkDir(Path workDir) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setWorkDir(workDir);\n+\t\tsingletonInternalCRIUSupport.setWorkDir(workDir);\n \t\treturn this;\n \t}\n \n@@ -303,7 +325,7 @@ public CRIUSupport setWorkDir(Path workDir) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setUnprivileged(boolean unprivileged) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setUnprivileged(unprivileged);\n+\t\tsingletonInternalCRIUSupport.setUnprivileged(unprivileged);\n \t\treturn this;\n \t}\n \n@@ -318,7 +340,7 @@ public CRIUSupport setUnprivileged(boolean unprivileged) {\n \t * @throws UnsupportedOperationException if file limit is greater than 2^32 - 1 or negative.\n \t */\n \tpublic CRIUSupport setGhostFileLimit(long limit) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setGhostFileLimit(limit);\n+\t\tsingletonInternalCRIUSupport.setGhostFileLimit(limit);\n \t\treturn this;\n \t}\n \n@@ -331,7 +353,7 @@ public CRIUSupport setGhostFileLimit(long limit) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPClose(boolean tcpClose) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPClose(tcpClose);\n+\t\tsingletonInternalCRIUSupport.setTCPClose(tcpClose);\n \t\treturn this;\n \t}\n \n@@ -344,7 +366,7 @@ public CRIUSupport setTCPClose(boolean tcpClose) {\n \t * @return this\n \t */\n \tpublic CRIUSupport setTCPSkipInFlight(boolean tcpSkipInFlight) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.setTCPSkipInFlight(tcpSkipInFlight);\n+\t\tsingletonInternalCRIUSupport.setTCPSkipInFlight(tcpSkipInFlight);\n \t\treturn this;\n \t}\n \n@@ -365,7 +387,7 @@ public CRIUSupport setTCPSkipInFlight(boolean tcpSkipInFlight) {\n \t * @return this\n \t */\n \tpublic CRIUSupport registerRestoreEnvFile(Path envFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.registerRestoreEnvFile(envFile);\n+\t\tsingletonInternalCRIUSupport.registerRestoreEnvFile(envFile);\n \t\treturn this;\n \t}\n \n@@ -381,7 +403,7 @@ public CRIUSupport registerRestoreEnvFile(Path envFile) {\n \t * @return this\n \t */\n \tpublic CRIUSupport registerRestoreOptionsFile(Path optionsFile) {\n-\t\tinternalCRIUSupport = internalCRIUSupport.registerRestoreOptionsFile(optionsFile);\n+\t\tsingletonInternalCRIUSupport.registerRestoreOptionsFile(optionsFile);\n \t\treturn this;\n \t}\n \n@@ -402,7 +424,7 @@ public CRIUSupport registerRestoreOptionsFile(Path optionsFile) {\n \t */\n \tpublic CRIUSupport registerPostRestoreHook(Runnable hook) {\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPostRestoreHook(hook);\n+\t\t\tsingletonInternalCRIUSupport.registerPostRestoreHook(hook);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -455,7 +477,7 @@ public CRIUSupport registerPostRestoreHook(Runnable hook, HookMode mode, int pri\n \t\t\tinternalMode = InternalCRIUSupport.HookMode.CONCURRENT_MODE;\n \t\t}\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPostRestoreHook(hook, internalMode, priority);\n+\t\t\tsingletonInternalCRIUSupport.registerPostRestoreHook(hook, internalMode, priority);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -482,7 +504,7 @@ public CRIUSupport registerPostRestoreHook(Runnable hook, HookMode mode, int pri\n \t */\n \tpublic CRIUSupport registerPreCheckpointHook(Runnable hook) {\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPreCheckpointHook(hook);\n+\t\t\tsingletonInternalCRIUSupport.registerPreCheckpointHook(hook);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -535,7 +557,7 @@ public CRIUSupport registerPreCheckpointHook(Runnable hook, HookMode mode, int p\n \t\t\tinternalMode = InternalCRIUSupport.HookMode.CONCURRENT_MODE;\n \t\t}\n \t\ttry {\n-\t\t\tinternalCRIUSupport = internalCRIUSupport.registerPreCheckpointHook(hook, internalMode, priority);\n+\t\t\tsingletonInternalCRIUSupport.registerPreCheckpointHook(hook, internalMode, priority);\n \t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\n@@ -559,7 +581,7 @@ public CRIUSupport registerPreCheckpointHook(Runnable hook, HookMode mode, int p\n \tpublic synchronized void checkpointJVM() {\n \t\tif (isCRIUSupportEnabled()) {\n \t\t\ttry {\n-\t\t\t\tinternalCRIUSupport.checkpointJVM();\n+\t\t\t\tsingletonInternalCRIUSupport.checkpointJVM();\n \t\t\t} catch (openj9.internal.criu.JVMCheckpointException jce) {\n \t\t\t\tthrow new JVMCheckpointException(jce.getMessage(), 0, jce);\n \t\t\t} catch (openj9.internal.criu.JVMRestoreException jre) {\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\nindex 061175d6e21..5ff71a69349 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/CRIUTestUtils.java\n@@ -86,7 +86,7 @@ public static void checkPointJVM(CRIUSupport criu, Path path, boolean deleteDir)\n \t\t\tcreateCheckpointDirectory(path);\n \t\t\ttry {\n \t\t\t\tif (criu == null) {\n-\t\t\t\t\tcriu = new CRIUSupport(path);\n+\t\t\t\t\tcriu = CRIUSupport.getCRIUSupport().setImageDir(path);\n \t\t\t\t}\n \t\t\t\tshowThreadCurrentTime(\"Performing CRIUSupport.checkpointJVM()\");\n \t\t\t\tcriu.setLogLevel(4).setLeaveRunning(false).setShellJob(true).setFileLocks(true).checkpointJVM();\n@@ -108,7 +108,7 @@ public static CRIUSupport prepareCheckPointJVM(Path path) {\n \t\tif (CRIUSupport.isCRIUSupportEnabled()) {\n \t\t\tdeleteCheckpointDirectory(path);\n \t\t\tcreateCheckpointDirectory(path);\n-\t\t\treturn (new CRIUSupport(path)).setLeaveRunning(false).setShellJob(true).setFileLocks(true);\n+\t\t\treturn CRIUSupport.getCRIUSupport().setImageDir(path).setLeaveRunning(false).setShellJob(true).setFileLocks(true);\n \t\t} else {\n \t\t\tthrow new RuntimeException(\"CRIU is not enabled\");\n \t\t}\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\nindex 08f4078cd8a..275de6ee1af 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/DeadlockTest.java\n@@ -92,8 +92,7 @@ public static void checkpointDeadlock() {\n \n \t\tt1.start();\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n-\t\tcriuSupport.registerPreCheckpointHook(() -> {\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path).registerPreCheckpointHook(() -> {\n \t\t\tsynchronized (lock) {\n \t\t\t\tCRIUTestUtils.showThreadCurrentTime(\"Precheckpoint hook inside monitor with testResult.lockStatus = \"\n \t\t\t\t\t\t+ testResult.lockStatus.get());\n@@ -178,7 +177,7 @@ public static void notCheckpointSafeDeadlock() {\n \n \t\tt1.start();\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path);\n \n \t\twhile (testResult.lockStatus.get() == 0) {\n \t\t\tThread.yield();\n@@ -243,8 +242,7 @@ public static void methodTypeDeadlockTest() {\n \t\tbyte[] bytes = getClassBytesFromResource(A.class);\n \t\tClass clazz = unsafe.defineClass(A.class.getName(), bytes, 0, bytes.length, loader, null);\n \n-\t\tCRIUSupport criuSupport = new CRIUSupport(path);\n-\t\tcriuSupport.registerPreCheckpointHook(()->{\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(path).registerPreCheckpointHook(() -> {\n \t\t\tMethodType type = MethodType.methodType(clazz);\n \t\t});\n \ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\nindex 79982470b9a..bf29ae8af7e 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/EnvVarFileTest.java\n@@ -98,8 +98,8 @@ static void envVarFileTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -124,8 +124,8 @@ static void envVarFileTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.setProperty(\"prop1\", \"val1\");\n \t\tSystem.setProperty(\"prop2\", \"val2\");\n@@ -154,8 +154,8 @@ static void envVarFileTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -180,8 +180,8 @@ static void envVarFileTest4() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -197,8 +197,8 @@ static void envVarFileTest5() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -211,8 +211,8 @@ static void envVarFileTest6() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -225,8 +225,8 @@ static void envVarFileTest7() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -241,8 +241,8 @@ static void envVarFileTest8() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -256,8 +256,8 @@ static void envVarFileTest9() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -286,8 +286,8 @@ static void envVarFileTest10() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -303,8 +303,8 @@ static void envVarFileTest11() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -329,8 +329,8 @@ static void envVarFileTest12() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -355,8 +355,8 @@ static void envVarFileTest13() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -370,8 +370,8 @@ static void envVarFileTest14() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -385,8 +385,8 @@ static void envVarFileTest15() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -399,8 +399,8 @@ static void envVarFileTest16() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -413,8 +413,8 @@ static void envVarFileTest17() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreEnvFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreEnvFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\nindex 55ca614247d..26484298d43 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/OptionsFileTest.java\n@@ -86,8 +86,8 @@ static void propertiesTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -112,8 +112,8 @@ static void propertiesTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.setProperty(\"prop1\", \"val1\");\n \t\tSystem.setProperty(\"prop2\", \"val2\");\n@@ -142,8 +142,8 @@ static void propertiesTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -168,8 +168,8 @@ static void propertiesTest4() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -189,8 +189,8 @@ static void traceOptionsTest1() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -211,8 +211,8 @@ static void traceOptionsTest2() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -231,8 +231,8 @@ static void traceOptionsTest3() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -246,8 +246,8 @@ static void dumpOptionsTest() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -262,7 +262,7 @@ static void dumpOptionsTest() {\n \tstatic void criuDumpOptionsTest() {\n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -275,8 +275,8 @@ static void criuRestoreDumpOptionsTest() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -291,8 +291,8 @@ static void dumpOptionsTestRequireDynamic() {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -320,8 +320,8 @@ static void jitOptionsTest(String[] args) {\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\n@@ -341,8 +341,8 @@ static void testTransitionToDebugInterpreterViaXXDebugInterpreterWithOptionsFile\n \n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\nindex 2d5590ca967..c447ee6d59d 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/SoftmxTest.java\n@@ -96,8 +96,8 @@ else if (3 == percent_type) {\n \t\tPath optionsFilePath = CRIUTestUtils.createOptionsFile(\"options\", optionsContents);\n \t\tPath imagePath = Paths.get(\"cpData\");\n \t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\tCRIUSupport criuSupport = new CRIUSupport(imagePath);\n-\t\tcriuSupport.registerRestoreOptionsFile(optionsFilePath);\n+\t\tCRIUSupport criuSupport = CRIUSupport.getCRIUSupport().setImageDir(imagePath)\n+\t\t\t\t.registerRestoreOptionsFile(optionsFilePath);\n \n \t\tSystem.out.println(\"Pre-checkpoint\");\n \t\tCRIUTestUtils.checkPointJVM(criuSupport, imagePath, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\nindex 4b19146081a..4a295eb8165 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestCRIUFailurePath.java\n@@ -52,7 +52,7 @@ private static void badDir() throws Throwable {\n \t\tPath path = Paths.get(\"badDir\");\n \t\tpath.toFile().mkdir();\n \t\tFiles.setPosixFilePermissions(path, PosixFilePermissions.fromString(\"r--r--r--\"));\n-\t\tCRIUSupport criu = new CRIUSupport(path);\n+\t\tCRIUSupport criu = CRIUSupport.getCRIUSupport().setImageDir(path);\n \n \t\ttry {\n \t\t\tCRIUTestUtils.checkPointJVMNoSetup(criu, path, true);\ndiff --git a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\nindex dd9d2406345..4407a667360 100644\n--- a/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\n+++ b/test/functional/cmdLineTests/criu/src/org/openj9/criu/TestDelayedOperations.java\n@@ -38,7 +38,7 @@ private void testDelayedThreadInterrupt() {\n \t\t\tPath imagePath = Paths.get(\"cpData\");\n \t\t\tCRIUTestUtils.deleteCheckpointDirectory(imagePath);\n \t\t\tCRIUTestUtils.createCheckpointDirectory(imagePath);\n-\t\t\tCRIUSupport criu = new CRIUSupport(imagePath);\n+\t\t\tCRIUSupport criu = CRIUSupport.getCRIUSupport().setImageDir(imagePath);\n \t\t\tfinal Thread currentThread = Thread.currentThread();\n \t\t\tCRIUTestUtils.showThreadCurrentTime(\n \t\t\t\t\t\"currentThread : \" + currentThread + \" with name : \" + currentThread.getName());\n",
    "59def09e71ea3162269f58ea58f56ce7598ee154": "diff --git a/runtime/gc_base/GCExtensions.hpp b/runtime/gc_base/GCExtensions.hpp\nindex fd0ad74d53e..d2013f609b3 100644\n--- a/runtime/gc_base/GCExtensions.hpp\n+++ b/runtime/gc_base/GCExtensions.hpp\n@@ -201,6 +201,8 @@ class MM_GCExtensions : public MM_GCExtensionsBase {\n \n \tbool tlhMaximumSizeSpecified; /**< true, if tlhMaximumSize specified by a command line option */\n \n+\tMM_UserSpecifiedParameterBool virtualLargeObjectHeap; /**< off heap option */\n+\n \tbool dynamicHeapAdjustmentForRestore; /**< If set to true, the default heuristic-calculated softmx is prioritized over the user-specified values. */\n \t/**\n \t * Values for com.ibm.oti.vm.VM.J9_JIT_STRING_DEDUP_POLICY\n@@ -427,6 +429,7 @@ class MM_GCExtensions : public MM_GCExtensionsBase {\n \t\t, numaCommonThreadClassNamePatterns(NULL)\n \t\t, userSpecifiedParameters()\n \t\t, tlhMaximumSizeSpecified(false)\n+\t\t, virtualLargeObjectHeap()\n \t\t, dynamicHeapAdjustmentForRestore(false)\n \t\t, stringDedupPolicy(J9_JIT_STRING_DEDUP_POLICY_UNDEFINED)\n \t\t, _asyncCallbackKey(-1)\ndiff --git a/runtime/gc_modron_startup/mmparseXXgc.cpp b/runtime/gc_modron_startup/mmparseXXgc.cpp\nindex 069820bef05..933076d2884 100644\n--- a/runtime/gc_modron_startup/mmparseXXgc.cpp\n+++ b/runtime/gc_modron_startup/mmparseXXgc.cpp\n@@ -1072,12 +1072,14 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n \t\tif (try_scan(&scan_start, \"enableVirtualLargeObjectHeap\")) {\n-\t\t\textensions->isVirtualLargeObjectHeapRequested = true;\n+\t\t\textensions->virtualLargeObjectHeap._wasSpecified = true;\n+\t\t\textensions->virtualLargeObjectHeap._valueSpecified = true;\n \t\t\tcontinue;\n \t\t}\n \n \t\tif (try_scan(&scan_start, \"disableVirtualLargeObjectHeap\")) {\n-\t\t\textensions->isVirtualLargeObjectHeapRequested = false;\n+\t\t\textensions->virtualLargeObjectHeap._wasSpecified = true;\n+\t\t\textensions->virtualLargeObjectHeap._valueSpecified = false;\n \t\t\tcontinue;\n \t\t}\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\ndiff --git a/runtime/gc_realtime/ConfigurationRealtime.cpp b/runtime/gc_realtime/ConfigurationRealtime.cpp\nindex 04e43cc8042..235dbea3573 100644\n--- a/runtime/gc_realtime/ConfigurationRealtime.cpp\n+++ b/runtime/gc_realtime/ConfigurationRealtime.cpp\n@@ -32,8 +32,8 @@\n #include \"ConfigurationRealtime.hpp\"\n \n #include \"EnvironmentRealtime.hpp\"\n+#include \"GCExtensions.hpp\"\n #include \"GlobalAllocationManagerRealtime.hpp\"\n-#include \"GCExtensionsBase.hpp\"\n #include \"HeapVirtualMemory.hpp\"\n #include \"HeapRegionDescriptorRealtime.hpp\"\n #include \"HeapRegionManagerTarok.hpp\"\n@@ -107,7 +107,7 @@ MM_ConfigurationRealtime::tearDown(MM_EnvironmentBase* env)\n MM_Heap *\n MM_ConfigurationRealtime::createHeapWithManager(MM_EnvironmentBase *env, uintptr_t heapBytesRequested, MM_HeapRegionManager *regionManager)\n {\n-\tMM_GCExtensionsBase *extensions = env->getExtensions();\n+\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n #if defined(J9VM_ENV_DATA64)\n \tJ9JavaVM *vm = (J9JavaVM *)extensions->getOmrVM()->_language_vm;\n \t/* Let VM know that Metronome GC has discontiguous indexable object (arraylet layout) */\n@@ -116,7 +116,7 @@ MM_ConfigurationRealtime::createHeapWithManager(MM_EnvironmentBase *env, uintptr\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n \tPORT_ACCESS_FROM_ENVIRONMENT(env);\n \n-\tif (extensions->isVirtualLargeObjectHeapRequested) {\n+\tif (extensions->virtualLargeObjectHeap._wasSpecified && extensions->virtualLargeObjectHeap._valueSpecified) {\n \t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_GC_OPTIONS_VIRTUAL_LARGE_OBJECT_HEAP_NOT_SUPPORTED_WARN, \"metronome\");\n \t}\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\ndiff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 8a2c98df5f5..60d09a78b61 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -98,6 +98,9 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \tif (NULL == heap) {\n \t\treturn NULL;\n \t}\n+#if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n+\t/* set off-heap disabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = false;\n \n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/* Enable double mapping if glibc version 2.27 or newer is found. For double map to\n@@ -113,7 +116,7 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t * also need to check if region size is a bigger or equal to multiple of page size.\n \t *\n \t */\n-\tif (!extensions->isVirtualLargeObjectHeapRequested && extensions->isArrayletDoubleMapRequested && extensions->isArrayletDoubleMapAvailable) {\n+\tif (!extensions->isVirtualLargeObjectHeapEnabled && extensions->isArrayletDoubleMapRequested && extensions->isArrayletDoubleMapAvailable) {\n \t\tuintptr_t pagesize = heap->getPageSize();\n \t\tif (!extensions->memoryManager->isLargePage(env, pagesize) || (pagesize <= extensions->getOmrVM()->_arrayletLeafSize)) {\n \t\t\textensions->indexableObjectModel.setEnableDoubleMapping(true);\n@@ -164,13 +167,12 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t */\n \tvm->indexableObjectLayout = J9IndexableObjectLayout_DataAddr_Arraylet;\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\tif (extensions->isVirtualLargeObjectHeapRequested) {\n+\tif (extensions->isVirtualLargeObjectHeapEnabled) {\n \t\t/* Create off-heap */\n \t\tMM_SparseVirtualMemory *largeObjectVirtualMemory = MM_SparseVirtualMemory::newInstance(env, OMRMEM_CATEGORY_MM_RUNTIME_HEAP, heap);\n \t\tif (NULL != largeObjectVirtualMemory) {\n \t\t\textensions->largeObjectVirtualMemory = largeObjectVirtualMemory;\n \t\t\textensions->indexableObjectModel.setEnableVirtualLargeObjectHeap(true);\n-\t\t\textensions->isVirtualLargeObjectHeapEnabled = true;\n \t\t\t/* Overriding the original assumption that Balanced has arraylets. */\n \t\t\tvm->indexableObjectLayout = J9IndexableObjectLayout_DataAddr_NoArraylet;\n \t\t\t/* reset vm->unsafeIndexableHeaderSize for off-heap case */\n",
    "2fee7aa1fc3bec169db3e3376dfb199d099459d3": "diff --git a/runtime/gc_base/GCExtensions.hpp b/runtime/gc_base/GCExtensions.hpp\nindex fd0ad74d53e..d2013f609b3 100644\n--- a/runtime/gc_base/GCExtensions.hpp\n+++ b/runtime/gc_base/GCExtensions.hpp\n@@ -201,6 +201,8 @@ class MM_GCExtensions : public MM_GCExtensionsBase {\n \n \tbool tlhMaximumSizeSpecified; /**< true, if tlhMaximumSize specified by a command line option */\n \n+\tMM_UserSpecifiedParameterBool virtualLargeObjectHeap; /**< off heap option */\n+\n \tbool dynamicHeapAdjustmentForRestore; /**< If set to true, the default heuristic-calculated softmx is prioritized over the user-specified values. */\n \t/**\n \t * Values for com.ibm.oti.vm.VM.J9_JIT_STRING_DEDUP_POLICY\n@@ -427,6 +429,7 @@ class MM_GCExtensions : public MM_GCExtensionsBase {\n \t\t, numaCommonThreadClassNamePatterns(NULL)\n \t\t, userSpecifiedParameters()\n \t\t, tlhMaximumSizeSpecified(false)\n+\t\t, virtualLargeObjectHeap()\n \t\t, dynamicHeapAdjustmentForRestore(false)\n \t\t, stringDedupPolicy(J9_JIT_STRING_DEDUP_POLICY_UNDEFINED)\n \t\t, _asyncCallbackKey(-1)\ndiff --git a/runtime/gc_modron_startup/mmparseXXgc.cpp b/runtime/gc_modron_startup/mmparseXXgc.cpp\nindex 069820bef05..933076d2884 100644\n--- a/runtime/gc_modron_startup/mmparseXXgc.cpp\n+++ b/runtime/gc_modron_startup/mmparseXXgc.cpp\n@@ -1072,12 +1072,14 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n \t\tif (try_scan(&scan_start, \"enableVirtualLargeObjectHeap\")) {\n-\t\t\textensions->isVirtualLargeObjectHeapRequested = true;\n+\t\t\textensions->virtualLargeObjectHeap._wasSpecified = true;\n+\t\t\textensions->virtualLargeObjectHeap._valueSpecified = true;\n \t\t\tcontinue;\n \t\t}\n \n \t\tif (try_scan(&scan_start, \"disableVirtualLargeObjectHeap\")) {\n-\t\t\textensions->isVirtualLargeObjectHeapRequested = false;\n+\t\t\textensions->virtualLargeObjectHeap._wasSpecified = true;\n+\t\t\textensions->virtualLargeObjectHeap._valueSpecified = false;\n \t\t\tcontinue;\n \t\t}\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\ndiff --git a/runtime/gc_realtime/ConfigurationRealtime.cpp b/runtime/gc_realtime/ConfigurationRealtime.cpp\nindex 04e43cc8042..235dbea3573 100644\n--- a/runtime/gc_realtime/ConfigurationRealtime.cpp\n+++ b/runtime/gc_realtime/ConfigurationRealtime.cpp\n@@ -32,8 +32,8 @@\n #include \"ConfigurationRealtime.hpp\"\n \n #include \"EnvironmentRealtime.hpp\"\n+#include \"GCExtensions.hpp\"\n #include \"GlobalAllocationManagerRealtime.hpp\"\n-#include \"GCExtensionsBase.hpp\"\n #include \"HeapVirtualMemory.hpp\"\n #include \"HeapRegionDescriptorRealtime.hpp\"\n #include \"HeapRegionManagerTarok.hpp\"\n@@ -107,7 +107,7 @@ MM_ConfigurationRealtime::tearDown(MM_EnvironmentBase* env)\n MM_Heap *\n MM_ConfigurationRealtime::createHeapWithManager(MM_EnvironmentBase *env, uintptr_t heapBytesRequested, MM_HeapRegionManager *regionManager)\n {\n-\tMM_GCExtensionsBase *extensions = env->getExtensions();\n+\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n #if defined(J9VM_ENV_DATA64)\n \tJ9JavaVM *vm = (J9JavaVM *)extensions->getOmrVM()->_language_vm;\n \t/* Let VM know that Metronome GC has discontiguous indexable object (arraylet layout) */\n@@ -116,7 +116,7 @@ MM_ConfigurationRealtime::createHeapWithManager(MM_EnvironmentBase *env, uintptr\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n \tPORT_ACCESS_FROM_ENVIRONMENT(env);\n \n-\tif (extensions->isVirtualLargeObjectHeapRequested) {\n+\tif (extensions->virtualLargeObjectHeap._wasSpecified && extensions->virtualLargeObjectHeap._valueSpecified) {\n \t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_GC_OPTIONS_VIRTUAL_LARGE_OBJECT_HEAP_NOT_SUPPORTED_WARN, \"metronome\");\n \t}\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\ndiff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 8a2c98df5f5..60d09a78b61 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -98,6 +98,9 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \tif (NULL == heap) {\n \t\treturn NULL;\n \t}\n+#if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n+\t/* set off-heap disabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = false;\n \n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/* Enable double mapping if glibc version 2.27 or newer is found. For double map to\n@@ -113,7 +116,7 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t * also need to check if region size is a bigger or equal to multiple of page size.\n \t *\n \t */\n-\tif (!extensions->isVirtualLargeObjectHeapRequested && extensions->isArrayletDoubleMapRequested && extensions->isArrayletDoubleMapAvailable) {\n+\tif (!extensions->isVirtualLargeObjectHeapEnabled && extensions->isArrayletDoubleMapRequested && extensions->isArrayletDoubleMapAvailable) {\n \t\tuintptr_t pagesize = heap->getPageSize();\n \t\tif (!extensions->memoryManager->isLargePage(env, pagesize) || (pagesize <= extensions->getOmrVM()->_arrayletLeafSize)) {\n \t\t\textensions->indexableObjectModel.setEnableDoubleMapping(true);\n@@ -164,13 +167,12 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t */\n \tvm->indexableObjectLayout = J9IndexableObjectLayout_DataAddr_Arraylet;\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\tif (extensions->isVirtualLargeObjectHeapRequested) {\n+\tif (extensions->isVirtualLargeObjectHeapEnabled) {\n \t\t/* Create off-heap */\n \t\tMM_SparseVirtualMemory *largeObjectVirtualMemory = MM_SparseVirtualMemory::newInstance(env, OMRMEM_CATEGORY_MM_RUNTIME_HEAP, heap);\n \t\tif (NULL != largeObjectVirtualMemory) {\n \t\t\textensions->largeObjectVirtualMemory = largeObjectVirtualMemory;\n \t\t\textensions->indexableObjectModel.setEnableVirtualLargeObjectHeap(true);\n-\t\t\textensions->isVirtualLargeObjectHeapEnabled = true;\n \t\t\t/* Overriding the original assumption that Balanced has arraylets. */\n \t\t\tvm->indexableObjectLayout = J9IndexableObjectLayout_DataAddr_NoArraylet;\n \t\t\t/* reset vm->unsafeIndexableHeaderSize for off-heap case */\n",
    "dee178319d16c63318138bf92f7ba31dcdd4f6f8": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 60d09a78b61..1cb1b12d803 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -102,6 +102,11 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t/* set off-heap disabled as default for balanced GC */\n \textensions->isVirtualLargeObjectHeapEnabled = false;\n \n+\tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n+\t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n+\t}\n+#endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n+\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/* Enable double mapping if glibc version 2.27 or newer is found. For double map to\n \t * work we need a file descriptor, to get one we use shm_open(3)  or memfd_create(2);\n",
    "9e9d007c7229e4615b1c050346662fe407e81e5d": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 60d09a78b61..1cb1b12d803 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -102,6 +102,11 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t/* set off-heap disabled as default for balanced GC */\n \textensions->isVirtualLargeObjectHeapEnabled = false;\n \n+\tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n+\t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n+\t}\n+#endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n+\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/* Enable double mapping if glibc version 2.27 or newer is found. For double map to\n \t * work we need a file descriptor, to get one we use shm_open(3)  or memfd_create(2);\n",
    "00b44874626df62a6570af72adcde8af1dc9e3e4": "diff --git a/buildenv/jenkins/variables/defaults.yml b/buildenv/jenkins/variables/defaults.yml\nindex 73effab1fd7..0f4571cd276 100644\n--- a/buildenv/jenkins/variables/defaults.yml\n+++ b/buildenv/jenkins/variables/defaults.yml\n@@ -398,13 +398,9 @@ x86-64_mac:\n     8: '--with-toolchain-type=clang'\n   openjdk_reference_repo: '/Users/jenkins/openjdk_cache'\n   node_labels:\n-    build: 'ci.role.build && hw.arch.x86 && sw.os.mac.10_15'\n+    build: 'ci.role.build && hw.arch.x86 && sw.os.mac && sw.tool.xcode.15_2'\n   build_env:\n     vars: 'OPENJ9_JAVA_OPTIONS=-Xdump:system+java:events=systhrow,filter=java/lang/ClassCastException,request=exclusive+prepwalk+preempt'\n-  extra_test_labels:\n-    23: '!sw.os.mac.10_15'\n-    24: '!sw.os.mac.10_15'\n-    next: '!sw.os.mac.10_15'\n   fail_pattern: 'IOException caught during compilation: Resource deadlock avoided'\n #========================================#\n # Mac Aarch64\n@@ -424,7 +420,7 @@ aarch64_mac:\n     all: '--with-noncompressedrefs'\n   openjdk_reference_repo: '/Users/jenkins/openjdk_cache'\n   node_labels:\n-    build: 'ci.role.build && hw.arch.aarch64 && sw.os.mac'\n+    build: 'ci.role.build && hw.arch.aarch64 && sw.os.mac && sw.tool.xcode.15_2'\n   fail_pattern: 'IOException caught during compilation: Resource deadlock avoided'\n #========================================#\n # Linux PPCLE 64bits /w OpenJDK JSR292\n",
    "754bf6e642fac0d068d611f3f79bb74e6812f684": "diff --git a/runtime/codert_vm/arm64nathelp.m4 b/runtime/codert_vm/arm64nathelp.m4\nindex 28180df95b9..f9e62899380 100644\n--- a/runtime/codert_vm/arm64nathelp.m4\n+++ b/runtime/codert_vm/arm64nathelp.m4\n@@ -378,6 +378,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/armnathelp.m4 b/runtime/codert_vm/armnathelp.m4\nindex 8158c3f1e68..05e533e5eca 100644\n--- a/runtime/codert_vm/armnathelp.m4\n+++ b/runtime/codert_vm/armnathelp.m4\n@@ -364,6 +364,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/cnathelp.cpp b/runtime/codert_vm/cnathelp.cpp\nindex fde7a7f0dee..44cf7b26b41 100644\n--- a/runtime/codert_vm/cnathelp.cpp\n+++ b/runtime/codert_vm/cnathelp.cpp\n@@ -2731,6 +2731,20 @@ old_slow_jitThrowArrayIndexOutOfBounds(J9VMThread *currentThread)\n \treturn setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGARRAYINDEXOUTOFBOUNDSEXCEPTION, NULL);\n }\n \n+void* J9FASTCALL\n+old_slow_jitThrowIdentityException(J9VMThread *currentThread)\n+{\n+\tvoid *exception = NULL;\n+#if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n+\tOLD_JIT_HELPER_PROLOGUE(0);\n+\tbuildJITResolveFrameForRuntimeCheck(currentThread);\n+\texception = setCurrentExceptionFromJIT(currentThread, J9VMCONSTANTPOOL_JAVALANGIDENTITYEXCEPTION, NULL);\n+#else /* defined(J9VM_OPT_VALHALLA_VALUE_TYPES) */\n+\texception = (void *)-1;\n+#endif /* defined(J9VM_OPT_VALHALLA_VALUE_TYPES) */\n+\treturn exception;\n+}\n+\n void* J9FASTCALL\n impl_jitReferenceArrayCopy(J9VMThread *currentThread, UDATA lengthInBytes)\n {\n@@ -4000,6 +4014,7 @@ initPureCFunctionTable(J9JavaVM *vm)\n \tjitConfig->old_slow_jitThrowInstantiationException = (void*)old_slow_jitThrowInstantiationException;\n \tjitConfig->old_slow_jitThrowNullPointerException = (void*)old_slow_jitThrowNullPointerException;\n \tjitConfig->old_slow_jitThrowWrongMethodTypeException = (void*)old_slow_jitThrowWrongMethodTypeException;\n+\tjitConfig->old_slow_jitThrowIdentityException = (void*)old_slow_jitThrowIdentityException;\n \tjitConfig->old_fast_jitTypeCheckArrayStoreWithNullCheck = (void*)old_fast_jitTypeCheckArrayStoreWithNullCheck;\n \tjitConfig->old_slow_jitTypeCheckArrayStoreWithNullCheck = (void*)old_slow_jitTypeCheckArrayStoreWithNullCheck;\n \tjitConfig->old_fast_jitTypeCheckArrayStore = (void*)old_fast_jitTypeCheckArrayStore;\ndiff --git a/runtime/codert_vm/pnathelp.m4 b/runtime/codert_vm/pnathelp.m4\nindex 99613389a46..ed567a8f1a3 100644\n--- a/runtime/codert_vm/pnathelp.m4\n+++ b/runtime/codert_vm/pnathelp.m4\n@@ -428,6 +428,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/riscvnathelp.m4 b/runtime/codert_vm/riscvnathelp.m4\nindex 1a7483f8f13..4c3d3f594be 100644\n--- a/runtime/codert_vm/riscvnathelp.m4\n+++ b/runtime/codert_vm/riscvnathelp.m4\n@@ -356,6 +356,7 @@ EXCEPTION_THROW_HELPER(jitThrowIncompatibleClassChangeError,0)\n EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n \n dnl Write barrier helpers\ndiff --git a/runtime/codert_vm/xnathelp.m4 b/runtime/codert_vm/xnathelp.m4\nindex f27ee9334a7..f78289fff83 100644\n--- a/runtime/codert_vm/xnathelp.m4\n+++ b/runtime/codert_vm/xnathelp.m4\n@@ -478,6 +478,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/codert_vm/znathelp.m4 b/runtime/codert_vm/znathelp.m4\nindex e30782ba4b9..3687dd828e4 100644\n--- a/runtime/codert_vm/znathelp.m4\n+++ b/runtime/codert_vm/znathelp.m4\n@@ -409,6 +409,7 @@ EXCEPTION_THROW_HELPER(jitThrowInstantiationException,0)\n EXCEPTION_THROW_HELPER(jitThrowNullPointerException,0)\n EXCEPTION_THROW_HELPER(jitThrowWrongMethodTypeException,0)\n EXCEPTION_THROW_HELPER(jitThrowIncompatibleReceiver,2)\n+EXCEPTION_THROW_HELPER(jitThrowIdentityException,0)\n \n dnl Write barrier helpers\n \ndiff --git a/runtime/compiler/compile/J9AliasBuilder.cpp b/runtime/compiler/compile/J9AliasBuilder.cpp\nindex e9613c7ee23..fe2da185621 100644\n--- a/runtime/compiler/compile/J9AliasBuilder.cpp\n+++ b/runtime/compiler/compile/J9AliasBuilder.cpp\n@@ -293,7 +293,8 @@ J9::AliasBuilder::createAliasInfo()\n       TR_methodTypeCheck,\n       TR_incompatibleReceiver,\n       TR_IncompatibleClassChangeError,\n-      TR_multiANewArray\n+      TR_multiANewArray,\n+      TR_identityException\n       };\n \n    for (i = 0; i < (sizeof(helpersThatMayThrow) / 4); ++i)\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.cpp b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\nindex f0a9df6b856..35d97d49545 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n@@ -1318,6 +1318,12 @@ J9::SymbolReferenceTable::findOrCreateIncompatibleReceiverSymbolRef(TR::Resolved\n    return findOrCreateRuntimeHelper(TR_incompatibleReceiver, false, true, true);\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateIdentityExceptionSymbolRef(TR::ResolvedMethodSymbol *)\n+   {\n+   return findOrCreateRuntimeHelper(TR_identityException, false, true, true);\n+   }\n+\n TR::SymbolReference *\n J9::SymbolReferenceTable::findOrCreateIncompatibleClassChangeErrorSymbolRef(TR::ResolvedMethodSymbol *)\n    {\n@@ -2712,6 +2718,19 @@ J9::SymbolReferenceTable::findOrCreateStoreFlattenableArrayElementNonHelperSymbo\n    return symRef;\n    }\n \n+TR::SymbolReference *\n+J9::SymbolReferenceTable::findOrCreateIsIdentityObjectNonHelperSymbolRef()\n+   {\n+   TR::SymbolReference *symRef = element(isIdentityObjectNonHelperSymbol);\n+   if (symRef != NULL)\n+      {\n+      return symRef;\n+      }\n+\n+   symRef = self()->findOrCreateCodeGenInlinedHelper(isIdentityObjectNonHelperSymbol);\n+   return symRef;\n+   }\n+\n TR::ParameterSymbol *\n J9::SymbolReferenceTable::createParameterSymbol(\n       TR::ResolvedMethodSymbol *owningMethodSymbol,\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.hpp b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\nindex bec43f03fb0..d32af6d9487 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n@@ -246,6 +246,18 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n    TR::SymbolReference * findOrCreateArrayComponentTypeAsPrimitiveSymbolRef();\n    TR::SymbolReference * findOrCreateMethodTypeCheckSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateIncompatibleReceiverSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n+\n+   /**\n+    * Used to find the symbol reference for \\c java/lang/IdentityException.  If it does not already exist,\n+    * it will be created.\n+    *\n+    * \\param owningMethodSymbol\n+    *     The method in which the IdentityException symbol reference needs to be created.\n+    *\n+    * \\returns\n+    *     A symbol reference for \\c java/lang/IdentityException\n+    */\n+   TR::SymbolReference * findOrCreateIdentityExceptionSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateIncompatibleClassChangeErrorSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateReportStaticMethodEnterSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n    TR::SymbolReference * findOrCreateReportMethodExitSymbolRef(TR::ResolvedMethodSymbol * owningMethodSymbol);\n@@ -415,6 +427,18 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     */\n    TR::SymbolReference *findOrCreateStoreFlattenableArrayElementNonHelperSymbolRef();\n \n+   /**\n+    * \\brief\n+    *    Finds the <isIdentityObject> \"non-helper\" symbol reference, creating it if\n+    *    necessary.  The non-helper is used to test whether an object is an instance\n+    *    of an identity class, in which case it returns the value one, or a value type\n+    *    class, in which case it returns the value zero.\n+    *\n+    * \\return\n+    *    The <isIdentityObject> symbol reference\n+    */\n+   TR::SymbolReference *findOrCreateIsIdentityObjectNonHelperSymbolRef();\n+\n    /**\n     * \\brief\n     *    Creates a new symbol for a parameter within the supplied owning method of the\ndiff --git a/runtime/compiler/ilgen/Walker.cpp b/runtime/compiler/ilgen/Walker.cpp\nindex 50ef6a547b0..fc22a0da33d 100644\n--- a/runtime/compiler/ilgen/Walker.cpp\n+++ b/runtime/compiler/ilgen/Walker.cpp\n@@ -6047,11 +6047,31 @@ TR_J9ByteCodeIlGenerator::genMonitorEnter()\n       }\n    */\n \n-   node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n-   if (isStatic)\n-      node->setStaticMonitor(true);\n+   static const bool disableMonentIdentityException = (feGetEnv(\"TR_disableMonentIdentityException\") != NULL);\n \n-   genTreeTop(genNullCheck(node));\n+   if (disableMonentIdentityException || !TR::Compiler->om.areValueTypesEnabled())\n+      {\n+      node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n+      if (isStatic)\n+         node->setStaticMonitor(true);\n+\n+      genTreeTop(genNullCheck(node));\n+      }\n+   else\n+      {\n+      genTreeTop(genNullCheck(TR::Node::create(TR::PassThrough, 1, node)));\n+\n+      TR::SymbolReference *isIdentitySymRef = comp()->getSymRefTab()->findOrCreateIsIdentityObjectNonHelperSymbolRef();\n+      TR::Node *isIdentityObjectTestNode = TR::Node::createWithSymRef(TR::icall, 1, 1, node, isIdentitySymRef);\n+      TR::SymbolReference *identityExceptionSymRef = comp()->getSymRefTab()->findOrCreateIdentityExceptionSymbolRef(_methodSymbol);\n+      genTreeTop(TR::Node::createWithSymRef(TR::ZEROCHK, 1, 1, isIdentityObjectTestNode, identityExceptionSymRef));\n+\n+      node = TR::Node::createWithSymRef(TR::monent, 1, 1, node, monitorEnterSymbolRef);\n+      if (isStatic)\n+         node->setStaticMonitor(true);\n+\n+      genTreeTop(node);\n+      }\n \n    if (!comp()->getOption(TR_DisableLiveMonitorMetadata))\n       {\ndiff --git a/runtime/compiler/optimizer/TreeLowering.cpp b/runtime/compiler/optimizer/TreeLowering.cpp\nindex 300d5a65957..b483f6ef120 100644\n--- a/runtime/compiler/optimizer/TreeLowering.cpp\n+++ b/runtime/compiler/optimizer/TreeLowering.cpp\n@@ -1536,6 +1536,60 @@ StoreArrayElementTransformer::lower(TR::Node* const node, TR::TreeTop* const tt)\n       }\n    }\n \n+class IsIdentityObjectTransformer: public TR::TreeLowering::Transformer\n+   {\n+   public:\n+   explicit IsIdentityObjectTransformer(TR::TreeLowering* opt)\n+      : TR::TreeLowering::Transformer(opt)\n+      {}\n+\n+   void lower(TR::Node* const node, TR::TreeTop* const tt);\n+   };\n+\n+\n+/**\n+ * @brief Perform lowering of calls to the <isIdentityObject> non-helper function\n+ *\n+ * A call like the following\n+ *\n+ * @verbatim\n+   n88n  icall  <isIdentityObject>\n+   n77n    aload  x\n+ * @endverbatim\n+ *\n+ * will be transformed into\n+ *\n+ * @verbatim\n+   n88n  PassThrough\n+   n99n    iand       // Test whether class is an identity class\n+   n98n      iloadi  <isClassFlags>\n+   n97n        aloadi  <vft-symbol>\n+   n77n          aload x\n+   n96n      iconst 0x80000\n+ * @endverbatim\n+ */\n+void\n+IsIdentityObjectTransformer::lower(TR::Node* const node, TR::TreeTop* const tt)\n+   {\n+   // If the argument to the call of the <isIdentityObject> non-helper is the\n+   // object of a NULLCHK, pull the NULLCHK into a separate tree before\n+   // transforming the call to <isIdentityObject>.  Otherwise, we'll end up\n+   // with the NULLCHK operating on something meaningless.\n+   //\n+   if (tt->getNode()->getOpCode().isNullCheck() && tt->getNode()->getFirstChild() == node)\n+      {\n+      J9::TransformUtil::separateNullCheck(comp(), tt, trace());\n+      }\n+\n+   TR::SymbolReference *vftSymRef = comp()->getSymRefTab()->findOrCreateVftSymbolRef();\n+   TR::Node *objNode = node->getFirstChild();\n+   TR::Node *vftNode = TR::Node::createWithSymRef(TR::aloadi, 1, 1, objNode, vftSymRef);\n+   TR::Node *testFlagsNode = comp()->fej9()->testIsClassIdentityType(vftNode);\n+   TR::Node::recreate(node, TR::PassThrough);\n+   objNode->decReferenceCount();\n+   node->setAndIncChild(0, testFlagsNode);\n+   }\n+\n /**\n  * @brief Perform lowering related to Valhalla value types\n  *\n@@ -1601,5 +1655,9 @@ TR::TreeLowering::lowerValueTypeOperations(TransformationManager& transformation\n             transformations.addTransformation(getTransformer<StoreArrayElementTransformer>(), node, tt);\n             }\n          }\n+      else if (symRefTab->isNonHelper(node->getSymbolReference(), TR::SymbolReferenceTable::isIdentityObjectNonHelperSymbol))\n+         {\n+         transformations.addTransformation(getTransformer<IsIdentityObjectTransformer>(), node, tt);\n+         }\n       }\n    }\ndiff --git a/runtime/compiler/runtime/Runtime.cpp b/runtime/compiler/runtime/Runtime.cpp\nindex 7f67fef5323..d68dd8f9405 100644\n--- a/runtime/compiler/runtime/Runtime.cpp\n+++ b/runtime/compiler/runtime/Runtime.cpp\n@@ -1052,12 +1052,12 @@ void initializeCodeRuntimeHelperTable(J9JITConfig *jitConfig, char isSMP)\n    SET(TR_newValueNoZeroInit,         (void *)jitNewValueNoZeroInit,     TR_CHelper);\n \n    SET(TR_getFlattenableField,        (void *)jitGetFlattenableField, TR_Helper);\n-   SET(TR_withFlattenableField,        (void *)jitWithFlattenableField, TR_Helper);\n+   SET(TR_withFlattenableField,       (void *)jitWithFlattenableField, TR_Helper);\n    SET(TR_putFlattenableField,        (void *)jitPutFlattenableField, TR_Helper);\n-   SET(TR_getFlattenableStaticField,        (void *)jitGetFlattenableStaticField, TR_Helper);\n-   SET(TR_putFlattenableStaticField,        (void *)jitPutFlattenableStaticField, TR_Helper);\n-   SET(TR_ldFlattenableArrayElement,        (void *)jitLoadFlattenableArrayElement, TR_Helper);\n-   SET(TR_strFlattenableArrayElement,        (void *)jitStoreFlattenableArrayElement, TR_Helper);\n+   SET(TR_getFlattenableStaticField,  (void *)jitGetFlattenableStaticField, TR_Helper);\n+   SET(TR_putFlattenableStaticField,  (void *)jitPutFlattenableStaticField, TR_Helper);\n+   SET(TR_ldFlattenableArrayElement,  (void *)jitLoadFlattenableArrayElement, TR_Helper);\n+   SET(TR_strFlattenableArrayElement, (void *)jitStoreFlattenableArrayElement, TR_Helper);\n \n    SET(TR_acmpeqHelper,               (void *)jitAcmpeqHelper, TR_Helper);\n    SET(TR_acmpneHelper,               (void *)jitAcmpneHelper, TR_Helper);\n@@ -1081,6 +1081,8 @@ void initializeCodeRuntimeHelperTable(J9JITConfig *jitConfig, char isSMP)\n    SET(TR_typeCheckArrayStore,        (void *)jitTypeCheckArrayStoreWithNullCheck,   TR_Helper);\n #endif\n \n+   SET(TR_identityException,          (void *)jitThrowIdentityException, TR_Helper);\n+\n #if defined(TR_HOST_X86) || defined(TR_HOST_POWER) || defined(TR_HOST_S390) || defined(TR_HOST_ARM64)\n    SET(TR_softwareReadBarrier,                              (void *)jitSoftwareReadBarrier,                         TR_Helper);\n #endif\ndiff --git a/runtime/compiler/runtime/asmprotos.h b/runtime/compiler/runtime/asmprotos.h\nindex d9de61e70aa..16b31fbbdf5 100644\n--- a/runtime/compiler/runtime/asmprotos.h\n+++ b/runtime/compiler/runtime/asmprotos.h\n@@ -143,6 +143,7 @@ JIT_HELPER(jitThrowCurrentException);  // asm calling-convention helper\n JIT_HELPER(jitThrowException);  // asm calling-convention helper\n JIT_HELPER(jitThrowUnreportedException);  // asm calling-convention helper\n JIT_HELPER(jitThrowExceptionInInitializerError);  // asm calling-convention helper\n+JIT_HELPER(jitThrowIdentityException);  // asm calling-convention helper\n JIT_HELPER(jitThrowInstantiationException);  // asm calling-convention helper\n JIT_HELPER(jitThrowNullPointerException);  // asm calling-convention helper\n JIT_HELPER(jitThrowWrongMethodTypeException);  // asm calling-convention helper\ndiff --git a/runtime/jilgen/jilconsts.c b/runtime/jilgen/jilconsts.c\nindex ce832f13aed..df685e30be4 100644\n--- a/runtime/jilgen/jilconsts.c\n+++ b/runtime/jilgen/jilconsts.c\n@@ -638,6 +638,7 @@ writeConstants(OMRPortLibrary *OMRPORTLIB, IDATA fd)\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowInstantiationException\", offsetof(J9JITConfig, old_slow_jitThrowInstantiationException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowNullPointerException\", offsetof(J9JITConfig, old_slow_jitThrowNullPointerException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowWrongMethodTypeException\", offsetof(J9JITConfig, old_slow_jitThrowWrongMethodTypeException)) |\n+\t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitThrowIdentityException\", offsetof(J9JITConfig, old_slow_jitThrowIdentityException)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_fast_jitTypeCheckArrayStoreWithNullCheck\", offsetof(J9JITConfig, old_fast_jitTypeCheckArrayStoreWithNullCheck)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_slow_jitTypeCheckArrayStoreWithNullCheck\", offsetof(J9JITConfig, old_slow_jitTypeCheckArrayStoreWithNullCheck)) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_JitConfig_old_fast_jitTypeCheckArrayStore\", offsetof(J9JITConfig, old_fast_jitTypeCheckArrayStore)) |\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex bd363c73ecf..a58921d2073 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -4133,6 +4133,7 @@ typedef struct J9JITConfig {\n \tvoid *old_slow_jitThrowInstantiationException;\n \tvoid *old_slow_jitThrowNullPointerException;\n \tvoid *old_slow_jitThrowWrongMethodTypeException;\n+\tvoid *old_slow_jitThrowIdentityException;\n \tvoid *old_fast_jitTypeCheckArrayStoreWithNullCheck;\n \tvoid *old_slow_jitTypeCheckArrayStoreWithNullCheck;\n \tvoid *old_fast_jitTypeCheckArrayStore;\n",
    "9620a5a7654118a6b379a8185281653d06b3fa80": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 37cba04d128..55d23a690df 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,8 +65,10 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-import jdk.internal.util.SystemProps;\n /*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n+/*[IF JAVA_SPEC_VERSION >= 17]*/\n+import jdk.internal.util.SystemProps;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -170,10 +172,6 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tprivate static String stdoutProp;\n-\tprivate static String stderrProp;\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -232,7 +230,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = isStdout ? stdoutProp : stderrProp;\n+\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -273,20 +271,6 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tProperties props = internalGetProperties();\n-\t\t// If the user didn't set the encoding property, set it now.\n-\t\tif (FileDescriptor.out == desc) {\n-\t\t\tif (null == stdoutProp) {\n-\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} else if (FileDescriptor.err == desc) {\n-\t\t\tif (null == stderrProp) {\n-\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -317,12 +301,6 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n-\n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n-\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -383,9 +361,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -719,7 +697,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n+\tMap<String, String> initializedProperties = new HashMap<>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -731,9 +709,11 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -759,6 +739,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\tinitializedProperties.putAll(SystemProps.initProperties());\n+\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -769,43 +752,12 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n-\n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n-\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tif (null != stdoutProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tif (null == stdoutProp) {\n-\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stdoutProp) {\n-\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif (null != stderrProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n-\t\tif (null == stderrProp) { //$NON-NLS-1$\n-\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stderrProp) {\n-\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1078,6 +1030,7 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n+/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1087,13 +1040,14 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n+/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION >= 11]*/\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 3a61379b7d8..4da0ef86244 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,7 +1900,6 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\tassert(!\"JVM_GetProperties\");\n-\treturn NULL;\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 048eede667f..56e08e267d5 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,27 +44,7 @@\n #endif\n \n \n-\n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n-\n-\n-typedef struct {\n-\tint errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n-static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n-jobject getPropertyList(JNIEnv *env);\n-\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -93,7 +73,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n \n /**\n  * sysPropID\n@@ -203,10 +183,12 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn getPropertyList(env);\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n+#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -259,350 +241,6 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n-\n-jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i, nCommandLineDefines = 0;\n-\tjclass stringClass;\n-\tjarray args = NULL;\n-\tint propertyCount;\n-\n-\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (!stringClass) {\n-/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n-\t\treturn (jobject) 0;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = 0;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-/*\t\tprintf(\"\\nFailed to create arg array\");*/\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (defaultValues[i] == NULL) continue;\n-\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-/**\n- * @return 0 on success, -1 on error\n- */\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n-}\n-\n-jobject getPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-\tchar *propertyKey = NULL;\n-\tconst char * language = NULL;\n-\tconst char * region = NULL;\n-\tconst char * variant = NULL;\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n-\t * correct allocation.\n-\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n-\t * enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-#if defined(JCL_J2SE)\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n-\t * \twe consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#ifdef J9VM_ENV_DATA64\n-\tstrings[propIndex++] = \"64\";\n-#else\n-\tstrings[propIndex++] = \"32\";\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-/*\tDon't set this property as the class library will look here first and when\n-\tthere is a security manager you will get a security exception. The code\n-\tlooks in this package by default, see URLConnection.getContentHandler()\n-\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n-\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n-*/\n-\n-\t/*[PR 95709]*/\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tjclmem_free_memory(env, usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n-\n-static void JNICALL\n-systemPropertyIterator(char* key, char* value, void* userData)\n-{\n-\tCreateSystemPropertiesData * iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif ( iteratorData->errorOccurred ) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i=0; i < defaultCount; i+=2) {\n-\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i+1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\tTrc_JCL_systemPropertyIterator(env, key, value);\n-}\n-\n-\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex f4b04862ac0..14a9c80a9a0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,7 +350,6 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n-\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -434,6 +433,7 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n+\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,13 +599,18 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n+if(JAVA_SPEC_VERSION EQUAL 11)\n+\tomr_add_exports(jclse\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n+\t)\n+endif()\n+\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex c64230a9bb3..0ec24ba02d6 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex 626a197be7a..d844c63d9ba 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,5 +23,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n+\t\t<exclude-if condition=\"spec.java12\"/>\n+\t</export>\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex b8a780711eb..549a8712e3b 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,7 +249,9 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\" />\n+\t<export name=\"Java_java_lang_System_getPropertyList\">\n+\t\t<exclude-if condition=\"spec.java17\" />\n+\t</export>\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex d1f9ff46fb4..a1bae22f747 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,9 +41,6 @@\n #include \"atoe.h\"\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -63,159 +60,6 @@ char* CodepageTable[] = {\n #endif\n };\n \n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, the '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char**envSpace) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize;\n-\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n-\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\tif(*envSpace==NULL) return \".\";\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1)\n-\t\t\treturn *envSpace;\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tjclmem_free_memory(env,*envSpace);\n-\t\t*envSpace = NULL;\n-\t\t}\n-\tif (j9file_attr(P_tmpdir) > -1)\n-\t\treturn P_tmpdir;\n-\tif (j9file_attr(\"/tmp\") > -1)\n-\t\treturn \"/tmp\";\n-\treturn \".\";\n-}\n-\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-\tchar userdir[EsMaxPath] = {0};\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (charResult == NULL) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n-#endif\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tjclmem_free_memory(env,envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tjclmem_free_memory(env, homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex c6adf96b6a4..7bd081a6614 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,139 +43,11 @@\n #include <VersionHelpers.h>\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir(JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize;\n-\tchar *envSpace = NULL, *tempdir = NULL;\n-\tjobject result;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i;\n-\tchar userdir[EsMaxPath];\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process, token;\n-\tUDATA handle;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-#if !defined(JCL_J2SE)\n-\tUINT codePage;\n-\tchar codePageBuf[32];\n-\tCPINFO cpInfo;\n-#endif\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\t\tif(!envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\t/* Jazz 52075 JCL_J2SE is always true */\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tif (tempdir) jclmem_free_memory(env,tempdir);\n-\tif (envSpace) jclmem_free_memory(env,envSpace);\n-\treturn result;\n-}\n-\n-\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -228,11 +100,7 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n-#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n-#else\n-\t\tcodepage[1] = 'P';\n-#endif\n \t}\n \n \treturn codepage;\n@@ -246,64 +114,3 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n-\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char * getTmpDir(JNIEnv *env, char **tempdir) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\tDWORD rc;\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\n-\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\t/* If the function succeeds, the return value is the number of characters stored into \n-\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n-\tthe return value will exceed the length parameter (i.e. the required size)\n-\t*/\n-\n-\tif((rc != 0) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif(rc != 0) {\n-\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n-\t\t\tif(NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n-\t\t\t\tif(rc == 0) {\n-\t\t\t\t\tjclmem_free_memory(env, buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-I_32\n-convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex a7912fb5583..ba13180f677 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,20 +580,16 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 21495596345..73e295f0128 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,3 +2430,21 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+# END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex ff227c107f5..36fe4f7d708 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5347,6 +5347,7 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread, struct J9JavaVM *vm);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tjobject (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex e35676d0fae..f3a101a3ea3 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,11 +190,13 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -800,10 +802,7 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32\n-convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n char * getTmpDir (JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -813,7 +812,6 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n char * getTmpDir (JNIEnv *env, char**envSpace);\n-jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 8cbe8e3aeb3..9e605c155c3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,6 +2665,12 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n+/* ---------------- filehelp.c ---------------- */\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 9ac10a42602..8603835011b 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,6 +4335,14 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray getSystemPropertyList(JNIEnv *env);\n+\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 394304ae25e..1487fb806a7 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,6 +116,12 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n+if(OMR_OS_WINDOWS)\n+\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n+else()\n+\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n+endif()\n+\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex 9e00e0836ea..c246c3bd583 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,6 +50,12 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\nnew file mode 100644\nindex 00000000000..343fbff4ecc\n--- /dev/null\n+++ b/runtime/util/unix/filehelp.c\n@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **envSpace)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n+\tif (envSize > 0) {\n+\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == *envSpace) {\n+\t\t\treturn \".\";\n+\t\t}\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1) {\n+\t\t\treturn *envSpace;\n+\t\t}\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tj9mem_free_memory(*envSpace);\n+\t\t*envSpace = NULL;\n+\t}\n+\tif (j9file_attr(P_tmpdir) > -1) {\n+\t\treturn P_tmpdir;\n+\t}\n+\tif (j9file_attr(\"/tmp\") > -1) {\n+\t\treturn \"/tmp\";\n+\t}\n+\treturn \".\";\n+}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\nnew file mode 100644\nindex 00000000000..55b241301c0\n--- /dev/null\n+++ b/runtime/util/win32/filehelp.c\n@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <windows.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **tempdir)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\tif ((0 != rc) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif (0 != rc) {\n+\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n+\t\t\t\tif (0 == rc) {\n+\t\t\t\t\tj9mem_free_memory(buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5cfdd0003fe..79558bccedd 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -484,4 +484,5 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex 5447aeb934d..c7d04229b2a 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,3 +1017,5 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n+\n+TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 74f0f9327ec..5e4db9c54c3 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,6 +20,13 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n+#if defined(WIN32)\n+#include <windows.h>\n+#else /* defined(WIN32) */\n+#include <pwd.h>\n+#include <unistd.h>\n+#endif /* defined(WIN32) */\n+\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -32,24 +39,28 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n+#if defined(J9ZOS390)\n+#include \"atoe.h\"\n+#endif /* defined(J9ZOS390) */\n+\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n+static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n+static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM * vm);\n+static UDATA addModularitySystemProperties(J9JavaVM *vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -168,7 +179,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -315,7 +326,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -461,7 +472,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM * vm)\n+addModularitySystemProperties(J9JavaVM *vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -559,7 +570,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -586,7 +597,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM * vm)\n+initializeSystemProperties(J9JavaVM *vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -595,22 +606,22 @@ initializeSystemProperties(J9JavaVM * vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char* propValue = NULL;\n+\tconst char *propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n+\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n+\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -621,7 +632,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n+\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n+\tif (NULL == vm->systemProperties) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -632,7 +644,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t}\n \n-\tif (JAVA_SPEC_VERSION == 8) {\n+\tif (8 == JAVA_SPEC_VERSION) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -656,7 +668,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (JAVA_SPEC_VERSION == 8) {\n+\t\tif (8 == JAVA_SPEC_VERSION) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -746,14 +758,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_NAME) */\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_VERSION) */\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -766,9 +778,9 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else\n+#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \tpropValue = \"..\";\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -796,12 +808,12 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) */\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (pathSep == NULL) {\n+\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (NULL == pathSep) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -911,16 +923,16 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \n-\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n+\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (propValue == NULL) {\n+\t\t\tif (NULL == propValue) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -970,7 +982,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n+\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1024,8 +1036,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n-\t\t\tchar *defaultEndorsedDir =  NULL;\n+\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n+\t\t\tchar *defaultEndorsedDir = NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1117,14 +1129,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \n \n void\n-freeSystemProperties(J9JavaVM * vm)\n+freeSystemProperties(J9JavaVM *vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (property != NULL) {\n+\t\twhile (NULL != property) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1145,13 +1157,13 @@ freeSystemProperties(J9JavaVM * vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n+getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (property != NULL) {\n-\t\tif (strcmp(property->name, name) == 0) {\n+\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (NULL != property) {\n+\t\tif (0 == strcmp(property->name, name)) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1174,21 +1186,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n+addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char*)propName;\n-\tnewProp->value = (char*)propValue;\n+\tnewProp->name = (char *)propName;\n+\tnewProp->value = (char *)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1210,7 +1222,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (strcmp(property->name, \"java.home\") == 0) {\n+\t\tif (0 == strcmp(property->name, \"java.home\")) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1218,7 +1230,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n }\n \n UDATA\n-setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n+setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1230,7 +1242,7 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar * copiedValue = copyToMem(vm, value);\n+\t\tchar *copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1249,12 +1261,12 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8*\n-unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n+static U_8 *\n+unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16* unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n-\tconst char *cursor;\n+\tU_16 *unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n+\tconst char *cursor = NULL;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1267,7 +1279,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1275,7 +1287,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n+\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1317,14 +1329,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n-\t\t\t\t\t(char*)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\t\t\t\t\t(char *)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1361,8 +1373,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n-\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n+\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1433,3 +1445,647 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n+\n+/**\n+ * @return JNI_FALSE on success, JNI_TRUE on error\n+ */\n+static jboolean\n+propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn (*env)->ExceptionCheck(env);\n+}\n+\n+typedef struct {\n+\tjboolean errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+static void JNICALL\n+systemPropertyIterator(char *key, char *value, void *userData)\n+{\n+\tCreateSystemPropertiesData *iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i = 0;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif (iteratorData->errorOccurred) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i = 0; i < defaultCount; i += 2) {\n+\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i + 1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\tTrc_systemPropertyIterator(env, key, value);\n+}\n+\n+jobject\n+createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i = 0;\n+\tjint nCommandLineDefines = 0;\n+\tjarray args = NULL;\n+\tint propertyCount = 0;\n+\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (NULL == stringClass) {\n+\t\treturn NULL;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (0 != propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = JNI_FALSE;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (NULL == defaultValues[i]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+#if defined(WIN32)\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+static I_32\n+convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize = 0;\n+\tchar *envSpace = NULL;\n+\tchar *tempdir = NULL;\n+\tjobject result = NULL;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i = 0;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath];\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process = 0;\n+\tHANDLE token = 0;\n+\tUDATA handle = 0;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == envSpace) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\tstrings[propIndex++] = envSpace;\n+\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tj9mem_free_memory(tempdir);\n+\tj9mem_free_memory(envSpace);\n+\treturn result;\n+}\n+\n+#else /* defined(WIN32) */\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath] = {0};\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif /* defined(J9ZOS390) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (NULL == charResult) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* There exist situations where one of the above calls will fail.\n+\t * Fall through to the Unix solution for those cases.\n+\t */\n+#endif /* defined(J9ZOS390) */\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tj9mem_free_memory(envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tj9mem_free_memory(homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n+#endif /* defined(WIN32) */\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray\n+getSystemPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+#if JAVA_SPEC_VERSION < 17\n+\tchar *propertyKey = NULL;\n+\tconst char *language = NULL;\n+\tconst char *region = NULL;\n+\tconst char *variant = NULL;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n+\t * 2 * number of property keys is the correct allocation. Also note the call to\n+\t * addSystemProperties below, which may add some configuration-specific properties.\n+\t * Be sure to leave enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n+\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n+\t * registration of signal handlers for what we consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals.\n+\t */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#if defined(J9VM_ENV_DATA64)\n+\tstrings[propIndex++] = \"64\";\n+#else /* defined(J9VM_ENV_DATA64) */\n+\tstrings[propIndex++] = \"32\";\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tj9mem_free_memory(usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\n",
    "7ecfbd15127a88370e4835f39205c98fb9e14156": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 1cb1b12d803..b57693de79e 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,8 +99,10 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\t/* set off-heap disabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = false;\n+#if defined(J9HAMMER) || defined(PPC64)\n+\t/* Set off-heap enabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = true;\n+#endif /* defined(J9HAMMER) || defined(PPC64) */\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "6dc22be1d7caef2ceeb7d624e26dfeedaca5ad93": "diff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex a58921d2073..1b53200ed2d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -439,7 +439,6 @@ typedef struct J9JFRMonitorWaited {\n \n typedef struct J9JFRThreadParked {\n \tJ9JFR_EVENT_WITH_STACKTRACE_FIELDS\n-\tI_64 time;\n \tI_64 duration;\n \tstruct J9VMThread *thread;\n \tstruct J9Class *parkedClass;\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 29f69ec440e..84a35eecb05 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -632,7 +632,7 @@ class VM_JFRChunkWriter {\n \twriteThreadParkEvent(void *anElement, void *userData)\n \t{\n \t\tThreadParkEntry *entry = (ThreadParkEntry *)anElement;\n-\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *) userData;\n+\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n \n \t\t/* reserve size field */\n \t\tU_8 *dataStart = reserveEventSize(_bufferWriter);\n@@ -658,10 +658,10 @@ class VM_JFRChunkWriter {\n \t\t_bufferWriter->writeLEB128(entry->parkedClass);\n \n \t\t/* timeout value which is always in millis */\n-\t\t_bufferWriter->writeLEB128(entry->timeOut/1000000);\n+\t\t_bufferWriter->writeLEB128(entry->timeOut / 1000000);\n \n \t\t/* until value which is always in millis */\n-\t\t_bufferWriter->writeLEB128(entry->untilTime/1000000);\n+\t\t_bufferWriter->writeLEB128(entry->untilTime / 1000000);\n \n \t\t/* address of monitor */\n \t\t_bufferWriter->writeLEB128(entry->parkedAddress);\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 2809a0d64b3..6aff9c8e464 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -704,10 +704,12 @@ jfrVMThreadParked(J9HookInterface **hook, UDATA eventNum, void *eventData, void*\n \tJ9JFRThreadParked *jfrEvent = (J9JFRThreadParked*)reserveBufferWithStackTrace(currentThread, currentThread, J9JFR_EVENT_TYPE_THREAD_PARK, sizeof(*jfrEvent));\n \tif (NULL != jfrEvent) {\n \t\t// TODO: worry about overflow?\n-\t\tjfrEvent->time = (event->millis * 1000000) + event->nanos;\n-\t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n-\t\tjfrEvent->parkedAddress = event->parkedAddress;\n+\t\tI_64 currentTime = j9time_nano_time();\n+\t\tjfrEvent->duration = currentTime - event->startTicks;\n \t\tjfrEvent->parkedClass = event->parkedClass;\n+\t\tjfrEvent->timeOut = (event->millis * 1000000) + event->nanos;\n+\t\tjfrEvent->untilTime = currentTime;\n+\t\tjfrEvent->parkedAddress = event->parkedAddress;\n \t}\n }\n \ndiff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex 88f1fa1e51e..0da9ad42bc5 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -76,9 +76,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t<impl>openj9</impl>\n \t\t\t<impl>ibm</impl>\n \t\t</impls>\n-\t\t<!-- For the time being, these tests are limited to JDK17+. -->\n+\t\t<!-- For the time being, these tests are limited to JDK11+. -->\n \t\t<versions>\n-\t\t\t<version>17+</version>\n+\t\t\t<version>11+</version>\n \t\t</versions>\n \t</test>\n </playlist>\n",
    "430b6515f1fedcea4506dbe914e6d8f57efbd988": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 1cb1b12d803..b57693de79e 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,8 +99,10 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\t/* set off-heap disabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = false;\n+#if defined(J9HAMMER) || defined(PPC64)\n+\t/* Set off-heap enabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = true;\n+#endif /* defined(J9HAMMER) || defined(PPC64) */\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "dd89e9ab80f5d851a2aa422d052aec0a65822572": "diff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex e33d1408eab..50eea6668b4 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -263,82 +263,19 @@ JVM_IsPreviewEnabled(void)\n \treturn isPreviewEnabled;\n }\n \n-static void\n-enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n-{\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n-\tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\n-retry:\n-\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)) {\n-\t\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0, ~(U_64)0)) {\n-\t\t\t/* Thread is being inspected or unmounted, wait. */\n-\t\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t\t\tVM_AtomicSupport::yieldCPU();\n-\t\t\t/* After wait, the thread may suspend here. */\n-\t\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\t\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\t\t}\n-\n-\t\t/* Now we have locked access to virtualThreadInspectorCount, check if the vthread is suspended.\n-\t\t * If suspended, release the access and spin-wait until the vthread is resumed.\n-\t\t * If not suspended, link the current J9VMThread with the virtual thread object.\n-\t\t */\n-\t\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)\n-\t\t&& objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->internalSuspendStateOffset, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE, (U_64)currentThread)\n-\t\t) {\n-\t\t\treturn;\n-\t\t}\n-\t\tJ9OBJECT_I64_STORE(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0);\n-\t}\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t/* Spin is used instead of the halt flag as we cannot guarantee suspend flag is still set now.\n-\t *\n-\t * TODO: Dynamically increase the sleep time to a bounded maximum.\n-\t */\n-\tf_threadSleep(10);\n-\t/* After wait, the thread may suspend here. */\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\tgoto retry;\n-}\n-\n-static void\n-exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n-{\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\tj9object_t vthread = J9_JNI_UNWRAP_REFERENCE(thread);\n-\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n-\n-\t/* Remove J9VMThread address from internalSuspendedState field, as the thread state is no longer in a transition. */\n-\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, vthread, vm->internalSuspendStateOffset, (U_64)currentThread, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE)) {\n-\t\t/* Wait if the suspend flag is set. */\n-\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t\tVM_AtomicSupport::yieldCPU();\n-\t\t/* After wait, the thread may suspend here. */\n-\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\tvthread = J9_JNI_UNWRAP_REFERENCE(thread);\n-\t}\n-\n-\t/* Update to virtualThreadInspectorCount must be after clearing isSuspendedInternal field to retain sync ordering. */\n-\tAssert_SC_true(-1 == J9OBJECT_I64_LOAD(currentThread, vthread, vm->virtualThreadInspectorCountOffset));\n-\tJ9OBJECT_I64_STORE(currentThread, vthread, vm->virtualThreadInspectorCountOffset, 0);\n-}\n-\n static void\n setContinuationStateToLastUnmount(J9VMThread *currentThread, jobject thread)\n {\n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tJ9InternalVMFunctions const * const vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n+\n \t/* Re-fetch reference as enterVThreadTransitionCritical may release VMAccess. */\n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, threadObj);\n \tContinuationState volatile *continuationStatePtr = VM_ContinuationHelpers::getContinuationStateAddress(currentThread, continuationObj);\n \t/* Used in JVMTI to not suspend the virtual thread once it enters the last unmount phase. */\n \tVM_ContinuationHelpers::setLastUnmount(continuationStatePtr);\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n }\n \n /* Caller must have VMAccess. */\n@@ -346,6 +283,7 @@ static void\n virtualThreadMountBegin(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9InternalVMFunctions const * const vmFuncs = currentThread->javaVM->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tAssert_SC_true(IS_JAVA_LANG_VIRTUALTHREAD(currentThread, threadObj));\n@@ -364,7 +302,7 @@ virtualThreadMountBegin(JNIEnv *env, jobject thread)\n \t\t\t\tcontinuation);\n \t}\n \n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_TRUE);\n }\n@@ -375,6 +313,7 @@ virtualThreadMountEnd(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \n \tAssert_SC_true(IS_JAVA_LANG_VIRTUALTHREAD(currentThread, threadObj));\n@@ -394,7 +333,7 @@ virtualThreadMountEnd(JNIEnv *env, jobject thread)\n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_FALSE);\n \n \t/* Allow thread to be inspected again. */\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n \n \tTRIGGER_J9HOOK_VM_VIRTUAL_THREAD_MOUNT(vm->hookInterface, currentThread);\n }\n@@ -405,6 +344,7 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \n@@ -424,16 +364,15 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n \n \tTRIGGER_J9HOOK_VM_VIRTUAL_THREAD_UNMOUNT(vm->hookInterface, currentThread);\n \n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n \tj9object_t carrierThreadObject = currentThread->carrierThreadObject;\n \t/* Virtual thread is being umounted. If its carrier thread is suspended, spin until\n \t * the carrier thread is resumed. The carrier thread should not be mounted until it\n \t * is resumed.\n \t */\n \twhile (VM_VMHelpers::isThreadSuspended(currentThread, carrierThreadObject)) {\n-\t\texitVThreadTransitionCritical(currentThread, thread);\n+\t\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n \t\tvmFuncs->internalReleaseVMAccess(currentThread);\n \t\t/* Spin is used instead of the halt flag; otherwise, the virtual thread will\n \t\t * show as suspended.\n@@ -442,7 +381,7 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n \t\t */\n \t\tf_threadSleep(10);\n \t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\tenterVThreadTransitionCritical(currentThread, thread);\n+\t\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \t\tcarrierThreadObject = currentThread->carrierThreadObject;\n \t}\n \n@@ -455,7 +394,7 @@ virtualThreadUnmountEnd(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, threadObj);\n@@ -481,7 +420,7 @@ virtualThreadUnmountEnd(JNIEnv *env, jobject thread)\n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_FALSE);\n \n \t/* Allow thread to be inspected again. */\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n }\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n@@ -537,14 +476,14 @@ JVM_VirtualThreadHideFrames(\n #if JAVA_SPEC_VERSION < 23\n \t\tAssert_SC_true(vThreadObj == J9_JNI_UNWRAP_REFERENCE(vthread));\n #endif /* JAVA_SPEC_VERSION < 23 */\n-\t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t\tvmFuncs->enterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, hide);\n \n \tif (!hide) {\n \t\tAssert_SC_true(hiddenFrames);\n-\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t\tvmFuncs->exitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \n \tvmFuncs->internalExitVMToJNI(currentThread);\n@@ -570,7 +509,7 @@ JVM_VirtualThreadMount(JNIEnv *env, jobject vthread, jboolean hide)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadMount_Entry(currentThread, vthread, hide);\n \n@@ -592,7 +531,7 @@ JVM_VirtualThreadUnmount(JNIEnv *env, jobject vthread, jboolean hide)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadUnmount_Entry(currentThread, vthread, hide);\n \n@@ -620,7 +559,7 @@ JVM_VirtualThreadStart(JNIEnv *env, jobject vthread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadStart_Entry(currentThread, vthread);\n \n@@ -639,7 +578,7 @@ JVM_VirtualThreadEnd(JNIEnv *env, jobject vthread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadEnd_Entry(currentThread, vthread);\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 06d9d9f3815..56d4af6c8e2 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -303,7 +303,7 @@ typedef void(*j9_tls_finalizer_t)(void *);\n  * The full mapping is under jvmtiInternals.h <JVMTI_VTHREAD_STATE_*>.\n  */\n #define JAVA_LANG_VIRTUALTHREAD_BLOCKING 12\n-#define JAVA_LANG_VIRTUALTHREAD_WAITING  13\n+#define JAVA_LANG_VIRTUALTHREAD_WAITING  15\n #define JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING 17\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n@@ -5311,6 +5311,8 @@ typedef struct J9InternalVMFunctions {\n \tUDATA (*walkAllStackFrames)(struct J9VMThread *currentThread, J9StackWalkState *walkState);\n \tBOOLEAN (*acquireVThreadInspector)(struct J9VMThread *currentThread, jobject thread, BOOLEAN spin);\n \tvoid (*releaseVThreadInspector)(struct J9VMThread *currentThread, jobject thread);\n+\tvoid (*enterVThreadTransitionCritical)(struct J9VMThread *currentThread, jobject thread);\n+\tvoid (*exitVThreadTransitionCritical)(struct J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \tUDATA (*checkArgsConsumed)(struct J9JavaVM * vm, struct J9PortLibrary* portLibrary, struct J9VMInitArgs* j9vm_args);\n #if defined(J9VM_ZOS_3164_INTEROPERABILITY) && (JAVA_SPEC_VERSION >= 17)\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 9ac10a42602..6254cca65b6 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4688,6 +4688,24 @@ acquireVThreadInspector(J9VMThread *currentThread, jobject thread, BOOLEAN spin)\n  */\n void\n releaseVThreadInspector(J9VMThread *currentThread, jobject thread);\n+\n+/**\n+ * @brief Enter VirtualThread's critical section for transitions.\n+ *\n+ * @param currentThread the current thread\n+ * @param thread target VirtualThread that is transitioning\n+ */\n+void\n+enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread);\n+\n+/**\n+ * @brief Exit VirtualThread's critical section for transitions.\n+ *\n+ * @param currentThread the current thread\n+ * @param thread target VirtualThread that is transitioning\n+ */\n+void\n+exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n #if JAVA_SPEC_VERSION >= 24\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex a44a9878727..0d9fce2dfa5 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -1525,7 +1525,6 @@ class INTERPRETER_CLASS\n \n \t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n \t\tyieldContinuation(_currentThread, FALSE, returnState);\n-\n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 4ec703f16ca..8e370f01060 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -661,6 +661,71 @@ releaseVThreadInspector(J9VMThread *currentThread, jobject thread)\n \t}\n }\n \n+void\n+enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n+\tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\n+retry:\n+\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)) {\n+\t\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0, ~(U_64)0)) {\n+\t\t\t/* Thread is being inspected or unmounted, wait. */\n+\t\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t\t\tVM_AtomicSupport::yieldCPU();\n+\t\t\t/* After wait, the thread may suspend here. */\n+\t\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\t\t\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\t\t}\n+\n+\t\t/* Now we have locked access to virtualThreadInspectorCount, check if the vthread is suspended.\n+\t\t* If suspended, release the access and spin-wait until the vthread is resumed.\n+\t\t* If not suspended, link the current J9VMThread with the virtual thread object.\n+\t\t*/\n+\t\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)\n+\t\t&& objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->internalSuspendStateOffset, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE, (U_64)currentThread)\n+\t\t) {\n+\t\t\treturn;\n+\t\t}\n+\t\tJ9OBJECT_I64_STORE(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0);\n+\t}\n+\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t/* Spin is used instead of the halt flag as we cannot guarantee suspend flag is still set now.\n+\t*\n+\t* TODO: Dynamically increase the sleep time to a bounded maximum.\n+\t*/\n+\tj9thread_sleep(10);\n+\t/* After wait, the thread may suspend here. */\n+\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\tgoto retry;\n+}\n+\n+void\n+exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tj9object_t vthread = J9_JNI_UNWRAP_REFERENCE(thread);\n+\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n+\n+\t/* Remove J9VMThread address from internalSuspendedState field, as the thread state is no longer in a transition. */\n+\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, vthread, vm->internalSuspendStateOffset, (U_64)currentThread, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE)) {\n+\t\t/* Wait if the suspend flag is set. */\n+\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t\tVM_AtomicSupport::yieldCPU();\n+\t\t/* After wait, the thread may suspend here. */\n+\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\t\tvthread = J9_JNI_UNWRAP_REFERENCE(thread);\n+\t}\n+\n+\t/* Update to virtualThreadInspectorCount must be after clearing isSuspendedInternal field to retain sync ordering. */\n+\tAssert_VM_true(-1 == J9OBJECT_I64_LOAD(currentThread, vthread, vm->virtualThreadInspectorCountOffset));\n+\tJ9OBJECT_I64_STORE(currentThread, vthread, vm->virtualThreadInspectorCountOffset, 0);\n+}\n+\n #if JAVA_SPEC_VERSION >= 24\n void\n detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n@@ -682,7 +747,7 @@ void\n preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject)\n {\n \tUDATA monitorCount = 0;\n-\tif (0 < currentThread->ownedMonitorCount) {\n+\tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n@@ -737,7 +802,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n \n-\tif (0 < currentThread->ownedMonitorCount) {\n+\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n@@ -816,6 +882,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tresult = J9_OBJECT_MONITOR_OOM;\n \t\t\tgoto done;\n \t\t}\n+\t} else {\n+\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t}\n \n \tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n@@ -828,7 +896,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t/* Record wait monitor state. */\n \t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n \n-\t\t/* Reset monitor entry count to 1.*/\n+\t\t/* Reset monitor entry count to 1. */\n \t\tmonitor->count = 1;\n \n \t\t/* Add Continuation struct to the monitor's waiting list. */\n@@ -846,8 +914,10 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t/* Clear the blocking object on the carrier thread. */\n \tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n-\n done:\n+\tif (J9_OBJECT_MONITOR_YIELD_VIRTUAL != result) {\n+\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n \treturn result;\n }\n \ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5cfdd0003fe..cf7e9afdea2 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -459,6 +459,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n \twalkAllStackFrames,\n \tacquireVThreadInspector,\n \treleaseVThreadInspector,\n+\tenterVThreadTransitionCritical,\n+\texitVThreadTransitionCritical,\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \tcheckArgsConsumed,\n #if defined(J9VM_ZOS_3164_INTEROPERABILITY) && (JAVA_SPEC_VERSION >= 17)\n",
    "840b2c95f65f3297e4b7e6a3d5ee87e400e3ffd2": "diff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 56d4af6c8e2..fad00fcc4cc 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -303,8 +303,11 @@ typedef void(*j9_tls_finalizer_t)(void *);\n  * The full mapping is under jvmtiInternals.h <JVMTI_VTHREAD_STATE_*>.\n  */\n #define JAVA_LANG_VIRTUALTHREAD_BLOCKING 12\n+#define JAVA_LANG_VIRTUALTHREAD_BLOCKED  13\n #define JAVA_LANG_VIRTUALTHREAD_WAITING  15\n+#define JAVA_LANG_VIRTUALTHREAD_WAIT     16\n #define JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING 17\n+#define JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT 18\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n typedef enum {\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 6254cca65b6..e87ba500d7a 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4714,9 +4714,10 @@ exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread);\n  *\n  * @param currentThread the current thread\n  * @param continuationObject the Continuation object\n+ * @param isObjectWait if the call is from Object.wait()\n  */\n void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject);\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait);\n \n /**\n  * @brief Inflate all monitors and prepare the VirtualThread to yield.\ndiff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex 521ebf3dffa..710a6591725 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -268,6 +268,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"blockPermit\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"notified\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n \n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 0d9fce2dfa5..cee724c957a 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -2943,28 +2943,35 @@ class INTERPRETER_CLASS\n \t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n \t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n-\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n-\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n-\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n-\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n-\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n-\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n-\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n-\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n \n-\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n-\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n-\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -5164,8 +5171,11 @@ class INTERPRETER_CLASS\n \t\t\t}\n \t\t\t/* Try to yield the virtual thread if it will be blocked. */\n \t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n \t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t} else {\n \t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n@@ -5702,7 +5712,6 @@ class INTERPRETER_CLASS\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER:\n \t\t\tbreak;\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n-\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n \t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 8e370f01060..bcec14d089b 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -261,9 +261,9 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \n \tif (started) {\n #if JAVA_SPEC_VERSION >= 24\n-\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n-\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject);\n-\n+\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t&& (J9VM_CONTINUATION_RETURN_FROM_YIELD != continuation->returnState)) {\n+\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject, (J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT == continuation->returnState));\n \t\t}\n \t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n \t\tresult = FALSE;\n@@ -744,9 +744,11 @@ updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n }\n \n void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject)\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n {\n \tUDATA monitorCount = 0;\n+\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObject);\n+\n \tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n@@ -755,15 +757,17 @@ preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continu\n \t\t\tj9objectmonitor_t lock = 0;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t}\n+\t\t\tif (syncObject != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t}\n \n-\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \n@@ -774,23 +778,29 @@ preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continu\n \t\t\tj9objectmonitor_t lock = 0;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t}\n+\t\t\tif (syncObject != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t}\n \n-\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \t}\n \n \tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n+\tif (isObjectWait) {\n+\t\tcurrentThread->ownedMonitorCount -= 1;\n+\t}\n \n \t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n \tcurrentThread->osThread->lockedmonitorcount += monitorCount;\n+\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n }\n \n UDATA\n@@ -810,27 +820,29 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tj9object_t object = monitorRecords->object;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\tif (syncObj != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = 0;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlock = 0;\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t}\n \n-\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\tgoto done;\n+\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \n@@ -840,27 +852,29 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tj9object_t object = monitorRecords->object;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\tif (syncObj != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = 0;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlock = 0;\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t}\n \n-\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\tgoto done;\n+\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \t}\n@@ -898,6 +912,9 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t/* Reset monitor entry count to 1. */\n \t\tmonitor->count = 1;\n+\t\t/* Reset monitor state to pre-detach state so omrthread_monitor_exit behave correctly. */\n+\t\tmonitor->owner = currentThread->osThread;\n+\t\tsyncObjectMonitor->ownerContinuation = NULL;\n \n \t\t/* Add Continuation struct to the monitor's waiting list. */\n \t\tomrthread_monitor_exit(monitor);\n@@ -928,7 +945,7 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n \tjobject result = NULL;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n-\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\tif (J9_ARE_NO_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n \t|| (NULL == vm->blockedContinuations)\n \t) {\n \t\treturn NULL;\n@@ -945,6 +962,23 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n \t\t\twhile (NULL != listHead) {\n \t\t\t\tbool unblocked = false;\n \t\t\t\tnext = listHead->nextWaitingContinuation;\n+\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, listHead->vthread);\n+\t\t\t\t/* Skip vthreads that are still in transition. */\n+\t\t\t\tswitch (state) {\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_BLOCKING:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAITING:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING:\n+\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t\tlistHead = next;\n+\t\t\t\t\tcontinue;\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAIT:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT:\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, listHead->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n+\t\t\t\t\t/* FALLTHROUGH */\n+\t\t\t\tdefault:\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n \t\t\t\t\tunblocked = true;\n \t\t\t\t} else {\n@@ -959,8 +993,9 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread, J9JavaVM *vm)\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n+\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t\t}\n-\t\t\t\t\tJ9ThreadAbstractMonitor *monitor = getInflatedObjectMonitor(vm, syncObject, lock);\n+\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n \t\t\t\t\tif (0 == monitor->count) {\n \t\t\t\t\t\tunblocked = true;\n \t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex e5b524fb436..e95f5e60d13 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -181,6 +181,7 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t\tif ((0 == monitor->pinCount)\n #if JAVA_SPEC_VERSION >= 24\n \t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n+\t\t\t&& (NULL == objectMonitor->waitingContinuations)\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t) {\n \t\t\t\tif (deflate) {\n",
    "1be02821312c6b66a58258e45b1ffe849b842b74": "diff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex a58921d2073..1b53200ed2d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -439,7 +439,6 @@ typedef struct J9JFRMonitorWaited {\n \n typedef struct J9JFRThreadParked {\n \tJ9JFR_EVENT_WITH_STACKTRACE_FIELDS\n-\tI_64 time;\n \tI_64 duration;\n \tstruct J9VMThread *thread;\n \tstruct J9Class *parkedClass;\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 29f69ec440e..84a35eecb05 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -632,7 +632,7 @@ class VM_JFRChunkWriter {\n \twriteThreadParkEvent(void *anElement, void *userData)\n \t{\n \t\tThreadParkEntry *entry = (ThreadParkEntry *)anElement;\n-\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *) userData;\n+\t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n \n \t\t/* reserve size field */\n \t\tU_8 *dataStart = reserveEventSize(_bufferWriter);\n@@ -658,10 +658,10 @@ class VM_JFRChunkWriter {\n \t\t_bufferWriter->writeLEB128(entry->parkedClass);\n \n \t\t/* timeout value which is always in millis */\n-\t\t_bufferWriter->writeLEB128(entry->timeOut/1000000);\n+\t\t_bufferWriter->writeLEB128(entry->timeOut / 1000000);\n \n \t\t/* until value which is always in millis */\n-\t\t_bufferWriter->writeLEB128(entry->untilTime/1000000);\n+\t\t_bufferWriter->writeLEB128(entry->untilTime / 1000000);\n \n \t\t/* address of monitor */\n \t\t_bufferWriter->writeLEB128(entry->parkedAddress);\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 2809a0d64b3..6aff9c8e464 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -704,10 +704,12 @@ jfrVMThreadParked(J9HookInterface **hook, UDATA eventNum, void *eventData, void*\n \tJ9JFRThreadParked *jfrEvent = (J9JFRThreadParked*)reserveBufferWithStackTrace(currentThread, currentThread, J9JFR_EVENT_TYPE_THREAD_PARK, sizeof(*jfrEvent));\n \tif (NULL != jfrEvent) {\n \t\t// TODO: worry about overflow?\n-\t\tjfrEvent->time = (event->millis * 1000000) + event->nanos;\n-\t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n-\t\tjfrEvent->parkedAddress = event->parkedAddress;\n+\t\tI_64 currentTime = j9time_nano_time();\n+\t\tjfrEvent->duration = currentTime - event->startTicks;\n \t\tjfrEvent->parkedClass = event->parkedClass;\n+\t\tjfrEvent->timeOut = (event->millis * 1000000) + event->nanos;\n+\t\tjfrEvent->untilTime = currentTime;\n+\t\tjfrEvent->parkedAddress = event->parkedAddress;\n \t}\n }\n \ndiff --git a/test/functional/cmdLineTests/jfr/playlist.xml b/test/functional/cmdLineTests/jfr/playlist.xml\nindex 88f1fa1e51e..0da9ad42bc5 100644\n--- a/test/functional/cmdLineTests/jfr/playlist.xml\n+++ b/test/functional/cmdLineTests/jfr/playlist.xml\n@@ -76,9 +76,9 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t<impl>openj9</impl>\n \t\t\t<impl>ibm</impl>\n \t\t</impls>\n-\t\t<!-- For the time being, these tests are limited to JDK17+. -->\n+\t\t<!-- For the time being, these tests are limited to JDK11+. -->\n \t\t<versions>\n-\t\t\t<version>17+</version>\n+\t\t\t<version>11+</version>\n \t\t</versions>\n \t</test>\n </playlist>\n",
    "09bf0ffcc1c893de5ce868b87c4176fc165927bc": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex b57693de79e..1cb1b12d803 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,10 +99,8 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-#if defined(J9HAMMER) || defined(PPC64)\n-\t/* Set off-heap enabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = true;\n-#endif /* defined(J9HAMMER) || defined(PPC64) */\n+\t/* set off-heap disabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = false;\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "b3215af38fe1751e512c54dc8e8508bf6e13c63e": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex b57693de79e..1cb1b12d803 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,10 +99,8 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-#if defined(J9HAMMER) || defined(PPC64)\n-\t/* Set off-heap enabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = true;\n-#endif /* defined(J9HAMMER) || defined(PPC64) */\n+\t/* set off-heap disabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = false;\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "8adca0ea3965aab4fae1be3ace8d23dfdee78721": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex a854447199e..07d4cea3fdb 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,17 +116,6 @@\n #include <strings.h>\n #endif\n \n-#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n-#include <intrin.h>\n-#elif defined(TR_TARGET_X86)\n-inline unsigned long long _xgetbv(unsigned int ecx)\n-   {\n-   unsigned int eax, edx;\n-   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n-   return ((unsigned long long)edx << 32) | eax;\n-   }\n-#endif\n-\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -345,43 +334,6 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n-      bool disableAVX = true;\n-      bool disableAVX512 = true;\n-\n-#if defined(TR_TARGET_X86)\n-      // Check XCRO register for OS support of xmm/ymm/zmm\n-      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n-         {\n-         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n-         disableAVX = ((6 & _xgetbv(0)) != 6);\n-         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n-         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n-         }\n-#endif\n-\n-      if (disableAVX)\n-         {\n-         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n-         }\n-\n-      if (disableAVX512)\n-         {\n-         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n-         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n-         }\n-\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex 4cf1782cda1..ddde9002cc0 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,6 +67,16 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n+TR::CPU\n+J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n+   {\n+   if (omrPortLib == NULL)\n+      return TR::CPU();\n+\n+   TR::CPU::enableFeatureMasks();\n+   return OMR::X86::CPU::detect(omrPortLib);\n+   }\n+\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex ce53cdde422..9baba2d4a47 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,6 +59,13 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n+   /**\n+    * @brief A factory method used to construct a CPU object based on the underlying hardware\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "96b1831fcdd85f4d2be9263caaabe4974b14dea0": "diff --git a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\nindex a9c74257ee0..b7a5a0c5d9e 100644\n--- a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n+++ b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n@@ -1561,6 +1561,14 @@ bool J9::RecognizedCallTransformer::isInlineable(TR::TreeTop* treetop)\n          case TR::java_lang_Long_rotateLeft:\n          case TR::java_lang_Long_rotateRight:\n             return comp()->target().cpu.getSupportsHardware64bitRotate();\n+         case TR::java_lang_Integer_compress:\n+            return comp()->target().cpu.getSupportsHardware32bitCompress();\n+         case TR::java_lang_Long_compress:\n+            return comp()->target().cpu.getSupportsHardware64bitCompress();\n+         case TR::java_lang_Integer_expand:\n+            return comp()->target().cpu.getSupportsHardware32bitExpand();\n+         case TR::java_lang_Long_expand:\n+            return comp()->target().cpu.getSupportsHardware64bitExpand();\n          case TR::java_lang_Math_abs_I:\n          case TR::java_lang_Math_abs_L:\n             return cg()->supportsIntAbs();\n@@ -1681,6 +1689,18 @@ void J9::RecognizedCallTransformer::transform(TR::TreeTop* treetop)\n \n             break;\n             }\n+         case TR::java_lang_Integer_compress:\n+            processIntrinsicFunction(treetop, node, TR::icompressbits);\n+            break;\n+         case TR::java_lang_Long_compress:\n+            processIntrinsicFunction(treetop, node, TR::lcompressbits);\n+            break;\n+         case TR::java_lang_Integer_expand:\n+            processIntrinsicFunction(treetop, node, TR::iexpandbits);\n+            break;\n+         case TR::java_lang_Long_expand:\n+            processIntrinsicFunction(treetop, node, TR::lexpandbits);\n+            break;\n          case TR::java_lang_Math_abs_I:\n             processIntrinsicFunction(treetop, node, TR::iabs);\n             break;\n",
    "db3f244ab1c7f010bcc7073bcf9a298ad6e92470": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex cee724c957a..ad3304e1210 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5770,7 +5770,14 @@ class INTERPRETER_CLASS\n \n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n-\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(_vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t&& (_currentThread->ownedMonitorCount > 0)\n+\t\t&& !isFinished\n+\t\t) {\n+\t\t\tpreparePinnedVirtualThreadForUnmount(_currentThread, NULL, false);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n \t\tyieldContinuation(_currentThread, isFinished, J9VM_CONTINUATION_RETURN_FROM_YIELD);\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex bcec14d089b..9899d4e0be9 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -261,8 +261,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \n \tif (started) {\n #if JAVA_SPEC_VERSION >= 24\n-\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n-\t\t&& (J9VM_CONTINUATION_RETURN_FROM_YIELD != continuation->returnState)) {\n+\t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n \t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject, (J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT == continuation->returnState));\n \t\t}\n \t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n@@ -448,13 +447,17 @@ isPinnedContinuation(J9VMThread *currentThread)\n \n \tif (currentThread->continuationPinCount > 0) {\n \t\tresult = J9VM_CONTINUATION_PINNED_REASON_CRITICAL_SECTION;\n-\t} else if (currentThread->ownedMonitorCount > 0) {\n-\t\tresult = J9VM_CONTINUATION_PINNED_REASON_MONITOR;\n \t} else if (currentThread->callOutCount > 0) {\n \t\t/* TODO: This check should be changed from > 1 to > 0 once the call-ins are no\n \t\t * longer used and the new design for single cInterpreter is implemented.\n \t\t */\n \t\tresult = J9VM_CONTINUATION_PINNED_REASON_NATIVE;\n+\t} else if ((currentThread->ownedMonitorCount > 0)\n+#if JAVA_SPEC_VERSION >= 24\n+\t&& J9_ARE_NO_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t) {\n+\t\tresult = J9VM_CONTINUATION_PINNED_REASON_MONITOR;\n \t} else {\n \t\t/* Do nothing. */\n \t}\n@@ -800,7 +803,9 @@ preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continu\n \n \t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n \tcurrentThread->osThread->lockedmonitorcount += monitorCount;\n-\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\tif (J9VM_CONTINUATION_RETURN_FROM_YIELD != currentThread->currentContinuation->returnState) {\n+\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n }\n \n UDATA\n@@ -812,7 +817,9 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n \n-\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\tif (NULL != syncObj) {\n+\t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n \tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n@@ -879,60 +886,63 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t}\n \t}\n \n-\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n-\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n-\t\tif (NULL != syncObjectMonitor) {\n-\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\tif (NULL != syncObj) {\n+\t\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n+\t\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\t\tif (NULL != syncObjectMonitor) {\n+\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\t\t\t} else {\n+\t\t\t\tlock = 0;\n+\t\t\t}\n \t\t} else {\n-\t\t\tlock = 0;\n+\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n \t\t}\n-\t} else {\n-\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n-\t}\n \n-\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n-\t\tif (NULL == syncObjectMonitor) {\n-\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\tgoto done;\n+\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n+\t\t\tif (NULL == syncObjectMonitor) {\n+\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\tgoto done;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t}\n-\t} else {\n-\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t}\n \n-\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n-\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n+\t\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n+\t\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n \n-\tif (isObjectWait) {\n-\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n-\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n-\n-\t\t/* Record wait monitor state. */\n-\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n-\n-\t\t/* Reset monitor entry count to 1. */\n-\t\tmonitor->count = 1;\n-\t\t/* Reset monitor state to pre-detach state so omrthread_monitor_exit behave correctly. */\n-\t\tmonitor->owner = currentThread->osThread;\n-\t\tsyncObjectMonitor->ownerContinuation = NULL;\n-\n-\t\t/* Add Continuation struct to the monitor's waiting list. */\n-\t\tomrthread_monitor_exit(monitor);\n-\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n-\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n-\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n-\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n-\t} else {\n-\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\tif (isObjectWait) {\n+\t\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\n+\t\t\t/* Record wait monitor state. */\n+\t\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n+\n+\t\t\t/* Reset monitor entry count to 1.*/\n+\t\t\tmonitor->count = 1;\n+\t\t\t/* Reset monitor state to pre-detach state so omrthread_monitor_exit behave correctly. */\n+\t\t\tmonitor->owner = currentThread->osThread;\n+\t\t\tsyncObjectMonitor->ownerContinuation = NULL;\n+\n+\t\t\t/* Add Continuation struct to the monitor's waiting list. */\n+\t\t\tomrthread_monitor_exit(monitor);\n+\t\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n+\t\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t} else {\n+\t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\t}\n+\n+\t\t/* Clear the blocking object on the carrier thread. */\n+\t\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n \t}\n \n \t/* Subtract the detached monitor from the carrier thread's lockedmonitorcount. */\n \tcurrentThread->osThread->lockedmonitorcount -= monitorCount;\n \n-\t/* Clear the blocking object on the carrier thread. */\n-\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n done:\n-\tif (J9_OBJECT_MONITOR_YIELD_VIRTUAL != result) {\n+\tif ((NULL != syncObj) && (J9_OBJECT_MONITOR_YIELD_VIRTUAL != result)) {\n \t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \treturn result;\n",
    "fd112fb389076fa7740db9b2984d6df12c9e0556": "diff --git a/runtime/gc_base/IndexableObjectAllocationModel.cpp b/runtime/gc_base/IndexableObjectAllocationModel.cpp\nindex a666a08002f..07e4f5a9c82 100644\n--- a/runtime/gc_base/IndexableObjectAllocationModel.cpp\n+++ b/runtime/gc_base/IndexableObjectAllocationModel.cpp\n@@ -401,11 +401,10 @@ MM_IndexableObjectAllocationModel::getSparseAddressAndDecommitLeaves(MM_Environm\n \t\tvoid *virtualLargeObjectHeapAddress = extensions->largeObjectVirtualMemory->allocateSparseFreeEntryAndMapToHeapObject(spine, byteAmount);\n \t\tif (NULL != virtualLargeObjectHeapAddress) {\n \t\t\tindexableObjectModel->setDataAddrForContiguous((J9IndexableObject *)spine, virtualLargeObjectHeapAddress);\n+\t\t} else {\n+\t\t\t_allocateDescription.setSpine(NULL);\n+\t\t\tspine = NULL;\n \t\t}\n-\t\t/*\n-\t\t * TODO:we might need a special state for this regions (different from just plain ARRAYLET),\n-\t\t * such as ARRAYLET_DECOMMITED or just DECOMMITED\n-\t\t */\n \t}\n \n \tTrc_MM_getSparseAddressAndDecommitLeaves_Exit(env->getLanguageVMThread(), spine, (void *)bytesRemaining);\n",
    "1f970cd6ebae7d6137594e3c071ae8146987a63b": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 9dcc30e3fbe..d1e6cb92515 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,8 +65,10 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-import jdk.internal.util.SystemProps;\n /*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n+/*[IF JAVA_SPEC_VERSION >= 17]*/\n+import jdk.internal.util.SystemProps;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -172,10 +174,6 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tprivate static String stdoutProp;\n-\tprivate static String stderrProp;\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -236,7 +234,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = isStdout ? stdoutProp : stderrProp;\n+\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -279,20 +277,6 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tProperties props = internalGetProperties();\n-\t\t// If the user didn't set the encoding property, set it now.\n-\t\tif (FileDescriptor.out == desc) {\n-\t\t\tif (null == stdoutProp) {\n-\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} else if (FileDescriptor.err == desc) {\n-\t\t\tif (null == stderrProp) {\n-\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -323,12 +307,6 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n-\n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n-\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -389,9 +367,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -729,7 +707,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n+\tMap<String, String> initializedProperties = new HashMap<>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -741,9 +719,11 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -769,6 +749,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\tinitializedProperties.putAll(SystemProps.initProperties());\n+\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -779,43 +762,12 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n-\n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n-\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tif (null != stdoutProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tif (null == stdoutProp) {\n-\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stdoutProp) {\n-\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif (null != stderrProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n-\t\tif (null == stderrProp) { //$NON-NLS-1$\n-\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stderrProp) {\n-\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1088,6 +1040,7 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n+/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1097,13 +1050,14 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n+/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION >= 11]*/\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 3a61379b7d8..4da0ef86244 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,7 +1900,6 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\tassert(!\"JVM_GetProperties\");\n-\treturn NULL;\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 048eede667f..56e08e267d5 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,27 +44,7 @@\n #endif\n \n \n-\n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n-\n-\n-typedef struct {\n-\tint errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n-static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n-jobject getPropertyList(JNIEnv *env);\n-\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -93,7 +73,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n \n /**\n  * sysPropID\n@@ -203,10 +183,12 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn getPropertyList(env);\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n+#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -259,350 +241,6 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n-\n-jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i, nCommandLineDefines = 0;\n-\tjclass stringClass;\n-\tjarray args = NULL;\n-\tint propertyCount;\n-\n-\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (!stringClass) {\n-/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n-\t\treturn (jobject) 0;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = 0;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-/*\t\tprintf(\"\\nFailed to create arg array\");*/\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (defaultValues[i] == NULL) continue;\n-\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-/**\n- * @return 0 on success, -1 on error\n- */\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n-}\n-\n-jobject getPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-\tchar *propertyKey = NULL;\n-\tconst char * language = NULL;\n-\tconst char * region = NULL;\n-\tconst char * variant = NULL;\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n-\t * correct allocation.\n-\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n-\t * enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-#if defined(JCL_J2SE)\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n-\t * \twe consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#ifdef J9VM_ENV_DATA64\n-\tstrings[propIndex++] = \"64\";\n-#else\n-\tstrings[propIndex++] = \"32\";\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-/*\tDon't set this property as the class library will look here first and when\n-\tthere is a security manager you will get a security exception. The code\n-\tlooks in this package by default, see URLConnection.getContentHandler()\n-\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n-\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n-*/\n-\n-\t/*[PR 95709]*/\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tjclmem_free_memory(env, usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n-\n-static void JNICALL\n-systemPropertyIterator(char* key, char* value, void* userData)\n-{\n-\tCreateSystemPropertiesData * iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif ( iteratorData->errorOccurred ) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i=0; i < defaultCount; i+=2) {\n-\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i+1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\tTrc_JCL_systemPropertyIterator(env, key, value);\n-}\n-\n-\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex f4b04862ac0..14a9c80a9a0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,7 +350,6 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n-\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -434,6 +433,7 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n+\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,13 +599,18 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n+if(JAVA_SPEC_VERSION EQUAL 11)\n+\tomr_add_exports(jclse\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n+\t)\n+endif()\n+\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex c64230a9bb3..0ec24ba02d6 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex 626a197be7a..d844c63d9ba 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,5 +23,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n+\t\t<exclude-if condition=\"spec.java12\"/>\n+\t</export>\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex b8a780711eb..549a8712e3b 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,7 +249,9 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\" />\n+\t<export name=\"Java_java_lang_System_getPropertyList\">\n+\t\t<exclude-if condition=\"spec.java17\" />\n+\t</export>\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex d1f9ff46fb4..a1bae22f747 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,9 +41,6 @@\n #include \"atoe.h\"\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -63,159 +60,6 @@ char* CodepageTable[] = {\n #endif\n };\n \n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, the '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char**envSpace) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize;\n-\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n-\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\tif(*envSpace==NULL) return \".\";\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1)\n-\t\t\treturn *envSpace;\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tjclmem_free_memory(env,*envSpace);\n-\t\t*envSpace = NULL;\n-\t\t}\n-\tif (j9file_attr(P_tmpdir) > -1)\n-\t\treturn P_tmpdir;\n-\tif (j9file_attr(\"/tmp\") > -1)\n-\t\treturn \"/tmp\";\n-\treturn \".\";\n-}\n-\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-\tchar userdir[EsMaxPath] = {0};\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (charResult == NULL) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n-#endif\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tjclmem_free_memory(env,envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tjclmem_free_memory(env, homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex c6adf96b6a4..7bd081a6614 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,139 +43,11 @@\n #include <VersionHelpers.h>\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir(JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize;\n-\tchar *envSpace = NULL, *tempdir = NULL;\n-\tjobject result;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i;\n-\tchar userdir[EsMaxPath];\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process, token;\n-\tUDATA handle;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-#if !defined(JCL_J2SE)\n-\tUINT codePage;\n-\tchar codePageBuf[32];\n-\tCPINFO cpInfo;\n-#endif\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\t\tif(!envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\t/* Jazz 52075 JCL_J2SE is always true */\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tif (tempdir) jclmem_free_memory(env,tempdir);\n-\tif (envSpace) jclmem_free_memory(env,envSpace);\n-\treturn result;\n-}\n-\n-\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -228,11 +100,7 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n-#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n-#else\n-\t\tcodepage[1] = 'P';\n-#endif\n \t}\n \n \treturn codepage;\n@@ -246,64 +114,3 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n-\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char * getTmpDir(JNIEnv *env, char **tempdir) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\tDWORD rc;\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\n-\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\t/* If the function succeeds, the return value is the number of characters stored into \n-\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n-\tthe return value will exceed the length parameter (i.e. the required size)\n-\t*/\n-\n-\tif((rc != 0) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif(rc != 0) {\n-\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n-\t\t\tif(NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n-\t\t\t\tif(rc == 0) {\n-\t\t\t\t\tjclmem_free_memory(env, buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-I_32\n-convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex a7912fb5583..ba13180f677 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,20 +580,16 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 21495596345..73e295f0128 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,3 +2430,21 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+# END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 1b53200ed2d..73a0148c12a 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5347,6 +5347,7 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tjobject (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex e35676d0fae..f3a101a3ea3 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,11 +190,13 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -800,10 +802,7 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32\n-convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n char * getTmpDir (JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -813,7 +812,6 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n char * getTmpDir (JNIEnv *env, char**envSpace);\n-jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 8cbe8e3aeb3..9e605c155c3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,6 +2665,12 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n+/* ---------------- filehelp.c ---------------- */\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 93a94507515..75ff44fbcc6 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,6 +4335,14 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray getSystemPropertyList(JNIEnv *env);\n+\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 394304ae25e..1487fb806a7 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,6 +116,12 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n+if(OMR_OS_WINDOWS)\n+\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n+else()\n+\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n+endif()\n+\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex 9e00e0836ea..c246c3bd583 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,6 +50,12 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\nnew file mode 100644\nindex 00000000000..343fbff4ecc\n--- /dev/null\n+++ b/runtime/util/unix/filehelp.c\n@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **envSpace)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n+\tif (envSize > 0) {\n+\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == *envSpace) {\n+\t\t\treturn \".\";\n+\t\t}\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1) {\n+\t\t\treturn *envSpace;\n+\t\t}\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tj9mem_free_memory(*envSpace);\n+\t\t*envSpace = NULL;\n+\t}\n+\tif (j9file_attr(P_tmpdir) > -1) {\n+\t\treturn P_tmpdir;\n+\t}\n+\tif (j9file_attr(\"/tmp\") > -1) {\n+\t\treturn \"/tmp\";\n+\t}\n+\treturn \".\";\n+}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\nnew file mode 100644\nindex 00000000000..55b241301c0\n--- /dev/null\n+++ b/runtime/util/win32/filehelp.c\n@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <windows.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **tempdir)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\tif ((0 != rc) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif (0 != rc) {\n+\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n+\t\t\t\tif (0 == rc) {\n+\t\t\t\t\tj9mem_free_memory(buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5cfdd0003fe..79558bccedd 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -484,4 +484,5 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex 5447aeb934d..c7d04229b2a 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,3 +1017,5 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n+\n+TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 74f0f9327ec..5e4db9c54c3 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,6 +20,13 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n+#if defined(WIN32)\n+#include <windows.h>\n+#else /* defined(WIN32) */\n+#include <pwd.h>\n+#include <unistd.h>\n+#endif /* defined(WIN32) */\n+\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -32,24 +39,28 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n+#if defined(J9ZOS390)\n+#include \"atoe.h\"\n+#endif /* defined(J9ZOS390) */\n+\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n+static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n+static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM * vm);\n+static UDATA addModularitySystemProperties(J9JavaVM *vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -168,7 +179,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -315,7 +326,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -461,7 +472,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM * vm)\n+addModularitySystemProperties(J9JavaVM *vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -559,7 +570,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -586,7 +597,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM * vm)\n+initializeSystemProperties(J9JavaVM *vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -595,22 +606,22 @@ initializeSystemProperties(J9JavaVM * vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char* propValue = NULL;\n+\tconst char *propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n+\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n+\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -621,7 +632,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n+\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n+\tif (NULL == vm->systemProperties) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -632,7 +644,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t}\n \n-\tif (JAVA_SPEC_VERSION == 8) {\n+\tif (8 == JAVA_SPEC_VERSION) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -656,7 +668,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (JAVA_SPEC_VERSION == 8) {\n+\t\tif (8 == JAVA_SPEC_VERSION) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -746,14 +758,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_NAME) */\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_VERSION) */\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -766,9 +778,9 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else\n+#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \tpropValue = \"..\";\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -796,12 +808,12 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) */\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (pathSep == NULL) {\n+\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (NULL == pathSep) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -911,16 +923,16 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \n-\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n+\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (propValue == NULL) {\n+\t\t\tif (NULL == propValue) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -970,7 +982,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n+\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1024,8 +1036,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n-\t\t\tchar *defaultEndorsedDir =  NULL;\n+\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n+\t\t\tchar *defaultEndorsedDir = NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1117,14 +1129,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \n \n void\n-freeSystemProperties(J9JavaVM * vm)\n+freeSystemProperties(J9JavaVM *vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (property != NULL) {\n+\t\twhile (NULL != property) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1145,13 +1157,13 @@ freeSystemProperties(J9JavaVM * vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n+getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (property != NULL) {\n-\t\tif (strcmp(property->name, name) == 0) {\n+\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (NULL != property) {\n+\t\tif (0 == strcmp(property->name, name)) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1174,21 +1186,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n+addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char*)propName;\n-\tnewProp->value = (char*)propValue;\n+\tnewProp->name = (char *)propName;\n+\tnewProp->value = (char *)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1210,7 +1222,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (strcmp(property->name, \"java.home\") == 0) {\n+\t\tif (0 == strcmp(property->name, \"java.home\")) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1218,7 +1230,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n }\n \n UDATA\n-setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n+setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1230,7 +1242,7 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar * copiedValue = copyToMem(vm, value);\n+\t\tchar *copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1249,12 +1261,12 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8*\n-unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n+static U_8 *\n+unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16* unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n-\tconst char *cursor;\n+\tU_16 *unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n+\tconst char *cursor = NULL;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1267,7 +1279,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1275,7 +1287,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n+\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1317,14 +1329,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n-\t\t\t\t\t(char*)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\t\t\t\t\t(char *)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1361,8 +1373,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n-\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n+\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1433,3 +1445,647 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n+\n+/**\n+ * @return JNI_FALSE on success, JNI_TRUE on error\n+ */\n+static jboolean\n+propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn (*env)->ExceptionCheck(env);\n+}\n+\n+typedef struct {\n+\tjboolean errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+static void JNICALL\n+systemPropertyIterator(char *key, char *value, void *userData)\n+{\n+\tCreateSystemPropertiesData *iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i = 0;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif (iteratorData->errorOccurred) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i = 0; i < defaultCount; i += 2) {\n+\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i + 1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\tTrc_systemPropertyIterator(env, key, value);\n+}\n+\n+jobject\n+createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i = 0;\n+\tjint nCommandLineDefines = 0;\n+\tjarray args = NULL;\n+\tint propertyCount = 0;\n+\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (NULL == stringClass) {\n+\t\treturn NULL;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (0 != propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = JNI_FALSE;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (NULL == defaultValues[i]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+#if defined(WIN32)\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+static I_32\n+convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize = 0;\n+\tchar *envSpace = NULL;\n+\tchar *tempdir = NULL;\n+\tjobject result = NULL;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i = 0;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath];\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process = 0;\n+\tHANDLE token = 0;\n+\tUDATA handle = 0;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == envSpace) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\tstrings[propIndex++] = envSpace;\n+\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tj9mem_free_memory(tempdir);\n+\tj9mem_free_memory(envSpace);\n+\treturn result;\n+}\n+\n+#else /* defined(WIN32) */\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath] = {0};\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif /* defined(J9ZOS390) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (NULL == charResult) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* There exist situations where one of the above calls will fail.\n+\t * Fall through to the Unix solution for those cases.\n+\t */\n+#endif /* defined(J9ZOS390) */\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tj9mem_free_memory(envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tj9mem_free_memory(homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n+#endif /* defined(WIN32) */\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray\n+getSystemPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+#if JAVA_SPEC_VERSION < 17\n+\tchar *propertyKey = NULL;\n+\tconst char *language = NULL;\n+\tconst char *region = NULL;\n+\tconst char *variant = NULL;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n+\t * 2 * number of property keys is the correct allocation. Also note the call to\n+\t * addSystemProperties below, which may add some configuration-specific properties.\n+\t * Be sure to leave enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n+\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n+\t * registration of signal handlers for what we consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals.\n+\t */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#if defined(J9VM_ENV_DATA64)\n+\tstrings[propIndex++] = \"64\";\n+#else /* defined(J9VM_ENV_DATA64) */\n+\tstrings[propIndex++] = \"32\";\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tj9mem_free_memory(usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\n",
    "c099a69256a0b71aa2822aab175b0c27c8d3eb86": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat b/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\nindex ce2b585dbcb..58b84d76863 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\n@@ -671,6 +671,7 @@ MM_GCExtensionsBase.heap = required\n MM_GCExtensionsBase.heapRegionManager = required\n MM_GCExtensionsBase.indexableObjectModel = required\n MM_GCExtensionsBase.isVirtualLargeObjectHeapEnabled = bool\n+MM_GCExtensionsBase.largeObjectVirtualMemory = MM_SparseVirtualMemory*\n MM_GCExtensionsBase.objectModel = required\n MM_GCExtensionsBase.realtimeGC = required\n MM_GCExtensionsBase.referenceChainWalkerMarkMap = required\n@@ -754,6 +755,11 @@ MM_RegionPoolSegregated._smallAvailableRegions = required\n MM_RegionPoolSegregated._smallFullRegions = required\n MM_RegionPoolSegregated._splitAvailableListSplitCount = required\n MM_SegregatedGC._markingScheme = required\n+MM_SparseAddressOrderedFixedSizeDataPool._objectToSparseDataTable = J9HashTable*\n+MM_SparseDataTableEntry._dataPtr = void*\n+MM_SparseDataTableEntry._proxyObjPtr = void*\n+MM_SparseDataTableEntry._size = UDATA\n+MM_SparseVirtualMemory._sparseDataPool = MM_SparseAddressOrderedFixedSizeDataPool*\n MM_StringTable._cache = required\n MM_StringTable._table = required\n MM_StringTable._tableCount = required\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java\nnew file mode 100644\nindex 00000000000..5d201ad802f\n--- /dev/null\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java\n@@ -0,0 +1,92 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package com.ibm.j9ddr.vm29.j9;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9HashTablePointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseDataTableEntryPointer;\n+import com.ibm.j9ddr.vm29.pointer.VoidPointer;\n+import com.ibm.j9ddr.vm29.types.UDATA;\n+\n+/**\n+ * ObjectToSparseDataHashTable is used for accessing hash tables {@link HashTable}\n+ * in SparseDataTableEntry {@link MM_SparseDataTableEntryPointer} (e.g. iterator).\n+ */\n+public final class ObjectToSparseDataHashTable extends HashTable_V1<MM_SparseDataTableEntryPointer>\n+{\n+\tprivate ObjectToSparseDataHashTable(\n+\t\t\tJ9HashTablePointer hashTablePointer,\n+\t\t\tboolean isInline,\n+\t\t\tClass<MM_SparseDataTableEntryPointer> structType,\n+\t\t\tHashEqualFunction<MM_SparseDataTableEntryPointer> equalFn,\n+\t\t\tHashFunction<MM_SparseDataTableEntryPointer> hashFn) throws CorruptDataException\n+\t{\n+\t\tsuper(hashTablePointer, isInline, structType, equalFn, hashFn);\n+\t}\n+\n+\t/**\n+\t * Opens J9HashTable from J9HashTablePointer.\n+\t *\n+\t * @param structure   the J9HashTablePointer\n+\t * @throws CorruptDataException   when fails to read from structure\n+\t */\n+\tpublic static HashTable<MM_SparseDataTableEntryPointer> fromJ9HashTable(J9HashTablePointer structure) throws CorruptDataException\n+\t{\n+\t\treturn new ObjectToSparseDataHashTable(structure, false, MM_SparseDataTableEntryPointer.class, new SparseDataHashEqualFn(), new SparseDataHashFn());\n+\t}\n+\n+\tprivate static final class SparseDataHashFn implements HashFunction<MM_SparseDataTableEntryPointer>\n+\t{\n+\t\tSparseDataHashFn()\n+\t\t{\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic UDATA hash(MM_SparseDataTableEntryPointer entry) throws CorruptDataException\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\treturn UDATA.cast(entry._dataPtr());\n+\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\tthrow new CorruptDataException(e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static final class SparseDataHashEqualFn implements HashEqualFunction<MM_SparseDataTableEntryPointer>\n+\t{\n+\t\tSparseDataHashEqualFn()\n+\t\t{\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equal(MM_SparseDataTableEntryPointer entry1, MM_SparseDataTableEntryPointer entry2) throws CorruptDataException\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\treturn entry1._dataPtr().getAddress() == entry2._dataPtr().getAddress();\n+\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\tthrow new CorruptDataException(e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+}\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\nindex 0407486995e..f0e376c5b81 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\n@@ -27,6 +27,7 @@\n import com.ibm.j9ddr.IVMData;\n import com.ibm.j9ddr.tools.ddrinteractive.BaseJVMCommands;\n import com.ibm.j9ddr.tools.ddrinteractive.ICommand;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9BuildFlags;\n import com.ibm.j9ddr.vm29.pointer.helper.ValueTypeHelper;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.ACCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.AllClassesCommand;\n@@ -41,6 +42,7 @@\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.CoreInfoCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllClassesInModuleCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllClassloadersCommand;\n+import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllOffHeapEntriesCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRamClassLinearCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRegionsCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRomClassLinearCommand;\n@@ -199,6 +201,9 @@ public void run(IVMData vmData, Object[] userData)\n \t\ttoPassBack.add(new FindModulesCommand());\n \t\ttoPassBack.add(new DumpModuleCommand());\n \t\ttoPassBack.add(new DumpPackageCommand());\n+\t\tif (J9BuildFlags.J9VM_ENV_DATA64) {\n+\t\t\ttoPassBack.add(new DumpAllOffHeapEntriesCommand());\n+\t\t}\n \t\tif (J9ConstantPoolCommand.isSupported()) {\n \t\t\ttoPassBack.add(new J9ConstantPoolCommand());\n \t\t}\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java\nnew file mode 100644\nindex 00000000000..c818f4eedfe\n--- /dev/null\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java\n@@ -0,0 +1,114 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package com.ibm.j9ddr.vm29.tools.ddrinteractive.commands;\n+\n+import java.io.PrintStream;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.tools.ddrinteractive.Command;\n+import com.ibm.j9ddr.tools.ddrinteractive.Context;\n+import com.ibm.j9ddr.tools.ddrinteractive.DDRInteractiveCommandException;\n+import com.ibm.j9ddr.vm29.j9.HashTable;\n+import com.ibm.j9ddr.vm29.j9.ObjectToSparseDataHashTable;\n+import com.ibm.j9ddr.vm29.j9.SlotIterator;\n+import com.ibm.j9ddr.vm29.j9.gc.GCBase;\n+import com.ibm.j9ddr.vm29.pointer.VoidPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9HashTablePointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_GCExtensionsPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseAddressOrderedFixedSizeDataPoolPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseDataTableEntryPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseVirtualMemoryPointer;\n+import com.ibm.j9ddr.vm29.types.UDATA;\n+\n+/**\n+ * Dump all off-heap entries in the core file.\n+ *\n+ * usage: !dumpalloffheapentries\n+ */\n+public class DumpAllOffHeapEntriesCommand extends Command\n+{\n+\tpublic DumpAllOffHeapEntriesCommand()\n+\t{\n+\t\taddCommand(\"dumpalloffheapentries\", \"[help]\", \"dump all off-heap entries\");\n+\t}\n+\n+\t@Override\n+\tpublic void run(String command, String[] args, Context context, PrintStream out) throws DDRInteractiveCommandException\n+\t{\n+\t\tif (0 != args.length) {\n+\t\t\tString argument = args[0];\n+\n+\t\t\tif (argument.equalsIgnoreCase(\"help\")) {\n+\t\t\t\thelp(out);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean offHeapPresent = false;\n+\t\ttry {\n+\t\t\tMM_GCExtensionsPointer extensions = GCBase.getExtensions();\n+\t\t\tMM_SparseVirtualMemoryPointer sparseVirualMemory = extensions.largeObjectVirtualMemory();\n+\t\t\tif (sparseVirualMemory.notNull()) {\n+\t\t\t\tMM_SparseAddressOrderedFixedSizeDataPoolPointer sparseAddressOrderedFixedSizeDataPool = sparseVirualMemory._sparseDataPool();\n+\t\t\t\tif (sparseAddressOrderedFixedSizeDataPool.notNull()) {\n+\t\t\t\t\tJ9HashTablePointer objectToSparseDataTable = sparseAddressOrderedFixedSizeDataPool._objectToSparseDataTable();\n+\t\t\t\t\tif (objectToSparseDataTable.notNull()) {\n+\t\t\t\t\t\toffHeapPresent = true;\n+\t\t\t\t\t\tHashTable<MM_SparseDataTableEntryPointer> readObjectToSparseDataTable = ObjectToSparseDataHashTable.fromJ9HashTable(objectToSparseDataTable);\n+\t\t\t\t\t\tSlotIterator<MM_SparseDataTableEntryPointer> readSlotIterator = readObjectToSparseDataTable.iterator();\n+\t\t\t\t\t\tlong count = readObjectToSparseDataTable.getCount();\n+\t\t\t\t\t\tout.format(\"Off-heap entries (%,d entries)%n\", count);\n+\t\t\t\t\t\tif (0 < count) {\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\t\t\t\t\t\t\tout.format(\"| array object     | data address     | size             %n\");\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\n+\t\t\t\t\t\t\twhile (readSlotIterator.hasNext()) {\n+\t\t\t\t\t\t\t\tMM_SparseDataTableEntryPointer readSparseDataTableEntryPtr2 = MM_SparseDataTableEntryPointer.cast(readSlotIterator.nextAddress());\n+\t\t\t\t\t\t\t\tVoidPointer dataPrt = readSparseDataTableEntryPtr2._dataPtr();\n+\t\t\t\t\t\t\t\tVoidPointer proxyObjPtr = readSparseDataTableEntryPtr2._proxyObjPtr();\n+\t\t\t\t\t\t\t\tUDATA size = readSparseDataTableEntryPtr2._size();\n+\n+\t\t\t\t\t\t\t\tout.format(\" 0x%016x 0x%016x 0x%016x%n\",\n+\t\t\t\t\t\t\t\t\t\tproxyObjPtr.getAddress(),\n+\t\t\t\t\t\t\t\t\t\tdataPrt.getAddress(),\n+\t\t\t\t\t\t\t\t\t\tsize.longValue());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (CorruptDataException e) {\n+\t\t\tthrow new DDRInteractiveCommandException(e);\n+\t\t} catch (NoSuchFieldException e) {\n+\t\t\toffHeapPresent = false;\n+\t\t}\n+\t\tif (!offHeapPresent) {\n+\t\t\tout.format(\"This command requires a core file in which off-heap is enabled.%n\");\n+\t\t}\n+\t}\n+\n+\tprivate static void help(PrintStream out) {\n+\t\tout.println(\"!dumpalloffheapentries       -- dump all off-heap entries\");\n+\t}\n+}\n",
    "ff3b23d33cf8366ce8ece9d94ee663f4ed7eefeb": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex 07d4cea3fdb..a854447199e 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,6 +116,17 @@\n #include <strings.h>\n #endif\n \n+#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n+#include <intrin.h>\n+#elif defined(TR_TARGET_X86)\n+inline unsigned long long _xgetbv(unsigned int ecx)\n+   {\n+   unsigned int eax, edx;\n+   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n+   return ((unsigned long long)edx << 32) | eax;\n+   }\n+#endif\n+\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -334,6 +345,43 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n+      bool disableAVX = true;\n+      bool disableAVX512 = true;\n+\n+#if defined(TR_TARGET_X86)\n+      // Check XCRO register for OS support of xmm/ymm/zmm\n+      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n+         {\n+         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n+         disableAVX = ((6 & _xgetbv(0)) != 6);\n+         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n+         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n+         }\n+#endif\n+\n+      if (disableAVX)\n+         {\n+         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n+         }\n+\n+      if (disableAVX512)\n+         {\n+         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n+         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n+         }\n+\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex ddde9002cc0..4cf1782cda1 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,16 +67,6 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n-TR::CPU\n-J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n-   {\n-   if (omrPortLib == NULL)\n-      return TR::CPU();\n-\n-   TR::CPU::enableFeatureMasks();\n-   return OMR::X86::CPU::detect(omrPortLib);\n-   }\n-\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex 9baba2d4a47..ce53cdde422 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,13 +59,6 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n-   /**\n-    * @brief A factory method used to construct a CPU object based on the underlying hardware\n-    * @param[in] omrPortLib : the port library\n-    * @return TR::CPU\n-    */\n-   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n-\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "4f09a6d2e61b41774df9feb7e721981fd925fa8d": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex 07d4cea3fdb..a854447199e 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,6 +116,17 @@\n #include <strings.h>\n #endif\n \n+#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n+#include <intrin.h>\n+#elif defined(TR_TARGET_X86)\n+inline unsigned long long _xgetbv(unsigned int ecx)\n+   {\n+   unsigned int eax, edx;\n+   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n+   return ((unsigned long long)edx << 32) | eax;\n+   }\n+#endif\n+\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -334,6 +345,43 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n+      bool disableAVX = true;\n+      bool disableAVX512 = true;\n+\n+#if defined(TR_TARGET_X86)\n+      // Check XCRO register for OS support of xmm/ymm/zmm\n+      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n+         {\n+         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n+         disableAVX = ((6 & _xgetbv(0)) != 6);\n+         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n+         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n+         }\n+#endif\n+\n+      if (disableAVX)\n+         {\n+         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n+         }\n+\n+      if (disableAVX512)\n+         {\n+         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n+         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n+         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n+         }\n+\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex ddde9002cc0..4cf1782cda1 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,16 +67,6 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n-TR::CPU\n-J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n-   {\n-   if (omrPortLib == NULL)\n-      return TR::CPU();\n-\n-   TR::CPU::enableFeatureMasks();\n-   return OMR::X86::CPU::detect(omrPortLib);\n-   }\n-\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex 9baba2d4a47..ce53cdde422 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,13 +59,6 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n-   /**\n-    * @brief A factory method used to construct a CPU object based on the underlying hardware\n-    * @param[in] omrPortLib : the port library\n-    * @return TR::CPU\n-    */\n-   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n-\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "f12ef363bdf96e4846ff4276fa3790c59b4f4925": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex d1e6cb92515..9dcc30e3fbe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,10 +65,8 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n-/*[IF JAVA_SPEC_VERSION >= 17]*/\n import jdk.internal.util.SystemProps;\n-/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n+/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -174,6 +172,10 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\tprivate static String stdoutProp;\n+\tprivate static String stderrProp;\n+\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -234,7 +236,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n+\t\tString primary = isStdout ? stdoutProp : stderrProp;\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -277,6 +279,20 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n+\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\t\tProperties props = internalGetProperties();\n+\t\t// If the user didn't set the encoding property, set it now.\n+\t\tif (FileDescriptor.out == desc) {\n+\t\t\tif (null == stdoutProp) {\n+\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n+\t\t\t}\n+\t\t} else if (FileDescriptor.err == desc) {\n+\t\t\tif (null == stderrProp) {\n+\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n+\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -307,6 +323,12 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n+\n+\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n+\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n+\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -367,9 +389,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -707,7 +729,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new HashMap<>();\n+\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -719,11 +741,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[IF JAVA_SPEC_VERSION < 17]*/\n \t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n+\tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -749,9 +769,6 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\tinitializedProperties.putAll(SystemProps.initProperties());\n-\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -762,12 +779,43 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n+\n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n+\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\tif (null != stdoutProp) {\n+\t\t// Reinitialize required properties if ensureProperties(false) is called.\n+\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n+\t} else {\n+\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n+\t\tif (null == stdoutProp) {\n+\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n+\t\t\tif (null != stdoutProp) {\n+\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif (null != stderrProp) {\n+\t\t// Reinitialize required properties if ensureProperties(false) is called.\n+\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n+\t} else {\n+\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n+\t\tif (null == stderrProp) { //$NON-NLS-1$\n+\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n+\t\t\tif (null != stderrProp) {\n+\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n+\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1040,7 +1088,6 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n-/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1050,14 +1097,13 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n-/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION == 11]*/\n+/*[IF JAVA_SPEC_VERSION >= 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 4da0ef86244..3a61379b7d8 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,6 +1900,7 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n+\tassert(!\"JVM_GetProperties\");\n+\treturn NULL;\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 56e08e267d5..048eede667f 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,7 +44,27 @@\n #endif\n \n \n-#if JAVA_SPEC_VERSION == 11\n+\n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n+\n+\n+typedef struct {\n+\tint errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n+static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n+jobject getPropertyList(JNIEnv *env);\n+\n+#if JAVA_SPEC_VERSION >= 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -73,7 +93,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION == 11 */\n+#endif /* JAVA_SPEC_VERSION >= 11 */\n \n /**\n  * sysPropID\n@@ -183,12 +203,10 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n-#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n+\treturn getPropertyList(env);\n }\n-#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -241,6 +259,350 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n+\n+jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i, nCommandLineDefines = 0;\n+\tjclass stringClass;\n+\tjarray args = NULL;\n+\tint propertyCount;\n+\n+\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (!stringClass) {\n+/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n+\t\treturn (jobject) 0;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = 0;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+/*\t\tprintf(\"\\nFailed to create arg array\");*/\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (defaultValues[i] == NULL) continue;\n+\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+/**\n+ * @return 0 on success, -1 on error\n+ */\n+jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n+}\n+\n+jobject getPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+\tchar *propertyKey = NULL;\n+\tconst char * language = NULL;\n+\tconst char * region = NULL;\n+\tconst char * variant = NULL;\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n+\t * correct allocation.\n+\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n+\t * enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif\n+\n+#if defined(JCL_J2SE)\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n+\t * \twe consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#ifdef J9VM_ENV_DATA64\n+\tstrings[propIndex++] = \"64\";\n+#else\n+\tstrings[propIndex++] = \"32\";\n+#endif\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#ifdef J9VM_ENV_LITTLE_ENDIAN\n+\tstrings[propIndex++] = \"little\";\n+#else\n+\tstrings[propIndex++] = \"big\";\n+#endif\n+\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#ifdef J9VM_ENV_LITTLE_ENDIAN\n+\tstrings[propIndex++] = \"little\";\n+#else\n+\tstrings[propIndex++] = \"big\";\n+#endif\n+\n+/*\tDon't set this property as the class library will look here first and when\n+\tthere is a security manager you will get a security exception. The code\n+\tlooks in this package by default, see URLConnection.getContentHandler()\n+\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n+\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n+*/\n+\n+\t/*[PR 95709]*/\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tjclmem_free_memory(env, usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\n+\n+static void JNICALL\n+systemPropertyIterator(char* key, char* value, void* userData)\n+{\n+\tCreateSystemPropertiesData * iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif ( iteratorData->errorOccurred ) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i=0; i < defaultCount; i+=2) {\n+\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i+1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n+\t\titeratorData->errorOccurred = 1;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n+\t\titeratorData->errorOccurred = 1;\n+\t\treturn;\n+\t}\n+\n+\tTrc_JCL_systemPropertyIterator(env, key, value);\n+}\n+\n+\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex 14a9c80a9a0..f4b04862ac0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,6 +350,7 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n+\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -433,7 +434,6 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n-\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,18 +599,13 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n-if(JAVA_SPEC_VERSION EQUAL 11)\n-\tomr_add_exports(jclse\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n-\t)\n-endif()\n-\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex 0ec24ba02d6..c64230a9bb3 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex d844c63d9ba..626a197be7a 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,7 +23,5 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n-\t\t<exclude-if condition=\"spec.java12\"/>\n-\t</export>\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex 549a8712e3b..b8a780711eb 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,9 +249,7 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\">\n-\t\t<exclude-if condition=\"spec.java17\" />\n-\t</export>\n+\t<export name=\"Java_java_lang_System_getPropertyList\" />\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex a1bae22f747..d1f9ff46fb4 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,6 +41,9 @@\n #include \"atoe.h\"\n #endif\n \n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -60,6 +63,159 @@ char* CodepageTable[] = {\n #endif\n };\n \n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, the '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char**envSpace) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize;\n+\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n+\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n+\t\tif(*envSpace==NULL) return \".\";\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1)\n+\t\t\treturn *envSpace;\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tjclmem_free_memory(env,*envSpace);\n+\t\t*envSpace = NULL;\n+\t\t}\n+\tif (j9file_attr(P_tmpdir) > -1)\n+\t\treturn P_tmpdir;\n+\tif (j9file_attr(\"/tmp\") > -1)\n+\t\treturn \"/tmp\";\n+\treturn \".\";\n+}\n+\n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+\tchar userdir[EsMaxPath] = {0};\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif\n+\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (charResult == NULL) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n+#endif\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tjclmem_free_memory(env,envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tjclmem_free_memory(env, homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex 7bd081a6614..c6adf96b6a4 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,11 +43,139 @@\n #include <VersionHelpers.h>\n #endif\n \n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n+I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n+char * getTmpDir(JNIEnv *env, char **tempdir);\n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize;\n+\tchar *envSpace = NULL, *tempdir = NULL;\n+\tjobject result;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i;\n+\tchar userdir[EsMaxPath];\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process, token;\n+\tUDATA handle;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+#if !defined(JCL_J2SE)\n+\tUINT codePage;\n+\tchar codePageBuf[32];\n+\tCPINFO cpInfo;\n+#endif\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n+\t\t\tif(!envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\t/* Jazz 52075 JCL_J2SE is always true */\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tif (tempdir) jclmem_free_memory(env,tempdir);\n+\tif (envSpace) jclmem_free_memory(env,envSpace);\n+\treturn result;\n+}\n+\n+\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -100,7 +228,11 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n+#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n+#else\n+\t\tcodepage[1] = 'P';\n+#endif\n \t}\n \n \treturn codepage;\n@@ -114,3 +246,64 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n+\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char * getTmpDir(JNIEnv *env, char **tempdir) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tDWORD rc;\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\n+\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\t/* If the function succeeds, the return value is the number of characters stored into \n+\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n+\tthe return value will exceed the length parameter (i.e. the required size)\n+\t*/\n+\n+\tif((rc != 0) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif(rc != 0) {\n+\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n+\t\t\tif(NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n+\t\t\t\tif(rc == 0) {\n+\t\t\t\t\tjclmem_free_memory(env, buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+I_32\n+convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex ba13180f677..a7912fb5583 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,16 +580,20 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n # END NON-TRANSLATABLE\n \n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 73e295f0128..21495596345 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,21 +2430,3 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n-\n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n-# START NON-TRANSLATABLE\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n-# END NON-TRANSLATABLE\n-\n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n-# START NON-TRANSLATABLE\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n-# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 73a0148c12a..1b53200ed2d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5347,7 +5347,6 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n-\tjobject (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex f3a101a3ea3..e35676d0fae 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,13 +190,11 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION == 11\n+#if JAVA_SPEC_VERSION >= 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION == 11 */\n+#endif /* JAVA_SPEC_VERSION >= 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n-#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -802,7 +800,10 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n+I_32\n+convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n char * getTmpDir (JNIEnv *env, char **tempdir);\n+jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -812,6 +813,7 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n char * getTmpDir (JNIEnv *env, char**envSpace);\n+jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 9e605c155c3..8cbe8e3aeb3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,12 +2665,6 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n-/* ---------------- filehelp.c ---------------- */\n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 75ff44fbcc6..93a94507515 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,14 +4335,6 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-\n-/**\n- * @brief Get the default system properties.\n- *\n- * @return an Object array of system property key value pairs\n- */\n-jobjectArray getSystemPropertyList(JNIEnv *env);\n-\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 1487fb806a7..394304ae25e 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,12 +116,6 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n-if(OMR_OS_WINDOWS)\n-\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n-else()\n-\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n-endif()\n-\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex c246c3bd583..9e00e0836ea 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,12 +50,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n-\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n-\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n-\t\t\t</vpath>\n-\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n-\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n-\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\ndeleted file mode 100644\nindex 343fbff4ecc..00000000000\n--- a/runtime/util/unix/filehelp.c\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-/*******************************************************************************\n- * Copyright IBM Corp. and others 2025\n- *\n- * This program and the accompanying materials are made available under\n- * the terms of the Eclipse Public License 2.0 which accompanies this\n- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n- * or the Apache License, Version 2.0 which accompanies this distribution and\n- * is available at https://www.apache.org/licenses/LICENSE-2.0.\n- *\n- * This Source Code may also be made available under the following\n- * Secondary Licenses when the conditions for such availability set\n- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n- * General Public License, version 2 with the GNU Classpath\n- * Exception [1] and GNU General Public License, version 2 with the\n- * OpenJDK Assembly Exception [2].\n- *\n- * [1] https://www.gnu.org/software/classpath/license.html\n- * [2] https://openjdk.org/legal/assembly-exception.html\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n- *******************************************************************************/\n-\n-#include <stdio.h>\n-#include \"j9.h\"\n-\n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, '.' representing the current directory is returned.\n- */\n-char *\n-getTmpDir(JNIEnv *env, char **envSpace)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n-\tif (envSize > 0) {\n-\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n-\t\tif (NULL == *envSpace) {\n-\t\t\treturn \".\";\n-\t\t}\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1) {\n-\t\t\treturn *envSpace;\n-\t\t}\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tj9mem_free_memory(*envSpace);\n-\t\t*envSpace = NULL;\n-\t}\n-\tif (j9file_attr(P_tmpdir) > -1) {\n-\t\treturn P_tmpdir;\n-\t}\n-\tif (j9file_attr(\"/tmp\") > -1) {\n-\t\treturn \"/tmp\";\n-\t}\n-\treturn \".\";\n-}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\ndeleted file mode 100644\nindex 55b241301c0..00000000000\n--- a/runtime/util/win32/filehelp.c\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-/*******************************************************************************\n- * Copyright IBM Corp. and others 2025\n- *\n- * This program and the accompanying materials are made available under\n- * the terms of the Eclipse Public License 2.0 which accompanies this\n- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n- * or the Apache License, Version 2.0 which accompanies this distribution and\n- * is available at https://www.apache.org/licenses/LICENSE-2.0.\n- *\n- * This Source Code may also be made available under the following\n- * Secondary Licenses when the conditions for such availability set\n- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n- * General Public License, version 2 with the GNU Classpath\n- * Exception [1] and GNU General Public License, version 2 with the\n- * OpenJDK Assembly Exception [2].\n- *\n- * [1] https://www.gnu.org/software/classpath/license.html\n- * [2] https://openjdk.org/legal/assembly-exception.html\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n- *******************************************************************************/\n-\n-#include <windows.h>\n-#include \"j9.h\"\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char *\n-getTmpDir(JNIEnv *env, char **tempdir)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\tif ((0 != rc) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif (0 != rc) {\n-\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n-\t\t\t\tif (0 == rc) {\n-\t\t\t\t\tj9mem_free_memory(buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 79558bccedd..5cfdd0003fe 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -484,5 +484,4 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n-\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex c7d04229b2a..5447aeb934d 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,5 +1017,3 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n-\n-TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 5e4db9c54c3..74f0f9327ec 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,13 +20,6 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n-#if defined(WIN32)\n-#include <windows.h>\n-#else /* defined(WIN32) */\n-#include <pwd.h>\n-#include <unistd.h>\n-#endif /* defined(WIN32) */\n-\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -39,28 +32,24 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n-#if defined(J9ZOS390)\n-#include \"atoe.h\"\n-#endif /* defined(J9ZOS390) */\n-\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n+static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n-static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM *vm);\n+static UDATA addModularitySystemProperties(J9JavaVM * vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -179,7 +168,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -326,7 +315,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -472,7 +461,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM *vm)\n+addModularitySystemProperties(J9JavaVM * vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -570,7 +559,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -597,7 +586,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM *vm)\n+initializeSystemProperties(J9JavaVM * vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -606,22 +595,22 @@ initializeSystemProperties(J9JavaVM *vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char *propValue = NULL;\n+\tconst char* propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n+\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar *optionString = initArgs->options[i].optionString;\n+\t\tchar * optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n+\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -632,8 +621,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n-\tif (NULL == vm->systemProperties) {\n+\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -644,7 +632,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t}\n \t}\n \n-\tif (8 == JAVA_SPEC_VERSION) {\n+\tif (JAVA_SPEC_VERSION == 8) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -668,7 +656,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (8 == JAVA_SPEC_VERSION) {\n+\t\tif (JAVA_SPEC_VERSION == 8) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -758,14 +746,14 @@ initializeSystemProperties(J9JavaVM *vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9JDK_EXT_NAME) */\n+#endif\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9JDK_EXT_VERSION) */\n+#endif\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -778,9 +766,9 @@ initializeSystemProperties(J9JavaVM *vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n+#else\n \tpropValue = \"..\";\n-#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n+#endif\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -808,12 +796,12 @@ initializeSystemProperties(J9JavaVM *vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9VM_OPT_SIDECAR) */\n+#endif\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (NULL == pathSep) {\n+\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (pathSep == NULL) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -923,16 +911,16 @@ initializeSystemProperties(J9JavaVM *vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar *optionString = initArgs->options[i].optionString;\n+\t\tchar * optionString = initArgs->options[i].optionString;\n \n-\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n+\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (NULL == propValue) {\n+\t\t\tif (propValue == NULL) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -982,7 +970,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n+\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1036,8 +1024,8 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n-\t\t\tchar *defaultEndorsedDir = NULL;\n+\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n+\t\t\tchar *defaultEndorsedDir =  NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1129,14 +1117,14 @@ initializeSystemProperties(J9JavaVM *vm)\n \n \n void\n-freeSystemProperties(J9JavaVM *vm)\n+freeSystemProperties(J9JavaVM * vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (NULL != property) {\n+\t\twhile (property != NULL) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1157,13 +1145,13 @@ freeSystemProperties(J9JavaVM *vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n+getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (NULL != property) {\n-\t\tif (0 == strcmp(property->name, name)) {\n+\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (property != NULL) {\n+\t\tif (strcmp(property->name, name) == 0) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1186,21 +1174,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n+addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char *)propName;\n-\tnewProp->value = (char *)propValue;\n+\tnewProp->name = (char*)propName;\n+\tnewProp->value = (char*)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1222,7 +1210,7 @@ setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValu\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (0 == strcmp(property->name, \"java.home\")) {\n+\t\tif (strcmp(property->name, \"java.home\") == 0) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1230,7 +1218,7 @@ setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValu\n }\n \n UDATA\n-setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n+setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1242,7 +1230,7 @@ setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar *copiedValue = copyToMem(vm, value);\n+\t\tchar * copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1261,12 +1249,12 @@ setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8 *\n-unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n+static U_8*\n+unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16 *unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n-\tconst char *cursor = NULL;\n+\tU_16* unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n+\tconst char *cursor;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1279,7 +1267,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1287,7 +1275,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n+\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1329,14 +1317,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n-\t\t\t\t\t(char *)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\t\t\t\t\t(char*)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1373,8 +1361,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n-\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n+\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1445,647 +1433,3 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n-\n-/**\n- * @return JNI_FALSE on success, JNI_TRUE on error\n- */\n-static jboolean\n-propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn (*env)->ExceptionCheck(env);\n-}\n-\n-typedef struct {\n-\tjboolean errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-static void JNICALL\n-systemPropertyIterator(char *key, char *value, void *userData)\n-{\n-\tCreateSystemPropertiesData *iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i = 0;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif (iteratorData->errorOccurred) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i = 0; i < defaultCount; i += 2) {\n-\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i + 1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n-\t\titeratorData->errorOccurred = JNI_TRUE;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n-\t\titeratorData->errorOccurred = JNI_TRUE;\n-\t\treturn;\n-\t}\n-\n-\tTrc_systemPropertyIterator(env, key, value);\n-}\n-\n-jobject\n-createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i = 0;\n-\tjint nCommandLineDefines = 0;\n-\tjarray args = NULL;\n-\tint propertyCount = 0;\n-\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (NULL == stringClass) {\n-\t\treturn NULL;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (0 != propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = JNI_FALSE;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (NULL == defaultValues[i]) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-#if defined(WIN32)\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-static I_32\n-convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\n-\n-jobject\n-getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize = 0;\n-\tchar *envSpace = NULL;\n-\tchar *tempdir = NULL;\n-\tjobject result = NULL;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i = 0;\n-#if JAVA_SPEC_VERSION < 17\n-\tchar userdir[EsMaxPath];\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process = 0;\n-\tHANDLE token = 0;\n-\tUDATA handle = 0;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n-\t\tif (NULL == envSpace) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\tstrings[propIndex++] = envSpace;\n-\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-#if JAVA_SPEC_VERSION < 17\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tj9mem_free_memory(tempdir);\n-\tj9mem_free_memory(envSpace);\n-\treturn result;\n-}\n-\n-#else /* defined(WIN32) */\n-\n-jobject\n-getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-#if JAVA_SPEC_VERSION < 17\n-\tchar userdir[EsMaxPath] = {0};\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif /* defined(J9ZOS390) */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (NULL == charResult) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* There exist situations where one of the above calls will fail.\n-\t * Fall through to the Unix solution for those cases.\n-\t */\n-#endif /* defined(J9ZOS390) */\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-#if JAVA_SPEC_VERSION < 17\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tj9mem_free_memory(envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tj9mem_free_memory(homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n-#endif /* defined(WIN32) */\n-\n-/**\n- * @brief Get the default system properties.\n- *\n- * @return an Object array of system property key value pairs\n- */\n-jobjectArray\n-getSystemPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-#if JAVA_SPEC_VERSION < 17\n-\tchar *propertyKey = NULL;\n-\tconst char *language = NULL;\n-\tconst char *region = NULL;\n-\tconst char *variant = NULL;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread *)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n-\t * 2 * number of property keys is the correct allocation. Also note the call to\n-\t * addSystemProperties below, which may add some configuration-specific properties.\n-\t * Be sure to leave enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n-\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n-\t * registration of signal handlers for what we consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals.\n-\t */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#if defined(J9VM_ENV_DATA64)\n-\tstrings[propIndex++] = \"64\";\n-#else /* defined(J9VM_ENV_DATA64) */\n-\tstrings[propIndex++] = \"32\";\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#if defined(J9VM_ENV_LITTLE_ENDIAN)\n-\tstrings[propIndex++] = \"little\";\n-#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\tstrings[propIndex++] = \"big\";\n-#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#if defined(J9VM_ENV_LITTLE_ENDIAN)\n-\tstrings[propIndex++] = \"little\";\n-#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\tstrings[propIndex++] = \"big\";\n-#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tj9mem_free_memory(usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n",
    "daf2bc99f8ab827a7fb1d8dc8091c6f3a88ce85c": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex d1e6cb92515..9dcc30e3fbe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,10 +65,8 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n-/*[IF JAVA_SPEC_VERSION >= 17]*/\n import jdk.internal.util.SystemProps;\n-/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n+/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -174,6 +172,10 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\tprivate static String stdoutProp;\n+\tprivate static String stderrProp;\n+\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -234,7 +236,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n+\t\tString primary = isStdout ? stdoutProp : stderrProp;\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -277,6 +279,20 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n+\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\t\tProperties props = internalGetProperties();\n+\t\t// If the user didn't set the encoding property, set it now.\n+\t\tif (FileDescriptor.out == desc) {\n+\t\t\tif (null == stdoutProp) {\n+\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n+\t\t\t}\n+\t\t} else if (FileDescriptor.err == desc) {\n+\t\t\tif (null == stderrProp) {\n+\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n+\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -307,6 +323,12 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n+\n+\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n+\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n+\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -367,9 +389,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -707,7 +729,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new HashMap<>();\n+\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -719,11 +741,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[IF JAVA_SPEC_VERSION < 17]*/\n \t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n+\tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -749,9 +769,6 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\tinitializedProperties.putAll(SystemProps.initProperties());\n-\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -762,12 +779,43 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n+\n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n+\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n+\tif (null != stdoutProp) {\n+\t\t// Reinitialize required properties if ensureProperties(false) is called.\n+\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n+\t} else {\n+\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n+\t\tif (null == stdoutProp) {\n+\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n+\t\t\tif (null != stdoutProp) {\n+\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif (null != stderrProp) {\n+\t\t// Reinitialize required properties if ensureProperties(false) is called.\n+\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n+\t} else {\n+\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n+\t\tif (null == stderrProp) { //$NON-NLS-1$\n+\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n+\t\t\tif (null != stderrProp) {\n+\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n+\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1040,7 +1088,6 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n-/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1050,14 +1097,13 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n-/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION == 11]*/\n+/*[IF JAVA_SPEC_VERSION >= 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 4da0ef86244..3a61379b7d8 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,6 +1900,7 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n+\tassert(!\"JVM_GetProperties\");\n+\treturn NULL;\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 56e08e267d5..048eede667f 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,7 +44,27 @@\n #endif\n \n \n-#if JAVA_SPEC_VERSION == 11\n+\n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n+\n+\n+typedef struct {\n+\tint errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n+static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n+jobject getPropertyList(JNIEnv *env);\n+\n+#if JAVA_SPEC_VERSION >= 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -73,7 +93,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION == 11 */\n+#endif /* JAVA_SPEC_VERSION >= 11 */\n \n /**\n  * sysPropID\n@@ -183,12 +203,10 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n-#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n+\treturn getPropertyList(env);\n }\n-#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -241,6 +259,350 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n+\n+jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i, nCommandLineDefines = 0;\n+\tjclass stringClass;\n+\tjarray args = NULL;\n+\tint propertyCount;\n+\n+\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (!stringClass) {\n+/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n+\t\treturn (jobject) 0;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = 0;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+/*\t\tprintf(\"\\nFailed to create arg array\");*/\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (defaultValues[i] == NULL) continue;\n+\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+/**\n+ * @return 0 on success, -1 on error\n+ */\n+jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n+}\n+\n+jobject getPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+\tchar *propertyKey = NULL;\n+\tconst char * language = NULL;\n+\tconst char * region = NULL;\n+\tconst char * variant = NULL;\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n+\t * correct allocation.\n+\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n+\t * enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif\n+\n+#if defined(JCL_J2SE)\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n+\t * \twe consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#ifdef J9VM_ENV_DATA64\n+\tstrings[propIndex++] = \"64\";\n+#else\n+\tstrings[propIndex++] = \"32\";\n+#endif\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#ifdef J9VM_ENV_LITTLE_ENDIAN\n+\tstrings[propIndex++] = \"little\";\n+#else\n+\tstrings[propIndex++] = \"big\";\n+#endif\n+\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#ifdef J9VM_ENV_LITTLE_ENDIAN\n+\tstrings[propIndex++] = \"little\";\n+#else\n+\tstrings[propIndex++] = \"big\";\n+#endif\n+\n+/*\tDon't set this property as the class library will look here first and when\n+\tthere is a security manager you will get a security exception. The code\n+\tlooks in this package by default, see URLConnection.getContentHandler()\n+\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n+\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n+*/\n+\n+\t/*[PR 95709]*/\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tjclmem_free_memory(env, usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\n+\n+static void JNICALL\n+systemPropertyIterator(char* key, char* value, void* userData)\n+{\n+\tCreateSystemPropertiesData * iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif ( iteratorData->errorOccurred ) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i=0; i < defaultCount; i+=2) {\n+\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i+1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n+\t\titeratorData->errorOccurred = 1;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n+\t\titeratorData->errorOccurred = 1;\n+\t\treturn;\n+\t}\n+\n+\tTrc_JCL_systemPropertyIterator(env, key, value);\n+}\n+\n+\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex 14a9c80a9a0..f4b04862ac0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,6 +350,7 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n+\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -433,7 +434,6 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n-\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,18 +599,13 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n-if(JAVA_SPEC_VERSION EQUAL 11)\n-\tomr_add_exports(jclse\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n-\t)\n-endif()\n-\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex 0ec24ba02d6..c64230a9bb3 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex d844c63d9ba..626a197be7a 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,7 +23,5 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n-\t\t<exclude-if condition=\"spec.java12\"/>\n-\t</export>\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex 549a8712e3b..b8a780711eb 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,9 +249,7 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\">\n-\t\t<exclude-if condition=\"spec.java17\" />\n-\t</export>\n+\t<export name=\"Java_java_lang_System_getPropertyList\" />\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex a1bae22f747..d1f9ff46fb4 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,6 +41,9 @@\n #include \"atoe.h\"\n #endif\n \n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -60,6 +63,159 @@ char* CodepageTable[] = {\n #endif\n };\n \n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, the '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char**envSpace) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize;\n+\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n+\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n+\t\tif(*envSpace==NULL) return \".\";\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1)\n+\t\t\treturn *envSpace;\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tjclmem_free_memory(env,*envSpace);\n+\t\t*envSpace = NULL;\n+\t\t}\n+\tif (j9file_attr(P_tmpdir) > -1)\n+\t\treturn P_tmpdir;\n+\tif (j9file_attr(\"/tmp\") > -1)\n+\t\treturn \"/tmp\";\n+\treturn \".\";\n+}\n+\n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+\tchar userdir[EsMaxPath] = {0};\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif\n+\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (charResult == NULL) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n+#endif\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tjclmem_free_memory(env,envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tjclmem_free_memory(env, homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex 7bd081a6614..c6adf96b6a4 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,11 +43,139 @@\n #include <VersionHelpers.h>\n #endif\n \n+/* JCL_J2SE */\n+#define JCL_J2SE\n+\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n+I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n+char * getTmpDir(JNIEnv *env, char **tempdir);\n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n+jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize;\n+\tchar *envSpace = NULL, *tempdir = NULL;\n+\tjobject result;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i;\n+\tchar userdir[EsMaxPath];\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process, token;\n+\tUDATA handle;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+#if !defined(JCL_J2SE)\n+\tUINT codePage;\n+\tchar codePageBuf[32];\n+\tCPINFO cpInfo;\n+#endif\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n+\t\t\tif(!envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\t/* Jazz 52075 JCL_J2SE is always true */\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tif (tempdir) jclmem_free_memory(env,tempdir);\n+\tif (envSpace) jclmem_free_memory(env,envSpace);\n+\treturn result;\n+}\n+\n+\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -100,7 +228,11 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n+#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n+#else\n+\t\tcodepage[1] = 'P';\n+#endif\n \t}\n \n \treturn codepage;\n@@ -114,3 +246,64 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n+\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char * getTmpDir(JNIEnv *env, char **tempdir) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\tDWORD rc;\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\n+\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\t/* If the function succeeds, the return value is the number of characters stored into \n+\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n+\tthe return value will exceed the length parameter (i.e. the required size)\n+\t*/\n+\n+\tif((rc != 0) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif(rc != 0) {\n+\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n+\t\t\tif(NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n+\t\t\t\tif(rc == 0) {\n+\t\t\t\t\tjclmem_free_memory(env, buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+I_32\n+convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex ba13180f677..a7912fb5583 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,16 +580,20 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n # END NON-TRANSLATABLE\n \n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 73e295f0128..21495596345 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,21 +2430,3 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n-\n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n-# START NON-TRANSLATABLE\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n-# END NON-TRANSLATABLE\n-\n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n-# START NON-TRANSLATABLE\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n-# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 73a0148c12a..1b53200ed2d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5347,7 +5347,6 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n-\tjobject (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex f3a101a3ea3..e35676d0fae 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,13 +190,11 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION == 11\n+#if JAVA_SPEC_VERSION >= 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION == 11 */\n+#endif /* JAVA_SPEC_VERSION >= 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n-#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -802,7 +800,10 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n+I_32\n+convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n char * getTmpDir (JNIEnv *env, char **tempdir);\n+jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -812,6 +813,7 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n char * getTmpDir (JNIEnv *env, char**envSpace);\n+jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 9e605c155c3..8cbe8e3aeb3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,12 +2665,6 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n-/* ---------------- filehelp.c ---------------- */\n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 75ff44fbcc6..93a94507515 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,14 +4335,6 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-\n-/**\n- * @brief Get the default system properties.\n- *\n- * @return an Object array of system property key value pairs\n- */\n-jobjectArray getSystemPropertyList(JNIEnv *env);\n-\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 1487fb806a7..394304ae25e 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,12 +116,6 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n-if(OMR_OS_WINDOWS)\n-\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n-else()\n-\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n-endif()\n-\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex c246c3bd583..9e00e0836ea 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,12 +50,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n-\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n-\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n-\t\t\t</vpath>\n-\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n-\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n-\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\ndeleted file mode 100644\nindex 343fbff4ecc..00000000000\n--- a/runtime/util/unix/filehelp.c\n+++ /dev/null\n@@ -1,55 +0,0 @@\n-/*******************************************************************************\n- * Copyright IBM Corp. and others 2025\n- *\n- * This program and the accompanying materials are made available under\n- * the terms of the Eclipse Public License 2.0 which accompanies this\n- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n- * or the Apache License, Version 2.0 which accompanies this distribution and\n- * is available at https://www.apache.org/licenses/LICENSE-2.0.\n- *\n- * This Source Code may also be made available under the following\n- * Secondary Licenses when the conditions for such availability set\n- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n- * General Public License, version 2 with the GNU Classpath\n- * Exception [1] and GNU General Public License, version 2 with the\n- * OpenJDK Assembly Exception [2].\n- *\n- * [1] https://www.gnu.org/software/classpath/license.html\n- * [2] https://openjdk.org/legal/assembly-exception.html\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n- *******************************************************************************/\n-\n-#include <stdio.h>\n-#include \"j9.h\"\n-\n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, '.' representing the current directory is returned.\n- */\n-char *\n-getTmpDir(JNIEnv *env, char **envSpace)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n-\tif (envSize > 0) {\n-\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n-\t\tif (NULL == *envSpace) {\n-\t\t\treturn \".\";\n-\t\t}\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1) {\n-\t\t\treturn *envSpace;\n-\t\t}\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tj9mem_free_memory(*envSpace);\n-\t\t*envSpace = NULL;\n-\t}\n-\tif (j9file_attr(P_tmpdir) > -1) {\n-\t\treturn P_tmpdir;\n-\t}\n-\tif (j9file_attr(\"/tmp\") > -1) {\n-\t\treturn \"/tmp\";\n-\t}\n-\treturn \".\";\n-}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\ndeleted file mode 100644\nindex 55b241301c0..00000000000\n--- a/runtime/util/win32/filehelp.c\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-/*******************************************************************************\n- * Copyright IBM Corp. and others 2025\n- *\n- * This program and the accompanying materials are made available under\n- * the terms of the Eclipse Public License 2.0 which accompanies this\n- * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n- * or the Apache License, Version 2.0 which accompanies this distribution and\n- * is available at https://www.apache.org/licenses/LICENSE-2.0.\n- *\n- * This Source Code may also be made available under the following\n- * Secondary Licenses when the conditions for such availability set\n- * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n- * General Public License, version 2 with the GNU Classpath\n- * Exception [1] and GNU General Public License, version 2 with the\n- * OpenJDK Assembly Exception [2].\n- *\n- * [1] https://www.gnu.org/software/classpath/license.html\n- * [2] https://openjdk.org/legal/assembly-exception.html\n- *\n- * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n- *******************************************************************************/\n-\n-#include <windows.h>\n-#include \"j9.h\"\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char *\n-getTmpDir(JNIEnv *env, char **tempdir)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\tif ((0 != rc) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif (0 != rc) {\n-\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n-\t\t\t\tif (0 == rc) {\n-\t\t\t\t\tj9mem_free_memory(buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 79558bccedd..5cfdd0003fe 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -484,5 +484,4 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n-\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex c7d04229b2a..5447aeb934d 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,5 +1017,3 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n-\n-TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 5e4db9c54c3..74f0f9327ec 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,13 +20,6 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n-#if defined(WIN32)\n-#include <windows.h>\n-#else /* defined(WIN32) */\n-#include <pwd.h>\n-#include <unistd.h>\n-#endif /* defined(WIN32) */\n-\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -39,28 +32,24 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n-#if defined(J9ZOS390)\n-#include \"atoe.h\"\n-#endif /* defined(J9ZOS390) */\n-\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n+static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n-static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM *vm);\n+static UDATA addModularitySystemProperties(J9JavaVM * vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -179,7 +168,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -326,7 +315,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -472,7 +461,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM *vm)\n+addModularitySystemProperties(J9JavaVM * vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -570,7 +559,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -597,7 +586,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM *vm)\n+initializeSystemProperties(J9JavaVM * vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -606,22 +595,22 @@ initializeSystemProperties(J9JavaVM *vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char *propValue = NULL;\n+\tconst char* propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n+\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar *optionString = initArgs->options[i].optionString;\n+\t\tchar * optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n+\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -632,8 +621,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n-\tif (NULL == vm->systemProperties) {\n+\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -644,7 +632,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t}\n \t}\n \n-\tif (8 == JAVA_SPEC_VERSION) {\n+\tif (JAVA_SPEC_VERSION == 8) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -668,7 +656,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (8 == JAVA_SPEC_VERSION) {\n+\t\tif (JAVA_SPEC_VERSION == 8) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -758,14 +746,14 @@ initializeSystemProperties(J9JavaVM *vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9JDK_EXT_NAME) */\n+#endif\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9JDK_EXT_VERSION) */\n+#endif\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -778,9 +766,9 @@ initializeSystemProperties(J9JavaVM *vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n+#else\n \tpropValue = \"..\";\n-#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n+#endif\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -808,12 +796,12 @@ initializeSystemProperties(J9JavaVM *vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif /* defined(J9VM_OPT_SIDECAR) */\n+#endif\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (NULL == pathSep) {\n+\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (pathSep == NULL) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -923,16 +911,16 @@ initializeSystemProperties(J9JavaVM *vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar *optionString = initArgs->options[i].optionString;\n+\t\tchar * optionString = initArgs->options[i].optionString;\n \n-\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n+\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (NULL == propValue) {\n+\t\t\tif (propValue == NULL) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -982,7 +970,7 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n+\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1036,8 +1024,8 @@ initializeSystemProperties(J9JavaVM *vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n-\t\t\tchar *defaultEndorsedDir = NULL;\n+\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n+\t\t\tchar *defaultEndorsedDir =  NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1129,14 +1117,14 @@ initializeSystemProperties(J9JavaVM *vm)\n \n \n void\n-freeSystemProperties(J9JavaVM *vm)\n+freeSystemProperties(J9JavaVM * vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (NULL != property) {\n+\t\twhile (property != NULL) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1157,13 +1145,13 @@ freeSystemProperties(J9JavaVM *vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n+getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (NULL != property) {\n-\t\tif (0 == strcmp(property->name, name)) {\n+\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (property != NULL) {\n+\t\tif (strcmp(property->name, name) == 0) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1186,21 +1174,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n+addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char *)propName;\n-\tnewProp->value = (char *)propValue;\n+\tnewProp->name = (char*)propName;\n+\tnewProp->value = (char*)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1222,7 +1210,7 @@ setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValu\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (0 == strcmp(property->name, \"java.home\")) {\n+\t\tif (strcmp(property->name, \"java.home\") == 0) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1230,7 +1218,7 @@ setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValu\n }\n \n UDATA\n-setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n+setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1242,7 +1230,7 @@ setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar *copiedValue = copyToMem(vm, value);\n+\t\tchar * copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1261,12 +1249,12 @@ setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8 *\n-unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n+static U_8*\n+unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16 *unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n-\tconst char *cursor = NULL;\n+\tU_16* unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n+\tconst char *cursor;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1279,7 +1267,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1287,7 +1275,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n+\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1329,14 +1317,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeL\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n-\t\t\t\t\t(char *)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\t\t\t\t\t(char*)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1373,8 +1361,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n-\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n+\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1445,647 +1433,3 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n-\n-/**\n- * @return JNI_FALSE on success, JNI_TRUE on error\n- */\n-static jboolean\n-propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn (*env)->ExceptionCheck(env);\n-}\n-\n-typedef struct {\n-\tjboolean errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-static void JNICALL\n-systemPropertyIterator(char *key, char *value, void *userData)\n-{\n-\tCreateSystemPropertiesData *iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i = 0;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif (iteratorData->errorOccurred) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i = 0; i < defaultCount; i += 2) {\n-\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i + 1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n-\t\titeratorData->errorOccurred = JNI_TRUE;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n-\t\titeratorData->errorOccurred = JNI_TRUE;\n-\t\treturn;\n-\t}\n-\n-\tTrc_systemPropertyIterator(env, key, value);\n-}\n-\n-jobject\n-createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i = 0;\n-\tjint nCommandLineDefines = 0;\n-\tjarray args = NULL;\n-\tint propertyCount = 0;\n-\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (NULL == stringClass) {\n-\t\treturn NULL;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (0 != propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = JNI_FALSE;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (NULL == defaultValues[i]) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-#if defined(WIN32)\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-static I_32\n-convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\n-\n-jobject\n-getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize = 0;\n-\tchar *envSpace = NULL;\n-\tchar *tempdir = NULL;\n-\tjobject result = NULL;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i = 0;\n-#if JAVA_SPEC_VERSION < 17\n-\tchar userdir[EsMaxPath];\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process = 0;\n-\tHANDLE token = 0;\n-\tUDATA handle = 0;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n-\t\tif (NULL == envSpace) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\tstrings[propIndex++] = envSpace;\n-\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-#if JAVA_SPEC_VERSION < 17\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tj9mem_free_memory(tempdir);\n-\tj9mem_free_memory(envSpace);\n-\treturn result;\n-}\n-\n-#else /* defined(WIN32) */\n-\n-jobject\n-getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-#if JAVA_SPEC_VERSION < 17\n-\tchar userdir[EsMaxPath] = {0};\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif /* defined(J9ZOS390) */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (NULL == charResult) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* There exist situations where one of the above calls will fail.\n-\t * Fall through to the Unix solution for those cases.\n-\t */\n-#endif /* defined(J9ZOS390) */\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-#if JAVA_SPEC_VERSION < 17\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tj9mem_free_memory(envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tj9mem_free_memory(homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n-#endif /* defined(WIN32) */\n-\n-/**\n- * @brief Get the default system properties.\n- *\n- * @return an Object array of system property key value pairs\n- */\n-jobjectArray\n-getSystemPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-#if JAVA_SPEC_VERSION < 17\n-\tchar *propertyKey = NULL;\n-\tconst char *language = NULL;\n-\tconst char *region = NULL;\n-\tconst char *variant = NULL;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread *)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n-\t * 2 * number of property keys is the correct allocation. Also note the call to\n-\t * addSystemProperties below, which may add some configuration-specific properties.\n-\t * Be sure to leave enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n-\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n-\t * registration of signal handlers for what we consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals.\n-\t */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#if defined(J9VM_ENV_DATA64)\n-\tstrings[propIndex++] = \"64\";\n-#else /* defined(J9VM_ENV_DATA64) */\n-\tstrings[propIndex++] = \"32\";\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#if defined(J9VM_ENV_LITTLE_ENDIAN)\n-\tstrings[propIndex++] = \"little\";\n-#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\tstrings[propIndex++] = \"big\";\n-#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\n-#if JAVA_SPEC_VERSION < 17\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#if defined(J9VM_ENV_LITTLE_ENDIAN)\n-\tstrings[propIndex++] = \"little\";\n-#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\tstrings[propIndex++] = \"big\";\n-#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tj9mem_free_memory(usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n",
    "fb6233086ecdda8bee28ef66cc1b1d6f72a4d147": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat b/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\nindex ce2b585dbcb..58b84d76863 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/AuxFieldInfo29.dat\n@@ -671,6 +671,7 @@ MM_GCExtensionsBase.heap = required\n MM_GCExtensionsBase.heapRegionManager = required\n MM_GCExtensionsBase.indexableObjectModel = required\n MM_GCExtensionsBase.isVirtualLargeObjectHeapEnabled = bool\n+MM_GCExtensionsBase.largeObjectVirtualMemory = MM_SparseVirtualMemory*\n MM_GCExtensionsBase.objectModel = required\n MM_GCExtensionsBase.realtimeGC = required\n MM_GCExtensionsBase.referenceChainWalkerMarkMap = required\n@@ -754,6 +755,11 @@ MM_RegionPoolSegregated._smallAvailableRegions = required\n MM_RegionPoolSegregated._smallFullRegions = required\n MM_RegionPoolSegregated._splitAvailableListSplitCount = required\n MM_SegregatedGC._markingScheme = required\n+MM_SparseAddressOrderedFixedSizeDataPool._objectToSparseDataTable = J9HashTable*\n+MM_SparseDataTableEntry._dataPtr = void*\n+MM_SparseDataTableEntry._proxyObjPtr = void*\n+MM_SparseDataTableEntry._size = UDATA\n+MM_SparseVirtualMemory._sparseDataPool = MM_SparseAddressOrderedFixedSizeDataPool*\n MM_StringTable._cache = required\n MM_StringTable._table = required\n MM_StringTable._tableCount = required\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java\nnew file mode 100644\nindex 00000000000..5d201ad802f\n--- /dev/null\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectToSparseDataHashTable.java\n@@ -0,0 +1,92 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package com.ibm.j9ddr.vm29.j9;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9HashTablePointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseDataTableEntryPointer;\n+import com.ibm.j9ddr.vm29.pointer.VoidPointer;\n+import com.ibm.j9ddr.vm29.types.UDATA;\n+\n+/**\n+ * ObjectToSparseDataHashTable is used for accessing hash tables {@link HashTable}\n+ * in SparseDataTableEntry {@link MM_SparseDataTableEntryPointer} (e.g. iterator).\n+ */\n+public final class ObjectToSparseDataHashTable extends HashTable_V1<MM_SparseDataTableEntryPointer>\n+{\n+\tprivate ObjectToSparseDataHashTable(\n+\t\t\tJ9HashTablePointer hashTablePointer,\n+\t\t\tboolean isInline,\n+\t\t\tClass<MM_SparseDataTableEntryPointer> structType,\n+\t\t\tHashEqualFunction<MM_SparseDataTableEntryPointer> equalFn,\n+\t\t\tHashFunction<MM_SparseDataTableEntryPointer> hashFn) throws CorruptDataException\n+\t{\n+\t\tsuper(hashTablePointer, isInline, structType, equalFn, hashFn);\n+\t}\n+\n+\t/**\n+\t * Opens J9HashTable from J9HashTablePointer.\n+\t *\n+\t * @param structure   the J9HashTablePointer\n+\t * @throws CorruptDataException   when fails to read from structure\n+\t */\n+\tpublic static HashTable<MM_SparseDataTableEntryPointer> fromJ9HashTable(J9HashTablePointer structure) throws CorruptDataException\n+\t{\n+\t\treturn new ObjectToSparseDataHashTable(structure, false, MM_SparseDataTableEntryPointer.class, new SparseDataHashEqualFn(), new SparseDataHashFn());\n+\t}\n+\n+\tprivate static final class SparseDataHashFn implements HashFunction<MM_SparseDataTableEntryPointer>\n+\t{\n+\t\tSparseDataHashFn()\n+\t\t{\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic UDATA hash(MM_SparseDataTableEntryPointer entry) throws CorruptDataException\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\treturn UDATA.cast(entry._dataPtr());\n+\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\tthrow new CorruptDataException(e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static final class SparseDataHashEqualFn implements HashEqualFunction<MM_SparseDataTableEntryPointer>\n+\t{\n+\t\tSparseDataHashEqualFn()\n+\t\t{\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equal(MM_SparseDataTableEntryPointer entry1, MM_SparseDataTableEntryPointer entry2) throws CorruptDataException\n+\t\t{\n+\t\t\ttry {\n+\t\t\t\treturn entry1._dataPtr().getAddress() == entry2._dataPtr().getAddress();\n+\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\tthrow new CorruptDataException(e.getMessage());\n+\t\t\t}\n+\t\t}\n+\t}\n+}\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\nindex 0407486995e..f0e376c5b81 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/GetCommandsTask.java\n@@ -27,6 +27,7 @@\n import com.ibm.j9ddr.IVMData;\n import com.ibm.j9ddr.tools.ddrinteractive.BaseJVMCommands;\n import com.ibm.j9ddr.tools.ddrinteractive.ICommand;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9BuildFlags;\n import com.ibm.j9ddr.vm29.pointer.helper.ValueTypeHelper;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.ACCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.AllClassesCommand;\n@@ -41,6 +42,7 @@\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.CoreInfoCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllClassesInModuleCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllClassloadersCommand;\n+import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllOffHeapEntriesCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRamClassLinearCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRegionsCommand;\n import com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.DumpAllRomClassLinearCommand;\n@@ -199,6 +201,9 @@ public void run(IVMData vmData, Object[] userData)\n \t\ttoPassBack.add(new FindModulesCommand());\n \t\ttoPassBack.add(new DumpModuleCommand());\n \t\ttoPassBack.add(new DumpPackageCommand());\n+\t\tif (J9BuildFlags.J9VM_ENV_DATA64) {\n+\t\t\ttoPassBack.add(new DumpAllOffHeapEntriesCommand());\n+\t\t}\n \t\tif (J9ConstantPoolCommand.isSupported()) {\n \t\t\ttoPassBack.add(new J9ConstantPoolCommand());\n \t\t}\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java\nnew file mode 100644\nindex 00000000000..c818f4eedfe\n--- /dev/null\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/tools/ddrinteractive/commands/DumpAllOffHeapEntriesCommand.java\n@@ -0,0 +1,114 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package com.ibm.j9ddr.vm29.tools.ddrinteractive.commands;\n+\n+import java.io.PrintStream;\n+\n+import com.ibm.j9ddr.CorruptDataException;\n+import com.ibm.j9ddr.tools.ddrinteractive.Command;\n+import com.ibm.j9ddr.tools.ddrinteractive.Context;\n+import com.ibm.j9ddr.tools.ddrinteractive.DDRInteractiveCommandException;\n+import com.ibm.j9ddr.vm29.j9.HashTable;\n+import com.ibm.j9ddr.vm29.j9.ObjectToSparseDataHashTable;\n+import com.ibm.j9ddr.vm29.j9.SlotIterator;\n+import com.ibm.j9ddr.vm29.j9.gc.GCBase;\n+import com.ibm.j9ddr.vm29.pointer.VoidPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.J9HashTablePointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_GCExtensionsPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseAddressOrderedFixedSizeDataPoolPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseDataTableEntryPointer;\n+import com.ibm.j9ddr.vm29.pointer.generated.MM_SparseVirtualMemoryPointer;\n+import com.ibm.j9ddr.vm29.types.UDATA;\n+\n+/**\n+ * Dump all off-heap entries in the core file.\n+ *\n+ * usage: !dumpalloffheapentries\n+ */\n+public class DumpAllOffHeapEntriesCommand extends Command\n+{\n+\tpublic DumpAllOffHeapEntriesCommand()\n+\t{\n+\t\taddCommand(\"dumpalloffheapentries\", \"[help]\", \"dump all off-heap entries\");\n+\t}\n+\n+\t@Override\n+\tpublic void run(String command, String[] args, Context context, PrintStream out) throws DDRInteractiveCommandException\n+\t{\n+\t\tif (0 != args.length) {\n+\t\t\tString argument = args[0];\n+\n+\t\t\tif (argument.equalsIgnoreCase(\"help\")) {\n+\t\t\t\thelp(out);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean offHeapPresent = false;\n+\t\ttry {\n+\t\t\tMM_GCExtensionsPointer extensions = GCBase.getExtensions();\n+\t\t\tMM_SparseVirtualMemoryPointer sparseVirualMemory = extensions.largeObjectVirtualMemory();\n+\t\t\tif (sparseVirualMemory.notNull()) {\n+\t\t\t\tMM_SparseAddressOrderedFixedSizeDataPoolPointer sparseAddressOrderedFixedSizeDataPool = sparseVirualMemory._sparseDataPool();\n+\t\t\t\tif (sparseAddressOrderedFixedSizeDataPool.notNull()) {\n+\t\t\t\t\tJ9HashTablePointer objectToSparseDataTable = sparseAddressOrderedFixedSizeDataPool._objectToSparseDataTable();\n+\t\t\t\t\tif (objectToSparseDataTable.notNull()) {\n+\t\t\t\t\t\toffHeapPresent = true;\n+\t\t\t\t\t\tHashTable<MM_SparseDataTableEntryPointer> readObjectToSparseDataTable = ObjectToSparseDataHashTable.fromJ9HashTable(objectToSparseDataTable);\n+\t\t\t\t\t\tSlotIterator<MM_SparseDataTableEntryPointer> readSlotIterator = readObjectToSparseDataTable.iterator();\n+\t\t\t\t\t\tlong count = readObjectToSparseDataTable.getCount();\n+\t\t\t\t\t\tout.format(\"Off-heap entries (%,d entries)%n\", count);\n+\t\t\t\t\t\tif (0 < count) {\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\t\t\t\t\t\t\tout.format(\"| array object     | data address     | size             %n\");\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\n+\t\t\t\t\t\t\twhile (readSlotIterator.hasNext()) {\n+\t\t\t\t\t\t\t\tMM_SparseDataTableEntryPointer readSparseDataTableEntryPtr2 = MM_SparseDataTableEntryPointer.cast(readSlotIterator.nextAddress());\n+\t\t\t\t\t\t\t\tVoidPointer dataPrt = readSparseDataTableEntryPtr2._dataPtr();\n+\t\t\t\t\t\t\t\tVoidPointer proxyObjPtr = readSparseDataTableEntryPtr2._proxyObjPtr();\n+\t\t\t\t\t\t\t\tUDATA size = readSparseDataTableEntryPtr2._size();\n+\n+\t\t\t\t\t\t\t\tout.format(\" 0x%016x 0x%016x 0x%016x%n\",\n+\t\t\t\t\t\t\t\t\t\tproxyObjPtr.getAddress(),\n+\t\t\t\t\t\t\t\t\t\tdataPrt.getAddress(),\n+\t\t\t\t\t\t\t\t\t\tsize.longValue());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tout.format(\"+------------------+------------------+------------------%n\");\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (CorruptDataException e) {\n+\t\t\tthrow new DDRInteractiveCommandException(e);\n+\t\t} catch (NoSuchFieldException e) {\n+\t\t\toffHeapPresent = false;\n+\t\t}\n+\t\tif (!offHeapPresent) {\n+\t\t\tout.format(\"This command requires a core file in which off-heap is enabled.%n\");\n+\t\t}\n+\t}\n+\n+\tprivate static void help(PrintStream out) {\n+\t\tout.println(\"!dumpalloffheapentries       -- dump all off-heap entries\");\n+\t}\n+}\n",
    "4652e7bea954b2f19b3e7c5e86bb5aec5904bb90": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 8236a54b4c5..28b73638524 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -3006,10 +3006,50 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n    // -------------------------------------------------------------------------\n \n    TR::MemoryReference *tempMR = NULL;\n+   TR::Node *dstArrayNode, *offsetNode = NULL;\n \n-   if (generateWriteBarrier && !deferDestinationEvaluation)\n+   if (generateWriteBarrier)\n       {\n-      tempMR = generateX86MemoryReference(firstChild, cg);\n+      if (!deferDestinationEvaluation)\n+         {\n+         tempMR = generateX86MemoryReference(firstChild, cg);\n+         }\n+      else\n+         {\n+         /* Evaluate destination subtrees\n+         * ArrayStoreCHK\n+         *    awrtbari  // firstChild\n+         *      aloadi  <contiguousArrayDataAddrField>\n+         *        aload     // dstArrayNode\n+         *      ...\n+         * OR\n+         * ArrayStoreCHK\n+         *    awrtbari  // firstChild\n+         *      aladd (internalPtr )\n+         *        aloadi  <contiguousArrayDataAddrField>\n+         *          aload     // dstArrayNode\n+         *        <offset>  // offsetNode\n+         *      ...\n+         */\n+         if (firstChild->getFirstChild()->isDataAddrPointer())\n+            dstArrayNode = firstChild->getFirstChild()->getFirstChild();\n+         else if (firstChild->getFirstChild()->getOpCodeValue() == TR::aladd && firstChild->getFirstChild()->getFirstChild()->isDataAddrPointer())\n+            {\n+            dstArrayNode = firstChild->getFirstChild()->getFirstChild()->getFirstChild();\n+            offsetNode = firstChild->getFirstChild()->getSecondChild();\n+            }\n+         else\n+            {\n+            TR_ASSERT_FATAL(false, \"Unexpected array access tree shape for OffHeap in ArrayStoreCHKEvaluator\");\n+            }\n+\n+         cg->evaluate(dstArrayNode);\n+         if (offsetNode &&\n+               !(offsetNode->getOpCode().isLoadConst() &&\n+               offsetNode->getLongInt() >= TR::getMinSigned<TR::Int32>() &&\n+               offsetNode->getLongInt() <= TR::getMaxSigned<TR::Int32>()))\n+            cg->evaluate(offsetNode);\n+         }\n       }\n \n    TR::Node *destinationChild = firstChild->getChild(2);\n@@ -3232,7 +3272,7 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n    //\n    // -------------------------------------------------------------------------\n \n-   TR::RegisterDependencyConditions *deps = generateRegisterDependencyConditions(12, 12, cg);\n+   TR::RegisterDependencyConditions *deps = generateRegisterDependencyConditions(13, 13, cg);\n    deps->unionPostCondition(destinationRegister, TR::RealRegister::NoReg, cg);\n    deps->unionPostCondition(sourceRegister, TR::RealRegister::NoReg, cg);\n \n@@ -3257,6 +3297,12 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n          deps->unionPostCondition(tempMR->getIndexRegister(), TR::RealRegister::NoReg, cg);\n          }\n \n+      if (deferDestinationEvaluation && dstArrayNode->getRegister() != destinationRegister)\n+         {\n+         // For OffHeap tempMR->getBaseRegister() would be the dataAddrPtr not the baseArray.\n+         deps->unionPostCondition(dstArrayNode->getRegister(), TR::RealRegister::NoReg, cg);\n+         }\n+\n       if (comp->target().is64Bit())\n          {\n          TR::Register *addressRegister =tempMR->getAddressRegister();\n",
    "0109bc472785a9e16bc88ed7bd4eac0fcb82e372": "diff --git a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\nindex e7e7061dd55..225ce75fa16 100644\n--- a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n@@ -7228,11 +7228,15 @@ J9::Z::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node * node, TR::CodeGenerator\n       */\n       if (firstChild->getFirstChild()->isDataAddrPointer())\n          dstArrayNode = firstChild->getFirstChild()->getFirstChild();\n-      else\n+      else if (firstChild->getFirstChild()->getOpCodeValue() == TR::aladd && firstChild->getFirstChild()->getFirstChild()->isDataAddrPointer())\n          {\n          dstArrayNode = firstChild->getFirstChild()->getFirstChild()->getFirstChild();\n          offsetNode = firstChild->getFirstChild()->getSecondChild();\n          }\n+      else\n+         {\n+         TR_ASSERT_FATAL(false, \"Unexpected array access tree shape for OffHeap in ArrayStoreCHKEvaluator\");\n+         }\n \n       cg->evaluate(dstArrayNode);\n       if (offsetNode &&\n",
    "26baa50a0a640ec903335db1535b940ba94a651c": "diff --git a/runtime/j9vm/javanextvmi.cpp b/runtime/j9vm/javanextvmi.cpp\nindex 72404a77423..69676357c52 100644\n--- a/runtime/j9vm/javanextvmi.cpp\n+++ b/runtime/j9vm/javanextvmi.cpp\n@@ -263,82 +263,19 @@ JVM_IsPreviewEnabled(void)\n \treturn isPreviewEnabled;\n }\n \n-static void\n-enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n-{\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n-\tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\n-retry:\n-\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)) {\n-\t\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0, ~(U_64)0)) {\n-\t\t\t/* Thread is being inspected or unmounted, wait. */\n-\t\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t\t\tVM_AtomicSupport::yieldCPU();\n-\t\t\t/* After wait, the thread may suspend here. */\n-\t\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\t\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\t\t}\n-\n-\t\t/* Now we have locked access to virtualThreadInspectorCount, check if the vthread is suspended.\n-\t\t * If suspended, release the access and spin-wait until the vthread is resumed.\n-\t\t * If not suspended, link the current J9VMThread with the virtual thread object.\n-\t\t */\n-\t\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)\n-\t\t&& objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->internalSuspendStateOffset, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE, (U_64)currentThread)\n-\t\t) {\n-\t\t\treturn;\n-\t\t}\n-\t\tJ9OBJECT_I64_STORE(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0);\n-\t}\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t/* Spin is used instead of the halt flag as we cannot guarantee suspend flag is still set now.\n-\t *\n-\t * TODO: Dynamically increase the sleep time to a bounded maximum.\n-\t */\n-\tf_threadSleep(10);\n-\t/* After wait, the thread may suspend here. */\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n-\tgoto retry;\n-}\n-\n-static void\n-exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n-{\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\tj9object_t vthread = J9_JNI_UNWRAP_REFERENCE(thread);\n-\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n-\n-\t/* Remove J9VMThread address from internalSuspendedState field, as the thread state is no longer in a transition. */\n-\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, vthread, vm->internalSuspendStateOffset, (U_64)currentThread, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE)) {\n-\t\t/* Wait if the suspend flag is set. */\n-\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\t\tVM_AtomicSupport::yieldCPU();\n-\t\t/* After wait, the thread may suspend here. */\n-\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\tvthread = J9_JNI_UNWRAP_REFERENCE(thread);\n-\t}\n-\n-\t/* Update to virtualThreadInspectorCount must be after clearing isSuspendedInternal field to retain sync ordering. */\n-\tAssert_SC_true(-1 == J9OBJECT_I64_LOAD(currentThread, vthread, vm->virtualThreadInspectorCountOffset));\n-\tJ9OBJECT_I64_STORE(currentThread, vthread, vm->virtualThreadInspectorCountOffset, 0);\n-}\n-\n static void\n setContinuationStateToLastUnmount(J9VMThread *currentThread, jobject thread)\n {\n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tJ9InternalVMFunctions const * const vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n+\n \t/* Re-fetch reference as enterVThreadTransitionCritical may release VMAccess. */\n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, threadObj);\n \tContinuationState volatile *continuationStatePtr = VM_ContinuationHelpers::getContinuationStateAddress(currentThread, continuationObj);\n \t/* Used in JVMTI to not suspend the virtual thread once it enters the last unmount phase. */\n \tVM_ContinuationHelpers::setLastUnmount(continuationStatePtr);\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n }\n \n /* Caller must have VMAccess. */\n@@ -346,6 +283,7 @@ static void\n virtualThreadMountBegin(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9InternalVMFunctions const * const vmFuncs = currentThread->javaVM->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tAssert_SC_true(IS_JAVA_LANG_VIRTUALTHREAD(currentThread, threadObj));\n@@ -364,7 +302,7 @@ virtualThreadMountBegin(JNIEnv *env, jobject thread)\n \t\t\t\tcontinuation);\n \t}\n \n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_TRUE);\n }\n@@ -375,6 +313,7 @@ virtualThreadMountEnd(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \n \tAssert_SC_true(IS_JAVA_LANG_VIRTUALTHREAD(currentThread, threadObj));\n@@ -394,7 +333,7 @@ virtualThreadMountEnd(JNIEnv *env, jobject thread)\n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_FALSE);\n \n \t/* Allow thread to be inspected again. */\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n \n \tTRIGGER_J9HOOK_VM_VIRTUAL_THREAD_MOUNT(vm->hookInterface, currentThread);\n }\n@@ -405,6 +344,7 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \n@@ -424,16 +364,15 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n \n \tTRIGGER_J9HOOK_VM_VIRTUAL_THREAD_UNMOUNT(vm->hookInterface, currentThread);\n \n-\tenterVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n \tj9object_t carrierThreadObject = currentThread->carrierThreadObject;\n \t/* Virtual thread is being umounted. If its carrier thread is suspended, spin until\n \t * the carrier thread is resumed. The carrier thread should not be mounted until it\n \t * is resumed.\n \t */\n \twhile (VM_VMHelpers::isThreadSuspended(currentThread, carrierThreadObject)) {\n-\t\texitVThreadTransitionCritical(currentThread, thread);\n+\t\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n \t\tvmFuncs->internalReleaseVMAccess(currentThread);\n \t\t/* Spin is used instead of the halt flag; otherwise, the virtual thread will\n \t\t * show as suspended.\n@@ -442,7 +381,7 @@ virtualThreadUnmountBegin(JNIEnv *env, jobject thread)\n \t\t */\n \t\tf_threadSleep(10);\n \t\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\t\tenterVThreadTransitionCritical(currentThread, thread);\n+\t\tvmFuncs->enterVThreadTransitionCritical(currentThread, thread);\n \t\tcarrierThreadObject = currentThread->carrierThreadObject;\n \t}\n \n@@ -455,7 +394,7 @@ virtualThreadUnmountEnd(JNIEnv *env, jobject thread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n \tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, threadObj);\n@@ -481,7 +420,7 @@ virtualThreadUnmountEnd(JNIEnv *env, jobject thread)\n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, JNI_FALSE);\n \n \t/* Allow thread to be inspected again. */\n-\texitVThreadTransitionCritical(currentThread, thread);\n+\tvmFuncs->exitVThreadTransitionCritical(currentThread, thread);\n }\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n@@ -537,14 +476,14 @@ JVM_VirtualThreadHideFrames(\n #if JAVA_SPEC_VERSION < 23\n \t\tAssert_SC_true(vThreadObj == J9_JNI_UNWRAP_REFERENCE(vthread));\n #endif /* JAVA_SPEC_VERSION < 23 */\n-\t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t\tvmFuncs->enterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \n \tVM_VMHelpers::virtualThreadHideFrames(currentThread, hide);\n \n \tif (!hide) {\n \t\tAssert_SC_true(hiddenFrames);\n-\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t\tvmFuncs->exitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \n \tvmFuncs->internalExitVMToJNI(currentThread);\n@@ -570,7 +509,7 @@ JVM_VirtualThreadMount(JNIEnv *env, jobject vthread, jboolean hide)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadMount_Entry(currentThread, vthread, hide);\n \n@@ -592,7 +531,7 @@ JVM_VirtualThreadUnmount(JNIEnv *env, jobject vthread, jboolean hide)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadUnmount_Entry(currentThread, vthread, hide);\n \n@@ -620,7 +559,7 @@ JVM_VirtualThreadStart(JNIEnv *env, jobject vthread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadStart_Entry(currentThread, vthread);\n \n@@ -639,7 +578,7 @@ JVM_VirtualThreadEnd(JNIEnv *env, jobject vthread)\n {\n \tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n \tTrc_SC_VirtualThreadEnd_Entry(currentThread, vthread);\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 1b53200ed2d..063b95bba56 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -303,8 +303,11 @@ typedef void(*j9_tls_finalizer_t)(void *);\n  * The full mapping is under jvmtiInternals.h <JVMTI_VTHREAD_STATE_*>.\n  */\n #define JAVA_LANG_VIRTUALTHREAD_BLOCKING 12\n-#define JAVA_LANG_VIRTUALTHREAD_WAITING  13\n+#define JAVA_LANG_VIRTUALTHREAD_BLOCKED  13\n+#define JAVA_LANG_VIRTUALTHREAD_WAITING  15\n+#define JAVA_LANG_VIRTUALTHREAD_WAIT     16\n #define JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING 17\n+#define JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT 18\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n typedef enum {\n@@ -5322,6 +5325,8 @@ typedef struct J9InternalVMFunctions {\n \tUDATA (*walkAllStackFrames)(struct J9VMThread *currentThread, J9StackWalkState *walkState);\n \tBOOLEAN (*acquireVThreadInspector)(struct J9VMThread *currentThread, jobject thread, BOOLEAN spin);\n \tvoid (*releaseVThreadInspector)(struct J9VMThread *currentThread, jobject thread);\n+\tvoid (*enterVThreadTransitionCritical)(struct J9VMThread *currentThread, jobject thread);\n+\tvoid (*exitVThreadTransitionCritical)(struct J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \tUDATA (*checkArgsConsumed)(struct J9JavaVM * vm, struct J9PortLibrary* portLibrary, struct J9VMInitArgs* j9vm_args);\n #if defined(J9VM_ZOS_3164_INTEROPERABILITY) && (JAVA_SPEC_VERSION >= 17)\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex 93a94507515..f8247aa7ca7 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4688,6 +4688,24 @@ acquireVThreadInspector(J9VMThread *currentThread, jobject thread, BOOLEAN spin)\n  */\n void\n releaseVThreadInspector(J9VMThread *currentThread, jobject thread);\n+\n+/**\n+ * @brief Enter VirtualThread's critical section for transitions.\n+ *\n+ * @param currentThread the current thread\n+ * @param thread target VirtualThread that is transitioning\n+ */\n+void\n+enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread);\n+\n+/**\n+ * @brief Exit VirtualThread's critical section for transitions.\n+ *\n+ * @param currentThread the current thread\n+ * @param thread target VirtualThread that is transitioning\n+ */\n+void\n+exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread);\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \n #if JAVA_SPEC_VERSION >= 24\n@@ -4696,9 +4714,10 @@ releaseVThreadInspector(J9VMThread *currentThread, jobject thread);\n  *\n  * @param currentThread the current thread\n  * @param continuationObject the Continuation object\n+ * @param isObjectWait if the call is from Object.wait()\n  */\n void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject);\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait);\n \n /**\n  * @brief Inflate all monitors and prepare the VirtualThread to yield.\ndiff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex 521ebf3dffa..710a6591725 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -268,6 +268,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<!-- Field references for Synchronize Virtual Threads without Pinning (JEP491). -->\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"blockPermit\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"notified\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n \n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex a44a9878727..ad3304e1210 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -1525,7 +1525,6 @@ class INTERPRETER_CLASS\n \n \t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n \t\tyieldContinuation(_currentThread, FALSE, returnState);\n-\n \t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \n@@ -2944,28 +2943,35 @@ class INTERPRETER_CLASS\n \t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n \t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n-\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n-\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n-\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n-\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n-\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n-\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n+\t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n-\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n-\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n \n-\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n-\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n-\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n+\t\t\t\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 1);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -5165,8 +5171,11 @@ class INTERPRETER_CLASS\n \t\t\t}\n \t\t\t/* Try to yield the virtual thread if it will be blocked. */\n \t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n \t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t} else {\n \t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n@@ -5703,7 +5712,6 @@ class INTERPRETER_CLASS\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER:\n \t\t\tbreak;\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n-\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n \t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n \n@@ -5762,7 +5770,14 @@ class INTERPRETER_CLASS\n \n \t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\tupdateVMStruct(REGISTER_ARGS);\n-\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tif (J9_ARE_ANY_BITS_SET(_vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\t\t&& (_currentThread->ownedMonitorCount > 0)\n+\t\t&& !isFinished\n+\t\t) {\n+\t\t\tpreparePinnedVirtualThreadForUnmount(_currentThread, NULL, false);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* Store the current Continuation state and swap to the carrier thread stack. */\n \t\tyieldContinuation(_currentThread, isFinished, J9VM_CONTINUATION_RETURN_FROM_YIELD);\n \ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 82f77290bc1..6aa706ee69b 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -262,8 +262,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \tif (started) {\n #if JAVA_SPEC_VERSION >= 24\n \t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n-\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject);\n-\n+\t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject, (J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT == continuation->returnState));\n \t\t}\n \t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n \t\tresult = FALSE;\n@@ -448,13 +447,17 @@ isPinnedContinuation(J9VMThread *currentThread)\n \n \tif (currentThread->continuationPinCount > 0) {\n \t\tresult = J9VM_CONTINUATION_PINNED_REASON_CRITICAL_SECTION;\n-\t} else if (currentThread->ownedMonitorCount > 0) {\n-\t\tresult = J9VM_CONTINUATION_PINNED_REASON_MONITOR;\n \t} else if (currentThread->callOutCount > 0) {\n \t\t/* TODO: This check should be changed from > 1 to > 0 once the call-ins are no\n \t\t * longer used and the new design for single cInterpreter is implemented.\n \t\t */\n \t\tresult = J9VM_CONTINUATION_PINNED_REASON_NATIVE;\n+\t} else if ((currentThread->ownedMonitorCount > 0)\n+#if JAVA_SPEC_VERSION >= 24\n+\t&& J9_ARE_NO_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t) {\n+\t\tresult = J9VM_CONTINUATION_PINNED_REASON_MONITOR;\n \t} else {\n \t\t/* Do nothing. */\n \t}\n@@ -661,6 +664,71 @@ releaseVThreadInspector(J9VMThread *currentThread, jobject thread)\n \t}\n }\n \n+void\n+enterVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n+\tj9object_t threadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\n+retry:\n+\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)) {\n+\t\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0, ~(U_64)0)) {\n+\t\t\t/* Thread is being inspected or unmounted, wait. */\n+\t\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t\t\tVM_AtomicSupport::yieldCPU();\n+\t\t\t/* After wait, the thread may suspend here. */\n+\t\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\t\t\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\t\t}\n+\n+\t\t/* Now we have locked access to virtualThreadInspectorCount, check if the vthread is suspended.\n+\t\t* If suspended, release the access and spin-wait until the vthread is resumed.\n+\t\t* If not suspended, link the current J9VMThread with the virtual thread object.\n+\t\t*/\n+\t\tif (!VM_VMHelpers::isThreadSuspended(currentThread, threadObj)\n+\t\t&& objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, threadObj, vm->internalSuspendStateOffset, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE, (U_64)currentThread)\n+\t\t) {\n+\t\t\treturn;\n+\t\t}\n+\t\tJ9OBJECT_I64_STORE(currentThread, threadObj, vm->virtualThreadInspectorCountOffset, 0);\n+\t}\n+\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t/* Spin is used instead of the halt flag as we cannot guarantee suspend flag is still set now.\n+\t*\n+\t* TODO: Dynamically increase the sleep time to a bounded maximum.\n+\t*/\n+\tj9thread_sleep(10);\n+\t/* After wait, the thread may suspend here. */\n+\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\tthreadObj = J9_JNI_UNWRAP_REFERENCE(thread);\n+\tgoto retry;\n+}\n+\n+void\n+exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tj9object_t vthread = J9_JNI_UNWRAP_REFERENCE(thread);\n+\tMM_ObjectAccessBarrierAPI objectAccessBarrier = MM_ObjectAccessBarrierAPI(currentThread);\n+\n+\t/* Remove J9VMThread address from internalSuspendedState field, as the thread state is no longer in a transition. */\n+\twhile (!objectAccessBarrier.inlineMixedObjectCompareAndSwapU64(currentThread, vthread, vm->internalSuspendStateOffset, (U_64)currentThread, J9_VIRTUALTHREAD_INTERNAL_STATE_NONE)) {\n+\t\t/* Wait if the suspend flag is set. */\n+\t\tvmFuncs->internalReleaseVMAccess(currentThread);\n+\t\tVM_AtomicSupport::yieldCPU();\n+\t\t/* After wait, the thread may suspend here. */\n+\t\tvmFuncs->internalAcquireVMAccess(currentThread);\n+\t\tvthread = J9_JNI_UNWRAP_REFERENCE(thread);\n+\t}\n+\n+\t/* Update to virtualThreadInspectorCount must be after clearing isSuspendedInternal field to retain sync ordering. */\n+\tAssert_VM_true(-1 == J9OBJECT_I64_LOAD(currentThread, vthread, vm->virtualThreadInspectorCountOffset));\n+\tJ9OBJECT_I64_STORE(currentThread, vthread, vm->virtualThreadInspectorCountOffset, 0);\n+}\n+\n #if JAVA_SPEC_VERSION >= 24\n void\n detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n@@ -679,10 +747,12 @@ updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n }\n \n void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject)\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n {\n \tUDATA monitorCount = 0;\n-\tif (0 < currentThread->ownedMonitorCount) {\n+\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObject);\n+\n+\tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n@@ -690,15 +760,17 @@ preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continu\n \t\t\tj9objectmonitor_t lock = 0;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t}\n+\t\t\tif (syncObject != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t}\n \n-\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \n@@ -709,23 +781,31 @@ preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continu\n \t\t\tj9objectmonitor_t lock = 0;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t}\n+\t\t\tif (syncObject != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t} else {\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t}\n \n-\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \t}\n \n \tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n+\tif (isObjectWait) {\n+\t\tcurrentThread->ownedMonitorCount -= 1;\n+\t}\n \n \t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n \tcurrentThread->osThread->lockedmonitorcount += monitorCount;\n+\tif (J9VM_CONTINUATION_RETURN_FROM_YIELD != currentThread->currentContinuation->returnState) {\n+\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n }\n \n UDATA\n@@ -737,34 +817,39 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n \n-\tif (0 < currentThread->ownedMonitorCount) {\n+\tif (NULL != syncObj) {\n+\t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n+\tif (currentThread->ownedMonitorCount > 0) {\n \t\t/* Inflate all owned monitors. */\n \t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n \t\t\tj9object_t object = monitorRecords->object;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\tif (syncObj != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = 0;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlock = 0;\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t}\n \n-\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\tgoto done;\n+\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \n@@ -774,80 +859,92 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tj9object_t object = monitorRecords->object;\n \t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n-\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\tif (syncObj != object) {\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tif (NULL != objectMonitor) {\n+\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tlock = 0;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlock = 0;\n+\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n \t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t}\n \n-\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\tgoto done;\n+\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n+\t\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n \n-\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\tmonitorCount++;\n+\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tmonitorCount++;\n+\t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n \t}\n \n-\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n-\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n-\t\tif (NULL != syncObjectMonitor) {\n-\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\tif (NULL != syncObj) {\n+\t\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n+\t\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\t\tif (NULL != syncObjectMonitor) {\n+\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n+\t\t\t} else {\n+\t\t\t\tlock = 0;\n+\t\t\t}\n \t\t} else {\n-\t\t\tlock = 0;\n+\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n \t\t}\n-\t} else {\n-\t\tlock = J9OBJECT_MONITOR(currentThread, syncObj);\n-\t}\n \n-\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n-\t\tif (NULL == syncObjectMonitor) {\n-\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\tgoto done;\n+\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\tsyncObjectMonitor = objectMonitorInflate(currentThread, syncObj, lock);\n+\t\t\tif (NULL == syncObjectMonitor) {\n+\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\tgoto done;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t}\n-\t}\n \n-\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n-\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n+\t\tcontinuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, currentThread->threadObject);\n+\t\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObj, syncObj);\n \n-\tif (isObjectWait) {\n-\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n-\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\t\tif (isObjectWait) {\n+\t\t\tJ9VMContinuation *continuation = currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n \n-\t\t/* Record wait monitor state. */\n-\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n+\t\t\t/* Record wait monitor state. */\n+\t\t\tcontinuation->waitingMonitorEnterCount = monitor->count;\n \n-\t\t/* Reset monitor entry count to 1.*/\n-\t\tmonitor->count = 1;\n+\t\t\t/* Reset monitor entry count to 1.*/\n+\t\t\tmonitor->count = 1;\n+\t\t\t/* Reset monitor state to pre-detach state so omrthread_monitor_exit behave correctly. */\n+\t\t\tmonitor->owner = currentThread->osThread;\n+\t\t\tsyncObjectMonitor->ownerContinuation = NULL;\n \n-\t\t/* Add Continuation struct to the monitor's waiting list. */\n-\t\tomrthread_monitor_exit(monitor);\n-\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n-\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n-\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n-\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n-\t} else {\n-\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\t\t/* Add Continuation struct to the monitor's waiting list. */\n+\t\t\tomrthread_monitor_exit(monitor);\n+\t\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n+\t\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n+\t\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t} else {\n+\t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\t}\n+\n+\t\t/* Clear the blocking object on the carrier thread. */\n+\t\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n \t}\n \n \t/* Subtract the detached monitor from the carrier thread's lockedmonitorcount. */\n \tcurrentThread->osThread->lockedmonitorcount -= monitorCount;\n \n-\t/* Clear the blocking object on the carrier thread. */\n-\tJ9VMTHREAD_SET_BLOCKINGENTEROBJECT(currentThread, currentThread, NULL);\n-\n done:\n+\tif ((NULL != syncObj) && (J9_OBJECT_MONITOR_YIELD_VIRTUAL != result)) {\n+\t\texitVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n+\t}\n \treturn result;\n }\n \n@@ -859,7 +956,7 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \tJ9JavaVM *vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n \n-\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n+\tif (J9_ARE_NO_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)\n \t|| (NULL == vm->blockedContinuations)\n \t) {\n \t\treturn NULL;\n@@ -876,6 +973,23 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\twhile (NULL != listHead) {\n \t\t\t\tbool unblocked = false;\n \t\t\t\tnext = listHead->nextWaitingContinuation;\n+\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, listHead->vthread);\n+\t\t\t\t/* Skip vthreads that are still in transition. */\n+\t\t\t\tswitch (state) {\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_BLOCKING:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAITING:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING:\n+\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t\tlistHead = next;\n+\t\t\t\t\tcontinue;\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAIT:\n+\t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT:\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, listHead->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n+\t\t\t\t\t/* FALLTHROUGH */\n+\t\t\t\tdefault:\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n \t\t\t\t\tunblocked = true;\n \t\t\t\t} else {\n@@ -890,8 +1004,9 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n+\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t\t}\n-\t\t\t\t\tJ9ThreadAbstractMonitor *monitor = getInflatedObjectMonitor(vm, syncObject, lock);\n+\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n \t\t\t\t\tif (0 == monitor->count) {\n \t\t\t\t\t\tunblocked = true;\n \t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5cfdd0003fe..cf7e9afdea2 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -459,6 +459,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n \twalkAllStackFrames,\n \tacquireVThreadInspector,\n \treleaseVThreadInspector,\n+\tenterVThreadTransitionCritical,\n+\texitVThreadTransitionCritical,\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \tcheckArgsConsumed,\n #if defined(J9VM_ZOS_3164_INTEROPERABILITY) && (JAVA_SPEC_VERSION >= 17)\ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex e5b524fb436..e95f5e60d13 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -181,6 +181,7 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t\tif ((0 == monitor->pinCount)\n #if JAVA_SPEC_VERSION >= 24\n \t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n+\t\t\t&& (NULL == objectMonitor->waitingContinuations)\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t) {\n \t\t\t\tif (deflate) {\n",
    "3f8ccc251049a43255fb36ea5c245c43287c41fd": "diff --git a/doc/compiler/README.md b/doc/compiler/README.md\nindex c2fca38bbcb..a57b037ff91 100644\n--- a/doc/compiler/README.md\n+++ b/doc/compiler/README.md\n@@ -145,6 +145,7 @@ In the end code generators perform binary encoding to write the appropriate bits\n   * [Overview of Compilation Control](control/CompilationControl.md)\n   * [Options Processing](control/OptionsProcessing.md)\n   * [Options Processing Post Restore](control/OptionsPostRestore.md)\n+  * [External Options](control/ExternalOptions.md)\n   * [Checkpoint Restore Coordination](control/CheckpointRestoreCoordination.md)\n </details>\n \ndiff --git a/doc/compiler/control/ExternalOptions.md b/doc/compiler/control/ExternalOptions.md\nnew file mode 100644\nindex 00000000000..36a8589614e\n--- /dev/null\n+++ b/doc/compiler/control/ExternalOptions.md\n@@ -0,0 +1,46 @@\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+\n+# Overview\n+\n+In the context of the JIT, an \"External Option\" is an option that is not\n+specified as part of the `-Xjit` or `-Xaot` JVM argument. These options need to\n+be processed using either `FIND_AND_CONSUME_VMARG` or `FIND_ARG_IN_VMARGS`. The\n+main difference between the two is the former \"consumes\" the argument. For all\n+intents and purposes, this can be thought of as the JVM acknowledging the\n+argument as a valid argument. This is especially relevant when one specifies\n+`-XX:-IgnoreUnrecognizedXXColonOptions`, which will cause the JVM to terminate\n+with an error if there are any unconsumed arguments.\n+\n+# Adding an External Option\n+\n+There are two relevant structures: the `J9::ExternalOptions` enum and the\n+`J9::Options::_externalOptionsMetadata` table; these need to be in sync with\n+each other.\n+\n+To add a new External Option:\n+1. Add a new entry to the end of the `J9::ExternalOptions` enum\n+2. Add a new entry to the end of the `J9::Options::_externalOptionsMetadata`\n+   array; specify the option string, the way it should be matched, a `-1` for\n+   the `_argIndex` (this will be updated at runtime), and whether or not the\n+   option should be consumed by the JIT.\n+3. Add a case to the switch in `J9::OptionsPostRestore::iterateOverExternalOptions`\n\\ No newline at end of file\ndiff --git a/runtime/compiler/control/J9Options.cpp b/runtime/compiler/control/J9Options.cpp\nindex 15bd7b1c62f..f917de16d61 100644\n--- a/runtime/compiler/control/J9Options.cpp\n+++ b/runtime/compiler/control/J9Options.cpp\n@@ -399,6 +399,121 @@ const char * J9::Options::_externalOptionStrings[J9::ExternalOptions::TR_NumExte\n    // TR_NumExternalOptions                  = 79\n    };\n \n+void\n+J9::Options::findExternalOptions(J9JavaVM *vm, bool consume)\n+   {\n+   int32_t start = static_cast<int32_t>(J9::ExternalOptions::TR_FirstExternalOption);\n+   int32_t end = static_cast<int32_t>(J9::ExternalOptions::TR_NumExternalOptions);\n+   for (int32_t option = start; option < end; option++)\n+      {\n+      J9::ExternalOptionsMetadata &opt = J9::Options::_externalOptionsMetadata[option];\n+\n+      if (consume)\n+         {\n+         if (opt._consumedByJIT)\n+            {\n+            opt._argIndex = FIND_AND_CONSUME_VMARG(opt._match, opt._externalOption, 0);\n+            }\n+         }\n+      else\n+         {\n+         if (!opt._consumedByJIT)\n+            {\n+            opt._argIndex = FIND_ARG_IN_VMARGS(opt._match, opt._externalOption, 0);\n+            }\n+         }\n+      }\n+   }\n+\n+/**\n+ * This array should be kept in sync with the\n+ * J9::ExternalOptions enum in J9Options.hpp\n+ */\n+J9::ExternalOptionsMetadata J9::Options::_externalOptionsMetadata[J9::ExternalOptions::TR_NumExternalOptions] =\n+   {\n+   // TR_FirstExternalOption                                                             = 0\n+   { \"-Xnodfpbd\",                                   EXACT_MATCH,         -1, true  }, // = 0\n+   { \"-Xdfpbd\",                                     EXACT_MATCH,         -1, false }, // = 1\n+   { \"-Xhysteresis\",                                EXACT_MATCH,         -1, true  }, // = 2\n+   { \"-Xnoquickstart\",                              EXACT_MATCH,         -1, true  }, // = 3\n+   { \"-Xquickstart\",                                EXACT_MATCH,         -1, true  }, // = 4\n+   { \"-Xtune:elastic\",                              STARTSWITH_MATCH,    -1, true  }, // = 5\n+   { \"-XtlhPrefetch\",                               EXACT_MATCH,         -1, true  }, // = 6\n+   { \"-XnotlhPrefetch\",                             EXACT_MATCH,         -1, true  }, // = 7\n+   { VMOPT_XLOCKWORD,                               STARTSWITH_MATCH,    -1, false }, // = 8\n+   { \"-XlockReservation\",                           EXACT_MATCH,         -1, true  }, // = 9\n+   { \"-XjniAcc:\",                                   STARTSWITH_MATCH,    -1, true  }, // = 10\n+   { \"-Xlp\",                                        EXACT_MEMORY_MATCH,  -1, false }, // = 11\n+   { \"-Xlp:codecache:\",                             STARTSWITH_MATCH,    -1, true  }, // = 12\n+   { \"-Xcodecache\",                                 EXACT_MEMORY_MATCH,  -1, true  }, // = 13\n+   { \"-Xcodecachetotal\",                            EXACT_MEMORY_MATCH,  -1, true  }, // = 14\n+   { \"-XX:codecachetotal=\",                         EXACT_MEMORY_MATCH,  -1, true  }, // = 15\n+   { \"-XX:+PrintCodeCache\",                         EXACT_MATCH,         -1, true  }, // = 16\n+   { \"-XX:-PrintCodeCache\",                         EXACT_MATCH,         -1, true  }, // = 17\n+   { \"-XsamplingExpirationTime\",                    EXACT_MEMORY_MATCH,  -1, true  }, // = 18\n+   { \"-XcompilationThreads\",                        EXACT_MEMORY_MATCH,  -1, true  }, // = 19\n+   { \"-XaggressivenessLevel\",                       EXACT_MEMORY_MATCH,  -1, true  }, // = 20\n+   { \"-Xnoclassgc\",                                 EXACT_MATCH,         -1, true  }, // = 21\n+   { VMOPT_XJIT,                                    OPTIONAL_LIST_MATCH, -1, true  }, // = 22\n+   { VMOPT_XNOJIT,                                  EXACT_MATCH,         -1, true  }, // = 23\n+   { VMOPT_XJIT_COLON,                              STARTSWITH_MATCH,    -1, true  }, // = 24\n+   { VMOPT_XAOT,                                    OPTIONAL_LIST_MATCH, -1, true  }, // = 25\n+   { VMOPT_XNOAOT,                                  EXACT_MATCH,         -1, true  }, // = 26\n+   { VMOPT_XAOT_COLON,                              STARTSWITH_MATCH,    -1, true  }, // = 27\n+   { \"-XX:deterministic=\",                          EXACT_MEMORY_MATCH,  -1, true  }, // = 28\n+   { \"-XX:+RuntimeInstrumentation\",                 EXACT_MATCH,         -1, true  }, // = 29\n+   { \"-XX:-RuntimeInstrumentation\",                 EXACT_MATCH,         -1, true  }, // = 30\n+   { \"-XX:+PerfTool\",                               EXACT_MATCH,         -1, true  }, // = 31\n+   { \"-XX:-PerfTool\",                               EXACT_MATCH,         -1, true  }, // = 32\n+   { \"-XX:doNotProcessJitEnvVars\",                  EXACT_MATCH,         -1, true  }, // = 33\n+   { \"-XX:+MergeCompilerOptions\",                   EXACT_MATCH,         -1, true  }, // = 34\n+   { \"-XX:-MergeCompilerOptions\",                   EXACT_MATCH,         -1, true  }, // = 35\n+   { \"-XX:LateSCCDisclaimTime=\",                    STARTSWITH_MATCH,    -1, true  }, // = 36\n+   { \"-XX:+UseJITServer\",                           EXACT_MATCH,         -1, true  }, // = 37\n+   { \"-XX:-UseJITServer\",                           EXACT_MATCH,         -1, true  }, // = 38\n+   { \"-XX:+JITServerTechPreviewMessage\",            EXACT_MATCH,         -1, true  }, // = 39\n+   { \"-XX:-JITServerTechPreviewMessage\",            EXACT_MATCH,         -1, true  }, // = 40\n+   { \"-XX:JITServerAddress=\",                       STARTSWITH_MATCH,    -1, true  }, // = 41\n+   { \"-XX:JITServerPort=\",                          STARTSWITH_MATCH,    -1, true  }, // = 42\n+   { \"-XX:JITServerTimeout=\",                       STARTSWITH_MATCH,    -1, true  }, // = 43\n+   { \"-XX:JITServerSSLKey=\",                        STARTSWITH_MATCH,    -1, true  }, // = 44\n+   { \"-XX:JITServerSSLCert=\",                       STARTSWITH_MATCH,    -1, true  }, // = 45\n+   { \"-XX:JITServerSSLRootCerts=\",                  STARTSWITH_MATCH,    -1, true  }, // = 46\n+   { \"-XX:+JITServerUseAOTCache\",                   EXACT_MATCH,         -1, true  }, // = 47\n+   { \"-XX:-JITServerUseAOTCache\",                   EXACT_MATCH,         -1, true  }, // = 48\n+   { \"-XX:+RequireJITServer\",                       EXACT_MATCH,         -1, true  }, // = 49\n+   { \"-XX:-RequireJITServer\",                       EXACT_MATCH,         -1, true  }, // = 50\n+   { \"-XX:+JITServerLogConnections\",                EXACT_MATCH,         -1, true  }, // = 51\n+   { \"-XX:-JITServerLogConnections\",                EXACT_MATCH,         -1, true  }, // = 52\n+   { \"-XX:JITServerAOTmx=\",                         STARTSWITH_MATCH,    -1, true  }, // = 53\n+   { \"-XX:+JITServerLocalSyncCompiles\",             EXACT_MATCH,         -1, true  }, // = 54\n+   { \"-XX:-JITServerLocalSyncCompiles\",             EXACT_MATCH,         -1, true  }, // = 55\n+   { \"-XX:+JITServerMetrics\",                       EXACT_MATCH,         -1, true  }, // = 56\n+   { \"-XX:-JITServerMetrics\",                       EXACT_MATCH,         -1, true  }, // = 57\n+   { \"-XX:JITServerMetricsPort=\",                   STARTSWITH_MATCH,    -1, true  }, // = 58\n+   { \"-XX:JITServerMetricsSSLKey=\",                 STARTSWITH_MATCH,    -1, true  }, // = 59\n+   { \"-XX:JITServerMetricsSSLCert=\",                STARTSWITH_MATCH,    -1, true  }, // = 60\n+   { \"-XX:+JITServerShareROMClasses\",               EXACT_MATCH,         -1, true  }, // = 61\n+   { \"-XX:-JITServerShareROMClasses\",               EXACT_MATCH,         -1, true  }, // = 62\n+   { \"-XX:+JITServerAOTCachePersistence\",           EXACT_MATCH,         -1, true  }, // = 63\n+   { \"-XX:-JITServerAOTCachePersistence\",           EXACT_MATCH,         -1, true  }, // = 64\n+   { \"-XX:JITServerAOTCacheDir=\",                   STARTSWITH_MATCH,    -1, true  }, // = 65\n+   { \"-XX:JITServerAOTCacheName=\",                  STARTSWITH_MATCH,    -1, true  }, // = 66\n+   { \"-XX:codecachetotalMaxRAMPercentage=\",         STARTSWITH_MATCH,    -1, true  }, // = 67\n+   { \"-XX:+JITServerAOTCacheDelayMethodRelocation\", EXACT_MATCH,         -1, true  }, // = 68\n+   { \"-XX:-JITServerAOTCacheDelayMethodRelocation\", EXACT_MATCH,         -1, true  }, // = 69\n+   { \"-XX:+IProfileDuringStartupPhase\",             EXACT_MATCH,         -1, true  }, // = 70\n+   { \"-XX:-IProfileDuringStartupPhase\",             EXACT_MATCH,         -1, true  }, // = 71\n+   { \"-XX:+JITServerAOTCacheIgnoreLocalSCC\",        EXACT_MATCH,         -1, true  }, // = 72\n+   { \"-XX:-JITServerAOTCacheIgnoreLocalSCC\",        EXACT_MATCH,         -1, true  }, // = 73\n+   { \"-XX:+JITServerHealthProbes\",                  EXACT_MATCH,         -1, true  }, // = 74\n+   { \"-XX:-JITServerHealthProbes\",                  EXACT_MATCH,         -1, true  }, // = 75\n+   { \"-XX:JITServerHealthProbePort=\",               STARTSWITH_MATCH,    -1, true  }, // = 76\n+   { \"-XX:+TrackAOTDependencies\",                   EXACT_MATCH,         -1, true  }, // = 77\n+   { \"-XX:-TrackAOTDependencies\",                   EXACT_MATCH,         -1, true  }  // = 78\n+   // TR_NumExternalOptions                                                              = 79\n+   };\n+\n //************************************************************************\n //\n // Options handling - the following code implements the VM-specific\ndiff --git a/runtime/compiler/control/J9Options.hpp b/runtime/compiler/control/J9Options.hpp\nindex 3f51e19b523..ccbab97a952 100644\n--- a/runtime/compiler/control/J9Options.hpp\n+++ b/runtime/compiler/control/J9Options.hpp\n@@ -52,87 +52,123 @@ namespace J9\n  */\n enum ExternalOptions\n    {\n-   TR_FirstExternalOption                      = 0,\n-   Xnodfpbd                                    = 0,\n-   Xdfpbd                                      = 1,\n-   Xhysteresis                                 = 2,\n-   Xnoquickstart                               = 3,\n-   Xquickstart                                 = 4,\n-   Xtuneelastic                                = 5,\n-   XtlhPrefetch                                = 6,\n-   XnotlhPrefetch                              = 7,\n-   Xlockword                                   = 8,\n-   XlockReservation                            = 9,\n-   XjniAcc                                     = 10,\n-   Xlp                                         = 11,\n-   Xlpcodecache                                = 12,\n-   Xcodecache                                  = 13,\n-   Xcodecachetotal                             = 14,\n-   XXcodecachetotal                            = 15,\n-   XXplusPrintCodeCache                        = 16,\n-   XXminusPrintCodeCache                       = 17,\n-   XsamplingExpirationTime                     = 18,\n-   XcompilationThreads                         = 19,\n-   XaggressivenessLevel                        = 20,\n-   Xnoclassgc                                  = 21,\n-   Xjit                                        = 22,\n-   Xnojit                                      = 23,\n-   Xjitcolon                                   = 24,\n-   Xaot                                        = 25,\n-   Xnoaot                                      = 26,\n-   Xaotcolon                                   = 27,\n-   XXdeterministic                             = 28,\n-   XXplusRuntimeInstrumentation                = 29,\n-   XXminusRuntimeInstrumentation               = 30,\n-   XXplusPerfTool                              = 31,\n-   XXminusPerfTool                             = 32,\n-   XXdoNotProcessJitEnvVars                    = 33,\n-   XXplusMergeCompilerOptions                  = 34,\n-   XXminusMergeCompilerOptions                 = 35,\n-   XXLateSCCDisclaimTimeOption                 = 36,\n-   XXplusUseJITServerOption                    = 37,\n-   XXminusUseJITServerOption                   = 38,\n-   XXplusJITServerTechPreviewMessageOption     = 39,\n-   XXminusJITServerTechPreviewMessageOption    = 40,\n-   XXJITServerAddressOption                    = 41,\n-   XXJITServerPortOption                       = 42,\n-   XXJITServerTimeoutOption                    = 43,\n-   XXJITServerSSLKeyOption                     = 44,\n-   XXJITServerSSLCertOption                    = 45,\n-   XXJITServerSSLRootCertsOption               = 46,\n-   XXplusJITServerUseAOTCacheOption            = 47,\n-   XXminusJITServerUseAOTCacheOption           = 48,\n-   XXplusRequireJITServerOption                = 49,\n-   XXminusRequireJITServerOption               = 50,\n-   XXplusJITServerLogConnections               = 51,\n-   XXminusJITServerLogConnections              = 52,\n-   XXJITServerAOTmxOption                      = 53,\n-   XXplusJITServerLocalSyncCompilesOption      = 54,\n-   XXminusJITServerLocalSyncCompilesOption     = 55,\n-   XXplusMetricsServer                         = 56,\n-   XXminusMetricsServer                        = 57,\n-   XXJITServerMetricsPortOption                = 58,\n-   XXJITServerMetricsSSLKeyOption              = 59,\n-   XXJITServerMetricsSSLCertOption             = 60,\n-   XXplusJITServerShareROMClassesOption        = 61,\n-   XXminusJITServerShareROMClassesOption       = 62,\n-   XXplusJITServerAOTCachePersistenceOption    = 63,\n-   XXminusJITServerAOTCachePersistenceOption   = 64,\n-   XXJITServerAOTCacheDirOption                = 65,\n-   XXJITServerAOTCacheNameOption               = 66,\n-   XXcodecachetotalMaxRAMPercentage            = 67,\n+   TR_FirstExternalOption                        = 0,\n+   Xnodfpbd                                      = 0,\n+   Xdfpbd                                        = 1,\n+   Xhysteresis                                   = 2,\n+   Xnoquickstart                                 = 3,\n+   Xquickstart                                   = 4,\n+   Xtuneelastic                                  = 5,\n+   XtlhPrefetch                                  = 6,\n+   XnotlhPrefetch                                = 7,\n+   Xlockword                                     = 8,\n+   XlockReservation                              = 9,\n+   XjniAcc                                       = 10,\n+   Xlp                                           = 11,\n+   Xlpcodecache                                  = 12,\n+   Xcodecache                                    = 13,\n+   Xcodecachetotal                               = 14,\n+   XXcodecachetotal                              = 15,\n+   XXplusPrintCodeCache                          = 16,\n+   XXminusPrintCodeCache                         = 17,\n+   XsamplingExpirationTime                       = 18,\n+   XcompilationThreads                           = 19,\n+   XaggressivenessLevel                          = 20,\n+   Xnoclassgc                                    = 21,\n+   Xjit                                          = 22,\n+   Xnojit                                        = 23,\n+   Xjitcolon                                     = 24,\n+   Xaot                                          = 25,\n+   Xnoaot                                        = 26,\n+   Xaotcolon                                     = 27,\n+   XXdeterministic                               = 28,\n+   XXplusRuntimeInstrumentation                  = 29,\n+   XXminusRuntimeInstrumentation                 = 30,\n+   XXplusPerfTool                                = 31,\n+   XXminusPerfTool                               = 32,\n+   XXdoNotProcessJitEnvVars                      = 33,\n+   XXplusMergeCompilerOptions                    = 34,\n+   XXminusMergeCompilerOptions                   = 35,\n+   XXLateSCCDisclaimTimeOption                   = 36,\n+   XXplusUseJITServerOption                      = 37,\n+   XXminusUseJITServerOption                     = 38,\n+   XXplusJITServerTechPreviewMessageOption       = 39,\n+   XXminusJITServerTechPreviewMessageOption      = 40,\n+   XXJITServerAddressOption                      = 41,\n+   XXJITServerPortOption                         = 42,\n+   XXJITServerTimeoutOption                      = 43,\n+   XXJITServerSSLKeyOption                       = 44,\n+   XXJITServerSSLCertOption                      = 45,\n+   XXJITServerSSLRootCertsOption                 = 46,\n+   XXplusJITServerUseAOTCacheOption              = 47,\n+   XXminusJITServerUseAOTCacheOption             = 48,\n+   XXplusRequireJITServerOption                  = 49,\n+   XXminusRequireJITServerOption                 = 50,\n+   XXplusJITServerLogConnections                 = 51,\n+   XXminusJITServerLogConnections                = 52,\n+   XXJITServerAOTmxOption                        = 53,\n+   XXplusJITServerLocalSyncCompilesOption        = 54,\n+   XXminusJITServerLocalSyncCompilesOption       = 55,\n+   XXplusMetricsServer                           = 56,\n+   XXminusMetricsServer                          = 57,\n+   XXJITServerMetricsPortOption                  = 58,\n+   XXJITServerMetricsSSLKeyOption                = 59,\n+   XXJITServerMetricsSSLCertOption               = 60,\n+   XXplusJITServerShareROMClassesOption          = 61,\n+   XXminusJITServerShareROMClassesOption         = 62,\n+   XXplusJITServerAOTCachePersistenceOption      = 63,\n+   XXminusJITServerAOTCachePersistenceOption     = 64,\n+   XXJITServerAOTCacheDirOption                  = 65,\n+   XXJITServerAOTCacheNameOption                 = 66,\n+   XXcodecachetotalMaxRAMPercentage              = 67,\n    XXplusJITServerAOTCacheDelayMethodRelocation  = 68,\n    XXminusJITServerAOTCacheDelayMethodRelocation = 69,\n-   XXplusIProfileDuringStartupPhase            = 70,\n-   XXminusIProfileDuringStartupPhase           = 71,\n-   XXplusJITServerAOTCacheIgnoreLocalSCC       = 72,\n-   XXminusJITServerAOTCacheIgnoreLocalSCC      = 73,\n-   XXplusHealthProbes                          = 74,\n-   XXminusHealthProbes                         = 75,\n-   XXJITServerHealthProbePortOption            = 76,\n-   XXplusTrackAOTDependencies                  = 77,\n-   XXminusTrackAOTDependencies                 = 78,\n-   TR_NumExternalOptions                       = 79\n+   XXplusIProfileDuringStartupPhase              = 70,\n+   XXminusIProfileDuringStartupPhase             = 71,\n+   XXplusJITServerAOTCacheIgnoreLocalSCC         = 72,\n+   XXminusJITServerAOTCacheIgnoreLocalSCC        = 73,\n+   XXplusHealthProbes                            = 74,\n+   XXminusHealthProbes                           = 75,\n+   XXJITServerHealthProbePortOption              = 76,\n+   XXplusTrackAOTDependencies                    = 77,\n+   XXminusTrackAOTDependencies                   = 78,\n+   TR_NumExternalOptions                         = 79\n+   };\n+\n+/**\n+ * @brief This data structure is used to describe external JVM options that\n+ *        the JIT processes. An option is considered external if it is not part\n+ *        of the -Xjit or -Xaot flag. These options are found and/or consumed\n+ *        using FIND_AND_CONSUME_VMARG / FIND_ARG_IN_VMARGS.\n+ */\n+struct ExternalOptionsMetadata\n+   {\n+   /** @brief The external option string */\n+   const char * const _externalOption;\n+\n+   /**\n+    * @brief The way an option should be matched when using\n+    *        FIND_AND_CONSUME_VMARG / FIND_ARG_IN_VMARGS. Can be one of the\n+    *        following:\n+    *        - EXACT_MATCH\n+    *        - STARTSWITH_MATCH\n+    *        - EXACT_MEMORY_MATCH\n+    *        - OPTIONAL_LIST_MATCH\n+    *        - OPTIONAL_LIST_MATCH_USING_EQUALS\n+    */\n+   const int8_t       _match;\n+\n+   /** @brief The index into the args array of this option, if it exists. */\n+   int32_t            _argIndex;\n+\n+   /**\n+    * @brief Indicates whether this option should be consumed by the JIT;\n+    *        every valid external option has to be consumed or the JVM will\n+    *        exit with an error when using\n+    *        -XX:-IgnoreUnrecognizedXXColonOptions. This just amounts to\n+    *        using FIND_AND_CONSUME_VMARG rather than FIND_ARG_IN_VMARGS.\n+    */\n+   const bool         _consumedByJIT;\n    };\n \n class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n@@ -458,6 +494,44 @@ class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n \n    static const char * _externalOptionStrings[ExternalOptions::TR_NumExternalOptions];\n \n+   static ExternalOptionsMetadata _externalOptionsMetadata[ExternalOptions::TR_NumExternalOptions];\n+\n+   /**\n+    * @brief This static method iterates over the _externalOptionsMetadata table\n+    *        to find (and possibly consume) the string indicated by\n+    *        _externalOption, as well as updates the _argIndex with the\n+    *        index into the args array of the external option if it exists (-1\n+    *        otherwise).\n+    *\n+    * @param vm The J9JavaVM pointer\n+    * @param consume Specifies whether to use FIND_AND_CONSUME_VMARG or\n+    *                FIND_ARG_IN_VMARGS; default value is true\n+    */\n+   static void findExternalOptions(J9JavaVM *vm, bool consume = true);\n+\n+   /**\n+    * @brief Returns the string associated with the ExternalOptions option\n+    *\n+    * @param option The ExternalOptions enum representing the external option\n+    *\n+    * @return The string associated with the ExternalOptions option\n+    */\n+   static const char * getExternalOptionString(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._externalOption; }\n+\n+   /**\n+    * @brief Returns the index into the args array of the ExternalOptions option\n+    *\n+    * @param option The ExternalOptions enum representing the external option\n+    *\n+    * @return The cached arg index\n+    */\n+   static int32_t getExternalOptionIndex(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._argIndex; }\n+\n+   static int8_t getExternalOptionMatch(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._match; }\n+\n    static void  printPID();\n \n \n",
    "eb7d855c830c75f60b79e0d7ad5cc34b32ee642f": "diff --git a/runtime/compiler/control/DLLMain.cpp b/runtime/compiler/control/DLLMain.cpp\nindex 25e1f5090bc..0981811aead 100644\n--- a/runtime/compiler/control/DLLMain.cpp\n+++ b/runtime/compiler/control/DLLMain.cpp\n@@ -72,12 +72,12 @@ static IDATA initializeCompilerArgs(J9JavaVM* vm,\n    const char *fatalErrorStr = NULL;\n    if (isXjit)\n       {\n-      VMOPT_WITH_COLON = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon];\n+      VMOPT_WITH_COLON = J9::Options::getExternalOptionString(J9::ExternalOptions::Xjitcolon);\n       fatalErrorStr = \"no arguments for -Xjit:\";\n       }\n    else\n       {\n-      VMOPT_WITH_COLON = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon];\n+      VMOPT_WITH_COLON = J9::Options::getExternalOptionString(J9::ExternalOptions::Xaotcolon);\n       fatalErrorStr = \"no arguments for -Xaot:\";\n       }\n \n@@ -270,47 +270,33 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n             return J9VMDLLMAIN_FAILED;\n             }\n \n-         /* Find and consume these before the library might be unloaded */\n-         FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnodfpbd], 0);\n-         if (FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xdfpbd], 0) >= 0)\n-            {\n-            FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xhysteresis], 0);\n-            }\n-         FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoquickstart], 0); // deprecated\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xtuneelastic], 0);\n-         argIndexQuickstart = FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xquickstart], 0);\n-         tlhPrefetch = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XtlhPrefetch], 0);\n-         notlhPrefetch = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XnotlhPrefetch], 0);\n-         lockReservation = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XlockReservation], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache], 0);\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XjniAcc], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecachetotal], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotal], 0);\n-\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlpcodecache], 0);\n-\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XsamplingExpirationTime], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XcompilationThreads], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XaggressivenessLevel], 0);\n-         argIndexXjit = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjit], 0);\n-         argIndexXaot = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaot], 0);\n-         argIndexXnojit = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnojit], 0);\n-\n-         argIndexRIEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusRuntimeInstrumentation], 0);\n-         argIndexRIDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusRuntimeInstrumentation], 0);\n+         // Update arg index for args that are consumed by the JIT\n+         J9::Options::findExternalOptions(vm);\n+\n+         argIndexQuickstart = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xquickstart);\n+         tlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XtlhPrefetch);\n+         notlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XnotlhPrefetch);\n+         lockReservation = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XlockReservation);\n+\n+         argIndexXjit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xjit);\n+         argIndexXaot = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xaot);\n+         argIndexXnojit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xnojit);\n+\n+         argIndexRIEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusRuntimeInstrumentation);\n+         argIndexRIDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusRuntimeInstrumentation);\n \n          // Determine if user disabled Runtime Instrumentation\n          if (argIndexRIEnabled >= 0 || argIndexRIDisabled >= 0)\n             TR::Options::_hwProfilerEnabled = (argIndexRIDisabled > argIndexRIEnabled) ? TR_no : TR_yes;\n \n-         argIndexPerfEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusPerfTool], 0);\n-         argIndexPerfDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusPerfTool], 0);\n+         argIndexPerfEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusPerfTool);\n+         argIndexPerfDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusPerfTool);\n \n          // Determine if user disabled PerfTool\n          if (argIndexPerfEnabled >= 0 || argIndexPerfDisabled >= 0)\n             TR::Options::_perfToolEnabled = (argIndexPerfDisabled > argIndexPerfEnabled) ? TR_no : TR_yes;\n \n-         TR::Options::_doNotProcessEnvVars = (FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXdoNotProcessJitEnvVars], 0) >= 0);\n+         TR::Options::_doNotProcessEnvVars = (J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXdoNotProcessJitEnvVars) >= 0);\n \n          isQuickstart = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_TUNE_QUICKSTART);\n \n@@ -416,11 +402,14 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n       case JIT_INITIALIZED :\n          if (isJIT || isAOT)\n             {\n+            // Update arg index for args that are not consumed by the JIT\n+            J9::Options::findExternalOptions(vm, false);\n+\n             /* We need to initialize the following if we allow JIT compilation, AOT compilation or AOT relocation to be done */\n             try\n                {\n-               argIndexMergeOptionsEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMergeCompilerOptions], 0);\n-               argIndexMergeOptionsDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMergeCompilerOptions], 0);\n+               argIndexMergeOptionsEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusMergeCompilerOptions);\n+               argIndexMergeOptionsDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusMergeCompilerOptions);\n \n                // Determine if user wants to merge compiler options\n                bool mergeCompilerOptions = false;\n@@ -430,8 +419,8 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n                /*\n                 * Note that the option prefix we need to match includes the colon.\n                 */\n-               argIndexXjit = FIND_ARG_IN_VMARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon], 0);\n-               argIndexXaot = FIND_ARG_IN_VMARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon], 0);\n+               argIndexXjit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xjitcolon);\n+               argIndexXaot = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xaotcolon);\n \n                /* do initializations for -Xjit options */\n                if (isJIT && argIndexXjit >= 0)\ndiff --git a/runtime/compiler/control/J9Options.cpp b/runtime/compiler/control/J9Options.cpp\nindex f917de16d61..b315b14c8d1 100644\n--- a/runtime/compiler/control/J9Options.cpp\n+++ b/runtime/compiler/control/J9Options.cpp\n@@ -310,95 +310,6 @@ bool J9::Options::_aggressiveLockReservation = false;\n \n bool J9::Options::_xrsSync = false;\n \n-/**\n- * This string array should be kept in sync with the\n- * J9::ExternalOptions enum in J9Options.hpp\n- */\n-const char * J9::Options::_externalOptionStrings[J9::ExternalOptions::TR_NumExternalOptions] =\n-   {\n-   // TR_FirstExternalOption                 = 0\n-   \"-Xnodfpbd\",                           // = 0\n-   \"-Xdfpbd\",                             // = 1\n-   \"-Xhysteresis\",                        // = 2\n-   \"-Xnoquickstart\",                      // = 3\n-   \"-Xquickstart\",                        // = 4\n-   \"-Xtune:elastic\",                      // = 5\n-   \"-XtlhPrefetch\",                       // = 6\n-   \"-XnotlhPrefetch\",                     // = 7\n-   \"-Xlockword\",                          // = 8\n-   \"-XlockReservation\",                   // = 9\n-   \"-XjniAcc:\",                           // = 10\n-   \"-Xlp\",                                // = 11\n-   \"-Xlp:codecache:\",                     // = 12\n-   \"-Xcodecache\",                         // = 13\n-   \"-Xcodecachetotal\",                    // = 14\n-   \"-XX:codecachetotal=\",                 // = 15\n-   \"-XX:+PrintCodeCache\",                 // = 16\n-   \"-XX:-PrintCodeCache\",                 // = 17\n-   \"-XsamplingExpirationTime\",            // = 18\n-   \"-XcompilationThreads\",                // = 19\n-   \"-XaggressivenessLevel\",               // = 20\n-   \"-Xnoclassgc\",                         // = 21\n-   VMOPT_XJIT,                            // = 22\n-   VMOPT_XNOJIT,                          // = 23\n-   VMOPT_XJIT_COLON,                      // = 24\n-   VMOPT_XAOT,                            // = 25\n-   VMOPT_XNOAOT,                          // = 26\n-   VMOPT_XAOT_COLON,                      // = 27\n-   \"-XX:deterministic=\",                  // = 28\n-   \"-XX:+RuntimeInstrumentation\",         // = 29\n-   \"-XX:-RuntimeInstrumentation\",         // = 30\n-   \"-XX:+PerfTool\",                       // = 31\n-   \"-XX:-PerfTool\",                       // = 32\n-   \"-XX:doNotProcessJitEnvVars\",          // = 33\n-   \"-XX:+MergeCompilerOptions\",           // = 34\n-   \"-XX:-MergeCompilerOptions\",           // = 35\n-   \"-XX:LateSCCDisclaimTime=\",            // = 36\n-   \"-XX:+UseJITServer\",                   // = 37\n-   \"-XX:-UseJITServer\",                   // = 38\n-   \"-XX:+JITServerTechPreviewMessage\",    // = 39\n-   \"-XX:-JITServerTechPreviewMessage\",    // = 40\n-   \"-XX:JITServerAddress=\",               // = 41\n-   \"-XX:JITServerPort=\",                  // = 42\n-   \"-XX:JITServerTimeout=\",               // = 43\n-   \"-XX:JITServerSSLKey=\",                // = 44\n-   \"-XX:JITServerSSLCert=\",               // = 45\n-   \"-XX:JITServerSSLRootCerts=\",          // = 46\n-   \"-XX:+JITServerUseAOTCache\",           // = 47\n-   \"-XX:-JITServerUseAOTCache\",           // = 48\n-   \"-XX:+RequireJITServer\",               // = 49\n-   \"-XX:-RequireJITServer\",               // = 50\n-   \"-XX:+JITServerLogConnections\",        // = 51\n-   \"-XX:-JITServerLogConnections\",        // = 52\n-   \"-XX:JITServerAOTmx=\",                 // = 53\n-   \"-XX:+JITServerLocalSyncCompiles\",     // = 54\n-   \"-XX:-JITServerLocalSyncCompiles\",     // = 55\n-   \"-XX:+JITServerMetrics\",               // = 56\n-   \"-XX:-JITServerMetrics\",               // = 57\n-   \"-XX:JITServerMetricsPort=\",           // = 58\n-   \"-XX:JITServerMetricsSSLKey=\",         // = 59\n-   \"-XX:JITServerMetricsSSLCert=\",        // = 60\n-   \"-XX:+JITServerShareROMClasses\",       // = 61\n-   \"-XX:-JITServerShareROMClasses\",       // = 62\n-   \"-XX:+JITServerAOTCachePersistence\",   // = 63\n-   \"-XX:-JITServerAOTCachePersistence\",   // = 64\n-   \"-XX:JITServerAOTCacheDir=\",           // = 65\n-   \"-XX:JITServerAOTCacheName=\",          // = 66\n-   \"-XX:codecachetotalMaxRAMPercentage=\", // = 67\n-   \"-XX:+JITServerAOTCacheDelayMethodRelocation\", // = 68\n-   \"-XX:-JITServerAOTCacheDelayMethodRelocation\", // = 69\n-   \"-XX:+IProfileDuringStartupPhase\",     // = 70\n-   \"-XX:-IProfileDuringStartupPhase\",     // = 71\n-   \"-XX:+JITServerAOTCacheIgnoreLocalSCC\", // = 72\n-   \"-XX:-JITServerAOTCacheIgnoreLocalSCC\", // = 73\n-   \"-XX:+JITServerHealthProbes\",          // = 74\n-   \"-XX:-JITServerHealthProbes\",          // = 75\n-   \"-XX:JITServerHealthProbePort=\",       // = 76\n-   \"-XX:+TrackAOTDependencies\",           // = 77\n-   \"-XX:-TrackAOTDependencies\"            // = 78\n-   // TR_NumExternalOptions                  = 79\n-   };\n-\n void\n J9::Options::findExternalOptions(J9JavaVM *vm, bool consume)\n    {\n@@ -1463,38 +1374,35 @@ static std::string readFileToString(char *fileName)\n       }\n    }\n \n+static int32_t getArgIndex(J9JavaVM *vm, J9::ExternalOptions option, J9VMInitArgs *vmArgsArray, bool postRestore)\n+   {\n+   return\n+      postRestore ?\n+         FIND_ARG_IN_ARGS(vmArgsArray, J9::Options::getExternalOptionMatch(option), J9::Options::getExternalOptionString(option), 0)\n+         :\n+         J9::Options::getExternalOptionIndex(option);\n+   }\n+\n bool\n-J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo)\n-   {\n-   const char *xxJITServerPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerPortOption];\n-   const char *xxJITServerTimeoutOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerTimeoutOption];\n-   const char *xxJITServerSSLKeyOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLKeyOption];\n-   const char *xxJITServerSSLCertOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLCertOption];\n-   const char *xxJITServerSSLRootCertsOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLRootCertsOption];\n-   const char *xxJITServerUseAOTCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerUseAOTCacheOption];\n-   const char *xxDisableJITServerUseAOTCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerUseAOTCacheOption];\n-   const char *xxRequireJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusRequireJITServerOption];\n-   const char *xxDisableRequireJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusRequireJITServerOption];\n-   const char *xxJITServerLogConnections = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerLogConnections];\n-   const char *xxDisableJITServerLogConnections = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerLogConnections];\n-   const char *xxJITServerAOTmxOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTmxOption];\n-\n-   int32_t xxJITServerPortArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerPortOption, 0);\n-   int32_t xxJITServerTimeoutArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerTimeoutOption, 0);\n-   int32_t xxJITServerSSLKeyArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLKeyOption, 0);\n-   int32_t xxJITServerSSLCertArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLCertOption, 0);\n-   int32_t xxJITServerSSLRootCertsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLRootCertsOption, 0);\n-   int32_t xxJITServerUseAOTCacheArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerUseAOTCacheOption, 0);\n-   int32_t xxDisableJITServerUseAOTCacheArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerUseAOTCacheOption, 0);\n-   int32_t xxRequireJITServerArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxRequireJITServerOption, 0);\n-   int32_t xxDisableRequireJITServerArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableRequireJITServerOption, 0);\n-   int32_t xxJITServerLogConnectionsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerLogConnections, 0);\n-   int32_t xxDisableJITServerLogConnectionsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerLogConnections, 0);\n-   int32_t xxJITServerAOTmxArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerAOTmxOption, 0);\n+J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool postRestore)\n+   {\n+   int32_t xxJITServerPortArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerPortOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerTimeoutArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerTimeoutOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLKeyArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLKeyOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLCertArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLCertOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLRootCertsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLRootCertsOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerUseAOTCacheArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerUseAOTCacheOption, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerUseAOTCacheArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerUseAOTCacheOption, vmArgsArray, postRestore);\n+   int32_t xxRequireJITServerArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusRequireJITServerOption, vmArgsArray, postRestore);\n+   int32_t xxDisableRequireJITServerArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusRequireJITServerOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerLogConnectionsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerLogConnections, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerLogConnectionsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerLogConnections, vmArgsArray, postRestore);\n+   int32_t xxJITServerAOTmxArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerAOTmxOption, vmArgsArray, postRestore);\n \n    if (xxJITServerPortArgIndex >= 0)\n       {\n       UDATA port=0;\n+      const char *xxJITServerPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerPortOption);\n       IDATA ret = GET_INTEGER_VALUE_ARGS(vmArgsArray, xxJITServerPortArgIndex, xxJITServerPortOption, port);\n       if (ret == OPTION_OK)\n          compInfo->getPersistentInfo()->setJITServerPort(port);\n@@ -1512,6 +1420,7 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    if (xxJITServerTimeoutArgIndex >= 0)\n       {\n       UDATA timeoutMs=0;\n+      const char *xxJITServerTimeoutOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerTimeoutOption);\n       IDATA ret = GET_INTEGER_VALUE_ARGS(vmArgsArray, xxJITServerTimeoutArgIndex, xxJITServerTimeoutOption, timeoutMs);\n       if (ret == OPTION_OK)\n          compInfo->getPersistentInfo()->setSocketTimeout(timeoutMs);\n@@ -1567,6 +1476,7 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    if (xxJITServerAOTmxArgIndex >= 0)\n       {\n       uint32_t aotMaxBytes = 0;\n+      const char *xxJITServerAOTmxOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerAOTmxOption);\n       if (GET_MEMORY_VALUE_ARGS(vmArgsArray, xxJITServerAOTmxArgIndex, xxJITServerAOTmxOption, aotMaxBytes) == OPTION_OK)\n          {\n          JITServerAOTCacheMap::setCacheMaxBytes(aotMaxBytes);\n@@ -1577,13 +1487,10 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    }\n \n void\n-J9::Options::JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled)\n+J9::Options::JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled, bool postRestore)\n    {\n-   const char *xxJITServerLocalSyncCompilesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption];\n-   const char *xxDisableJITServerLocalSyncCompilesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption];\n-\n-   int32_t xxJITServerLocalSyncCompilesArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerLocalSyncCompilesOption, 0);\n-   int32_t xxDisableJITServerLocalSyncCompilesArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerLocalSyncCompilesOption, 0);\n+   int32_t xxJITServerLocalSyncCompilesArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerLocalSyncCompilesArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption, vmArgsArray, postRestore);\n \n    // We either obey the command line option, or make sure to disable LocalSyncCompiles if\n    // something is set that interferes with remote async recompilations.\n@@ -1713,11 +1620,11 @@ void J9::Options::preProcessMode(J9JavaVM *vm, J9JITConfig *jitConfig)\n          // The aggressivenessLevel can be set directly with -XaggressivenessLevel\n          // This option is a second hand citizen option; if other options contradict it, this option is\n          // ignored even if it appears later\n-         const char *aggressiveOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XaggressivenessLevel];\n-         int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, aggressiveOption, 0);\n+         int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XaggressivenessLevel);\n          if (argIndex >= 0)\n             {\n             UDATA aggressivenessValue = 0;\n+            const char *aggressiveOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XaggressivenessLevel);\n             IDATA ret = GET_INTEGER_VALUE(argIndex, aggressiveOption, aggressivenessValue);\n             if (ret == OPTION_OK && aggressivenessValue < LAST_AGGRESSIVENESS_LEVEL)\n                {\n@@ -1731,10 +1638,9 @@ void J9::Options::preProcessMode(J9JavaVM *vm, J9JITConfig *jitConfig)\n void J9::Options::preProcessJniAccelerator(J9JavaVM *vm)\n    {\n    static bool doneWithJniAcc = false;\n-   const char *jniAccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XjniAcc];\n    if (!doneWithJniAcc)\n       {\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, jniAccOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XjniAcc);\n       if (argIndex >= 0)\n          {\n          const char *optValue;\n@@ -1768,10 +1674,10 @@ double getCodeCacheMaxPercentageOfAvailableMemory(J9JavaVM *vm)\n    OMRPORT_ACCESS_FROM_J9PORT(PORTLIB);\n \n    double codeCacheTotalPercentage = CODECACHE_DEFAULT_MAXRAMPERCENTAGE;\n-   const char *xxccPercentOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage];\n-   int32_t XXcodeCacheTotalPercentArg = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxccPercentOption, 0);\n+   int32_t XXcodeCacheTotalPercentArg = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage);\n    if (XXcodeCacheTotalPercentArg >= 0)\n       {\n+      const char *xxccPercentOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage);\n       IDATA returnCode = GET_DOUBLE_VALUE(XXcodeCacheTotalPercentArg, xxccPercentOption, codeCacheTotalPercentage);\n       if (OPTION_OK == returnCode)\n          {\n@@ -1781,8 +1687,10 @@ double getCodeCacheMaxPercentageOfAvailableMemory(J9JavaVM *vm)\n             codeCacheTotalPercentage = CODECACHE_DEFAULT_MAXRAMPERCENTAGE;\n             }\n          }\n-\t else\n-            j9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JIT_OPTIONS_INCORRECT_MEMORY_SIZE, xxccPercentOption);\n+      else\n+         {\n+         j9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JIT_OPTIONS_INCORRECT_MEMORY_SIZE, xxccPercentOption);\n+         }\n       }\n    return codeCacheTotalPercentage;\n    }\n@@ -1813,15 +1721,15 @@ void J9::Options::preProcessCodeCacheIncreaseTotalSize(J9JavaVM *vm, J9JITConfig\n             }\n          }\n #endif\n-      const char *xccOption  = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecachetotal];\n-      const char *xxccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotal];\n-      int32_t codeCacheTotalArgIndex   = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, xccOption, 0);\n-      int32_t XXcodeCacheTotalArgIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, xxccOption, 0);\n+      int32_t codeCacheTotalArgIndex   = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecachetotal);\n+      int32_t XXcodeCacheTotalArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXcodecachetotal);\n       int32_t argIndex = 0;\n       // Check if option is at all specified\n       if (codeCacheTotalArgIndex >= 0 || XXcodeCacheTotalArgIndex >= 0)\n          {\n          const char *ccTotalOption;\n+         const char *xccOption  = J9::Options::getExternalOptionString(J9::ExternalOptions::Xcodecachetotal);\n+         const char *xxccOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXcodecachetotal);\n          if (XXcodeCacheTotalArgIndex > codeCacheTotalArgIndex)\n             {\n             argIndex = XXcodeCacheTotalArgIndex;\n@@ -1874,10 +1782,8 @@ void J9::Options::preProcessCodeCacheIncreaseTotalSize(J9JavaVM *vm, J9JITConfig\n void J9::Options::preProcessCodeCachePrintCodeCache(J9JavaVM *vm)\n    {\n    // -XX:+PrintCodeCache will be parsed twice into both AOT and JIT options here.\n-   const char *xxPrintCodeCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusPrintCodeCache];\n-   const char *xxDisablePrintCodeCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusPrintCodeCache];\n-   int32_t xxPrintCodeCacheArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxPrintCodeCacheOption, 0);\n-   int32_t xxDisablePrintCodeCacheArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisablePrintCodeCacheOption, 0);\n+   int32_t xxPrintCodeCacheArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusPrintCodeCache);\n+   int32_t xxDisablePrintCodeCacheArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusPrintCodeCache);\n \n    if (xxPrintCodeCacheArgIndex > xxDisablePrintCodeCacheArgIndex)\n       {\n@@ -1905,8 +1811,8 @@ bool J9::Options::preProcessCodeCacheXlpCodeCache(J9JavaVM *vm, J9JITConfig *jit\n       UDATA requestedLargeCodePageFlags = J9PORT_VMEM_PAGE_FLAG_NOT_USED;\n       UDATA largePageSize = 0;\n       UDATA largePageFlags = 0;\n-      int32_t xlpCodeCacheIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlpcodecache], NULL);\n-      int32_t xlpIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlp], NULL);\n+      int32_t xlpCodeCacheIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlpcodecache);\n+      int32_t xlpIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlp);\n \n       // Parse -Xlp:codecache:pagesize=<size> as the right most option\n       if (xlpCodeCacheIndex > xlpIndex)\n@@ -2237,11 +2143,11 @@ bool J9::Options::preProcessCodeCache(J9JavaVM *vm, J9JITConfig *jitConfig)\n    PORT_ACCESS_FROM_JAVAVM(vm);\n    OMRPORT_ACCESS_FROM_J9PORT(PORTLIB);\n \n-   const char *ccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache];\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, ccOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecache);\n    if (argIndex >= 0)\n       {\n       UDATA ccSize;\n+      const char *ccOption = J9::Options::getExternalOptionString(J9::ExternalOptions::Xcodecache);\n       GET_MEMORY_VALUE(argIndex, ccOption, ccSize);\n       ccSize >>= 10;\n       jitConfig->codeCacheKB = ccSize;\n@@ -2261,11 +2167,11 @@ bool J9::Options::preProcessCodeCache(J9JavaVM *vm, J9JITConfig *jitConfig)\n \n void J9::Options::preProcessSamplingExpirationTime(J9JavaVM *vm)\n    {\n-   const char *samplingOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XsamplingExpirationTime];\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, samplingOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XsamplingExpirationTime);\n    if (argIndex >= 0)\n       {\n       UDATA expirationTime;\n+      const char *samplingOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XsamplingExpirationTime);\n       IDATA ret = GET_INTEGER_VALUE(argIndex, samplingOption, expirationTime);\n       if (ret == OPTION_OK)\n          _samplingThreadExpirationTime = expirationTime;\n@@ -2279,11 +2185,11 @@ void J9::Options::preProcessCompilationThreads(J9JavaVM *vm, J9JITConfig *jitCon\n       {\n       notYetParsed = false;\n       TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n-      const char *compThreadsOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XcompilationThreads];\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, compThreadsOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XcompilationThreads);\n       if (argIndex >= 0)\n          {\n          UDATA numCompThreads;\n+         const char *compThreadsOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XcompilationThreads);\n          IDATA ret = GET_INTEGER_VALUE(argIndex, compThreadsOption, numCompThreads);\n \n          if (ret == OPTION_OK && numCompThreads > 0)\n@@ -2322,8 +2228,8 @@ void J9::Options::preProcessTLHPrefetch(J9JavaVM *vm)\n       preferTLHPrefetch = false;\n       }\n \n-   IDATA notlhPrefetch = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XnotlhPrefetch], 0);\n-   IDATA tlhPrefetch = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XtlhPrefetch], 0);\n+   IDATA notlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XnotlhPrefetch);\n+   IDATA tlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XtlhPrefetch);\n    if (preferTLHPrefetch)\n       {\n       if (notlhPrefetch <= tlhPrefetch)\n@@ -2386,12 +2292,12 @@ void J9::Options::preProcessDeterministicMode(J9JavaVM *vm)\n    // Process the deterministic mode\n    if (TR::Options::_deterministicMode == -1) // not yet set\n       {\n-      const char *deterministicOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXdeterministic];\n       const UDATA MAX_DETERMINISTIC_MODE = 9; // only levels 0-9 are allowed\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, deterministicOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXdeterministic);\n       if (argIndex >= 0)\n          {\n          UDATA deterministicMode;\n+         const char *deterministicOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXdeterministic);\n          IDATA ret = GET_INTEGER_VALUE(argIndex, deterministicOption, deterministicMode);\n          if (ret == OPTION_OK && deterministicMode <= MAX_DETERMINISTIC_MODE)\n             {\n@@ -2420,18 +2326,16 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n          // It can be overridden with -XX:JITServerTimeout= option in JITServerParseCommonOptions().\n          compInfo->getPersistentInfo()->setSocketTimeout(DEFAULT_JITSERVER_TIMEOUT);\n \n-         const char *xxEnableHealthProbes  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusHealthProbes];\n-         const char *xxDisableHealthProbes = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusHealthProbes];\n-         int32_t xxEnableProbesArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxEnableHealthProbes, 0);\n-         int32_t xxDisableProbesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableHealthProbes, 0);\n+         int32_t xxEnableProbesArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusHealthProbes);\n+         int32_t xxDisableProbesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusHealthProbes);\n          if (xxEnableProbesArgIndex >= xxDisableProbesArgIndex) // probes are enabled by default\n             {\n             // Default port is already set at 38600; see if the user wants to change that\n-            const char *xxJITServerHealthPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerHealthProbePortOption];\n-            int32_t xxJITServerHealthPortArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerHealthPortOption, 0);\n+            int32_t xxJITServerHealthPortArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerHealthProbePortOption);\n             if (xxJITServerHealthPortArgIndex >= 0)\n                {\n                UDATA port = 0;\n+               const char *xxJITServerHealthPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerHealthProbePortOption);\n                IDATA ret = GET_INTEGER_VALUE(xxJITServerHealthPortArgIndex, xxJITServerHealthPortOption, port);\n                if (ret == OPTION_OK)\n                   compInfo->getPersistentInfo()->setJITServerHealthPort(port);\n@@ -2443,28 +2347,24 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if we should open the port for the MetricsServer\n-         const char *xxEnableMetricsServer  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMetricsServer];\n-         const char *xxDisableMetricsServer = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMetricsServer];\n-         int32_t xxEnableMetricsServerArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxEnableMetricsServer, 0);\n-         int32_t xxDisableMetricsServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableMetricsServer, 0);\n+         int32_t xxEnableMetricsServerArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusMetricsServer);\n+         int32_t xxDisableMetricsServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusMetricsServer);\n          if (xxEnableMetricsServerArgIndex > xxDisableMetricsServerArgIndex)\n             {\n             // Default port is already set at 38500; see if the user wants to change that\n-            const char *xxJITServerMetricsPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsPortOption];\n-            int32_t xxJITServerMetricsPortArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsPortOption, 0);\n+            int32_t xxJITServerMetricsPortArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsPortOption);\n             if (xxJITServerMetricsPortArgIndex >= 0)\n                {\n                UDATA port = 0;\n+               const char *xxJITServerMetricsPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerMetricsPortOption);\n                IDATA ret = GET_INTEGER_VALUE(xxJITServerMetricsPortArgIndex, xxJITServerMetricsPortOption, port);\n                if (ret == OPTION_OK)\n                   compInfo->getPersistentInfo()->setJITServerMetricsPort(port);\n                }\n \n             // For optional metrics server encryption. Key and cert have to be set as a pair.\n-            const char *xxJITServerMetricsSSLKeyOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsSSLKeyOption];\n-            const char *xxJITServerMetricsSSLCertOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsSSLCertOption];\n-            int32_t xxJITServerMetricsSSLKeyArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsSSLKeyOption, 0);\n-            int32_t xxJITServerMetricsSSLCertArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsSSLCertOption, 0);\n+            int32_t xxJITServerMetricsSSLKeyArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsSSLKeyOption);\n+            int32_t xxJITServerMetricsSSLCertArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsSSLCertOption);\n \n             if ((xxJITServerMetricsSSLKeyArgIndex >= 0) && (xxJITServerMetricsSSLCertArgIndex >= 0))\n                {\n@@ -2493,11 +2393,8 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if cached ROM classes should be shared between clients\n-         const char *xxJITServerShareROMClassesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerShareROMClassesOption];\n-         const char *xxDisableJITServerShareROMClassesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerShareROMClassesOption];\n-\n-         int32_t xxJITServerShareROMClassesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerShareROMClassesOption, 0);\n-         int32_t xxDisableJITServerShareROMClassesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerShareROMClassesOption, 0);\n+         int32_t xxJITServerShareROMClassesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerShareROMClassesOption);\n+         int32_t xxDisableJITServerShareROMClassesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerShareROMClassesOption);\n          if (xxJITServerShareROMClassesArgIndex > xxDisableJITServerShareROMClassesArgIndex)\n             {\n             _shareROMClasses = true;\n@@ -2508,17 +2405,14 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if the JITServer AOT cache persistence feature is enabled\n-         const char *xxJITServerAOTCachePersistenceOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCachePersistenceOption];\n-         const char *xxDisableJITServerAOTCachePersistenceOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCachePersistenceOption];\n-         int32_t xxJITServerAOTCachePersistenceArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCachePersistenceOption, 0);\n-         int32_t xxDisableJITServerAOTCachePersistenceArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCachePersistenceOption, 0);\n+         int32_t xxJITServerAOTCachePersistenceArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCachePersistenceOption);\n+         int32_t xxDisableJITServerAOTCachePersistenceArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCachePersistenceOption);\n          if (xxJITServerAOTCachePersistenceArgIndex > xxDisableJITServerAOTCachePersistenceArgIndex)\n             {\n             compInfo->getPersistentInfo()->setJITServerUseAOTCachePersistence(true);\n \n             // If enabled, get the name of the directory where the AOT cache files will be stored\n-            const char *xxJITServerAOTCacheDirOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTCacheDirOption];\n-            int32_t xxJITServerAOTCacheDirArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAOTCacheDirOption, 0);\n+            int32_t xxJITServerAOTCacheDirArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAOTCacheDirOption);\n             if (xxJITServerAOTCacheDirArgIndex >= 0)\n                {\n                char *directory = NULL;\n@@ -2531,11 +2425,8 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n          {\n          // Check option -XX:+UseJITServer\n          // -XX:-UseJITServer disables JITServer at the client\n-         const char *xxUseJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusUseJITServerOption];\n-         const char *xxDisableUseJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusUseJITServerOption];\n-\n-         int32_t xxUseJITServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxUseJITServerOption, 0);\n-         int32_t xxDisableUseJITServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableUseJITServerOption, 0);\n+         int32_t xxUseJITServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusUseJITServerOption);\n+         int32_t xxDisableUseJITServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusUseJITServerOption);\n \n          bool useJitServerExplicitlySpecified = xxUseJITServerArgIndex > xxDisableUseJITServerArgIndex;\n \n@@ -2570,19 +2461,15 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             compInfo->getPersistentInfo()->setSocketTimeout(DEFAULT_JITCLIENT_TIMEOUT);\n \n             // Check if the technology preview message should be displayed.\n-            const char *xxJITServerTechPreviewMessageOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerTechPreviewMessageOption];\n-            const char *xxDisableJITServerTechPreviewMessageOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerTechPreviewMessageOption];\n-\n-            int32_t xxJITServerTechPreviewMessageArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerTechPreviewMessageOption, 0);\n-            int32_t xxDisableJITServerTechPreviewMessageArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerTechPreviewMessageOption, 0);\n+            int32_t xxJITServerTechPreviewMessageArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerTechPreviewMessageOption);\n+            int32_t xxDisableJITServerTechPreviewMessageArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerTechPreviewMessageOption);\n \n             if (xxJITServerTechPreviewMessageArgIndex > xxDisableJITServerTechPreviewMessageArgIndex)\n                {\n                j9tty_printf(PORTLIB, \"JITServer is currently a technology preview. Its use is not yet supported\\n\");\n                }\n \n-            const char *xxJITServerAddressOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAddressOption];\n-            int32_t xxJITServerAddressArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAddressOption, 0);\n+            int32_t xxJITServerAddressArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAddressOption);\n \n             if (xxJITServerAddressArgIndex >= 0)\n                {\n@@ -2591,8 +2478,7 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n                compInfo->getPersistentInfo()->setJITServerAddress(address);\n                }\n \n-            const char *xxJITServerAOTCacheNameOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTCacheNameOption];\n-            int32_t xxJITServerAOTCacheNameArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAOTCacheNameOption, 0);\n+            int32_t xxJITServerAOTCacheNameArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAOTCacheNameOption);\n \n             if (xxJITServerAOTCacheNameArgIndex >= 0)\n                {\n@@ -2601,28 +2487,20 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n                compInfo->getPersistentInfo()->setJITServerAOTCacheName(name);\n                }\n \n-            const char *xxJITServerAOTCacheDelayMethodRelocation =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCacheDelayMethodRelocation];\n-            const char *xxDisableJITServerAOTCacheDelayMethodRelocation =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCacheDelayMethodRelocation];\n             int32_t xxJITServerAOTCacheDelayMethodRelocationArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCacheDelayMethodRelocation, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCacheDelayMethodRelocation);\n             int32_t xxDisableJITServerAOTCacheDelayMethodRelocationArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCacheDelayMethodRelocation, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCacheDelayMethodRelocation);\n \n             if (xxJITServerAOTCacheDelayMethodRelocationArgIndex > xxDisableJITServerAOTCacheDelayMethodRelocationArgIndex)\n                {\n                compInfo->getPersistentInfo()->setJITServerAOTCacheDelayMethodRelocation(true);\n                }\n \n-            const char *xxJITServerAOTCacheIgnoreLocalSCC =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCacheIgnoreLocalSCC];\n-            const char *xxDisableJITServerAOTCacheIgnoreLocalSCC =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCacheIgnoreLocalSCC];\n             int32_t xxJITServerAOTCacheIgnoreLocalSCCArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCacheIgnoreLocalSCC, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCacheIgnoreLocalSCC);\n             int32_t xxDisableJITServerAOTCacheIgnoreLocalSCCArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCacheIgnoreLocalSCC, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCacheIgnoreLocalSCC);\n \n             if (xxDisableJITServerAOTCacheIgnoreLocalSCCArgIndex > xxJITServerAOTCacheIgnoreLocalSCCArgIndex)\n                {\n@@ -2711,11 +2589,11 @@ J9::Options::fePreProcess(void * base)\n       bool forceSuffixLogs = true;\n    #endif\n \n-   const char *xxLateSCCDisclaimTimeOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXLateSCCDisclaimTimeOption];\n-   int32_t xxLateSCCDisclaimTime = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxLateSCCDisclaimTimeOption, 0);\n+   int32_t xxLateSCCDisclaimTime = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXLateSCCDisclaimTimeOption);\n    if (xxLateSCCDisclaimTime >= 0)\n       {\n       UDATA disclaimMs = 0;\n+      const char *xxLateSCCDisclaimTimeOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXLateSCCDisclaimTimeOption);\n       IDATA ret = GET_INTEGER_VALUE(xxLateSCCDisclaimTime, xxLateSCCDisclaimTimeOption, disclaimMs);\n       if (ret == OPTION_OK)\n          {\n@@ -2728,8 +2606,8 @@ J9::Options::fePreProcess(void * base)\n       self()->setOption(TR_EnableSharedCacheDisclaiming);\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n \n-   int32_t xxEnableTrackAOTDependenciesArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusTrackAOTDependencies], 0);\n-   int32_t xxDisableTrackAOTDependenciesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusTrackAOTDependencies], 0);\n+   int32_t xxEnableTrackAOTDependenciesArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusTrackAOTDependencies);\n+   int32_t xxDisableTrackAOTDependenciesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusTrackAOTDependencies);\n    if (xxEnableTrackAOTDependenciesArgIndex > xxDisableTrackAOTDependenciesArgIndex)\n       {\n       compInfo->getPersistentInfo()->setTrackAOTDependencies(true);\n@@ -2776,7 +2654,7 @@ J9::Options::fePreProcess(void * base)\n \n    self()->preProcessMmf(vm, jitConfig);\n \n-   if (FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoclassgc], 0) >= 0)\n+   if (J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xnoclassgc) >= 0)\n       self()->setOption(TR_NoClassGC);\n \n    self()->preProcessMode(vm, jitConfig);\n@@ -3069,9 +2947,8 @@ J9::Options::fePostProcessJIT(void * base)\n       TR::Options::disableMemoryDisclaimIfNeeded(jitConfig);\n       }\n \n-   const char *ccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache];\n    J9JavaVM *vm = javaVM; // needed by FIND_ARG_IN_VMARGS macro\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, ccOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecache);\n \n    if (argIndex >= 0)\n       {\n@@ -3507,10 +3384,8 @@ bool J9::Options::feLatePostProcess(void * base, TR::OptionSet * optionSet)\n    // The FIND_ARG_IN_VMARGS macro expect the J9JavaVM to be in the `vm` variable, instead of `javaVM`\n    // The method uses the `vm` variable for the TR_J9VMBase\n    J9JavaVM * vm = javaVM;\n-   const char *xxIProfileDuringStartupPhase  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusIProfileDuringStartupPhase];\n-   const char *xxDisableIProfileDuringStartupPhase = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusIProfileDuringStartupPhase];\n-   int32_t xxIProfileDuringStartupPhaseArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxIProfileDuringStartupPhase, 0);\n-   int32_t xxDisableIProfileDuringStartupPhaseArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableIProfileDuringStartupPhase, 0);\n+   int32_t xxIProfileDuringStartupPhaseArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusIProfileDuringStartupPhase);\n+   int32_t xxDisableIProfileDuringStartupPhaseArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusIProfileDuringStartupPhase);\n    if (xxIProfileDuringStartupPhaseArgIndex > xxDisableIProfileDuringStartupPhaseArgIndex)\n       self()->setOption(TR_NoIProfilerDuringStartupPhase, false); // Override -Xjit:noIProfilerDuringStartupPhase\n    else if (xxDisableIProfileDuringStartupPhaseArgIndex >= 0)\ndiff --git a/runtime/compiler/control/J9Options.hpp b/runtime/compiler/control/J9Options.hpp\nindex ccbab97a952..3dd049ff71c 100644\n--- a/runtime/compiler/control/J9Options.hpp\n+++ b/runtime/compiler/control/J9Options.hpp\n@@ -47,7 +47,7 @@ struct J9VMInitArgs;\n namespace J9\n {\n /**\n- * This enum and the associated string array _externalOptionStrings\n+ * This enum and the associated string array _externalOptionsMetadata\n  * in J9Options.cpp should be kept in sync.\n  */\n enum ExternalOptions\n@@ -492,8 +492,6 @@ class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n \n    static bool _xrsSync;\n \n-   static const char * _externalOptionStrings[ExternalOptions::TR_NumExternalOptions];\n-\n    static ExternalOptionsMetadata _externalOptionsMetadata[ExternalOptions::TR_NumExternalOptions];\n \n    /**\n@@ -553,8 +551,8 @@ class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n    static const char *JITServerAOTCacheStoreLimitOption(const char *option, void *, TR::OptionTable *entry);\n    static const char *JITServerAOTCacheLoadLimitOption(const char *option, void *, TR::OptionTable *entry);\n    static const char *JITServerRemoteExclude(const char *option, void *base, TR::OptionTable *entry);\n-   static bool JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo);\n-   static void JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled);\n+   static bool JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool postRestore = false);\n+   static void JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled, bool postRestore = false);\n #endif /* defined(J9VM_OPT_JITSERVER) */\n \n    static const char *vmStateOption(const char *option, void *, TR::OptionTable *entry);\ndiff --git a/runtime/compiler/control/OptionsPostRestore.cpp b/runtime/compiler/control/OptionsPostRestore.cpp\nindex 0bb9e51760f..a85d7051f52 100644\n--- a/runtime/compiler/control/OptionsPostRestore.cpp\n+++ b/runtime/compiler/control/OptionsPostRestore.cpp\n@@ -104,7 +104,7 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n    int32_t end = static_cast<int32_t>(J9::ExternalOptions::TR_NumExternalOptions);\n    for (int32_t option = start; option < end; option++)\n       {\n-      const char *optString = J9::Options::_externalOptionStrings[option];\n+      const char *optString = J9::Options::getExternalOptionString(static_cast<J9::ExternalOptions>(option));\n       switch (option)\n          {\n          case J9::ExternalOptions::Xjit:\n@@ -135,7 +135,9 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n          case J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption:\n          case J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption:\n             {\n-            // These will be processed in processJitServerOptions\n+            // These will be processed in processJitServerOptions; however,\n+            // consume them here\n+            FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, optString, 0);\n             }\n             break;\n \n@@ -297,7 +299,7 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n             break;\n \n          default:\n-            TR_ASSERT_FATAL(false, \"Option %s not addressed post restore\\n\", TR::Options::_externalOptionStrings[option]);\n+            TR_ASSERT_FATAL(false, \"Option %s not addressed post restore\\n\", optString);\n          }\n       }\n    }\n@@ -318,7 +320,7 @@ J9::OptionsPostRestore::processJitServerOptions()\n       J9JavaVM *vm = _jitConfig->javaVM;\n \n       // Parse common options\n-      if (!TR::Options::JITServerParseCommonOptions(vm->checkpointState.restoreArgsList, vm, _compInfo))\n+      if (!TR::Options::JITServerParseCommonOptions(vm->checkpointState.restoreArgsList, vm, _compInfo, true))\n          {\n          // TODO: Error condition\n          }\n@@ -327,7 +329,8 @@ J9::OptionsPostRestore::processJitServerOptions()\n       TR::Options::JITServerParseLocalSyncCompiles(vm->checkpointState.restoreArgsList,\n                                                    vm,\n                                                    _compInfo,\n-                                                   TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug));\n+                                                   TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug),\n+                                                   true);\n \n       if (_argIndexJITServerAddress >= 0)\n          {\n@@ -397,9 +400,9 @@ J9::OptionsPostRestore::processInternalCompilerOptions(bool isAOT)\n \n    int32_t argIndex;\n    if (isAOT)\n-      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon], 0);\n+      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xaotcolon), 0);\n    else\n-      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon], 0);\n+      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xjitcolon), 0);\n \n    if (argIndex >= 0)\n       {\n@@ -679,8 +682,8 @@ J9::OptionsPostRestore::preProcessInternalCompilerOptions()\n    TR::Compiler->relocatableTarget.setNumberOfProcessors(numProc);\n \n    // Find and consume -XX:[+|-]MergeCompilerOptions\n-   _argIndexMergeOptionsEnabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMergeCompilerOptions], 0);\n-   _argIndexMergeOptionsDisabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMergeCompilerOptions], 0);\n+   _argIndexMergeOptionsEnabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::XXplusMergeCompilerOptions), 0);\n+   _argIndexMergeOptionsDisabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::XXminusMergeCompilerOptions), 0);\n    }\n \n void\n@@ -850,10 +853,10 @@ J9::OptionsPostRestore::processCompilerOptions()\n    bool jitEnabled = TR::Options::canJITCompile();\n    bool aotEnabled = aotEnabledPreCheckpoint;\n \n-   _argIndexXjit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjit], 0);\n-   _argIndexXnojit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnojit], 0);\n-   _argIndexXaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaot], 0);\n-   _argIndexXnoaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoaot], 0);\n+   _argIndexXjit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xjit), 0);\n+   _argIndexXnojit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xnojit), 0);\n+   _argIndexXaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xaot), 0);\n+   _argIndexXnoaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xnoaot), 0);\n \n    if (_argIndexXjit != _argIndexXnojit)\n       jitEnabled = (_argIndexXjit > _argIndexXnojit);\ndiff --git a/runtime/compiler/runtime/RelocationRuntime.cpp b/runtime/compiler/runtime/RelocationRuntime.cpp\nindex 6cb81fb088e..7c9a59f9f33 100644\n--- a/runtime/compiler/runtime/RelocationRuntime.cpp\n+++ b/runtime/compiler/runtime/RelocationRuntime.cpp\n@@ -911,7 +911,7 @@ TR_RelocationRuntime::fillAOTHeader(J9JavaVM *vm, TR_FrontEnd *fe, TR_AOTHeader\n uint32_t\n TR_RelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    {\n-   IDATA currentLockwordArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlockword], NULL);\n+   IDATA currentLockwordArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlockword);\n    uint32_t currentLockwordOptionHashValue = 0;\n    if (currentLockwordArgIndex >= 0)\n       {\n",
    "84dc083b2ace028c8bd21b6926bdf27e2019a5b7": "diff --git a/runtime/gc_base/RootScanner.hpp b/runtime/gc_base/RootScanner.hpp\nindex 13b2d42f065..6a97be571eb 100644\n--- a/runtime/gc_base/RootScanner.hpp\n+++ b/runtime/gc_base/RootScanner.hpp\n@@ -570,29 +570,6 @@ class MM_RootScanner : public MM_BaseVirtual\n \tvirtual void doObjectInVirtualLargeObjectHeap(J9Object *objectPtr, bool *sparseHeapAllocation);\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n \t\n-#if defined(J9VM_ENV_DATA64)\n-\t/**\n-\t * Check if data is adjacent to array header, based on dataAddr value.\n-\t * This is used during stack slots scanning, when object can move.\n-\t * It is called after the object movement (stack slot has been fixed,\n-\t * although copying operation may not be necessarily completed yet).\n-\t * Specific RootScanner that can move objects will use either src or dst to perform adjacency check,\n-\t * whichever is safe. Scanners that not move objects should not be calling it, otherwise will assert.\n-\t * Should really be called only for Offheap and only for contiguous arrays (non-zero sized objects),\n-\t * although that is not asserted.\n-\t *\n-\t * @param src array address before movement\n-\t * @param dst array address after movement\n-\t *\n-\t * @return true if data is next to the header, and false if its in Offheap\n-\t */\n-\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\tAssert_MM_unreachable();\n-\t\treturn true;\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/**\n \t * Frees double mapped region associated to objectPtr (arraylet spine) if objectPtr\ndiff --git a/runtime/gc_base/accessBarrier.cpp b/runtime/gc_base/accessBarrier.cpp\nindex 11e6791e0d3..cc92d6181fe 100644\n--- a/runtime/gc_base/accessBarrier.cpp\n+++ b/runtime/gc_base/accessBarrier.cpp\n@@ -355,8 +355,14 @@ j9gc_objaccess_staticStoreU64Split(J9VMThread *vmThread, J9Class *clazz, U_64 *d\n IDATA\n j9gc_objaccess_indexableDataDisplacement(J9StackWalkState *walkState, J9IndexableObject *src, J9IndexableObject *dst)\n {\n-\tMM_ObjectAccessBarrier *barrier = MM_GCExtensions::getExtensions(walkState->walkThread)->accessBarrier;\n-\treturn barrier->indexableDataDisplacement(walkState, src, dst);\n+\tIDATA displacement = 0;\n+\n+\tif (src != dst) {\n+\t\tMM_ObjectAccessBarrier *barrier = MM_GCExtensions::getExtensions(walkState->walkThread)->accessBarrier;\n+\t\tdisplacement = barrier->indexableDataDisplacement(walkState, src, dst);\n+\t}\n+\n+\treturn displacement;\n }\n \n /* TODO: After all array accesses in the VM have been made arraylet safe, \ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.cpp b/runtime/gc_vlhgc/CopyForwardScheme.cpp\nindex 493771becca..8e2afee8344 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.cpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.cpp\n@@ -3875,13 +3875,6 @@ class MM_CopyForwardSchemeRootScanner : public MM_RootScanner\n \t}\n #endif /* J9VM_GC_FINALIZATION */\n \n-#if defined(J9VM_ENV_DATA64)\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\t/* Checking against src object since dst is not guarantied to be completely copied (by a racing thread that won f/w operaton). */\n-\t\treturn _extensions->indexableObjectModel.isDataAdjacentToHeader(src);\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n public:\n \tMM_CopyForwardSchemeRootScanner(MM_EnvironmentVLHGC *env, MM_CopyForwardScheme *copyForwardScheme) :\n \t\tMM_RootScanner(env),\ndiff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex fa203d7e7fa..ff1014a8e53 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -258,16 +258,32 @@ MM_VLHGCAccessBarrier::indexableDataDisplacement(J9StackWalkState *walkState, J9\n \tIDATA displacement = 0;\n \n #if defined(J9VM_ENV_DATA64)\n+\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->walkThread->omrVMThread);\n \tAssert_MM_true(_extensions->isVirtualLargeObjectHeapEnabled);\n-\t/* Potential danger in future of this not being called by a GC RootScanner - hence this assert */\n+\t/* Potential danger in future of this not being called by a GC Stack Walker - hence this assert */\n \tAssert_MM_true(walkState->objectSlotWalkFunction == gc_vmThreadStackDoOSlotIterator);\n \n-\t/* When checking adjacency, we pass both src and dst address, since depending on RootScanner only one is safe to use.\n+\t/* When checking adjacency, we pass both src and dst address, since depending on movement type (evacuate vs sliding) only one is safe to use.\n \t * If we implement concurrent copy-forward, which will require copying of dataAddr before forwarding,\n \t * consider this simplifying to always do adjacency against dst.\n \t */\n-\tMM_RootScanner *rootScanner = ((StackIteratorData *)walkState->userData3)->rootScanner;\n-\tif (rootScanner->isDataAdjacentToHeader(src, dst))\n+\tMM_HeapRegionManager *regionManager = _extensions->getHeap()->getHeapRegionManager();\n+\tMM_HeapRegionDescriptorVLHGC *srcRegion = (MM_HeapRegionDescriptorVLHGC *)regionManager->regionDescriptorForAddress(src);\n+\n+\tJ9IndexableObject *objectToCheckAdjacency = NULL;\n+\n+\tif (srcRegion->_compactData._shouldCompact) {\n+\t\tAssert_GC_true_with_message3(env, !srcRegion->_copyForwardData._evacuateSet, \"Evac set for compact src region %p src obj %p dst obj%p\\n\", srcRegion, src, dst);\n+\t\t/* Moved by sliding compact - source may be overwritten. */\n+\t\tobjectToCheckAdjacency = dst;\n+\t} else if (srcRegion->_copyForwardData._evacuateSet) {\n+\t\t/* Moved (or still being moved) by copy-forward - destination may not be fully copied yet. */\n+\t\tobjectToCheckAdjacency = src;\n+\t} else {\n+\t\tAssert_GC_true_with_message3(env, false, \"Neither evac nor compact set src region %p src obj %p dst obj%p\\n\", srcRegion, src, dst);\n+\t}\n+\n+\tif (_extensions->indexableObjectModel.isDataAdjacentToHeader(objectToCheckAdjacency))\n #endif /* defined(J9VM_ENV_DATA64) */\n \t{\n \t\tdisplacement = MM_ObjectAccessBarrier::indexableDataDisplacement(walkState, src, dst);\ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.cpp b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\nindex fd4beaea34d..f9dd418d449 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n@@ -1715,13 +1715,6 @@ class MM_WriteOnceCompactFixupRoots : public MM_RootScanner {\n \t}\n #endif /* J9VM_GC_FINALIZATION */\n \n-#if defined(J9VM_ENV_DATA64)\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\t/* Checking against dst object since src object may be overwritten. */\n-\t\treturn _extensions->indexableObjectModel.isDataAdjacentToHeader(dst);\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n };\n \n void\n",
    "42a921c1e2d946a8794c6981a09f9d1e8a73f60b": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex a854447199e..07d4cea3fdb 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,17 +116,6 @@\n #include <strings.h>\n #endif\n \n-#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n-#include <intrin.h>\n-#elif defined(TR_TARGET_X86)\n-inline unsigned long long _xgetbv(unsigned int ecx)\n-   {\n-   unsigned int eax, edx;\n-   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n-   return ((unsigned long long)edx << 32) | eax;\n-   }\n-#endif\n-\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -345,43 +334,6 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n-      bool disableAVX = true;\n-      bool disableAVX512 = true;\n-\n-#if defined(TR_TARGET_X86)\n-      // Check XCRO register for OS support of xmm/ymm/zmm\n-      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n-         {\n-         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n-         disableAVX = ((6 & _xgetbv(0)) != 6);\n-         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n-         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n-         }\n-#endif\n-\n-      if (disableAVX)\n-         {\n-         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n-         }\n-\n-      if (disableAVX512)\n-         {\n-         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n-         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n-         }\n-\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex 4cf1782cda1..ddde9002cc0 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,6 +67,16 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n+TR::CPU\n+J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n+   {\n+   if (omrPortLib == NULL)\n+      return TR::CPU();\n+\n+   TR::CPU::enableFeatureMasks();\n+   return OMR::X86::CPU::detect(omrPortLib);\n+   }\n+\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex ce53cdde422..9baba2d4a47 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,6 +59,13 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n+   /**\n+    * @brief A factory method used to construct a CPU object based on the underlying hardware\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "e2aa6ec8bd6a1ec499519bc03bc959c93203cd29": "diff --git a/runtime/compiler/env/ProcessorDetection.cpp b/runtime/compiler/env/ProcessorDetection.cpp\nindex a854447199e..07d4cea3fdb 100644\n--- a/runtime/compiler/env/ProcessorDetection.cpp\n+++ b/runtime/compiler/env/ProcessorDetection.cpp\n@@ -116,17 +116,6 @@\n #include <strings.h>\n #endif\n \n-#if defined(OMR_OS_WINDOWS) && defined(TR_TARGET_X86)\n-#include <intrin.h>\n-#elif defined(TR_TARGET_X86)\n-inline unsigned long long _xgetbv(unsigned int ecx)\n-   {\n-   unsigned int eax, edx;\n-   __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(ecx));\n-   return ((unsigned long long)edx << 32) | eax;\n-   }\n-#endif\n-\n #if defined(J9ZOS390)\n extern \"C\" bool _isPSWInProblemState();  /* 390 asm stub */\n #endif\n@@ -345,43 +334,6 @@ TR_J9VM::initializeProcessorType()\n       OMRProcessorDesc processorDescription = TR::Compiler->target.cpu.getProcessorDescription();\n       OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n \n-      bool disableAVX = true;\n-      bool disableAVX512 = true;\n-\n-#if defined(TR_TARGET_X86)\n-      // Check XCRO register for OS support of xmm/ymm/zmm\n-      if (TRUE == omrsysinfo_processor_has_feature(&processorDescription, OMR_FEATURE_X86_OSXSAVE))\n-         {\n-         // '6' = mask for XCR0[2:1]='11b' (XMM state and YMM state are enabled)\n-         disableAVX = ((6 & _xgetbv(0)) != 6);\n-         // 'e6' = (mask for XCR0[7:5]='111b' (Opmask, ZMM_Hi256, Hi16_ZMM) + XCR0[2:1]='11b' (XMM/YMM))\n-         disableAVX512 = ((0xe6 & _xgetbv(0)) != 0xe6);\n-         }\n-#endif\n-\n-      if (disableAVX)\n-         {\n-         // Unset AVX/AVX2 if not enabled via CR0 or otherwise disabled\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX2, FALSE);\n-         }\n-\n-      if (disableAVX512)\n-         {\n-         // Unset AVX-512 if not enabled via CR0 or otherwise disabled\n-         // If other AVX-512 extensions are supported in the port library, they need to be disabled here\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512F, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512VL, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512BW, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512CD, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512DQ, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_BITALG, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VBMI2, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VNNI, FALSE);\n-         omrsysinfo_processor_set_feature(&processorDescription, OMR_FEATURE_X86_AVX512_VPOPCNTDQ, FALSE);\n-         }\n-\n       TR::Compiler->target.cpu = TR::CPU::customize(processorDescription);\n \n       const char *vendor = TR::Compiler->target.cpu.getProcessorVendorId();\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex 4cf1782cda1..ddde9002cc0 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -67,6 +67,16 @@ J9::X86::CPU::detectRelocatable(OMRPortLibrary * const omrPortLib)\n    return TR::CPU::customize(portableProcessorDescription);\n    }\n \n+TR::CPU\n+J9::X86::CPU::detect(OMRPortLibrary * const omrPortLib)\n+   {\n+   if (omrPortLib == NULL)\n+      return TR::CPU();\n+\n+   TR::CPU::enableFeatureMasks();\n+   return OMR::X86::CPU::detect(omrPortLib);\n+   }\n+\n void\n J9::X86::CPU::enableFeatureMasks()\n    {\ndiff --git a/runtime/compiler/x/env/J9CPU.hpp b/runtime/compiler/x/env/J9CPU.hpp\nindex ce53cdde422..9baba2d4a47 100644\n--- a/runtime/compiler/x/env/J9CPU.hpp\n+++ b/runtime/compiler/x/env/J9CPU.hpp\n@@ -59,6 +59,13 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n     */\n    static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);\n \n+   /**\n+    * @brief A factory method used to construct a CPU object based on the underlying hardware\n+    * @param[in] omrPortLib : the port library\n+    * @return TR::CPU\n+    */\n+   static TR::CPU detect(OMRPortLibrary * const omrPortLib);\n+\n    /**\n     * @brief Intialize _supportedFeatureMasks to the list of processor features that will be exploited by the compiler and set _isSupportedFeatureMasksEnabled to true\n     * @return void\n",
    "4dac1a85bd9d3e9ad5296447e92eaffcbe859bdb": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 1cb1b12d803..9f9a07dc825 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -404,6 +404,13 @@ MM_ConfigurationIncrementalGenerational::tearDown(MM_EnvironmentBase *env)\n \t}\n #endif /* defined(OMR_GC_VLHGC_CONCURRENT_COPY_FORWARD) */\n \n+#if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n+\tif (NULL != extensions->largeObjectVirtualMemory) {\n+\t\textensions->largeObjectVirtualMemory->kill(env);\n+\t\textensions->largeObjectVirtualMemory = NULL;\n+\t}\n+#endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n+\n \tMM_Configuration::tearDown(env);\n \n \t// cleanup after extensions->heapRegionManager\n",
    "a9855cf7bf04367fbccb5b11edd33de45e3c6c08": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 9dcc30e3fbe..6bbda520e67 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -1043,7 +1043,6 @@ public static String getProperty(String prop, String defaultValue) {\n \n \tif (!propertiesInitialized\n \t\t\t&& !prop.equals(\"com.ibm.IgnoreMalformedInput\") //$NON-NLS-1$\n-\t\t\t&& !prop.equals(\"file.encoding.pkg\") //$NON-NLS-1$\n \t\t\t&& !prop.equals(\"sun.nio.cs.map\") //$NON-NLS-1$\n \t) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n",
    "df48dd95a74fab209acf07afb60e7d50d82f4953": "diff --git a/runtime/compiler/control/JITServerCompilationThread.cpp b/runtime/compiler/control/JITServerCompilationThread.cpp\nindex 982e68712cf..b498301c9d1 100644\n--- a/runtime/compiler/control/JITServerCompilationThread.cpp\n+++ b/runtime/compiler/control/JITServerCompilationThread.cpp\n@@ -804,34 +804,14 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n \n       // At this point I know that all preceeding requests have been processed\n       // and only one thread with critical information can ever be present in this section\n-      if (!clientSession->cachesAreCleared())\n-         {\n-         // Free data for all classes that were unloaded for this sequence number\n-         // Redefined classes are marked as unloaded, since they need to be cleared\n-         // from the ROM class cache.\n-         if (!unloadedClasses.empty())\n-            {\n-            clientSession->processUnloadedClasses(unloadedClasses, true); // this locks getROMMapMonitor()\n-            }\n-\n-         if (!illegalModificationList.empty())\n-            {\n-            clientSession->processIllegalFinalFieldModificationList(illegalModificationList); // this locks getROMMapMonitor()\n-            }\n+      bool initializedCHTable = false;\n \n-         // Process the CHTable updates in order\n-         // Note that applying the updates will acquire the CHTable monitor and VMAccess\n-         if ((!chtableUnloads.empty() || !chtableMods.empty())\n-             && !serverDetails->isJitDumpMethod())\n-            {\n-            auto chTable = (JITServerPersistentCHTable*)clientSession->getCHTable(); // Will create CHTable if it doesn't exist\n-            TR_ASSERT_FATAL(chTable->isInitialized(), \"CHTable must have been initialized for clientUID=%llu\", (unsigned long long)clientId);\n-            chTable->doUpdate(_vm, chtableUnloads, chtableMods);\n-            }\n-         }\n-      else // Internal caches are empty\n+      // Check first without acquring the monitor\n+      if (clientSession->cachesAreCleared())\n          {\n          OMR::CriticalSection cs(clientSession->getCacheInitMonitor());\n+\n+         // Internal caches are empty\n          if (clientSession->cachesAreCleared())\n             {\n             if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n@@ -861,6 +841,34 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n                   getCompThreadId(), (unsigned long long)clientId, serializedCHTable.size());\n             chTable->initializeCHTable(_vm, serializedCHTable);\n             clientSession->setCachesAreCleared(false);\n+            initializedCHTable = true;\n+            }\n+         }\n+\n+      TR_ASSERT_FATAL(!clientSession->cachesAreCleared(), \"Client Session caches should not be cleared at this point for clientUID=%llu\", (unsigned long long)clientId);\n+      if (!initializedCHTable)\n+         {\n+         // Free data for all classes that were unloaded for this sequence number\n+         // Redefined classes are marked as unloaded, since they need to be cleared\n+         // from the ROM class cache.\n+         if (!unloadedClasses.empty())\n+            {\n+            clientSession->processUnloadedClasses(unloadedClasses, true); // this locks getROMMapMonitor()\n+            }\n+\n+         if (!illegalModificationList.empty())\n+            {\n+            clientSession->processIllegalFinalFieldModificationList(illegalModificationList); // this locks getROMMapMonitor()\n+            }\n+\n+         // Process the CHTable updates in order\n+         // Note that applying the updates will acquire the CHTable monitor and VMAccess\n+         if ((!chtableUnloads.empty() || !chtableMods.empty())\n+             && !serverDetails->isJitDumpMethod())\n+            {\n+            auto chTable = (JITServerPersistentCHTable*)clientSession->getCHTable(); // Will create CHTable if it doesn't exist\n+            TR_ASSERT_FATAL(chTable->isInitialized(), \"CHTable must have been initialized for clientUID=%llu\", (unsigned long long)clientId);\n+            chTable->doUpdate(_vm, chtableUnloads, chtableMods);\n             }\n          }\n \n",
    "095c7e6ef471a509a3e45d3f8a100aab304ef1ba": "diff --git a/runtime/vm/BufferWriter.hpp b/runtime/vm/BufferWriter.hpp\nindex 4cfdcf4467d..7bd18bb50cc 100644\n--- a/runtime/vm/BufferWriter.hpp\n+++ b/runtime/vm/BufferWriter.hpp\n@@ -31,6 +31,7 @@ class VM_BufferWriter {\n \t * Data members\n \t */\n \tprivate:\n+\tJ9PortLibrary *_portLibrary;\n \tU_8 *_buffer;\n \tU_8 *_cursor;\n \tU_8 *_bufferEnd;\n@@ -90,8 +91,9 @@ class VM_BufferWriter {\n \n \tpublic:\n \n-\tVM_BufferWriter(U_8 *buffer, UDATA size)\n-\t\t: _buffer(buffer)\n+\tVM_BufferWriter(J9PortLibrary *portLibrary, U_8 *buffer, UDATA size)\n+\t\t: _portLibrary(portLibrary)\n+\t\t, _buffer(buffer)\n \t\t, _cursor(buffer)\n \t\t, _bufferEnd(buffer + size)\n \t\t, _maxCursor(NULL)\n@@ -342,6 +344,20 @@ class VM_BufferWriter {\n \t\twriteU8(val ? 1 : 0);\n \t}\n \n+\tvoid\n+\twriteFormattedString(const char *format, ...)\n+\t{\n+\t\tOMRPORT_ACCESS_FROM_J9PORT(_portLibrary);\n+\t\tva_list args;\n+\t\tva_start(args, format);\n+\t\tuintptr_t totalLength = omrstr_vprintf(NULL, 0, format, args);\n+\t\tif (checkBounds(totalLength)) {\n+\t\t\tomrstr_vprintf((char *)_cursor, _bufferEnd - _cursor, format, args);\n+\t\t\t_cursor += totalLength;\n+\t\t}\n+\t\tva_end(args);\n+\t}\n+\n \tstatic U_32\n \tconvertFromLEB128ToU32(U_8 *start)\n \t{\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex 3c77832f388..c11d962f4c6 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -965,4 +965,247 @@ VM_JFRChunkWriter::writeThreadStatisticsEvent(void *anElement, void *userData)\n \twriteEventSize(_bufferWriter, dataStart);\n }\n \n+static void\n+writeObject(J9JavaVM *vm, j9object_t obj, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9ROMClass *romClass = NULL;\n+\tif (J9VM_IS_INITIALIZED_HEAPCLASS_VM(vm, obj)) {\n+\t\tromClass = J9VM_J9CLASS_FROM_HEAPCLASS_VM(vm, obj)->romClass;\n+\t} else {\n+\t\tromClass = J9OBJECT_CLAZZ_VM(vm, obj)->romClass;\n+\t}\n+\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(romClass);\n+\tbufferWriter->writeFormattedString(\"%.*s@%p\", J9UTF8_LENGTH(className), J9UTF8_DATA(className), obj);\n+}\n+\n+static UDATA\n+stackWalkCallback(J9VMThread *vmThread, J9StackWalkState *state)\n+{\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tJ9ObjectMonitorInfo *monitorInfo = (J9ObjectMonitorInfo *)state->userData2;\n+\tIDATA *monitorCount = (IDATA *)(&state->userData3);\n+\tJ9Method *method = state->method;\n+\tJ9Class *methodClass = J9_CLASS_FROM_METHOD(method);\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(methodClass->romClass);\n+\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(method);\n+\tJ9UTF8 *methodName = J9ROMMETHOD_NAME(romMethod);\n+\n+\tVM_BufferWriter *bufferWriter = (VM_BufferWriter *)state->userData1;\n+\n+\tbufferWriter->writeFormattedString(\n+\t\t\t\"at %.*s.%.*s\",\n+\t\t\tJ9UTF8_LENGTH(className), J9UTF8_DATA(className),\n+\t\t\tJ9UTF8_LENGTH(methodName), J9UTF8_DATA(methodName));\n+\n+\tif (J9_ARE_ANY_BITS_SET(romMethod->modifiers, J9AccNative)) {\n+\t\tbufferWriter->writeFormattedString(\"(Native Method)\\n\");\n+\t} else {\n+\t\tUDATA offsetPC = state->bytecodePCOffset;\n+\t\tbool compiledMethod = (NULL != state->jitInfo);\n+\t\tJ9UTF8 *sourceFile = getSourceFileNameForROMClass(vm, methodClass->classLoader, methodClass->romClass);\n+\t\tif (NULL != sourceFile) {\n+\t\t\tbufferWriter->writeFormattedString(\n+\t\t\t\t\t\"(%.*s\", J9UTF8_LENGTH(sourceFile), J9UTF8_DATA(sourceFile));\n+\n+\t\t\tUDATA lineNumber = getLineNumberForROMClass(vm, method, offsetPC);\n+\n+\t\t\tif ((UDATA)-1 != lineNumber) {\n+\t\t\t\tbufferWriter->writeFormattedString(\":%zu\", lineNumber);\n+\t\t\t}\n+\n+\t\t\tif (compiledMethod) {\n+\t\t\t\tbufferWriter->writeFormattedString(\"(Compiled Code)\");\n+\t\t\t}\n+\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\t\t} else {\n+\t\t\tbufferWriter->writeFormattedString(\"(Bytecode PC: %zu\", offsetPC);\n+\t\t\tif (compiledMethod) {\n+\t\t\t\tbufferWriter->writeFormattedString(\"(Compiled Code)\");\n+\t\t\t}\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\t\t}\n+\n+\t\t/* Use a while loop as there may be more than one lock taken in a stack frame. */\n+\t\twhile ((0 != *monitorCount) && ((UDATA)monitorInfo->depth == state->framesWalked)) {\n+\t\t\tbufferWriter->writeFormattedString(\"\\t(entered lock: \");\n+\t\t\twriteObject(vm, monitorInfo->object, bufferWriter);\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\n+\t\t\tmonitorInfo += 1;\n+\t\t\tstate->userData2 = monitorInfo;\n+\n+\t\t\t(*monitorCount) -= 1;\n+\t\t}\n+\t}\n+\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+\n+static void\n+writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tUDATA javaTID = J9VMJAVALANGTHREAD_TID(currentThread, walkThread->threadObject);\n+\tUDATA osTID = ((J9AbstractThread *)walkThread->osThread)->tid;\n+\tUDATA javaPriority = vmFuncs->getJavaThreadPriority(vm, walkThread);\n+\tUDATA state = J9VMTHREAD_STATE_UNKNOWN;\n+\tconst char *stateStr = \"?\";\n+\tj9object_t monitorObject = NULL;\n+\tchar *threadName = NULL;\n+\n+\t/* Get thread state and monitor */\n+\tstate = getVMThreadObjectState(walkThread, &monitorObject, NULL, NULL);\n+\tswitch (state) {\n+\tcase J9VMTHREAD_STATE_RUNNING:\n+\t\tstateStr = \"R\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_BLOCKED:\n+\t\tstateStr = \"B\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_WAITING:\n+\tcase J9VMTHREAD_STATE_WAITING_TIMED:\n+\tcase J9VMTHREAD_STATE_SLEEPING:\n+\t\tstateStr = \"CW\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_PARKED:\n+\tcase J9VMTHREAD_STATE_PARKED_TIMED:\n+\t\tstateStr = \"P\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_SUSPENDED:\n+\t\tstateStr = \"S\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_DEAD:\n+\t\tstateStr = \"Z\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_INTERRUPTED:\n+\t\tstateStr = \"I\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_UNKNOWN:\n+\t\tstateStr = \"?\";\n+\t\tbreak;\n+\tdefault:\n+\t\tstateStr = \"??\";\n+\t\tbreak;\n+\t}\n+\n+/* Get thread name */\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (IS_JAVA_LANG_VIRTUALTHREAD(currentThread, walkThread->threadObject)) {\n+\t\t/* For VirtualThread, get name from threadObject directly. */\n+\t\tj9object_t nameObject = J9VMJAVALANGTHREAD_NAME(currentThread, walkThread->threadObject);\n+\t\tthreadName = getVMThreadNameFromString(currentThread, nameObject);\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\t{\n+\t\tthreadName = getOMRVMThreadName(walkThread->omrVMThread);\n+\t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n+\t}\n+\tbufferWriter->writeFormattedString(\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s\",\n+\t\t\tthreadName,\n+\t\t\twalkThread,\n+\t\t\tjavaTID,\n+\t\t\tosTID,\n+\t\t\tjavaPriority,\n+\t\t\tstateStr);\n+\n+\tif (J9VMTHREAD_STATE_BLOCKED == state) {\n+\t\tbufferWriter->writeFormattedString(\" blocked on: \");\n+\t} else if ((J9VMTHREAD_STATE_WAITING == state) || (J9VMTHREAD_STATE_WAITING_TIMED == state)) {\n+\t\tbufferWriter->writeFormattedString(\" waiting on: \");\n+\t} else if ((J9VMTHREAD_STATE_PARKED == state) || (J9VMTHREAD_STATE_PARKED_TIMED == state)) {\n+\t\tbufferWriter->writeFormattedString(\" parked on: \");\n+\t} else {\n+\t\tbufferWriter->writeFormattedString(\"\\n\");\n+\t\treturn;\n+\t}\n+\n+\tif (NULL != monitorObject) {\n+\t\twriteObject(vm, monitorObject, bufferWriter);\n+\t} else {\n+\t\tbufferWriter->writeFormattedString(\"<unknown>\");\n+\t}\n+\tbufferWriter->writeFormattedString(\"\\n\");\n+}\n+\n+static void\n+writeStacktrace(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9StackWalkState stackWalkState = {0};\n+\tconst size_t maxMonitorInfosPerThread = 32;\n+\tJ9ObjectMonitorInfo monitorInfos[maxMonitorInfosPerThread];\n+\tmemset(monitorInfos, 0, sizeof(monitorInfos));\n+\n+\tIDATA monitorCount = vmFuncs->getOwnedObjectMonitors(currentThread, walkThread, monitorInfos, maxMonitorInfosPerThread, FALSE);\n+\n+\tstackWalkState.walkThread = walkThread;\n+\tstackWalkState.flags =\n+\t\t\tJ9_STACKWALK_ITERATE_FRAMES\n+\t\t\t| J9_STACKWALK_INCLUDE_NATIVES\n+\t\t\t| J9_STACKWALK_VISIBLE_ONLY\n+\t\t\t| J9_STACKWALK_RECORD_BYTECODE_PC_OFFSET\n+\t\t\t| J9_STACKWALK_NO_ERROR_REPORT;\n+\tstackWalkState.skipCount = 0;\n+\tstackWalkState.frameWalkFunction = stackWalkCallback;\n+\tstackWalkState.userData1 = bufferWriter;\n+\tstackWalkState.userData2 = monitorInfos;\n+\tstackWalkState.userData3 = (void *)monitorCount;\n+\n+\tvmFuncs->haltThreadForInspection(currentThread, walkThread);\n+\tvm->walkStackFrames(currentThread, &stackWalkState);\n+\tvmFuncs->resumeThreadForInspection(currentThread, walkThread);\n+\n+\tbufferWriter->writeFormattedString(\"\\n\");\n+}\n+\n+U_8 *\n+VM_JFRChunkWriter::writeThreadDumpEvent()\n+{\n+\t/* reserve size field */\n+\tU_8 *dataStart = reserveEventSize();\n+\n+\t_bufferWriter->writeLEB128(ThreadDumpID);\n+\n+\t/* write start time */\n+\t_bufferWriter->writeLEB128(j9time_current_time_millis());\n+\n+\tconst U_64 bufferSize = THREAD_DUMP_EVENT_SIZE_PER_THREAD * _vm->peakThreadCount;\n+\tU_8 *resultBuffer = (U_8 *)j9mem_allocate_memory(sizeof(U_8) * bufferSize, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != resultBuffer) {\n+\t\tVM_BufferWriter resultWriter(privatePortLibrary, resultBuffer, bufferSize);\n+\t\tJ9VMThread *walkThread = J9_LINKED_LIST_START_DO(_vm->mainThread);\n+\t\tUDATA numThreads = 0;\n+\t\tJ9InternalVMFunctions *vmFuncs = _vm->internalVMFunctions;\n+\n+\t\tAssert_VM_mustHaveVMAccess(_currentThread);\n+\t\tvmFuncs->acquireExclusiveVMAccess(_currentThread);\n+\n+\t\twhile (NULL != walkThread) {\n+\t\t\twriteThreadInfo(_currentThread, walkThread, &resultWriter);\n+\t\t\twriteStacktrace(_currentThread, walkThread, &resultWriter);\n+\n+\t\t\twalkThread = J9_LINKED_LIST_NEXT_DO(_vm->mainThread, walkThread);\n+\t\t\tnumThreads += 1;\n+\t\t}\n+\t\tresultWriter.writeFormattedString(\"Number of threads: %zd\", numThreads);\n+\n+\t\tvmFuncs->releaseExclusiveVMAccess(_currentThread);\n+\n+\t\twriteUTF8String(resultWriter.getBufferStart(), resultWriter.getSize());\n+\t\tj9mem_free_memory(resultBuffer);\n+\t} else {\n+\t\t_buildResult = OutOfMemory;\n+\t}\n+\n+\t/* write size */\n+\twriteEventSize(dataStart);\n+\n+\treturn dataStart;\n+}\n #endif /* defined(J9VM_OPT_JFR) */\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 84a35eecb05..f5412f0931e 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -81,6 +81,7 @@ enum MetadataTypeID {\n \tClassLoadingStatisticsID = 100,\n \tPhysicalMemoryID = 108,\n \tExecutionSampleID = 109,\n+\tThreadDumpID = 111,\n \tThreadID = 164,\n \tThreadGroupID = 165,\n \tClassID = 166,\n@@ -176,6 +177,7 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int CLASS_LOADING_STATISTICS_EVENT_SIZE = 5 * sizeof(I_64);\n \tstatic constexpr int THREAD_CONTEXT_SWITCH_RATE_SIZE = sizeof(float) + (3 * sizeof(I_64));\n \tstatic constexpr int THREAD_STATISTICS_EVENT_SIZE = (6 * sizeof(U_64)) + sizeof(U_32);\n+\tstatic constexpr int THREAD_DUMP_EVENT_SIZE_PER_THREAD = 1000;\n \n \tstatic constexpr int METADATA_ID = 1;\n \n@@ -290,7 +292,7 @@ class VM_JFRChunkWriter {\n \n \t}\n \n-\tvoid writeJFRChunk()\n+\tvoid writeJFRChunk(bool dumpCalled)\n \t{\n \t\tU_8 *buffer = NULL;\n \t\tUDATA requiredBufferSize = 0;\n@@ -328,7 +330,7 @@ class VM_JFRChunkWriter {\n \t\tif (NULL == buffer) {\n \t\t\t_buildResult = OutOfMemory;\n \t\t} else {\n-\t\t\tVM_BufferWriter writer(buffer, requiredBufferSize);\n+\t\t\tVM_BufferWriter writer(privatePortLibrary, buffer, requiredBufferSize);\n \n \t\t\t_bufferWriter = &writer;\n \n@@ -401,6 +403,10 @@ class VM_JFRChunkWriter {\n \n \t\t\twritePhysicalMemoryEvent();\n \n+\t\t\tif (dumpCalled) {\n+\t\t\t\twriteThreadDumpEvent();\n+\t\t\t}\n+\n \t\t\twriteJFRHeader();\n \n \t\t\tif (_bufferWriter->overflowOccurred()) {\n@@ -758,6 +764,8 @@ class VM_JFRChunkWriter {\n \n \tvoid writeStringLiteral(const char *string, UDATA len);\n \n+\tvoid writeFormattedString(const char *format, ...);\n+\n \tU_8 *writeThreadStateCheckpointEvent();\n \n \tU_8 *writePackageCheckpointEvent();\n@@ -790,6 +798,8 @@ class VM_JFRChunkWriter {\n \n \tU_8 *writeOSInformationEvent();\n \n+\tU_8 *writeThreadDumpEvent();\n+\n \tvoid writeInitialSystemPropertyEvents(J9JavaVM *vm);\n \n \tvoid writeInitialEnvironmentVariableEvents();\n@@ -868,7 +878,9 @@ class VM_JFRChunkWriter {\n \n \t\trequiredBufferSize += _constantPoolTypes.getThreadContextSwitchRateCount() * THREAD_CONTEXT_SWITCH_RATE_SIZE;\n \n-\t\trequiredBufferSize += (_constantPoolTypes.getThreadStatisticsCount() * THREAD_STATISTICS_EVENT_SIZE);\n+\t\trequiredBufferSize += _constantPoolTypes.getThreadStatisticsCount() * THREAD_STATISTICS_EVENT_SIZE;\n+\n+\t\trequiredBufferSize += _vm->peakThreadCount * THREAD_DUMP_EVENT_SIZE_PER_THREAD;\n \n \t\treturn requiredBufferSize;\n \t}\ndiff --git a/runtime/vm/JFRWriter.hpp b/runtime/vm/JFRWriter.hpp\nindex 6e301665970..273d03dd257 100644\n--- a/runtime/vm/JFRWriter.hpp\n+++ b/runtime/vm/JFRWriter.hpp\n@@ -175,7 +175,7 @@ class VM_JFRWriter {\n \t}\n \n \tstatic bool\n-\tflushJFRDataToFile(J9VMThread *currentThread, bool finalWrite)\n+\tflushJFRDataToFile(J9VMThread *currentThread, bool finalWrite, bool dumpCalled)\n \t{\n \t\tbool result = true;\n \t\tVM_JFRChunkWriter chunkWriter(currentThread, finalWrite);\n@@ -191,7 +191,7 @@ class VM_JFRWriter {\n \t\t\tgoto fail;\n \t\t}\n \n-\t\tchunkWriter.writeJFRChunk();\n+\t\tchunkWriter.writeJFRChunk(dumpCalled);\n \t\tif (!chunkWriter.isOkay()) {\n \t\t\tresult = false;\n \t\t\tgoto fail;\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 6aff9c8e464..898dde79772 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -177,7 +177,7 @@ areJFRBuffersReadyForWrite(J9VMThread *currentThread)\n  * @returns true on success, false on failure\n  */\n static bool\n-writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite)\n+writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite, bool dumpCalled)\n {\n \tJ9JavaVM *vm = currentThread->javaVM;\n \n@@ -187,7 +187,7 @@ writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite)\n #endif /* defined(DEBUG) */\n \n \tif (areJFRBuffersReadyForWrite(currentThread)) {\n-\t\tVM_JFRWriter::flushJFRDataToFile(currentThread, finalWrite);\n+\t\tVM_JFRWriter::flushJFRDataToFile(currentThread, finalWrite, dumpCalled);\n \n \t\t/* Reset the buffer */\n \t\tvm->jfrBuffer.bufferRemaining = vm->jfrBuffer.bufferSize;\n@@ -231,7 +231,7 @@ flushBufferToGlobal(J9VMThread *currentThread, J9VMThread *flushThread)\n \n \tomrthread_monitor_enter(vm->jfrBufferMutex);\n \tif (vm->jfrBuffer.bufferRemaining < bufferSize) {\n-\t\tif (!writeOutGlobalBuffer(currentThread, false)) {\n+\t\tif (!writeOutGlobalBuffer(currentThread, false, false)) {\n \t\t\tomrthread_monitor_exit(vm->jfrBufferMutex);\n \t\t\tsuccess = false;\n \t\t\tgoto done;\n@@ -442,7 +442,7 @@ jfrClassesUnload(J9HookInterface **hook, UDATA eventNum, void *eventData, void *\n \t * invalid, so write out all of the available data now.\n \t */\n \tflushAllThreadBuffers(currentThread, false);\n-\twriteOutGlobalBuffer(currentThread, false);\n+\twriteOutGlobalBuffer(currentThread, false, false);\n }\n \n /**\n@@ -477,7 +477,7 @@ jfrVMShutdown(J9HookInterface **hook, UDATA eventNum, void *eventData, void *use\n \n \t/* Flush and free all the thread buffers and write out the global buffer */\n \tflushAllThreadBuffers(currentThread, true);\n-\twriteOutGlobalBuffer(currentThread, true);\n+\twriteOutGlobalBuffer(currentThread, true, false);\n \n \tif (acquiredExclusive) {\n \t\treleaseExclusiveVMAccess(currentThread);\n@@ -544,7 +544,7 @@ jfrThreadEnd(J9HookInterface **hook, UDATA eventNum, void *eventData, void *user\n \tPORT_ACCESS_FROM_VMC(currentThread);\n \tacquireExclusiveVMAccess(currentThread);\n \tflushAllThreadBuffers(currentThread, false);\n-\twriteOutGlobalBuffer(currentThread, false);\n+\twriteOutGlobalBuffer(currentThread, false, false);\n \n \t/* Free the thread local buffer */\n \tj9mem_free_memory((void*)currentThread->jfrBuffer.bufferStart);\n@@ -1194,7 +1194,7 @@ jfrDump(J9VMThread *currentThread, BOOLEAN finalWrite)\n {\n \t/* Flush all the thread buffers and write out the global buffer. */\n \tflushAllThreadBuffers(currentThread, finalWrite);\n-\twriteOutGlobalBuffer(currentThread, finalWrite);\n+\twriteOutGlobalBuffer(currentThread, finalWrite, true);\n }\n \n static UDATA\n",
    "3112a2cde5dbc9eb6b6fb8813fb98c40de3e2ffb": "diff --git a/doc/compiler/README.md b/doc/compiler/README.md\nindex c2fca38bbcb..a57b037ff91 100644\n--- a/doc/compiler/README.md\n+++ b/doc/compiler/README.md\n@@ -145,6 +145,7 @@ In the end code generators perform binary encoding to write the appropriate bits\n   * [Overview of Compilation Control](control/CompilationControl.md)\n   * [Options Processing](control/OptionsProcessing.md)\n   * [Options Processing Post Restore](control/OptionsPostRestore.md)\n+  * [External Options](control/ExternalOptions.md)\n   * [Checkpoint Restore Coordination](control/CheckpointRestoreCoordination.md)\n </details>\n \ndiff --git a/doc/compiler/control/ExternalOptions.md b/doc/compiler/control/ExternalOptions.md\nnew file mode 100644\nindex 00000000000..36a8589614e\n--- /dev/null\n+++ b/doc/compiler/control/ExternalOptions.md\n@@ -0,0 +1,46 @@\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+\n+# Overview\n+\n+In the context of the JIT, an \"External Option\" is an option that is not\n+specified as part of the `-Xjit` or `-Xaot` JVM argument. These options need to\n+be processed using either `FIND_AND_CONSUME_VMARG` or `FIND_ARG_IN_VMARGS`. The\n+main difference between the two is the former \"consumes\" the argument. For all\n+intents and purposes, this can be thought of as the JVM acknowledging the\n+argument as a valid argument. This is especially relevant when one specifies\n+`-XX:-IgnoreUnrecognizedXXColonOptions`, which will cause the JVM to terminate\n+with an error if there are any unconsumed arguments.\n+\n+# Adding an External Option\n+\n+There are two relevant structures: the `J9::ExternalOptions` enum and the\n+`J9::Options::_externalOptionsMetadata` table; these need to be in sync with\n+each other.\n+\n+To add a new External Option:\n+1. Add a new entry to the end of the `J9::ExternalOptions` enum\n+2. Add a new entry to the end of the `J9::Options::_externalOptionsMetadata`\n+   array; specify the option string, the way it should be matched, a `-1` for\n+   the `_argIndex` (this will be updated at runtime), and whether or not the\n+   option should be consumed by the JIT.\n+3. Add a case to the switch in `J9::OptionsPostRestore::iterateOverExternalOptions`\n\\ No newline at end of file\ndiff --git a/runtime/compiler/control/DLLMain.cpp b/runtime/compiler/control/DLLMain.cpp\nindex 25e1f5090bc..0981811aead 100644\n--- a/runtime/compiler/control/DLLMain.cpp\n+++ b/runtime/compiler/control/DLLMain.cpp\n@@ -72,12 +72,12 @@ static IDATA initializeCompilerArgs(J9JavaVM* vm,\n    const char *fatalErrorStr = NULL;\n    if (isXjit)\n       {\n-      VMOPT_WITH_COLON = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon];\n+      VMOPT_WITH_COLON = J9::Options::getExternalOptionString(J9::ExternalOptions::Xjitcolon);\n       fatalErrorStr = \"no arguments for -Xjit:\";\n       }\n    else\n       {\n-      VMOPT_WITH_COLON = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon];\n+      VMOPT_WITH_COLON = J9::Options::getExternalOptionString(J9::ExternalOptions::Xaotcolon);\n       fatalErrorStr = \"no arguments for -Xaot:\";\n       }\n \n@@ -270,47 +270,33 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n             return J9VMDLLMAIN_FAILED;\n             }\n \n-         /* Find and consume these before the library might be unloaded */\n-         FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnodfpbd], 0);\n-         if (FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xdfpbd], 0) >= 0)\n-            {\n-            FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xhysteresis], 0);\n-            }\n-         FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoquickstart], 0); // deprecated\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xtuneelastic], 0);\n-         argIndexQuickstart = FIND_AND_CONSUME_VMARG( EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xquickstart], 0);\n-         tlhPrefetch = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XtlhPrefetch], 0);\n-         notlhPrefetch = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XnotlhPrefetch], 0);\n-         lockReservation = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XlockReservation], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache], 0);\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XjniAcc], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecachetotal], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotal], 0);\n-\n-         FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlpcodecache], 0);\n-\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XsamplingExpirationTime], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XcompilationThreads], 0);\n-         FIND_AND_CONSUME_VMARG(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XaggressivenessLevel], 0);\n-         argIndexXjit = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjit], 0);\n-         argIndexXaot = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaot], 0);\n-         argIndexXnojit = FIND_AND_CONSUME_VMARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnojit], 0);\n-\n-         argIndexRIEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusRuntimeInstrumentation], 0);\n-         argIndexRIDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusRuntimeInstrumentation], 0);\n+         // Update arg index for args that are consumed by the JIT\n+         J9::Options::findExternalOptions(vm);\n+\n+         argIndexQuickstart = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xquickstart);\n+         tlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XtlhPrefetch);\n+         notlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XnotlhPrefetch);\n+         lockReservation = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XlockReservation);\n+\n+         argIndexXjit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xjit);\n+         argIndexXaot = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xaot);\n+         argIndexXnojit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xnojit);\n+\n+         argIndexRIEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusRuntimeInstrumentation);\n+         argIndexRIDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusRuntimeInstrumentation);\n \n          // Determine if user disabled Runtime Instrumentation\n          if (argIndexRIEnabled >= 0 || argIndexRIDisabled >= 0)\n             TR::Options::_hwProfilerEnabled = (argIndexRIDisabled > argIndexRIEnabled) ? TR_no : TR_yes;\n \n-         argIndexPerfEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusPerfTool], 0);\n-         argIndexPerfDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusPerfTool], 0);\n+         argIndexPerfEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusPerfTool);\n+         argIndexPerfDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusPerfTool);\n \n          // Determine if user disabled PerfTool\n          if (argIndexPerfEnabled >= 0 || argIndexPerfDisabled >= 0)\n             TR::Options::_perfToolEnabled = (argIndexPerfDisabled > argIndexPerfEnabled) ? TR_no : TR_yes;\n \n-         TR::Options::_doNotProcessEnvVars = (FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXdoNotProcessJitEnvVars], 0) >= 0);\n+         TR::Options::_doNotProcessEnvVars = (J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXdoNotProcessJitEnvVars) >= 0);\n \n          isQuickstart = J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags2, J9_EXTENDED_RUNTIME2_TUNE_QUICKSTART);\n \n@@ -416,11 +402,14 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n       case JIT_INITIALIZED :\n          if (isJIT || isAOT)\n             {\n+            // Update arg index for args that are not consumed by the JIT\n+            J9::Options::findExternalOptions(vm, false);\n+\n             /* We need to initialize the following if we allow JIT compilation, AOT compilation or AOT relocation to be done */\n             try\n                {\n-               argIndexMergeOptionsEnabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMergeCompilerOptions], 0);\n-               argIndexMergeOptionsDisabled = FIND_AND_CONSUME_VMARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMergeCompilerOptions], 0);\n+               argIndexMergeOptionsEnabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusMergeCompilerOptions);\n+               argIndexMergeOptionsDisabled = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusMergeCompilerOptions);\n \n                // Determine if user wants to merge compiler options\n                bool mergeCompilerOptions = false;\n@@ -430,8 +419,8 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n                /*\n                 * Note that the option prefix we need to match includes the colon.\n                 */\n-               argIndexXjit = FIND_ARG_IN_VMARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon], 0);\n-               argIndexXaot = FIND_ARG_IN_VMARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon], 0);\n+               argIndexXjit = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xjitcolon);\n+               argIndexXaot = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xaotcolon);\n \n                /* do initializations for -Xjit options */\n                if (isJIT && argIndexXjit >= 0)\ndiff --git a/runtime/compiler/control/J9Options.cpp b/runtime/compiler/control/J9Options.cpp\nindex 15bd7b1c62f..b315b14c8d1 100644\n--- a/runtime/compiler/control/J9Options.cpp\n+++ b/runtime/compiler/control/J9Options.cpp\n@@ -310,93 +310,119 @@ bool J9::Options::_aggressiveLockReservation = false;\n \n bool J9::Options::_xrsSync = false;\n \n+void\n+J9::Options::findExternalOptions(J9JavaVM *vm, bool consume)\n+   {\n+   int32_t start = static_cast<int32_t>(J9::ExternalOptions::TR_FirstExternalOption);\n+   int32_t end = static_cast<int32_t>(J9::ExternalOptions::TR_NumExternalOptions);\n+   for (int32_t option = start; option < end; option++)\n+      {\n+      J9::ExternalOptionsMetadata &opt = J9::Options::_externalOptionsMetadata[option];\n+\n+      if (consume)\n+         {\n+         if (opt._consumedByJIT)\n+            {\n+            opt._argIndex = FIND_AND_CONSUME_VMARG(opt._match, opt._externalOption, 0);\n+            }\n+         }\n+      else\n+         {\n+         if (!opt._consumedByJIT)\n+            {\n+            opt._argIndex = FIND_ARG_IN_VMARGS(opt._match, opt._externalOption, 0);\n+            }\n+         }\n+      }\n+   }\n+\n /**\n- * This string array should be kept in sync with the\n+ * This array should be kept in sync with the\n  * J9::ExternalOptions enum in J9Options.hpp\n  */\n-const char * J9::Options::_externalOptionStrings[J9::ExternalOptions::TR_NumExternalOptions] =\n-   {\n-   // TR_FirstExternalOption                 = 0\n-   \"-Xnodfpbd\",                           // = 0\n-   \"-Xdfpbd\",                             // = 1\n-   \"-Xhysteresis\",                        // = 2\n-   \"-Xnoquickstart\",                      // = 3\n-   \"-Xquickstart\",                        // = 4\n-   \"-Xtune:elastic\",                      // = 5\n-   \"-XtlhPrefetch\",                       // = 6\n-   \"-XnotlhPrefetch\",                     // = 7\n-   \"-Xlockword\",                          // = 8\n-   \"-XlockReservation\",                   // = 9\n-   \"-XjniAcc:\",                           // = 10\n-   \"-Xlp\",                                // = 11\n-   \"-Xlp:codecache:\",                     // = 12\n-   \"-Xcodecache\",                         // = 13\n-   \"-Xcodecachetotal\",                    // = 14\n-   \"-XX:codecachetotal=\",                 // = 15\n-   \"-XX:+PrintCodeCache\",                 // = 16\n-   \"-XX:-PrintCodeCache\",                 // = 17\n-   \"-XsamplingExpirationTime\",            // = 18\n-   \"-XcompilationThreads\",                // = 19\n-   \"-XaggressivenessLevel\",               // = 20\n-   \"-Xnoclassgc\",                         // = 21\n-   VMOPT_XJIT,                            // = 22\n-   VMOPT_XNOJIT,                          // = 23\n-   VMOPT_XJIT_COLON,                      // = 24\n-   VMOPT_XAOT,                            // = 25\n-   VMOPT_XNOAOT,                          // = 26\n-   VMOPT_XAOT_COLON,                      // = 27\n-   \"-XX:deterministic=\",                  // = 28\n-   \"-XX:+RuntimeInstrumentation\",         // = 29\n-   \"-XX:-RuntimeInstrumentation\",         // = 30\n-   \"-XX:+PerfTool\",                       // = 31\n-   \"-XX:-PerfTool\",                       // = 32\n-   \"-XX:doNotProcessJitEnvVars\",          // = 33\n-   \"-XX:+MergeCompilerOptions\",           // = 34\n-   \"-XX:-MergeCompilerOptions\",           // = 35\n-   \"-XX:LateSCCDisclaimTime=\",            // = 36\n-   \"-XX:+UseJITServer\",                   // = 37\n-   \"-XX:-UseJITServer\",                   // = 38\n-   \"-XX:+JITServerTechPreviewMessage\",    // = 39\n-   \"-XX:-JITServerTechPreviewMessage\",    // = 40\n-   \"-XX:JITServerAddress=\",               // = 41\n-   \"-XX:JITServerPort=\",                  // = 42\n-   \"-XX:JITServerTimeout=\",               // = 43\n-   \"-XX:JITServerSSLKey=\",                // = 44\n-   \"-XX:JITServerSSLCert=\",               // = 45\n-   \"-XX:JITServerSSLRootCerts=\",          // = 46\n-   \"-XX:+JITServerUseAOTCache\",           // = 47\n-   \"-XX:-JITServerUseAOTCache\",           // = 48\n-   \"-XX:+RequireJITServer\",               // = 49\n-   \"-XX:-RequireJITServer\",               // = 50\n-   \"-XX:+JITServerLogConnections\",        // = 51\n-   \"-XX:-JITServerLogConnections\",        // = 52\n-   \"-XX:JITServerAOTmx=\",                 // = 53\n-   \"-XX:+JITServerLocalSyncCompiles\",     // = 54\n-   \"-XX:-JITServerLocalSyncCompiles\",     // = 55\n-   \"-XX:+JITServerMetrics\",               // = 56\n-   \"-XX:-JITServerMetrics\",               // = 57\n-   \"-XX:JITServerMetricsPort=\",           // = 58\n-   \"-XX:JITServerMetricsSSLKey=\",         // = 59\n-   \"-XX:JITServerMetricsSSLCert=\",        // = 60\n-   \"-XX:+JITServerShareROMClasses\",       // = 61\n-   \"-XX:-JITServerShareROMClasses\",       // = 62\n-   \"-XX:+JITServerAOTCachePersistence\",   // = 63\n-   \"-XX:-JITServerAOTCachePersistence\",   // = 64\n-   \"-XX:JITServerAOTCacheDir=\",           // = 65\n-   \"-XX:JITServerAOTCacheName=\",          // = 66\n-   \"-XX:codecachetotalMaxRAMPercentage=\", // = 67\n-   \"-XX:+JITServerAOTCacheDelayMethodRelocation\", // = 68\n-   \"-XX:-JITServerAOTCacheDelayMethodRelocation\", // = 69\n-   \"-XX:+IProfileDuringStartupPhase\",     // = 70\n-   \"-XX:-IProfileDuringStartupPhase\",     // = 71\n-   \"-XX:+JITServerAOTCacheIgnoreLocalSCC\", // = 72\n-   \"-XX:-JITServerAOTCacheIgnoreLocalSCC\", // = 73\n-   \"-XX:+JITServerHealthProbes\",          // = 74\n-   \"-XX:-JITServerHealthProbes\",          // = 75\n-   \"-XX:JITServerHealthProbePort=\",       // = 76\n-   \"-XX:+TrackAOTDependencies\",           // = 77\n-   \"-XX:-TrackAOTDependencies\"            // = 78\n-   // TR_NumExternalOptions                  = 79\n+J9::ExternalOptionsMetadata J9::Options::_externalOptionsMetadata[J9::ExternalOptions::TR_NumExternalOptions] =\n+   {\n+   // TR_FirstExternalOption                                                             = 0\n+   { \"-Xnodfpbd\",                                   EXACT_MATCH,         -1, true  }, // = 0\n+   { \"-Xdfpbd\",                                     EXACT_MATCH,         -1, false }, // = 1\n+   { \"-Xhysteresis\",                                EXACT_MATCH,         -1, true  }, // = 2\n+   { \"-Xnoquickstart\",                              EXACT_MATCH,         -1, true  }, // = 3\n+   { \"-Xquickstart\",                                EXACT_MATCH,         -1, true  }, // = 4\n+   { \"-Xtune:elastic\",                              STARTSWITH_MATCH,    -1, true  }, // = 5\n+   { \"-XtlhPrefetch\",                               EXACT_MATCH,         -1, true  }, // = 6\n+   { \"-XnotlhPrefetch\",                             EXACT_MATCH,         -1, true  }, // = 7\n+   { VMOPT_XLOCKWORD,                               STARTSWITH_MATCH,    -1, false }, // = 8\n+   { \"-XlockReservation\",                           EXACT_MATCH,         -1, true  }, // = 9\n+   { \"-XjniAcc:\",                                   STARTSWITH_MATCH,    -1, true  }, // = 10\n+   { \"-Xlp\",                                        EXACT_MEMORY_MATCH,  -1, false }, // = 11\n+   { \"-Xlp:codecache:\",                             STARTSWITH_MATCH,    -1, true  }, // = 12\n+   { \"-Xcodecache\",                                 EXACT_MEMORY_MATCH,  -1, true  }, // = 13\n+   { \"-Xcodecachetotal\",                            EXACT_MEMORY_MATCH,  -1, true  }, // = 14\n+   { \"-XX:codecachetotal=\",                         EXACT_MEMORY_MATCH,  -1, true  }, // = 15\n+   { \"-XX:+PrintCodeCache\",                         EXACT_MATCH,         -1, true  }, // = 16\n+   { \"-XX:-PrintCodeCache\",                         EXACT_MATCH,         -1, true  }, // = 17\n+   { \"-XsamplingExpirationTime\",                    EXACT_MEMORY_MATCH,  -1, true  }, // = 18\n+   { \"-XcompilationThreads\",                        EXACT_MEMORY_MATCH,  -1, true  }, // = 19\n+   { \"-XaggressivenessLevel\",                       EXACT_MEMORY_MATCH,  -1, true  }, // = 20\n+   { \"-Xnoclassgc\",                                 EXACT_MATCH,         -1, true  }, // = 21\n+   { VMOPT_XJIT,                                    OPTIONAL_LIST_MATCH, -1, true  }, // = 22\n+   { VMOPT_XNOJIT,                                  EXACT_MATCH,         -1, true  }, // = 23\n+   { VMOPT_XJIT_COLON,                              STARTSWITH_MATCH,    -1, true  }, // = 24\n+   { VMOPT_XAOT,                                    OPTIONAL_LIST_MATCH, -1, true  }, // = 25\n+   { VMOPT_XNOAOT,                                  EXACT_MATCH,         -1, true  }, // = 26\n+   { VMOPT_XAOT_COLON,                              STARTSWITH_MATCH,    -1, true  }, // = 27\n+   { \"-XX:deterministic=\",                          EXACT_MEMORY_MATCH,  -1, true  }, // = 28\n+   { \"-XX:+RuntimeInstrumentation\",                 EXACT_MATCH,         -1, true  }, // = 29\n+   { \"-XX:-RuntimeInstrumentation\",                 EXACT_MATCH,         -1, true  }, // = 30\n+   { \"-XX:+PerfTool\",                               EXACT_MATCH,         -1, true  }, // = 31\n+   { \"-XX:-PerfTool\",                               EXACT_MATCH,         -1, true  }, // = 32\n+   { \"-XX:doNotProcessJitEnvVars\",                  EXACT_MATCH,         -1, true  }, // = 33\n+   { \"-XX:+MergeCompilerOptions\",                   EXACT_MATCH,         -1, true  }, // = 34\n+   { \"-XX:-MergeCompilerOptions\",                   EXACT_MATCH,         -1, true  }, // = 35\n+   { \"-XX:LateSCCDisclaimTime=\",                    STARTSWITH_MATCH,    -1, true  }, // = 36\n+   { \"-XX:+UseJITServer\",                           EXACT_MATCH,         -1, true  }, // = 37\n+   { \"-XX:-UseJITServer\",                           EXACT_MATCH,         -1, true  }, // = 38\n+   { \"-XX:+JITServerTechPreviewMessage\",            EXACT_MATCH,         -1, true  }, // = 39\n+   { \"-XX:-JITServerTechPreviewMessage\",            EXACT_MATCH,         -1, true  }, // = 40\n+   { \"-XX:JITServerAddress=\",                       STARTSWITH_MATCH,    -1, true  }, // = 41\n+   { \"-XX:JITServerPort=\",                          STARTSWITH_MATCH,    -1, true  }, // = 42\n+   { \"-XX:JITServerTimeout=\",                       STARTSWITH_MATCH,    -1, true  }, // = 43\n+   { \"-XX:JITServerSSLKey=\",                        STARTSWITH_MATCH,    -1, true  }, // = 44\n+   { \"-XX:JITServerSSLCert=\",                       STARTSWITH_MATCH,    -1, true  }, // = 45\n+   { \"-XX:JITServerSSLRootCerts=\",                  STARTSWITH_MATCH,    -1, true  }, // = 46\n+   { \"-XX:+JITServerUseAOTCache\",                   EXACT_MATCH,         -1, true  }, // = 47\n+   { \"-XX:-JITServerUseAOTCache\",                   EXACT_MATCH,         -1, true  }, // = 48\n+   { \"-XX:+RequireJITServer\",                       EXACT_MATCH,         -1, true  }, // = 49\n+   { \"-XX:-RequireJITServer\",                       EXACT_MATCH,         -1, true  }, // = 50\n+   { \"-XX:+JITServerLogConnections\",                EXACT_MATCH,         -1, true  }, // = 51\n+   { \"-XX:-JITServerLogConnections\",                EXACT_MATCH,         -1, true  }, // = 52\n+   { \"-XX:JITServerAOTmx=\",                         STARTSWITH_MATCH,    -1, true  }, // = 53\n+   { \"-XX:+JITServerLocalSyncCompiles\",             EXACT_MATCH,         -1, true  }, // = 54\n+   { \"-XX:-JITServerLocalSyncCompiles\",             EXACT_MATCH,         -1, true  }, // = 55\n+   { \"-XX:+JITServerMetrics\",                       EXACT_MATCH,         -1, true  }, // = 56\n+   { \"-XX:-JITServerMetrics\",                       EXACT_MATCH,         -1, true  }, // = 57\n+   { \"-XX:JITServerMetricsPort=\",                   STARTSWITH_MATCH,    -1, true  }, // = 58\n+   { \"-XX:JITServerMetricsSSLKey=\",                 STARTSWITH_MATCH,    -1, true  }, // = 59\n+   { \"-XX:JITServerMetricsSSLCert=\",                STARTSWITH_MATCH,    -1, true  }, // = 60\n+   { \"-XX:+JITServerShareROMClasses\",               EXACT_MATCH,         -1, true  }, // = 61\n+   { \"-XX:-JITServerShareROMClasses\",               EXACT_MATCH,         -1, true  }, // = 62\n+   { \"-XX:+JITServerAOTCachePersistence\",           EXACT_MATCH,         -1, true  }, // = 63\n+   { \"-XX:-JITServerAOTCachePersistence\",           EXACT_MATCH,         -1, true  }, // = 64\n+   { \"-XX:JITServerAOTCacheDir=\",                   STARTSWITH_MATCH,    -1, true  }, // = 65\n+   { \"-XX:JITServerAOTCacheName=\",                  STARTSWITH_MATCH,    -1, true  }, // = 66\n+   { \"-XX:codecachetotalMaxRAMPercentage=\",         STARTSWITH_MATCH,    -1, true  }, // = 67\n+   { \"-XX:+JITServerAOTCacheDelayMethodRelocation\", EXACT_MATCH,         -1, true  }, // = 68\n+   { \"-XX:-JITServerAOTCacheDelayMethodRelocation\", EXACT_MATCH,         -1, true  }, // = 69\n+   { \"-XX:+IProfileDuringStartupPhase\",             EXACT_MATCH,         -1, true  }, // = 70\n+   { \"-XX:-IProfileDuringStartupPhase\",             EXACT_MATCH,         -1, true  }, // = 71\n+   { \"-XX:+JITServerAOTCacheIgnoreLocalSCC\",        EXACT_MATCH,         -1, true  }, // = 72\n+   { \"-XX:-JITServerAOTCacheIgnoreLocalSCC\",        EXACT_MATCH,         -1, true  }, // = 73\n+   { \"-XX:+JITServerHealthProbes\",                  EXACT_MATCH,         -1, true  }, // = 74\n+   { \"-XX:-JITServerHealthProbes\",                  EXACT_MATCH,         -1, true  }, // = 75\n+   { \"-XX:JITServerHealthProbePort=\",               STARTSWITH_MATCH,    -1, true  }, // = 76\n+   { \"-XX:+TrackAOTDependencies\",                   EXACT_MATCH,         -1, true  }, // = 77\n+   { \"-XX:-TrackAOTDependencies\",                   EXACT_MATCH,         -1, true  }  // = 78\n+   // TR_NumExternalOptions                                                              = 79\n    };\n \n //************************************************************************\n@@ -1348,38 +1374,35 @@ static std::string readFileToString(char *fileName)\n       }\n    }\n \n+static int32_t getArgIndex(J9JavaVM *vm, J9::ExternalOptions option, J9VMInitArgs *vmArgsArray, bool postRestore)\n+   {\n+   return\n+      postRestore ?\n+         FIND_ARG_IN_ARGS(vmArgsArray, J9::Options::getExternalOptionMatch(option), J9::Options::getExternalOptionString(option), 0)\n+         :\n+         J9::Options::getExternalOptionIndex(option);\n+   }\n+\n bool\n-J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo)\n-   {\n-   const char *xxJITServerPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerPortOption];\n-   const char *xxJITServerTimeoutOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerTimeoutOption];\n-   const char *xxJITServerSSLKeyOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLKeyOption];\n-   const char *xxJITServerSSLCertOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLCertOption];\n-   const char *xxJITServerSSLRootCertsOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerSSLRootCertsOption];\n-   const char *xxJITServerUseAOTCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerUseAOTCacheOption];\n-   const char *xxDisableJITServerUseAOTCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerUseAOTCacheOption];\n-   const char *xxRequireJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusRequireJITServerOption];\n-   const char *xxDisableRequireJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusRequireJITServerOption];\n-   const char *xxJITServerLogConnections = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerLogConnections];\n-   const char *xxDisableJITServerLogConnections = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerLogConnections];\n-   const char *xxJITServerAOTmxOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTmxOption];\n-\n-   int32_t xxJITServerPortArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerPortOption, 0);\n-   int32_t xxJITServerTimeoutArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerTimeoutOption, 0);\n-   int32_t xxJITServerSSLKeyArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLKeyOption, 0);\n-   int32_t xxJITServerSSLCertArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLCertOption, 0);\n-   int32_t xxJITServerSSLRootCertsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerSSLRootCertsOption, 0);\n-   int32_t xxJITServerUseAOTCacheArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerUseAOTCacheOption, 0);\n-   int32_t xxDisableJITServerUseAOTCacheArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerUseAOTCacheOption, 0);\n-   int32_t xxRequireJITServerArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxRequireJITServerOption, 0);\n-   int32_t xxDisableRequireJITServerArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableRequireJITServerOption, 0);\n-   int32_t xxJITServerLogConnectionsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerLogConnections, 0);\n-   int32_t xxDisableJITServerLogConnectionsArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerLogConnections, 0);\n-   int32_t xxJITServerAOTmxArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, STARTSWITH_MATCH, xxJITServerAOTmxOption, 0);\n+J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool postRestore)\n+   {\n+   int32_t xxJITServerPortArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerPortOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerTimeoutArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerTimeoutOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLKeyArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLKeyOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLCertArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLCertOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerSSLRootCertsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerSSLRootCertsOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerUseAOTCacheArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerUseAOTCacheOption, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerUseAOTCacheArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerUseAOTCacheOption, vmArgsArray, postRestore);\n+   int32_t xxRequireJITServerArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusRequireJITServerOption, vmArgsArray, postRestore);\n+   int32_t xxDisableRequireJITServerArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusRequireJITServerOption, vmArgsArray, postRestore);\n+   int32_t xxJITServerLogConnectionsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerLogConnections, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerLogConnectionsArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerLogConnections, vmArgsArray, postRestore);\n+   int32_t xxJITServerAOTmxArgIndex = getArgIndex(vm, J9::ExternalOptions::XXJITServerAOTmxOption, vmArgsArray, postRestore);\n \n    if (xxJITServerPortArgIndex >= 0)\n       {\n       UDATA port=0;\n+      const char *xxJITServerPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerPortOption);\n       IDATA ret = GET_INTEGER_VALUE_ARGS(vmArgsArray, xxJITServerPortArgIndex, xxJITServerPortOption, port);\n       if (ret == OPTION_OK)\n          compInfo->getPersistentInfo()->setJITServerPort(port);\n@@ -1397,6 +1420,7 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    if (xxJITServerTimeoutArgIndex >= 0)\n       {\n       UDATA timeoutMs=0;\n+      const char *xxJITServerTimeoutOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerTimeoutOption);\n       IDATA ret = GET_INTEGER_VALUE_ARGS(vmArgsArray, xxJITServerTimeoutArgIndex, xxJITServerTimeoutOption, timeoutMs);\n       if (ret == OPTION_OK)\n          compInfo->getPersistentInfo()->setSocketTimeout(timeoutMs);\n@@ -1452,6 +1476,7 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    if (xxJITServerAOTmxArgIndex >= 0)\n       {\n       uint32_t aotMaxBytes = 0;\n+      const char *xxJITServerAOTmxOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerAOTmxOption);\n       if (GET_MEMORY_VALUE_ARGS(vmArgsArray, xxJITServerAOTmxArgIndex, xxJITServerAOTmxOption, aotMaxBytes) == OPTION_OK)\n          {\n          JITServerAOTCacheMap::setCacheMaxBytes(aotMaxBytes);\n@@ -1462,13 +1487,10 @@ J9::Options::JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm\n    }\n \n void\n-J9::Options::JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled)\n+J9::Options::JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled, bool postRestore)\n    {\n-   const char *xxJITServerLocalSyncCompilesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption];\n-   const char *xxDisableJITServerLocalSyncCompilesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption];\n-\n-   int32_t xxJITServerLocalSyncCompilesArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxJITServerLocalSyncCompilesOption, 0);\n-   int32_t xxDisableJITServerLocalSyncCompilesArgIndex = FIND_ARG_IN_ARGS(vmArgsArray, EXACT_MATCH, xxDisableJITServerLocalSyncCompilesOption, 0);\n+   int32_t xxJITServerLocalSyncCompilesArgIndex = getArgIndex(vm, J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption, vmArgsArray, postRestore);\n+   int32_t xxDisableJITServerLocalSyncCompilesArgIndex = getArgIndex(vm, J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption, vmArgsArray, postRestore);\n \n    // We either obey the command line option, or make sure to disable LocalSyncCompiles if\n    // something is set that interferes with remote async recompilations.\n@@ -1598,11 +1620,11 @@ void J9::Options::preProcessMode(J9JavaVM *vm, J9JITConfig *jitConfig)\n          // The aggressivenessLevel can be set directly with -XaggressivenessLevel\n          // This option is a second hand citizen option; if other options contradict it, this option is\n          // ignored even if it appears later\n-         const char *aggressiveOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XaggressivenessLevel];\n-         int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, aggressiveOption, 0);\n+         int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XaggressivenessLevel);\n          if (argIndex >= 0)\n             {\n             UDATA aggressivenessValue = 0;\n+            const char *aggressiveOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XaggressivenessLevel);\n             IDATA ret = GET_INTEGER_VALUE(argIndex, aggressiveOption, aggressivenessValue);\n             if (ret == OPTION_OK && aggressivenessValue < LAST_AGGRESSIVENESS_LEVEL)\n                {\n@@ -1616,10 +1638,9 @@ void J9::Options::preProcessMode(J9JavaVM *vm, J9JITConfig *jitConfig)\n void J9::Options::preProcessJniAccelerator(J9JavaVM *vm)\n    {\n    static bool doneWithJniAcc = false;\n-   const char *jniAccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XjniAcc];\n    if (!doneWithJniAcc)\n       {\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, jniAccOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XjniAcc);\n       if (argIndex >= 0)\n          {\n          const char *optValue;\n@@ -1653,10 +1674,10 @@ double getCodeCacheMaxPercentageOfAvailableMemory(J9JavaVM *vm)\n    OMRPORT_ACCESS_FROM_J9PORT(PORTLIB);\n \n    double codeCacheTotalPercentage = CODECACHE_DEFAULT_MAXRAMPERCENTAGE;\n-   const char *xxccPercentOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage];\n-   int32_t XXcodeCacheTotalPercentArg = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxccPercentOption, 0);\n+   int32_t XXcodeCacheTotalPercentArg = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage);\n    if (XXcodeCacheTotalPercentArg >= 0)\n       {\n+      const char *xxccPercentOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXcodecachetotalMaxRAMPercentage);\n       IDATA returnCode = GET_DOUBLE_VALUE(XXcodeCacheTotalPercentArg, xxccPercentOption, codeCacheTotalPercentage);\n       if (OPTION_OK == returnCode)\n          {\n@@ -1666,8 +1687,10 @@ double getCodeCacheMaxPercentageOfAvailableMemory(J9JavaVM *vm)\n             codeCacheTotalPercentage = CODECACHE_DEFAULT_MAXRAMPERCENTAGE;\n             }\n          }\n-\t else\n-            j9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JIT_OPTIONS_INCORRECT_MEMORY_SIZE, xxccPercentOption);\n+      else\n+         {\n+         j9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JIT_OPTIONS_INCORRECT_MEMORY_SIZE, xxccPercentOption);\n+         }\n       }\n    return codeCacheTotalPercentage;\n    }\n@@ -1698,15 +1721,15 @@ void J9::Options::preProcessCodeCacheIncreaseTotalSize(J9JavaVM *vm, J9JITConfig\n             }\n          }\n #endif\n-      const char *xccOption  = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecachetotal];\n-      const char *xxccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXcodecachetotal];\n-      int32_t codeCacheTotalArgIndex   = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, xccOption, 0);\n-      int32_t XXcodeCacheTotalArgIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, xxccOption, 0);\n+      int32_t codeCacheTotalArgIndex   = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecachetotal);\n+      int32_t XXcodeCacheTotalArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXcodecachetotal);\n       int32_t argIndex = 0;\n       // Check if option is at all specified\n       if (codeCacheTotalArgIndex >= 0 || XXcodeCacheTotalArgIndex >= 0)\n          {\n          const char *ccTotalOption;\n+         const char *xccOption  = J9::Options::getExternalOptionString(J9::ExternalOptions::Xcodecachetotal);\n+         const char *xxccOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXcodecachetotal);\n          if (XXcodeCacheTotalArgIndex > codeCacheTotalArgIndex)\n             {\n             argIndex = XXcodeCacheTotalArgIndex;\n@@ -1759,10 +1782,8 @@ void J9::Options::preProcessCodeCacheIncreaseTotalSize(J9JavaVM *vm, J9JITConfig\n void J9::Options::preProcessCodeCachePrintCodeCache(J9JavaVM *vm)\n    {\n    // -XX:+PrintCodeCache will be parsed twice into both AOT and JIT options here.\n-   const char *xxPrintCodeCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusPrintCodeCache];\n-   const char *xxDisablePrintCodeCacheOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusPrintCodeCache];\n-   int32_t xxPrintCodeCacheArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxPrintCodeCacheOption, 0);\n-   int32_t xxDisablePrintCodeCacheArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisablePrintCodeCacheOption, 0);\n+   int32_t xxPrintCodeCacheArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusPrintCodeCache);\n+   int32_t xxDisablePrintCodeCacheArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusPrintCodeCache);\n \n    if (xxPrintCodeCacheArgIndex > xxDisablePrintCodeCacheArgIndex)\n       {\n@@ -1790,8 +1811,8 @@ bool J9::Options::preProcessCodeCacheXlpCodeCache(J9JavaVM *vm, J9JITConfig *jit\n       UDATA requestedLargeCodePageFlags = J9PORT_VMEM_PAGE_FLAG_NOT_USED;\n       UDATA largePageSize = 0;\n       UDATA largePageFlags = 0;\n-      int32_t xlpCodeCacheIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlpcodecache], NULL);\n-      int32_t xlpIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlp], NULL);\n+      int32_t xlpCodeCacheIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlpcodecache);\n+      int32_t xlpIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlp);\n \n       // Parse -Xlp:codecache:pagesize=<size> as the right most option\n       if (xlpCodeCacheIndex > xlpIndex)\n@@ -2122,11 +2143,11 @@ bool J9::Options::preProcessCodeCache(J9JavaVM *vm, J9JITConfig *jitConfig)\n    PORT_ACCESS_FROM_JAVAVM(vm);\n    OMRPORT_ACCESS_FROM_J9PORT(PORTLIB);\n \n-   const char *ccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache];\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, ccOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecache);\n    if (argIndex >= 0)\n       {\n       UDATA ccSize;\n+      const char *ccOption = J9::Options::getExternalOptionString(J9::ExternalOptions::Xcodecache);\n       GET_MEMORY_VALUE(argIndex, ccOption, ccSize);\n       ccSize >>= 10;\n       jitConfig->codeCacheKB = ccSize;\n@@ -2146,11 +2167,11 @@ bool J9::Options::preProcessCodeCache(J9JavaVM *vm, J9JITConfig *jitConfig)\n \n void J9::Options::preProcessSamplingExpirationTime(J9JavaVM *vm)\n    {\n-   const char *samplingOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XsamplingExpirationTime];\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, samplingOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XsamplingExpirationTime);\n    if (argIndex >= 0)\n       {\n       UDATA expirationTime;\n+      const char *samplingOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XsamplingExpirationTime);\n       IDATA ret = GET_INTEGER_VALUE(argIndex, samplingOption, expirationTime);\n       if (ret == OPTION_OK)\n          _samplingThreadExpirationTime = expirationTime;\n@@ -2164,11 +2185,11 @@ void J9::Options::preProcessCompilationThreads(J9JavaVM *vm, J9JITConfig *jitCon\n       {\n       notYetParsed = false;\n       TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n-      const char *compThreadsOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XcompilationThreads];\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, compThreadsOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XcompilationThreads);\n       if (argIndex >= 0)\n          {\n          UDATA numCompThreads;\n+         const char *compThreadsOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XcompilationThreads);\n          IDATA ret = GET_INTEGER_VALUE(argIndex, compThreadsOption, numCompThreads);\n \n          if (ret == OPTION_OK && numCompThreads > 0)\n@@ -2207,8 +2228,8 @@ void J9::Options::preProcessTLHPrefetch(J9JavaVM *vm)\n       preferTLHPrefetch = false;\n       }\n \n-   IDATA notlhPrefetch = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XnotlhPrefetch], 0);\n-   IDATA tlhPrefetch = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XtlhPrefetch], 0);\n+   IDATA notlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XnotlhPrefetch);\n+   IDATA tlhPrefetch = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XtlhPrefetch);\n    if (preferTLHPrefetch)\n       {\n       if (notlhPrefetch <= tlhPrefetch)\n@@ -2271,12 +2292,12 @@ void J9::Options::preProcessDeterministicMode(J9JavaVM *vm)\n    // Process the deterministic mode\n    if (TR::Options::_deterministicMode == -1) // not yet set\n       {\n-      const char *deterministicOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXdeterministic];\n       const UDATA MAX_DETERMINISTIC_MODE = 9; // only levels 0-9 are allowed\n-      int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, deterministicOption, 0);\n+      int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXdeterministic);\n       if (argIndex >= 0)\n          {\n          UDATA deterministicMode;\n+         const char *deterministicOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXdeterministic);\n          IDATA ret = GET_INTEGER_VALUE(argIndex, deterministicOption, deterministicMode);\n          if (ret == OPTION_OK && deterministicMode <= MAX_DETERMINISTIC_MODE)\n             {\n@@ -2305,18 +2326,16 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n          // It can be overridden with -XX:JITServerTimeout= option in JITServerParseCommonOptions().\n          compInfo->getPersistentInfo()->setSocketTimeout(DEFAULT_JITSERVER_TIMEOUT);\n \n-         const char *xxEnableHealthProbes  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusHealthProbes];\n-         const char *xxDisableHealthProbes = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusHealthProbes];\n-         int32_t xxEnableProbesArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxEnableHealthProbes, 0);\n-         int32_t xxDisableProbesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableHealthProbes, 0);\n+         int32_t xxEnableProbesArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusHealthProbes);\n+         int32_t xxDisableProbesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusHealthProbes);\n          if (xxEnableProbesArgIndex >= xxDisableProbesArgIndex) // probes are enabled by default\n             {\n             // Default port is already set at 38600; see if the user wants to change that\n-            const char *xxJITServerHealthPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerHealthProbePortOption];\n-            int32_t xxJITServerHealthPortArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerHealthPortOption, 0);\n+            int32_t xxJITServerHealthPortArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerHealthProbePortOption);\n             if (xxJITServerHealthPortArgIndex >= 0)\n                {\n                UDATA port = 0;\n+               const char *xxJITServerHealthPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerHealthProbePortOption);\n                IDATA ret = GET_INTEGER_VALUE(xxJITServerHealthPortArgIndex, xxJITServerHealthPortOption, port);\n                if (ret == OPTION_OK)\n                   compInfo->getPersistentInfo()->setJITServerHealthPort(port);\n@@ -2328,28 +2347,24 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if we should open the port for the MetricsServer\n-         const char *xxEnableMetricsServer  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMetricsServer];\n-         const char *xxDisableMetricsServer = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMetricsServer];\n-         int32_t xxEnableMetricsServerArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxEnableMetricsServer, 0);\n-         int32_t xxDisableMetricsServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableMetricsServer, 0);\n+         int32_t xxEnableMetricsServerArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusMetricsServer);\n+         int32_t xxDisableMetricsServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusMetricsServer);\n          if (xxEnableMetricsServerArgIndex > xxDisableMetricsServerArgIndex)\n             {\n             // Default port is already set at 38500; see if the user wants to change that\n-            const char *xxJITServerMetricsPortOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsPortOption];\n-            int32_t xxJITServerMetricsPortArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsPortOption, 0);\n+            int32_t xxJITServerMetricsPortArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsPortOption);\n             if (xxJITServerMetricsPortArgIndex >= 0)\n                {\n                UDATA port = 0;\n+               const char *xxJITServerMetricsPortOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXJITServerMetricsPortOption);\n                IDATA ret = GET_INTEGER_VALUE(xxJITServerMetricsPortArgIndex, xxJITServerMetricsPortOption, port);\n                if (ret == OPTION_OK)\n                   compInfo->getPersistentInfo()->setJITServerMetricsPort(port);\n                }\n \n             // For optional metrics server encryption. Key and cert have to be set as a pair.\n-            const char *xxJITServerMetricsSSLKeyOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsSSLKeyOption];\n-            const char *xxJITServerMetricsSSLCertOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerMetricsSSLCertOption];\n-            int32_t xxJITServerMetricsSSLKeyArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsSSLKeyOption, 0);\n-            int32_t xxJITServerMetricsSSLCertArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerMetricsSSLCertOption, 0);\n+            int32_t xxJITServerMetricsSSLKeyArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsSSLKeyOption);\n+            int32_t xxJITServerMetricsSSLCertArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerMetricsSSLCertOption);\n \n             if ((xxJITServerMetricsSSLKeyArgIndex >= 0) && (xxJITServerMetricsSSLCertArgIndex >= 0))\n                {\n@@ -2378,11 +2393,8 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if cached ROM classes should be shared between clients\n-         const char *xxJITServerShareROMClassesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerShareROMClassesOption];\n-         const char *xxDisableJITServerShareROMClassesOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerShareROMClassesOption];\n-\n-         int32_t xxJITServerShareROMClassesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerShareROMClassesOption, 0);\n-         int32_t xxDisableJITServerShareROMClassesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerShareROMClassesOption, 0);\n+         int32_t xxJITServerShareROMClassesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerShareROMClassesOption);\n+         int32_t xxDisableJITServerShareROMClassesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerShareROMClassesOption);\n          if (xxJITServerShareROMClassesArgIndex > xxDisableJITServerShareROMClassesArgIndex)\n             {\n             _shareROMClasses = true;\n@@ -2393,17 +2405,14 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             }\n \n          // Check if the JITServer AOT cache persistence feature is enabled\n-         const char *xxJITServerAOTCachePersistenceOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCachePersistenceOption];\n-         const char *xxDisableJITServerAOTCachePersistenceOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCachePersistenceOption];\n-         int32_t xxJITServerAOTCachePersistenceArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCachePersistenceOption, 0);\n-         int32_t xxDisableJITServerAOTCachePersistenceArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCachePersistenceOption, 0);\n+         int32_t xxJITServerAOTCachePersistenceArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCachePersistenceOption);\n+         int32_t xxDisableJITServerAOTCachePersistenceArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCachePersistenceOption);\n          if (xxJITServerAOTCachePersistenceArgIndex > xxDisableJITServerAOTCachePersistenceArgIndex)\n             {\n             compInfo->getPersistentInfo()->setJITServerUseAOTCachePersistence(true);\n \n             // If enabled, get the name of the directory where the AOT cache files will be stored\n-            const char *xxJITServerAOTCacheDirOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTCacheDirOption];\n-            int32_t xxJITServerAOTCacheDirArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAOTCacheDirOption, 0);\n+            int32_t xxJITServerAOTCacheDirArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAOTCacheDirOption);\n             if (xxJITServerAOTCacheDirArgIndex >= 0)\n                {\n                char *directory = NULL;\n@@ -2416,11 +2425,8 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n          {\n          // Check option -XX:+UseJITServer\n          // -XX:-UseJITServer disables JITServer at the client\n-         const char *xxUseJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusUseJITServerOption];\n-         const char *xxDisableUseJITServerOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusUseJITServerOption];\n-\n-         int32_t xxUseJITServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxUseJITServerOption, 0);\n-         int32_t xxDisableUseJITServerArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableUseJITServerOption, 0);\n+         int32_t xxUseJITServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusUseJITServerOption);\n+         int32_t xxDisableUseJITServerArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusUseJITServerOption);\n \n          bool useJitServerExplicitlySpecified = xxUseJITServerArgIndex > xxDisableUseJITServerArgIndex;\n \n@@ -2455,19 +2461,15 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n             compInfo->getPersistentInfo()->setSocketTimeout(DEFAULT_JITCLIENT_TIMEOUT);\n \n             // Check if the technology preview message should be displayed.\n-            const char *xxJITServerTechPreviewMessageOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerTechPreviewMessageOption];\n-            const char *xxDisableJITServerTechPreviewMessageOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerTechPreviewMessageOption];\n-\n-            int32_t xxJITServerTechPreviewMessageArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerTechPreviewMessageOption, 0);\n-            int32_t xxDisableJITServerTechPreviewMessageArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerTechPreviewMessageOption, 0);\n+            int32_t xxJITServerTechPreviewMessageArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerTechPreviewMessageOption);\n+            int32_t xxDisableJITServerTechPreviewMessageArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerTechPreviewMessageOption);\n \n             if (xxJITServerTechPreviewMessageArgIndex > xxDisableJITServerTechPreviewMessageArgIndex)\n                {\n                j9tty_printf(PORTLIB, \"JITServer is currently a technology preview. Its use is not yet supported\\n\");\n                }\n \n-            const char *xxJITServerAddressOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAddressOption];\n-            int32_t xxJITServerAddressArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAddressOption, 0);\n+            int32_t xxJITServerAddressArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAddressOption);\n \n             if (xxJITServerAddressArgIndex >= 0)\n                {\n@@ -2476,8 +2478,7 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n                compInfo->getPersistentInfo()->setJITServerAddress(address);\n                }\n \n-            const char *xxJITServerAOTCacheNameOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXJITServerAOTCacheNameOption];\n-            int32_t xxJITServerAOTCacheNameArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxJITServerAOTCacheNameOption, 0);\n+            int32_t xxJITServerAOTCacheNameArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXJITServerAOTCacheNameOption);\n \n             if (xxJITServerAOTCacheNameArgIndex >= 0)\n                {\n@@ -2486,28 +2487,20 @@ bool J9::Options::preProcessJitServer(J9JavaVM *vm, J9JITConfig *jitConfig)\n                compInfo->getPersistentInfo()->setJITServerAOTCacheName(name);\n                }\n \n-            const char *xxJITServerAOTCacheDelayMethodRelocation =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCacheDelayMethodRelocation];\n-            const char *xxDisableJITServerAOTCacheDelayMethodRelocation =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCacheDelayMethodRelocation];\n             int32_t xxJITServerAOTCacheDelayMethodRelocationArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCacheDelayMethodRelocation, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCacheDelayMethodRelocation);\n             int32_t xxDisableJITServerAOTCacheDelayMethodRelocationArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCacheDelayMethodRelocation, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCacheDelayMethodRelocation);\n \n             if (xxJITServerAOTCacheDelayMethodRelocationArgIndex > xxDisableJITServerAOTCacheDelayMethodRelocationArgIndex)\n                {\n                compInfo->getPersistentInfo()->setJITServerAOTCacheDelayMethodRelocation(true);\n                }\n \n-            const char *xxJITServerAOTCacheIgnoreLocalSCC =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusJITServerAOTCacheIgnoreLocalSCC];\n-            const char *xxDisableJITServerAOTCacheIgnoreLocalSCC =\n-               J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusJITServerAOTCacheIgnoreLocalSCC];\n             int32_t xxJITServerAOTCacheIgnoreLocalSCCArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxJITServerAOTCacheIgnoreLocalSCC, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusJITServerAOTCacheIgnoreLocalSCC);\n             int32_t xxDisableJITServerAOTCacheIgnoreLocalSCCArgIndex =\n-               FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableJITServerAOTCacheIgnoreLocalSCC, 0);\n+               J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusJITServerAOTCacheIgnoreLocalSCC);\n \n             if (xxDisableJITServerAOTCacheIgnoreLocalSCCArgIndex > xxJITServerAOTCacheIgnoreLocalSCCArgIndex)\n                {\n@@ -2596,11 +2589,11 @@ J9::Options::fePreProcess(void * base)\n       bool forceSuffixLogs = true;\n    #endif\n \n-   const char *xxLateSCCDisclaimTimeOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXLateSCCDisclaimTimeOption];\n-   int32_t xxLateSCCDisclaimTime = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, xxLateSCCDisclaimTimeOption, 0);\n+   int32_t xxLateSCCDisclaimTime = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXLateSCCDisclaimTimeOption);\n    if (xxLateSCCDisclaimTime >= 0)\n       {\n       UDATA disclaimMs = 0;\n+      const char *xxLateSCCDisclaimTimeOption = J9::Options::getExternalOptionString(J9::ExternalOptions::XXLateSCCDisclaimTimeOption);\n       IDATA ret = GET_INTEGER_VALUE(xxLateSCCDisclaimTime, xxLateSCCDisclaimTimeOption, disclaimMs);\n       if (ret == OPTION_OK)\n          {\n@@ -2613,8 +2606,8 @@ J9::Options::fePreProcess(void * base)\n       self()->setOption(TR_EnableSharedCacheDisclaiming);\n #endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n \n-   int32_t xxEnableTrackAOTDependenciesArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusTrackAOTDependencies], 0);\n-   int32_t xxDisableTrackAOTDependenciesArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusTrackAOTDependencies], 0);\n+   int32_t xxEnableTrackAOTDependenciesArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusTrackAOTDependencies);\n+   int32_t xxDisableTrackAOTDependenciesArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusTrackAOTDependencies);\n    if (xxEnableTrackAOTDependenciesArgIndex > xxDisableTrackAOTDependenciesArgIndex)\n       {\n       compInfo->getPersistentInfo()->setTrackAOTDependencies(true);\n@@ -2661,7 +2654,7 @@ J9::Options::fePreProcess(void * base)\n \n    self()->preProcessMmf(vm, jitConfig);\n \n-   if (FIND_ARG_IN_VMARGS(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoclassgc], 0) >= 0)\n+   if (J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xnoclassgc) >= 0)\n       self()->setOption(TR_NoClassGC);\n \n    self()->preProcessMode(vm, jitConfig);\n@@ -2954,9 +2947,8 @@ J9::Options::fePostProcessJIT(void * base)\n       TR::Options::disableMemoryDisclaimIfNeeded(jitConfig);\n       }\n \n-   const char *ccOption = J9::Options::_externalOptionStrings[J9::ExternalOptions::Xcodecache];\n    J9JavaVM *vm = javaVM; // needed by FIND_ARG_IN_VMARGS macro\n-   int32_t argIndex = FIND_ARG_IN_VMARGS(EXACT_MEMORY_MATCH, ccOption, 0);\n+   int32_t argIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xcodecache);\n \n    if (argIndex >= 0)\n       {\n@@ -3392,10 +3384,8 @@ bool J9::Options::feLatePostProcess(void * base, TR::OptionSet * optionSet)\n    // The FIND_ARG_IN_VMARGS macro expect the J9JavaVM to be in the `vm` variable, instead of `javaVM`\n    // The method uses the `vm` variable for the TR_J9VMBase\n    J9JavaVM * vm = javaVM;\n-   const char *xxIProfileDuringStartupPhase  = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusIProfileDuringStartupPhase];\n-   const char *xxDisableIProfileDuringStartupPhase = J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusIProfileDuringStartupPhase];\n-   int32_t xxIProfileDuringStartupPhaseArgIndex  = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxIProfileDuringStartupPhase, 0);\n-   int32_t xxDisableIProfileDuringStartupPhaseArgIndex = FIND_ARG_IN_VMARGS(EXACT_MATCH, xxDisableIProfileDuringStartupPhase, 0);\n+   int32_t xxIProfileDuringStartupPhaseArgIndex  = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXplusIProfileDuringStartupPhase);\n+   int32_t xxDisableIProfileDuringStartupPhaseArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::XXminusIProfileDuringStartupPhase);\n    if (xxIProfileDuringStartupPhaseArgIndex > xxDisableIProfileDuringStartupPhaseArgIndex)\n       self()->setOption(TR_NoIProfilerDuringStartupPhase, false); // Override -Xjit:noIProfilerDuringStartupPhase\n    else if (xxDisableIProfileDuringStartupPhaseArgIndex >= 0)\ndiff --git a/runtime/compiler/control/J9Options.hpp b/runtime/compiler/control/J9Options.hpp\nindex 3f51e19b523..3dd049ff71c 100644\n--- a/runtime/compiler/control/J9Options.hpp\n+++ b/runtime/compiler/control/J9Options.hpp\n@@ -47,92 +47,128 @@ struct J9VMInitArgs;\n namespace J9\n {\n /**\n- * This enum and the associated string array _externalOptionStrings\n+ * This enum and the associated string array _externalOptionsMetadata\n  * in J9Options.cpp should be kept in sync.\n  */\n enum ExternalOptions\n    {\n-   TR_FirstExternalOption                      = 0,\n-   Xnodfpbd                                    = 0,\n-   Xdfpbd                                      = 1,\n-   Xhysteresis                                 = 2,\n-   Xnoquickstart                               = 3,\n-   Xquickstart                                 = 4,\n-   Xtuneelastic                                = 5,\n-   XtlhPrefetch                                = 6,\n-   XnotlhPrefetch                              = 7,\n-   Xlockword                                   = 8,\n-   XlockReservation                            = 9,\n-   XjniAcc                                     = 10,\n-   Xlp                                         = 11,\n-   Xlpcodecache                                = 12,\n-   Xcodecache                                  = 13,\n-   Xcodecachetotal                             = 14,\n-   XXcodecachetotal                            = 15,\n-   XXplusPrintCodeCache                        = 16,\n-   XXminusPrintCodeCache                       = 17,\n-   XsamplingExpirationTime                     = 18,\n-   XcompilationThreads                         = 19,\n-   XaggressivenessLevel                        = 20,\n-   Xnoclassgc                                  = 21,\n-   Xjit                                        = 22,\n-   Xnojit                                      = 23,\n-   Xjitcolon                                   = 24,\n-   Xaot                                        = 25,\n-   Xnoaot                                      = 26,\n-   Xaotcolon                                   = 27,\n-   XXdeterministic                             = 28,\n-   XXplusRuntimeInstrumentation                = 29,\n-   XXminusRuntimeInstrumentation               = 30,\n-   XXplusPerfTool                              = 31,\n-   XXminusPerfTool                             = 32,\n-   XXdoNotProcessJitEnvVars                    = 33,\n-   XXplusMergeCompilerOptions                  = 34,\n-   XXminusMergeCompilerOptions                 = 35,\n-   XXLateSCCDisclaimTimeOption                 = 36,\n-   XXplusUseJITServerOption                    = 37,\n-   XXminusUseJITServerOption                   = 38,\n-   XXplusJITServerTechPreviewMessageOption     = 39,\n-   XXminusJITServerTechPreviewMessageOption    = 40,\n-   XXJITServerAddressOption                    = 41,\n-   XXJITServerPortOption                       = 42,\n-   XXJITServerTimeoutOption                    = 43,\n-   XXJITServerSSLKeyOption                     = 44,\n-   XXJITServerSSLCertOption                    = 45,\n-   XXJITServerSSLRootCertsOption               = 46,\n-   XXplusJITServerUseAOTCacheOption            = 47,\n-   XXminusJITServerUseAOTCacheOption           = 48,\n-   XXplusRequireJITServerOption                = 49,\n-   XXminusRequireJITServerOption               = 50,\n-   XXplusJITServerLogConnections               = 51,\n-   XXminusJITServerLogConnections              = 52,\n-   XXJITServerAOTmxOption                      = 53,\n-   XXplusJITServerLocalSyncCompilesOption      = 54,\n-   XXminusJITServerLocalSyncCompilesOption     = 55,\n-   XXplusMetricsServer                         = 56,\n-   XXminusMetricsServer                        = 57,\n-   XXJITServerMetricsPortOption                = 58,\n-   XXJITServerMetricsSSLKeyOption              = 59,\n-   XXJITServerMetricsSSLCertOption             = 60,\n-   XXplusJITServerShareROMClassesOption        = 61,\n-   XXminusJITServerShareROMClassesOption       = 62,\n-   XXplusJITServerAOTCachePersistenceOption    = 63,\n-   XXminusJITServerAOTCachePersistenceOption   = 64,\n-   XXJITServerAOTCacheDirOption                = 65,\n-   XXJITServerAOTCacheNameOption               = 66,\n-   XXcodecachetotalMaxRAMPercentage            = 67,\n+   TR_FirstExternalOption                        = 0,\n+   Xnodfpbd                                      = 0,\n+   Xdfpbd                                        = 1,\n+   Xhysteresis                                   = 2,\n+   Xnoquickstart                                 = 3,\n+   Xquickstart                                   = 4,\n+   Xtuneelastic                                  = 5,\n+   XtlhPrefetch                                  = 6,\n+   XnotlhPrefetch                                = 7,\n+   Xlockword                                     = 8,\n+   XlockReservation                              = 9,\n+   XjniAcc                                       = 10,\n+   Xlp                                           = 11,\n+   Xlpcodecache                                  = 12,\n+   Xcodecache                                    = 13,\n+   Xcodecachetotal                               = 14,\n+   XXcodecachetotal                              = 15,\n+   XXplusPrintCodeCache                          = 16,\n+   XXminusPrintCodeCache                         = 17,\n+   XsamplingExpirationTime                       = 18,\n+   XcompilationThreads                           = 19,\n+   XaggressivenessLevel                          = 20,\n+   Xnoclassgc                                    = 21,\n+   Xjit                                          = 22,\n+   Xnojit                                        = 23,\n+   Xjitcolon                                     = 24,\n+   Xaot                                          = 25,\n+   Xnoaot                                        = 26,\n+   Xaotcolon                                     = 27,\n+   XXdeterministic                               = 28,\n+   XXplusRuntimeInstrumentation                  = 29,\n+   XXminusRuntimeInstrumentation                 = 30,\n+   XXplusPerfTool                                = 31,\n+   XXminusPerfTool                               = 32,\n+   XXdoNotProcessJitEnvVars                      = 33,\n+   XXplusMergeCompilerOptions                    = 34,\n+   XXminusMergeCompilerOptions                   = 35,\n+   XXLateSCCDisclaimTimeOption                   = 36,\n+   XXplusUseJITServerOption                      = 37,\n+   XXminusUseJITServerOption                     = 38,\n+   XXplusJITServerTechPreviewMessageOption       = 39,\n+   XXminusJITServerTechPreviewMessageOption      = 40,\n+   XXJITServerAddressOption                      = 41,\n+   XXJITServerPortOption                         = 42,\n+   XXJITServerTimeoutOption                      = 43,\n+   XXJITServerSSLKeyOption                       = 44,\n+   XXJITServerSSLCertOption                      = 45,\n+   XXJITServerSSLRootCertsOption                 = 46,\n+   XXplusJITServerUseAOTCacheOption              = 47,\n+   XXminusJITServerUseAOTCacheOption             = 48,\n+   XXplusRequireJITServerOption                  = 49,\n+   XXminusRequireJITServerOption                 = 50,\n+   XXplusJITServerLogConnections                 = 51,\n+   XXminusJITServerLogConnections                = 52,\n+   XXJITServerAOTmxOption                        = 53,\n+   XXplusJITServerLocalSyncCompilesOption        = 54,\n+   XXminusJITServerLocalSyncCompilesOption       = 55,\n+   XXplusMetricsServer                           = 56,\n+   XXminusMetricsServer                          = 57,\n+   XXJITServerMetricsPortOption                  = 58,\n+   XXJITServerMetricsSSLKeyOption                = 59,\n+   XXJITServerMetricsSSLCertOption               = 60,\n+   XXplusJITServerShareROMClassesOption          = 61,\n+   XXminusJITServerShareROMClassesOption         = 62,\n+   XXplusJITServerAOTCachePersistenceOption      = 63,\n+   XXminusJITServerAOTCachePersistenceOption     = 64,\n+   XXJITServerAOTCacheDirOption                  = 65,\n+   XXJITServerAOTCacheNameOption                 = 66,\n+   XXcodecachetotalMaxRAMPercentage              = 67,\n    XXplusJITServerAOTCacheDelayMethodRelocation  = 68,\n    XXminusJITServerAOTCacheDelayMethodRelocation = 69,\n-   XXplusIProfileDuringStartupPhase            = 70,\n-   XXminusIProfileDuringStartupPhase           = 71,\n-   XXplusJITServerAOTCacheIgnoreLocalSCC       = 72,\n-   XXminusJITServerAOTCacheIgnoreLocalSCC      = 73,\n-   XXplusHealthProbes                          = 74,\n-   XXminusHealthProbes                         = 75,\n-   XXJITServerHealthProbePortOption            = 76,\n-   XXplusTrackAOTDependencies                  = 77,\n-   XXminusTrackAOTDependencies                 = 78,\n-   TR_NumExternalOptions                       = 79\n+   XXplusIProfileDuringStartupPhase              = 70,\n+   XXminusIProfileDuringStartupPhase             = 71,\n+   XXplusJITServerAOTCacheIgnoreLocalSCC         = 72,\n+   XXminusJITServerAOTCacheIgnoreLocalSCC        = 73,\n+   XXplusHealthProbes                            = 74,\n+   XXminusHealthProbes                           = 75,\n+   XXJITServerHealthProbePortOption              = 76,\n+   XXplusTrackAOTDependencies                    = 77,\n+   XXminusTrackAOTDependencies                   = 78,\n+   TR_NumExternalOptions                         = 79\n+   };\n+\n+/**\n+ * @brief This data structure is used to describe external JVM options that\n+ *        the JIT processes. An option is considered external if it is not part\n+ *        of the -Xjit or -Xaot flag. These options are found and/or consumed\n+ *        using FIND_AND_CONSUME_VMARG / FIND_ARG_IN_VMARGS.\n+ */\n+struct ExternalOptionsMetadata\n+   {\n+   /** @brief The external option string */\n+   const char * const _externalOption;\n+\n+   /**\n+    * @brief The way an option should be matched when using\n+    *        FIND_AND_CONSUME_VMARG / FIND_ARG_IN_VMARGS. Can be one of the\n+    *        following:\n+    *        - EXACT_MATCH\n+    *        - STARTSWITH_MATCH\n+    *        - EXACT_MEMORY_MATCH\n+    *        - OPTIONAL_LIST_MATCH\n+    *        - OPTIONAL_LIST_MATCH_USING_EQUALS\n+    */\n+   const int8_t       _match;\n+\n+   /** @brief The index into the args array of this option, if it exists. */\n+   int32_t            _argIndex;\n+\n+   /**\n+    * @brief Indicates whether this option should be consumed by the JIT;\n+    *        every valid external option has to be consumed or the JVM will\n+    *        exit with an error when using\n+    *        -XX:-IgnoreUnrecognizedXXColonOptions. This just amounts to\n+    *        using FIND_AND_CONSUME_VMARG rather than FIND_ARG_IN_VMARGS.\n+    */\n+   const bool         _consumedByJIT;\n    };\n \n class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n@@ -456,7 +492,43 @@ class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n \n    static bool _xrsSync;\n \n-   static const char * _externalOptionStrings[ExternalOptions::TR_NumExternalOptions];\n+   static ExternalOptionsMetadata _externalOptionsMetadata[ExternalOptions::TR_NumExternalOptions];\n+\n+   /**\n+    * @brief This static method iterates over the _externalOptionsMetadata table\n+    *        to find (and possibly consume) the string indicated by\n+    *        _externalOption, as well as updates the _argIndex with the\n+    *        index into the args array of the external option if it exists (-1\n+    *        otherwise).\n+    *\n+    * @param vm The J9JavaVM pointer\n+    * @param consume Specifies whether to use FIND_AND_CONSUME_VMARG or\n+    *                FIND_ARG_IN_VMARGS; default value is true\n+    */\n+   static void findExternalOptions(J9JavaVM *vm, bool consume = true);\n+\n+   /**\n+    * @brief Returns the string associated with the ExternalOptions option\n+    *\n+    * @param option The ExternalOptions enum representing the external option\n+    *\n+    * @return The string associated with the ExternalOptions option\n+    */\n+   static const char * getExternalOptionString(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._externalOption; }\n+\n+   /**\n+    * @brief Returns the index into the args array of the ExternalOptions option\n+    *\n+    * @param option The ExternalOptions enum representing the external option\n+    *\n+    * @return The cached arg index\n+    */\n+   static int32_t getExternalOptionIndex(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._argIndex; }\n+\n+   static int8_t getExternalOptionMatch(ExternalOptions option)\n+      { return _externalOptionsMetadata[option]._match; }\n \n    static void  printPID();\n \n@@ -479,8 +551,8 @@ class OMR_EXTENSIBLE Options : public OMR::OptionsConnector\n    static const char *JITServerAOTCacheStoreLimitOption(const char *option, void *, TR::OptionTable *entry);\n    static const char *JITServerAOTCacheLoadLimitOption(const char *option, void *, TR::OptionTable *entry);\n    static const char *JITServerRemoteExclude(const char *option, void *base, TR::OptionTable *entry);\n-   static bool JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo);\n-   static void JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled);\n+   static bool JITServerParseCommonOptions(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool postRestore = false);\n+   static void JITServerParseLocalSyncCompiles(J9VMInitArgs *vmArgsArray, J9JavaVM *vm, TR::CompilationInfo *compInfo, bool isFSDEnabled, bool postRestore = false);\n #endif /* defined(J9VM_OPT_JITSERVER) */\n \n    static const char *vmStateOption(const char *option, void *, TR::OptionTable *entry);\ndiff --git a/runtime/compiler/control/OptionsPostRestore.cpp b/runtime/compiler/control/OptionsPostRestore.cpp\nindex 0bb9e51760f..a85d7051f52 100644\n--- a/runtime/compiler/control/OptionsPostRestore.cpp\n+++ b/runtime/compiler/control/OptionsPostRestore.cpp\n@@ -104,7 +104,7 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n    int32_t end = static_cast<int32_t>(J9::ExternalOptions::TR_NumExternalOptions);\n    for (int32_t option = start; option < end; option++)\n       {\n-      const char *optString = J9::Options::_externalOptionStrings[option];\n+      const char *optString = J9::Options::getExternalOptionString(static_cast<J9::ExternalOptions>(option));\n       switch (option)\n          {\n          case J9::ExternalOptions::Xjit:\n@@ -135,7 +135,9 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n          case J9::ExternalOptions::XXplusJITServerLocalSyncCompilesOption:\n          case J9::ExternalOptions::XXminusJITServerLocalSyncCompilesOption:\n             {\n-            // These will be processed in processJitServerOptions\n+            // These will be processed in processJitServerOptions; however,\n+            // consume them here\n+            FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, optString, 0);\n             }\n             break;\n \n@@ -297,7 +299,7 @@ J9::OptionsPostRestore::iterateOverExternalOptions()\n             break;\n \n          default:\n-            TR_ASSERT_FATAL(false, \"Option %s not addressed post restore\\n\", TR::Options::_externalOptionStrings[option]);\n+            TR_ASSERT_FATAL(false, \"Option %s not addressed post restore\\n\", optString);\n          }\n       }\n    }\n@@ -318,7 +320,7 @@ J9::OptionsPostRestore::processJitServerOptions()\n       J9JavaVM *vm = _jitConfig->javaVM;\n \n       // Parse common options\n-      if (!TR::Options::JITServerParseCommonOptions(vm->checkpointState.restoreArgsList, vm, _compInfo))\n+      if (!TR::Options::JITServerParseCommonOptions(vm->checkpointState.restoreArgsList, vm, _compInfo, true))\n          {\n          // TODO: Error condition\n          }\n@@ -327,7 +329,8 @@ J9::OptionsPostRestore::processJitServerOptions()\n       TR::Options::JITServerParseLocalSyncCompiles(vm->checkpointState.restoreArgsList,\n                                                    vm,\n                                                    _compInfo,\n-                                                   TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug));\n+                                                   TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug),\n+                                                   true);\n \n       if (_argIndexJITServerAddress >= 0)\n          {\n@@ -397,9 +400,9 @@ J9::OptionsPostRestore::processInternalCompilerOptions(bool isAOT)\n \n    int32_t argIndex;\n    if (isAOT)\n-      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaotcolon], 0);\n+      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xaotcolon), 0);\n    else\n-      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjitcolon], 0);\n+      argIndex = FIND_ARG_IN_RESTORE_ARGS( STARTSWITH_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xjitcolon), 0);\n \n    if (argIndex >= 0)\n       {\n@@ -679,8 +682,8 @@ J9::OptionsPostRestore::preProcessInternalCompilerOptions()\n    TR::Compiler->relocatableTarget.setNumberOfProcessors(numProc);\n \n    // Find and consume -XX:[+|-]MergeCompilerOptions\n-   _argIndexMergeOptionsEnabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXplusMergeCompilerOptions], 0);\n-   _argIndexMergeOptionsDisabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::XXminusMergeCompilerOptions], 0);\n+   _argIndexMergeOptionsEnabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::XXplusMergeCompilerOptions), 0);\n+   _argIndexMergeOptionsDisabled = FIND_AND_CONSUME_RESTORE_ARG(EXACT_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::XXminusMergeCompilerOptions), 0);\n    }\n \n void\n@@ -850,10 +853,10 @@ J9::OptionsPostRestore::processCompilerOptions()\n    bool jitEnabled = TR::Options::canJITCompile();\n    bool aotEnabled = aotEnabledPreCheckpoint;\n \n-   _argIndexXjit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xjit], 0);\n-   _argIndexXnojit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnojit], 0);\n-   _argIndexXaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xaot], 0);\n-   _argIndexXnoaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xnoaot], 0);\n+   _argIndexXjit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xjit), 0);\n+   _argIndexXnojit = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xnojit), 0);\n+   _argIndexXaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xaot), 0);\n+   _argIndexXnoaot = FIND_AND_CONSUME_RESTORE_ARG(OPTIONAL_LIST_MATCH, J9::Options::getExternalOptionString(J9::ExternalOptions::Xnoaot), 0);\n \n    if (_argIndexXjit != _argIndexXnojit)\n       jitEnabled = (_argIndexXjit > _argIndexXnojit);\ndiff --git a/runtime/compiler/runtime/RelocationRuntime.cpp b/runtime/compiler/runtime/RelocationRuntime.cpp\nindex 6cb81fb088e..7c9a59f9f33 100644\n--- a/runtime/compiler/runtime/RelocationRuntime.cpp\n+++ b/runtime/compiler/runtime/RelocationRuntime.cpp\n@@ -911,7 +911,7 @@ TR_RelocationRuntime::fillAOTHeader(J9JavaVM *vm, TR_FrontEnd *fe, TR_AOTHeader\n uint32_t\n TR_RelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    {\n-   IDATA currentLockwordArgIndex = FIND_ARG_IN_VMARGS(STARTSWITH_MATCH, J9::Options::_externalOptionStrings[J9::ExternalOptions::Xlockword], NULL);\n+   IDATA currentLockwordArgIndex = J9::Options::getExternalOptionIndex(J9::ExternalOptions::Xlockword);\n    uint32_t currentLockwordOptionHashValue = 0;\n    if (currentLockwordArgIndex >= 0)\n       {\n",
    "7f8c5b127a9718179bf4d102268d28c88d3124ca": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 33b1c25a238..fdd7f1728ae 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -7479,7 +7479,8 @@ static void handleOffHeapDataForArrays(\n \n       TR::Register *discontiguousDataAddrOffsetReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, discontiguousDataAddrOffsetReg, discontiguousDataAddrOffsetReg, cg);\n-      generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 1, cg);\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      generateRegImmInstruction(TR::InstOpCode::CMP4RegImm4, node, sizeReg, 1, cg);\n       generateRegImmInstruction(TR::InstOpCode::ADCRegImm4(), node, discontiguousDataAddrOffsetReg, 0, cg);\n \n       dataAddrMR = generateX86MemoryReference(targetReg, discontiguousDataAddrOffsetReg, 3, TR::Compiler->om.contiguousArrayHeaderSizeInBytes(), cg);\n@@ -7490,7 +7491,8 @@ static void handleOffHeapDataForArrays(\n       // Clear out tempReg if dealing with 0 length array\n       zeroReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, zeroReg, zeroReg, cg);\n-      generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 0, cg);\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n       generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n       srm->reclaimScratchRegister(zeroReg);\n \n@@ -7534,7 +7536,8 @@ static void handleOffHeapDataForArrays(\n          // Clear out tempReg if dealing with 0 length array\n          zeroReg = srm->findOrCreateScratchRegister();\n          generateRegRegInstruction(TR::InstOpCode::XORRegReg(), node, zeroReg, zeroReg, cg);\n-         generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 0, cg);\n+         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+         generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n          generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n          srm->reclaimScratchRegister(zeroReg);\n          }\ndiff --git a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\nindex e7e7061dd55..907eaec7daf 100644\n--- a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n@@ -11045,7 +11045,10 @@ J9::Z::TreeEvaluator::VMnewEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n \n                TR::Register *offsetReg = cg->allocateRegister();\n                iCursor = generateRRInstruction(cg, TR::InstOpCode::getXORRegOpCode(), node, offsetReg, offsetReg, iCursor);\n-               iCursor = generateRILInstruction(cg, TR::InstOpCode::getCmpImmOpCode(), node, enumReg, 0, iCursor);\n+               /* Use 32 bit compare because the upper half can either be NULL/garbage/J9class pointer\n+                * and array size should always be in 32-63 bits of enumReg.\n+                */\n+               iCursor = generateRIInstruction(cg, TR::InstOpCode::CHI, node, enumReg, 0, iCursor);\n \n                // Load address of first array element\n                iCursor = generateRXInstruction(cg,\n",
    "3f1ce815d6c32a9848545723241e901298892b29": "diff --git a/runtime/gc_base/RootScanner.hpp b/runtime/gc_base/RootScanner.hpp\nindex 13b2d42f065..6a97be571eb 100644\n--- a/runtime/gc_base/RootScanner.hpp\n+++ b/runtime/gc_base/RootScanner.hpp\n@@ -570,29 +570,6 @@ class MM_RootScanner : public MM_BaseVirtual\n \tvirtual void doObjectInVirtualLargeObjectHeap(J9Object *objectPtr, bool *sparseHeapAllocation);\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n \t\n-#if defined(J9VM_ENV_DATA64)\n-\t/**\n-\t * Check if data is adjacent to array header, based on dataAddr value.\n-\t * This is used during stack slots scanning, when object can move.\n-\t * It is called after the object movement (stack slot has been fixed,\n-\t * although copying operation may not be necessarily completed yet).\n-\t * Specific RootScanner that can move objects will use either src or dst to perform adjacency check,\n-\t * whichever is safe. Scanners that not move objects should not be calling it, otherwise will assert.\n-\t * Should really be called only for Offheap and only for contiguous arrays (non-zero sized objects),\n-\t * although that is not asserted.\n-\t *\n-\t * @param src array address before movement\n-\t * @param dst array address after movement\n-\t *\n-\t * @return true if data is next to the header, and false if its in Offheap\n-\t */\n-\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\tAssert_MM_unreachable();\n-\t\treturn true;\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t/**\n \t * Frees double mapped region associated to objectPtr (arraylet spine) if objectPtr\ndiff --git a/runtime/gc_base/accessBarrier.cpp b/runtime/gc_base/accessBarrier.cpp\nindex 11e6791e0d3..cc92d6181fe 100644\n--- a/runtime/gc_base/accessBarrier.cpp\n+++ b/runtime/gc_base/accessBarrier.cpp\n@@ -355,8 +355,14 @@ j9gc_objaccess_staticStoreU64Split(J9VMThread *vmThread, J9Class *clazz, U_64 *d\n IDATA\n j9gc_objaccess_indexableDataDisplacement(J9StackWalkState *walkState, J9IndexableObject *src, J9IndexableObject *dst)\n {\n-\tMM_ObjectAccessBarrier *barrier = MM_GCExtensions::getExtensions(walkState->walkThread)->accessBarrier;\n-\treturn barrier->indexableDataDisplacement(walkState, src, dst);\n+\tIDATA displacement = 0;\n+\n+\tif (src != dst) {\n+\t\tMM_ObjectAccessBarrier *barrier = MM_GCExtensions::getExtensions(walkState->walkThread)->accessBarrier;\n+\t\tdisplacement = barrier->indexableDataDisplacement(walkState, src, dst);\n+\t}\n+\n+\treturn displacement;\n }\n \n /* TODO: After all array accesses in the VM have been made arraylet safe, \ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.cpp b/runtime/gc_vlhgc/CopyForwardScheme.cpp\nindex 493771becca..8e2afee8344 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.cpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.cpp\n@@ -3875,13 +3875,6 @@ class MM_CopyForwardSchemeRootScanner : public MM_RootScanner\n \t}\n #endif /* J9VM_GC_FINALIZATION */\n \n-#if defined(J9VM_ENV_DATA64)\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\t/* Checking against src object since dst is not guarantied to be completely copied (by a racing thread that won f/w operaton). */\n-\t\treturn _extensions->indexableObjectModel.isDataAdjacentToHeader(src);\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n public:\n \tMM_CopyForwardSchemeRootScanner(MM_EnvironmentVLHGC *env, MM_CopyForwardScheme *copyForwardScheme) :\n \t\tMM_RootScanner(env),\ndiff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex fa203d7e7fa..ff1014a8e53 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -258,16 +258,32 @@ MM_VLHGCAccessBarrier::indexableDataDisplacement(J9StackWalkState *walkState, J9\n \tIDATA displacement = 0;\n \n #if defined(J9VM_ENV_DATA64)\n+\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->walkThread->omrVMThread);\n \tAssert_MM_true(_extensions->isVirtualLargeObjectHeapEnabled);\n-\t/* Potential danger in future of this not being called by a GC RootScanner - hence this assert */\n+\t/* Potential danger in future of this not being called by a GC Stack Walker - hence this assert */\n \tAssert_MM_true(walkState->objectSlotWalkFunction == gc_vmThreadStackDoOSlotIterator);\n \n-\t/* When checking adjacency, we pass both src and dst address, since depending on RootScanner only one is safe to use.\n+\t/* When checking adjacency, we pass both src and dst address, since depending on movement type (evacuate vs sliding) only one is safe to use.\n \t * If we implement concurrent copy-forward, which will require copying of dataAddr before forwarding,\n \t * consider this simplifying to always do adjacency against dst.\n \t */\n-\tMM_RootScanner *rootScanner = ((StackIteratorData *)walkState->userData3)->rootScanner;\n-\tif (rootScanner->isDataAdjacentToHeader(src, dst))\n+\tMM_HeapRegionManager *regionManager = _extensions->getHeap()->getHeapRegionManager();\n+\tMM_HeapRegionDescriptorVLHGC *srcRegion = (MM_HeapRegionDescriptorVLHGC *)regionManager->regionDescriptorForAddress(src);\n+\n+\tJ9IndexableObject *objectToCheckAdjacency = NULL;\n+\n+\tif (srcRegion->_compactData._shouldCompact) {\n+\t\tAssert_GC_true_with_message3(env, !srcRegion->_copyForwardData._evacuateSet, \"Evac set for compact src region %p src obj %p dst obj%p\\n\", srcRegion, src, dst);\n+\t\t/* Moved by sliding compact - source may be overwritten. */\n+\t\tobjectToCheckAdjacency = dst;\n+\t} else if (srcRegion->_copyForwardData._evacuateSet) {\n+\t\t/* Moved (or still being moved) by copy-forward - destination may not be fully copied yet. */\n+\t\tobjectToCheckAdjacency = src;\n+\t} else {\n+\t\tAssert_GC_true_with_message3(env, false, \"Neither evac nor compact set src region %p src obj %p dst obj%p\\n\", srcRegion, src, dst);\n+\t}\n+\n+\tif (_extensions->indexableObjectModel.isDataAdjacentToHeader(objectToCheckAdjacency))\n #endif /* defined(J9VM_ENV_DATA64) */\n \t{\n \t\tdisplacement = MM_ObjectAccessBarrier::indexableDataDisplacement(walkState, src, dst);\ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.cpp b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\nindex fd4beaea34d..f9dd418d449 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n@@ -1715,13 +1715,6 @@ class MM_WriteOnceCompactFixupRoots : public MM_RootScanner {\n \t}\n #endif /* J9VM_GC_FINALIZATION */\n \n-#if defined(J9VM_ENV_DATA64)\n-\tvirtual bool isDataAdjacentToHeader(J9IndexableObject *src, J9IndexableObject *dst) {\n-\t\t/* Checking against dst object since src object may be overwritten. */\n-\t\treturn _extensions->indexableObjectModel.isDataAdjacentToHeader(dst);\n-\t}\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\n };\n \n void\n",
    "a840d4acb1b183b7fea9b969da1078f2d487e4cd": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 9dcc30e3fbe..6bbda520e67 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -1043,7 +1043,6 @@ public static String getProperty(String prop, String defaultValue) {\n \n \tif (!propertiesInitialized\n \t\t\t&& !prop.equals(\"com.ibm.IgnoreMalformedInput\") //$NON-NLS-1$\n-\t\t\t&& !prop.equals(\"file.encoding.pkg\") //$NON-NLS-1$\n \t\t\t&& !prop.equals(\"sun.nio.cs.map\") //$NON-NLS-1$\n \t) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n",
    "e4971ed20f49ca4824b1705c02fc5d0c44bc205c": "diff --git a/runtime/compiler/control/CompilationThread.cpp b/runtime/compiler/control/CompilationThread.cpp\nindex 8d4fe887155..e4ce8d39154 100644\n--- a/runtime/compiler/control/CompilationThread.cpp\n+++ b/runtime/compiler/control/CompilationThread.cpp\n@@ -2769,7 +2769,7 @@ void TR::CompilationInfo::resumeCompilationThread()\n       TR_ASSERT(curCompThreadInfoPT, \"a thread's compinfo is missing\\n\");\n \n       TR_YesNoMaybe activate = shouldActivateNewCompThread();\n-      if (activate == TR_no)\n+      if (activate == TR_no || (activate == TR_maybe && _queueWeight == 0))\n          break;\n \n       curCompThreadInfoPT->resumeCompilationThread();\n",
    "1c420ec20e03a3dbf51928438448ba593e7f416b": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 120266634ff..0103e822eff 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -12036,14 +12036,14 @@ J9::X86::TreeEvaluator::directCallEvaluator(TR::Node *node, TR::CodeGenerator *c\n          return TR::TreeEvaluator::encodeUTF16Evaluator(node, cg);\n \n       case TR::java_lang_String_hashCodeImplDecompressed:\n-         if (cg->getSupportsInlineStringHashCode() && !node->getBlock()->isCold())\n+         if (cg->getSupportsInlineStringHashCode() && !cg->getCurrentBlock()->isCold())\n             returnRegister = inlineStringHashCode(node, false, cg);\n \n          callInlined = (returnRegister != NULL);\n          break;\n \n       case TR::java_lang_String_hashCodeImplCompressed:\n-         if (cg->getSupportsInlineStringHashCode() && !node->getBlock()->isCold())\n+         if (cg->getSupportsInlineStringHashCode() && !cg->getCurrentBlock()->isCold())\n             returnRegister = inlineStringHashCode(node, true, cg);\n \n          callInlined = (returnRegister != NULL);\n",
    "346e61f6a6f12e8b00cb8f6636e02a2e20e7c27d": "diff --git a/runtime/shared_common/CompositeCache.cpp b/runtime/shared_common/CompositeCache.cpp\nindex 2f87a2e74e2..1d67176cdda 100644\n--- a/runtime/shared_common/CompositeCache.cpp\n+++ b/runtime/shared_common/CompositeCache.cpp\n@@ -6809,6 +6809,8 @@ SH_CompositeCacheImpl::setExtraStartupHints(J9VMThread* currentThread, U_32 val)\n \t\treturn;\n \t}\n \tTrc_SHR_Assert_True(hasWriteMutex(currentThread));\n+\tunprotectHeaderReadWriteArea(currentThread, false);\n \t_theca->extraStartupHints = val;\n+\tprotectHeaderReadWriteArea(currentThread, false);\n \tTrc_SHR_CC_setExtraStartupHints_Event(currentThread, val);\n }\n",
    "94f4a9ea92860c84ddad61e0a912cf75327a5f94": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 9dcc30e3fbe..f527c8b27cc 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,8 +65,10 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-import jdk.internal.util.SystemProps;\n /*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n+/*[IF JAVA_SPEC_VERSION >= 17]*/\n+import jdk.internal.util.SystemProps;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -152,11 +154,8 @@ public final class System {\n \tprivate static final int sysPropID_OSEncoding = 3;\n \tprivate static String osEncoding;\n \n-\tprivate static final int sysPropID_DefaultTmpDir = 4;\n-\tprivate static String defaultTmpDir;\n-\n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n-\tprivate static final int sysPropID_zOSAutoConvert = 5;\n+\tprivate static final int sysPropID_zOSAutoConvert = 4;\n \tprivate static String zOSAutoConvert;\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n@@ -172,10 +171,6 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tprivate static String stdoutProp;\n-\tprivate static String stderrProp;\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -213,7 +208,6 @@ public final class System {\n \t\tif (osEncoding == null) {\n \t\t\tosEncoding = definedOSEncoding;\n \t\t}\n-\t\tdefaultTmpDir = getSysPropBeforePropertiesInitialized(sysPropID_DefaultTmpDir);\n \n \t\t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \t\t/* As part of better handling of JEP400 constraints on z/OS, the com.ibm.autocvt property\n@@ -236,7 +230,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = isStdout ? stdoutProp : stderrProp;\n+\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -279,20 +273,6 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tProperties props = internalGetProperties();\n-\t\t// If the user didn't set the encoding property, set it now.\n-\t\tif (FileDescriptor.out == desc) {\n-\t\t\tif (null == stdoutProp) {\n-\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} else if (FileDescriptor.err == desc) {\n-\t\t\tif (null == stderrProp) {\n-\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -323,12 +303,6 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n-\n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n-\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -389,9 +363,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -729,7 +703,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n+\tMap<String, String> initializedProperties = new HashMap<>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -741,9 +715,11 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -769,6 +745,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\tinitializedProperties.putAll(SystemProps.initProperties());\n+\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -779,43 +758,12 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n-\n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n-\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tif (null != stdoutProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tif (null == stdoutProp) {\n-\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stdoutProp) {\n-\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif (null != stderrProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n-\t\tif (null == stderrProp) { //$NON-NLS-1$\n-\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stderrProp) {\n-\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1088,6 +1036,7 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n+/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1097,13 +1046,14 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n+/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION >= 11]*/\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\n@@ -1320,18 +1270,8 @@ public static void setProperties(Properties p) {\n \n static void checkTmpDir() {\n \t/*[IF JAVA_SPEC_VERSION >= 20]*/\n-\tString tmpDir = internalGetProperties().getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$\n-\tif (!defaultTmpDir.equals(tmpDir)) {\n-\t\ttry {\n-\t\t\tField systemProps = SystemProps.class.getDeclaredField(\"customTmpdir\"); //$NON-NLS-1$\n-\t\t\tsystemProps.setAccessible(true);\n-\t\t\tsystemProps.set(null, tmpDir);\n-\t\t\tif (SystemProps.isBadIoTmpdir()) {\n-\t\t\t\tSystem.err.println(\"WARNING: java.io.tmpdir directory does not exist\"); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} catch (IllegalAccessException | NoSuchFieldException e) {\n-\t\t\tthrow new InternalError(e);\n-\t\t}\n+\tif (SystemProps.isBadIoTmpdir()) {\n+\t\tSystem.err.println(\"WARNING: java.io.tmpdir directory does not exist\"); //$NON-NLS-1$\n \t}\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n }\ndiff --git a/runtime/j9vm/j8vmi.c b/runtime/j9vm/j8vmi.c\nindex 5493899063b..9d4a398e928 100644\n--- a/runtime/j9vm/j8vmi.c\n+++ b/runtime/j9vm/j8vmi.c\n@@ -72,7 +72,6 @@ JVM_IsVMGeneratedMethodIx(JNIEnv *env, jclass cb, jint index) {\n \n /**\n  * Returns platform specific temporary directory used by the system.\n- * Same as getTmpDir() defined in jcl/unix/syshelp.c and jcl/win32/syshelp.c.\n  *\n  * @param [in] env Pointer to JNI environment.\n  *\n@@ -82,20 +81,10 @@ jstring JNICALL\n JVM_GetTemporaryDirectory(JNIEnv *env)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n-\tjstring result = NULL;\n-\tIDATA size = j9sysinfo_get_tmp(NULL, 0, TRUE);\n-\tif (0 <= size) {\n-\t\tchar *buffer = (char *)j9mem_allocate_memory(size, OMRMEM_CATEGORY_VM);\n-\t\tif (NULL == buffer) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tif (0 == j9sysinfo_get_tmp(buffer, size, TRUE)) {\n-\t\t\tresult = (*env)->NewStringUTF(env, buffer);\n-\t\t}\n-\n-\t\tj9mem_free_memory(buffer);\n-\t}\n-\n+\tchar *tempBuf = NULL;\n+\tchar *tempDir = getTmpDir(env, &tempBuf);\n+\tjstring result = (*env)->NewStringUTF(env, tempDir);\n+\tj9mem_free_memory(tempBuf);\n \treturn result;\n }\n \ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 3a61379b7d8..4da0ef86244 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,7 +1900,6 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\tassert(!\"JVM_GetProperties\");\n-\treturn NULL;\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/attach.c b/runtime/jcl/common/attach.c\nindex eacefb6e346..02a6fba1007 100644\n--- a/runtime/jcl/common/attach.c\n+++ b/runtime/jcl/common/attach.c\n@@ -26,8 +26,7 @@\n #include \"stackwalk.h\"\n #include \"jclglob.h\"\n #include \"jclprots.h\"\n-\n-extern char * getTmpDir(JNIEnv *env, char**envSpace);\n+#include \"util_api.h\"\n \n /**\n  * Test if the file is owned by this process's owner or the process is running as root.\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 048eede667f..3f04bbb521c 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,27 +44,7 @@\n #endif\n \n \n-\n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n-\n-\n-typedef struct {\n-\tint errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n-static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n-jobject getPropertyList(JNIEnv *env);\n-\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -93,7 +73,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n \n /**\n  * sysPropID\n@@ -172,12 +152,8 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \t\t}\n \t\tbreak;\n \n-\tcase 4: /* default value of java.io.tmpDir before any -D options */\n-\t\tsysPropValue = getTmpDir(env, &envSpace);\n-\t\tbreak;\n-\n #if defined(J9ZOS390) && (JAVA_SPEC_VERSION >= 21)\n-\tcase 5: /* com.ibm.autocvt setting on z/OS */\n+\tcase 4: /* com.ibm.autocvt setting on z/OS */\n \t\tsysPropValue = getDefinedArgumentFromJavaVMInitArgs(vmInitArgs, \"com.ibm.autocvt\");\n \t\tif (NULL == sysPropValue) {\n \t\t\t/* As part of better handling of JEP400 constraints on z/OS, the com.ibm.autocvt property\n@@ -203,10 +179,13 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n-jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n+#if JAVA_SPEC_VERSION < 17\n+jobjectArray JNICALL\n+Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn getPropertyList(env);\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n+#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -259,350 +238,6 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n-\n-jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i, nCommandLineDefines = 0;\n-\tjclass stringClass;\n-\tjarray args = NULL;\n-\tint propertyCount;\n-\n-\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (!stringClass) {\n-/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n-\t\treturn (jobject) 0;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = 0;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-/*\t\tprintf(\"\\nFailed to create arg array\");*/\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (defaultValues[i] == NULL) continue;\n-\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-/**\n- * @return 0 on success, -1 on error\n- */\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n-}\n-\n-jobject getPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-\tchar *propertyKey = NULL;\n-\tconst char * language = NULL;\n-\tconst char * region = NULL;\n-\tconst char * variant = NULL;\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n-\t * correct allocation.\n-\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n-\t * enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-#if defined(JCL_J2SE)\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n-\t * \twe consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#ifdef J9VM_ENV_DATA64\n-\tstrings[propIndex++] = \"64\";\n-#else\n-\tstrings[propIndex++] = \"32\";\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-/*\tDon't set this property as the class library will look here first and when\n-\tthere is a security manager you will get a security exception. The code\n-\tlooks in this package by default, see URLConnection.getContentHandler()\n-\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n-\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n-*/\n-\n-\t/*[PR 95709]*/\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tjclmem_free_memory(env, usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n-\n-static void JNICALL\n-systemPropertyIterator(char* key, char* value, void* userData)\n-{\n-\tCreateSystemPropertiesData * iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif ( iteratorData->errorOccurred ) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i=0; i < defaultCount; i+=2) {\n-\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i+1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\tTrc_JCL_systemPropertyIterator(env, key, value);\n-}\n-\n-\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex f4b04862ac0..14a9c80a9a0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,7 +350,6 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n-\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -434,6 +433,7 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n+\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,13 +599,18 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n+if(JAVA_SPEC_VERSION EQUAL 11)\n+\tomr_add_exports(jclse\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n+\t)\n+endif()\n+\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex c64230a9bb3..0ec24ba02d6 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex 626a197be7a..d844c63d9ba 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,5 +23,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n+\t\t<exclude-if condition=\"spec.java12\"/>\n+\t</export>\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex b8a780711eb..549a8712e3b 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,7 +249,9 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\" />\n+\t<export name=\"Java_java_lang_System_getPropertyList\">\n+\t\t<exclude-if condition=\"spec.java17\" />\n+\t</export>\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex d1f9ff46fb4..a1bae22f747 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,9 +41,6 @@\n #include \"atoe.h\"\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -63,159 +60,6 @@ char* CodepageTable[] = {\n #endif\n };\n \n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, the '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char**envSpace) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize;\n-\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n-\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\tif(*envSpace==NULL) return \".\";\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1)\n-\t\t\treturn *envSpace;\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tjclmem_free_memory(env,*envSpace);\n-\t\t*envSpace = NULL;\n-\t\t}\n-\tif (j9file_attr(P_tmpdir) > -1)\n-\t\treturn P_tmpdir;\n-\tif (j9file_attr(\"/tmp\") > -1)\n-\t\treturn \"/tmp\";\n-\treturn \".\";\n-}\n-\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-\tchar userdir[EsMaxPath] = {0};\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (charResult == NULL) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n-#endif\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tjclmem_free_memory(env,envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tjclmem_free_memory(env, homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex c6adf96b6a4..7bd081a6614 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,139 +43,11 @@\n #include <VersionHelpers.h>\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir(JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize;\n-\tchar *envSpace = NULL, *tempdir = NULL;\n-\tjobject result;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i;\n-\tchar userdir[EsMaxPath];\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process, token;\n-\tUDATA handle;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-#if !defined(JCL_J2SE)\n-\tUINT codePage;\n-\tchar codePageBuf[32];\n-\tCPINFO cpInfo;\n-#endif\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\t\tif(!envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\t/* Jazz 52075 JCL_J2SE is always true */\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tif (tempdir) jclmem_free_memory(env,tempdir);\n-\tif (envSpace) jclmem_free_memory(env,envSpace);\n-\treturn result;\n-}\n-\n-\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -228,11 +100,7 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n-#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n-#else\n-\t\tcodepage[1] = 'P';\n-#endif\n \t}\n \n \treturn codepage;\n@@ -246,64 +114,3 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n-\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char * getTmpDir(JNIEnv *env, char **tempdir) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\tDWORD rc;\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\n-\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\t/* If the function succeeds, the return value is the number of characters stored into \n-\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n-\tthe return value will exceed the length parameter (i.e. the required size)\n-\t*/\n-\n-\tif((rc != 0) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif(rc != 0) {\n-\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n-\t\t\tif(NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n-\t\t\t\tif(rc == 0) {\n-\t\t\t\t\tjclmem_free_memory(env, buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-I_32\n-convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex a7912fb5583..ba13180f677 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,20 +580,16 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 21495596345..73e295f0128 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,3 +2430,21 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+# END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 063b95bba56..0dd1b5dd065 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5352,6 +5352,7 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tjobjectArray (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex e35676d0fae..03527a43384 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,11 +190,13 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -800,10 +802,6 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32\n-convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir (JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -812,8 +810,6 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n-char * getTmpDir (JNIEnv *env, char**envSpace);\n-jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 8cbe8e3aeb3..9e605c155c3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,6 +2665,12 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n+/* ---------------- filehelp.c ---------------- */\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex f8247aa7ca7..a9f574f77d2 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,6 +4335,14 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray getSystemPropertyList(JNIEnv *env);\n+\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 394304ae25e..1487fb806a7 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,6 +116,12 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n+if(OMR_OS_WINDOWS)\n+\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n+else()\n+\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n+endif()\n+\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex 9e00e0836ea..c246c3bd583 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,6 +50,12 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\nnew file mode 100644\nindex 00000000000..343fbff4ecc\n--- /dev/null\n+++ b/runtime/util/unix/filehelp.c\n@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **envSpace)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n+\tif (envSize > 0) {\n+\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == *envSpace) {\n+\t\t\treturn \".\";\n+\t\t}\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1) {\n+\t\t\treturn *envSpace;\n+\t\t}\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tj9mem_free_memory(*envSpace);\n+\t\t*envSpace = NULL;\n+\t}\n+\tif (j9file_attr(P_tmpdir) > -1) {\n+\t\treturn P_tmpdir;\n+\t}\n+\tif (j9file_attr(\"/tmp\") > -1) {\n+\t\treturn \"/tmp\";\n+\t}\n+\treturn \".\";\n+}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\nnew file mode 100644\nindex 00000000000..55b241301c0\n--- /dev/null\n+++ b/runtime/util/win32/filehelp.c\n@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <windows.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **tempdir)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\tif ((0 != rc) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif (0 != rc) {\n+\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n+\t\t\t\tif (0 == rc) {\n+\t\t\t\t\tj9mem_free_memory(buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex cf7e9afdea2..5fe0a7e6a9c 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -486,4 +486,5 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex 5447aeb934d..c7d04229b2a 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,3 +1017,5 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n+\n+TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 74f0f9327ec..5e4db9c54c3 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,6 +20,13 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n+#if defined(WIN32)\n+#include <windows.h>\n+#else /* defined(WIN32) */\n+#include <pwd.h>\n+#include <unistd.h>\n+#endif /* defined(WIN32) */\n+\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -32,24 +39,28 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n+#if defined(J9ZOS390)\n+#include \"atoe.h\"\n+#endif /* defined(J9ZOS390) */\n+\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n+static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n+static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM * vm);\n+static UDATA addModularitySystemProperties(J9JavaVM *vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -168,7 +179,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -315,7 +326,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -461,7 +472,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM * vm)\n+addModularitySystemProperties(J9JavaVM *vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -559,7 +570,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -586,7 +597,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM * vm)\n+initializeSystemProperties(J9JavaVM *vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -595,22 +606,22 @@ initializeSystemProperties(J9JavaVM * vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char* propValue = NULL;\n+\tconst char *propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n+\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n+\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -621,7 +632,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n+\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n+\tif (NULL == vm->systemProperties) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -632,7 +644,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t}\n \n-\tif (JAVA_SPEC_VERSION == 8) {\n+\tif (8 == JAVA_SPEC_VERSION) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -656,7 +668,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (JAVA_SPEC_VERSION == 8) {\n+\t\tif (8 == JAVA_SPEC_VERSION) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -746,14 +758,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_NAME) */\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_VERSION) */\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -766,9 +778,9 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else\n+#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \tpropValue = \"..\";\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -796,12 +808,12 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) */\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (pathSep == NULL) {\n+\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (NULL == pathSep) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -911,16 +923,16 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \n-\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n+\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (propValue == NULL) {\n+\t\t\tif (NULL == propValue) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -970,7 +982,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n+\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1024,8 +1036,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n-\t\t\tchar *defaultEndorsedDir =  NULL;\n+\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n+\t\t\tchar *defaultEndorsedDir = NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1117,14 +1129,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \n \n void\n-freeSystemProperties(J9JavaVM * vm)\n+freeSystemProperties(J9JavaVM *vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (property != NULL) {\n+\t\twhile (NULL != property) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1145,13 +1157,13 @@ freeSystemProperties(J9JavaVM * vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n+getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (property != NULL) {\n-\t\tif (strcmp(property->name, name) == 0) {\n+\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (NULL != property) {\n+\t\tif (0 == strcmp(property->name, name)) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1174,21 +1186,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n+addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char*)propName;\n-\tnewProp->value = (char*)propValue;\n+\tnewProp->name = (char *)propName;\n+\tnewProp->value = (char *)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1210,7 +1222,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (strcmp(property->name, \"java.home\") == 0) {\n+\t\tif (0 == strcmp(property->name, \"java.home\")) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1218,7 +1230,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n }\n \n UDATA\n-setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n+setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1230,7 +1242,7 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar * copiedValue = copyToMem(vm, value);\n+\t\tchar *copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1249,12 +1261,12 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8*\n-unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n+static U_8 *\n+unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16* unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n-\tconst char *cursor;\n+\tU_16 *unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n+\tconst char *cursor = NULL;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1267,7 +1279,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1275,7 +1287,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n+\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1317,14 +1329,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n-\t\t\t\t\t(char*)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\t\t\t\t\t(char *)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1361,8 +1373,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n-\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n+\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1433,3 +1445,647 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n+\n+/**\n+ * @return JNI_FALSE on success, JNI_TRUE on error\n+ */\n+static jboolean\n+propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn (*env)->ExceptionCheck(env);\n+}\n+\n+typedef struct {\n+\tjboolean errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+static void JNICALL\n+systemPropertyIterator(char *key, char *value, void *userData)\n+{\n+\tCreateSystemPropertiesData *iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i = 0;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif (iteratorData->errorOccurred) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i = 0; i < defaultCount; i += 2) {\n+\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i + 1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\tTrc_systemPropertyIterator(env, key, value);\n+}\n+\n+jobject\n+createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i = 0;\n+\tjint nCommandLineDefines = 0;\n+\tjarray args = NULL;\n+\tint propertyCount = 0;\n+\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (NULL == stringClass) {\n+\t\treturn NULL;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (0 != propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = JNI_FALSE;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (NULL == defaultValues[i]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+#if defined(WIN32)\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+static I_32\n+convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize = 0;\n+\tchar *envSpace = NULL;\n+\tchar *tempdir = NULL;\n+\tjobject result = NULL;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i = 0;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath];\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process = 0;\n+\tHANDLE token = 0;\n+\tUDATA handle = 0;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == envSpace) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\tstrings[propIndex++] = envSpace;\n+\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tj9mem_free_memory(tempdir);\n+\tj9mem_free_memory(envSpace);\n+\treturn result;\n+}\n+\n+#else /* defined(WIN32) */\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath] = {0};\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif /* defined(J9ZOS390) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (NULL == charResult) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* There exist situations where one of the above calls will fail.\n+\t * Fall through to the Unix solution for those cases.\n+\t */\n+#endif /* defined(J9ZOS390) */\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tj9mem_free_memory(envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tj9mem_free_memory(homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n+#endif /* defined(WIN32) */\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray\n+getSystemPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+#if JAVA_SPEC_VERSION < 17\n+\tchar *propertyKey = NULL;\n+\tconst char *language = NULL;\n+\tconst char *region = NULL;\n+\tconst char *variant = NULL;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n+\t * 2 * number of property keys is the correct allocation. Also note the call to\n+\t * addSystemProperties below, which may add some configuration-specific properties.\n+\t * Be sure to leave enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n+\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n+\t * registration of signal handlers for what we consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals.\n+\t */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#if defined(J9VM_ENV_DATA64)\n+\tstrings[propIndex++] = \"64\";\n+#else /* defined(J9VM_ENV_DATA64) */\n+\tstrings[propIndex++] = \"32\";\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tj9mem_free_memory(usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\ndiff --git a/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml b/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\nindex 61cf36f8be9..0997bd516ae 100644\n--- a/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\n+++ b/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\n@@ -26,9 +26,9 @@\n \n <suite id=\"PageAlignDirectMemory Command-Line Option Tests\" timeout=\"2400\">\n \n- <variable name=\"SUNPROP_TRUE\" value=\"j9jcl.352      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='true'\" />\n- <variable name=\"SUNPROP_FALSE\" value=\"j9jcl.352      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='false'\" />\n- <variable name=\"CLASS\" value=\"-Xtrace:print={j9jcl.352} -cp $Q$$RESJAR$$Q$ SystemProperties\" />\n+ <variable name=\"SUNPROP_TRUE\" value=\"j9vm.791      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='true'\" />\n+ <variable name=\"SUNPROP_FALSE\" value=\"j9vm.791      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='false'\" />\n+ <variable name=\"CLASS\" value=\"-Xtrace:print={j9vm.791} -cp $Q$$RESJAR$$Q$ SystemProperties\" />\n \n  <variable name=\"ALIGNED\" value=\"-XX:+PageAlignDirectMemory\" />\n  <variable name=\"UNALIGNED\" value=\"-XX:-PageAlignDirectMemory\" />\n",
    "df442101547c9d76bb3b275662455f65048ac142": "diff --git a/runtime/compiler/control/CompilationThread.cpp b/runtime/compiler/control/CompilationThread.cpp\nindex 8d4fe887155..e4ce8d39154 100644\n--- a/runtime/compiler/control/CompilationThread.cpp\n+++ b/runtime/compiler/control/CompilationThread.cpp\n@@ -2769,7 +2769,7 @@ void TR::CompilationInfo::resumeCompilationThread()\n       TR_ASSERT(curCompThreadInfoPT, \"a thread's compinfo is missing\\n\");\n \n       TR_YesNoMaybe activate = shouldActivateNewCompThread();\n-      if (activate == TR_no)\n+      if (activate == TR_no || (activate == TR_maybe && _queueWeight == 0))\n          break;\n \n       curCompThreadInfoPT->resumeCompilationThread();\n",
    "e6e2efd8532b681f4dbab0af408196505e9f9183": "diff --git a/runtime/compiler/control/JITServerCompilationThread.cpp b/runtime/compiler/control/JITServerCompilationThread.cpp\nindex 982e68712cf..b498301c9d1 100644\n--- a/runtime/compiler/control/JITServerCompilationThread.cpp\n+++ b/runtime/compiler/control/JITServerCompilationThread.cpp\n@@ -804,34 +804,14 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n \n       // At this point I know that all preceeding requests have been processed\n       // and only one thread with critical information can ever be present in this section\n-      if (!clientSession->cachesAreCleared())\n-         {\n-         // Free data for all classes that were unloaded for this sequence number\n-         // Redefined classes are marked as unloaded, since they need to be cleared\n-         // from the ROM class cache.\n-         if (!unloadedClasses.empty())\n-            {\n-            clientSession->processUnloadedClasses(unloadedClasses, true); // this locks getROMMapMonitor()\n-            }\n-\n-         if (!illegalModificationList.empty())\n-            {\n-            clientSession->processIllegalFinalFieldModificationList(illegalModificationList); // this locks getROMMapMonitor()\n-            }\n+      bool initializedCHTable = false;\n \n-         // Process the CHTable updates in order\n-         // Note that applying the updates will acquire the CHTable monitor and VMAccess\n-         if ((!chtableUnloads.empty() || !chtableMods.empty())\n-             && !serverDetails->isJitDumpMethod())\n-            {\n-            auto chTable = (JITServerPersistentCHTable*)clientSession->getCHTable(); // Will create CHTable if it doesn't exist\n-            TR_ASSERT_FATAL(chTable->isInitialized(), \"CHTable must have been initialized for clientUID=%llu\", (unsigned long long)clientId);\n-            chTable->doUpdate(_vm, chtableUnloads, chtableMods);\n-            }\n-         }\n-      else // Internal caches are empty\n+      // Check first without acquring the monitor\n+      if (clientSession->cachesAreCleared())\n          {\n          OMR::CriticalSection cs(clientSession->getCacheInitMonitor());\n+\n+         // Internal caches are empty\n          if (clientSession->cachesAreCleared())\n             {\n             if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n@@ -861,6 +841,34 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n                   getCompThreadId(), (unsigned long long)clientId, serializedCHTable.size());\n             chTable->initializeCHTable(_vm, serializedCHTable);\n             clientSession->setCachesAreCleared(false);\n+            initializedCHTable = true;\n+            }\n+         }\n+\n+      TR_ASSERT_FATAL(!clientSession->cachesAreCleared(), \"Client Session caches should not be cleared at this point for clientUID=%llu\", (unsigned long long)clientId);\n+      if (!initializedCHTable)\n+         {\n+         // Free data for all classes that were unloaded for this sequence number\n+         // Redefined classes are marked as unloaded, since they need to be cleared\n+         // from the ROM class cache.\n+         if (!unloadedClasses.empty())\n+            {\n+            clientSession->processUnloadedClasses(unloadedClasses, true); // this locks getROMMapMonitor()\n+            }\n+\n+         if (!illegalModificationList.empty())\n+            {\n+            clientSession->processIllegalFinalFieldModificationList(illegalModificationList); // this locks getROMMapMonitor()\n+            }\n+\n+         // Process the CHTable updates in order\n+         // Note that applying the updates will acquire the CHTable monitor and VMAccess\n+         if ((!chtableUnloads.empty() || !chtableMods.empty())\n+             && !serverDetails->isJitDumpMethod())\n+            {\n+            auto chTable = (JITServerPersistentCHTable*)clientSession->getCHTable(); // Will create CHTable if it doesn't exist\n+            TR_ASSERT_FATAL(chTable->isInitialized(), \"CHTable must have been initialized for clientUID=%llu\", (unsigned long long)clientId);\n+            chTable->doUpdate(_vm, chtableUnloads, chtableMods);\n             }\n          }\n \n",
    "b281c110bf3b299b975c56a61661be342dff9dec": "diff --git a/runtime/shared_common/CompositeCache.cpp b/runtime/shared_common/CompositeCache.cpp\nindex 2f87a2e74e2..1d67176cdda 100644\n--- a/runtime/shared_common/CompositeCache.cpp\n+++ b/runtime/shared_common/CompositeCache.cpp\n@@ -6809,6 +6809,8 @@ SH_CompositeCacheImpl::setExtraStartupHints(J9VMThread* currentThread, U_32 val)\n \t\treturn;\n \t}\n \tTrc_SHR_Assert_True(hasWriteMutex(currentThread));\n+\tunprotectHeaderReadWriteArea(currentThread, false);\n \t_theca->extraStartupHints = val;\n+\tprotectHeaderReadWriteArea(currentThread, false);\n \tTrc_SHR_CC_setExtraStartupHints_Event(currentThread, val);\n }\n",
    "7cba308722d8fc6e492c26a82c282d87b6ca24f4": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 120266634ff..727b167c8df 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -7479,7 +7479,8 @@ static void handleOffHeapDataForArrays(\n \n       TR::Register *discontiguousDataAddrOffsetReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, discontiguousDataAddrOffsetReg, discontiguousDataAddrOffsetReg, cg);\n-      generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 1, cg);\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      generateRegImmInstruction(TR::InstOpCode::CMP4RegImm4, node, sizeReg, 1, cg);\n       generateRegImmInstruction(TR::InstOpCode::ADCRegImm4(), node, discontiguousDataAddrOffsetReg, 0, cg);\n \n       dataAddrMR = generateX86MemoryReference(targetReg, discontiguousDataAddrOffsetReg, 3, TR::Compiler->om.contiguousArrayHeaderSizeInBytes(), cg);\n@@ -7490,7 +7491,8 @@ static void handleOffHeapDataForArrays(\n       // Clear out tempReg if dealing with 0 length array\n       zeroReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, zeroReg, zeroReg, cg);\n-      generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 0, cg);\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n       generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n       srm->reclaimScratchRegister(zeroReg);\n \n@@ -7534,7 +7536,8 @@ static void handleOffHeapDataForArrays(\n          // Clear out tempReg if dealing with 0 length array\n          zeroReg = srm->findOrCreateScratchRegister();\n          generateRegRegInstruction(TR::InstOpCode::XORRegReg(), node, zeroReg, zeroReg, cg);\n-         generateRegImmInstruction(TR::InstOpCode::CMPRegImm4(), node, sizeReg, 0, cg);\n+         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+         generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n          generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n          srm->reclaimScratchRegister(zeroReg);\n          }\ndiff --git a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\nindex e7e7061dd55..907eaec7daf 100644\n--- a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n@@ -11045,7 +11045,10 @@ J9::Z::TreeEvaluator::VMnewEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n \n                TR::Register *offsetReg = cg->allocateRegister();\n                iCursor = generateRRInstruction(cg, TR::InstOpCode::getXORRegOpCode(), node, offsetReg, offsetReg, iCursor);\n-               iCursor = generateRILInstruction(cg, TR::InstOpCode::getCmpImmOpCode(), node, enumReg, 0, iCursor);\n+               /* Use 32 bit compare because the upper half can either be NULL/garbage/J9class pointer\n+                * and array size should always be in 32-63 bits of enumReg.\n+                */\n+               iCursor = generateRIInstruction(cg, TR::InstOpCode::CHI, node, enumReg, 0, iCursor);\n \n                // Load address of first array element\n                iCursor = generateRXInstruction(cg,\n",
    "5eb8d0f4fafbba4381f0ff29a49166deda38f15c": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex 6bbda520e67..ffba4ccdeb3 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -65,8 +65,10 @@\n \n /*[IF JAVA_SPEC_VERSION >= 20]*/\n import java.lang.reflect.Field;\n-import jdk.internal.util.SystemProps;\n /*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n+/*[IF JAVA_SPEC_VERSION >= 17]*/\n+import jdk.internal.util.SystemProps;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n /*[IF JAVA_SPEC_VERSION >= 24]*/\n import java.net.URL;\n@@ -152,11 +154,8 @@ public final class System {\n \tprivate static final int sysPropID_OSEncoding = 3;\n \tprivate static String osEncoding;\n \n-\tprivate static final int sysPropID_DefaultTmpDir = 4;\n-\tprivate static String defaultTmpDir;\n-\n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n-\tprivate static final int sysPropID_zOSAutoConvert = 5;\n+\tprivate static final int sysPropID_zOSAutoConvert = 4;\n \tprivate static String zOSAutoConvert;\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n@@ -172,10 +171,6 @@ public final class System {\n \t */\n \tprivate static Charset consoleDefaultCharset;\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tprivate static String stdoutProp;\n-\tprivate static String stderrProp;\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \n /*[IF JAVA_SPEC_VERSION >= 9]*/\n \tstatic java.lang.ModuleLayer\tbootLayer;\n@@ -213,7 +208,6 @@ public final class System {\n \t\tif (osEncoding == null) {\n \t\t\tosEncoding = definedOSEncoding;\n \t\t}\n-\t\tdefaultTmpDir = getSysPropBeforePropertiesInitialized(sysPropID_DefaultTmpDir);\n \n \t\t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \t\t/* As part of better handling of JEP400 constraints on z/OS, the com.ibm.autocvt property\n@@ -236,7 +230,7 @@ public final class System {\n \t */\n \tstatic Charset getCharset(boolean isStdout, boolean fallback) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tString primary = isStdout ? stdoutProp : stderrProp;\n+\t\tString primary = internalGetProperties().getProperty(isStdout ? \"stdout.encoding\" : \"stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ELSE] JAVA_SPEC_VERSION >= 19 */\n \t\tString primary = internalGetProperties().getProperty(isStdout ? \"sun.stdout.encoding\" : \"sun.stderr.encoding\"); //$NON-NLS-1$  //$NON-NLS-2$\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n@@ -279,20 +273,6 @@ static PrintStream createConsole(FileDescriptor desc, Charset charset) {\n \t\tBufferedOutputStream bufStream = new BufferedOutputStream(new FileOutputStream(desc));\n \t\tCharset consoleCharset = charset == null ? consoleDefaultCharset : charset;\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\tProperties props = internalGetProperties();\n-\t\t// If the user didn't set the encoding property, set it now.\n-\t\tif (FileDescriptor.out == desc) {\n-\t\t\tif (null == stdoutProp) {\n-\t\t\t\tprops.put(\"stdout.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} else if (FileDescriptor.err == desc) {\n-\t\t\tif (null == stderrProp) {\n-\t\t\t\tprops.put(\"stderr.encoding\", consoleCharset.name()); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t\t/*[IF PLATFORM-mz31 | PLATFORM-mz64]*/\n \t\treturn ConsolePrintStream.localize(bufStream, true, consoleCharset);\n \t\t/*[ELSE]*/\n@@ -323,12 +303,6 @@ static void finalizeConsoleEncoding() {\n \t\t\t\tsetOut(createConsole(FileDescriptor.out, stdoutCharset));\n \t\t\t}\n \t\t}\n-\n-\t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\t\t// Cache the final system property values so they can be restored if ensureProperties(false) is called.\n-\t\tstdoutProp = systemProperties.getProperty(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tstderrProp = systemProperties.getProperty(\"stderr.encoding\"); //$NON-NLS-1$\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n \t}\n \t/*[ELSE]*/\n \t/*[IF Sidecar18-SE-OpenJ9]*/\n@@ -389,9 +363,9 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION >= 11]*/\n+\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n \t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n@@ -729,7 +703,7 @@ private static void ensureProperties(boolean isInitialization) {\n /*[ENDIF] OpenJ9-RawBuild */\n \n /*[IF JAVA_SPEC_VERSION > 11]*/\n-\tMap<String, String> initializedProperties = new Hashtable<String, String>();\n+\tMap<String, String> initializedProperties = new HashMap<>();\n /*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n /*[ENDIF] JAVA_SPEC_VERSION > 11 */\n@@ -741,9 +715,11 @@ private static void ensureProperties(boolean isInitialization) {\n \tif (osEncoding != null) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n-\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n@@ -769,6 +745,9 @@ private static void ensureProperties(boolean isInitialization) {\n \tinitializedProperties.put(\"jfr.unsupported.vm\", \"true\"); //$NON-NLS-1$ //$NON-NLS-2$\n \t/*[ENDIF] JFR_SUPPORT */\n \n+\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n+\tinitializedProperties.putAll(SystemProps.initProperties());\n+\t/*[ELSE] JAVA_SPEC_VERSION >= 17 */\n \tString[] list = getPropertyList();\n \tfor (int i = 0; i < list.length; i += 2) {\n \t\tString key = list[i];\n@@ -779,43 +758,12 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n-\n-\t/*[IF JAVA_SPEC_VERSION >= 17]*/\n-\t/* Set native.encoding after setting all the defined properties, it can't be modified by using -D on the command line */\n-\tinitializedProperties.put(\"native.encoding\", platformEncoding); //$NON-NLS-1$\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n \tinitializedProperties.put(\"com.ibm.autocvt\", zOSAutoConvert); //$NON-NLS-1$\n \t/*[ENDIF] (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64) */\n \n-\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n-\tif (null != stdoutProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstdoutProp = initializedProperties.get(\"stdout.encoding\"); //$NON-NLS-1$\n-\t\tif (null == stdoutProp) {\n-\t\t\tstdoutProp = initializedProperties.get(\"sun.stdout.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stdoutProp) {\n-\t\t\t\tinitializedProperties.put(\"stdout.encoding\", stdoutProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif (null != stderrProp) {\n-\t\t// Reinitialize required properties if ensureProperties(false) is called.\n-\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t} else {\n-\t\tstderrProp = initializedProperties.get(\"stderr.encoding\");\n-\t\tif (null == stderrProp) { //$NON-NLS-1$\n-\t\t\tstderrProp = initializedProperties.get(\"sun.stderr.encoding\"); //$NON-NLS-1$\n-\t\t\tif (null != stderrProp) {\n-\t\t\t\tinitializedProperties.put(\"stderr.encoding\", stderrProp); //$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\t/*[ENDIF] JAVA_SPEC_VERSION >= 19 */\n-\n \t/* java.lang.VersionProps.init() eventually calls into System.setProperty() where propertiesInitialized needs to be true */\n \tpropertiesInitialized = true;\n \n@@ -1087,6 +1035,7 @@ public static String setProperty(String prop, String value) {\n \treturn (String)systemProperties.setProperty(prop, value);\n }\n \n+/*[IF JAVA_SPEC_VERSION < 17]*/\n /**\n  * Answers an array of Strings containing key..value pairs\n  * (in consecutive array elements) which represent the\n@@ -1096,13 +1045,14 @@ public static String setProperty(String prop, String value) {\n  * @return\t\tthe default values for the system properties.\n  */\n private static native String [] getPropertyList();\n+/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION >= 11]*/\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n /**\n  * Invoke JCL native to initialize platform encoding explicitly.\n  */\n private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION >= 11 */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * Before propertiesInitialized is set to true,\n@@ -1319,18 +1269,8 @@ public static void setProperties(Properties p) {\n \n static void checkTmpDir() {\n \t/*[IF JAVA_SPEC_VERSION >= 20]*/\n-\tString tmpDir = internalGetProperties().getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$\n-\tif (!defaultTmpDir.equals(tmpDir)) {\n-\t\ttry {\n-\t\t\tField systemProps = SystemProps.class.getDeclaredField(\"customTmpdir\"); //$NON-NLS-1$\n-\t\t\tsystemProps.setAccessible(true);\n-\t\t\tsystemProps.set(null, tmpDir);\n-\t\t\tif (SystemProps.isBadIoTmpdir()) {\n-\t\t\t\tSystem.err.println(\"WARNING: java.io.tmpdir directory does not exist\"); //$NON-NLS-1$\n-\t\t\t}\n-\t\t} catch (IllegalAccessException | NoSuchFieldException e) {\n-\t\t\tthrow new InternalError(e);\n-\t\t}\n+\tif (SystemProps.isBadIoTmpdir()) {\n+\t\tSystem.err.println(\"WARNING: java.io.tmpdir directory does not exist\"); //$NON-NLS-1$\n \t}\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 20 */\n }\ndiff --git a/runtime/j9vm/j8vmi.c b/runtime/j9vm/j8vmi.c\nindex 5493899063b..9d4a398e928 100644\n--- a/runtime/j9vm/j8vmi.c\n+++ b/runtime/j9vm/j8vmi.c\n@@ -72,7 +72,6 @@ JVM_IsVMGeneratedMethodIx(JNIEnv *env, jclass cb, jint index) {\n \n /**\n  * Returns platform specific temporary directory used by the system.\n- * Same as getTmpDir() defined in jcl/unix/syshelp.c and jcl/win32/syshelp.c.\n  *\n  * @param [in] env Pointer to JNI environment.\n  *\n@@ -82,20 +81,10 @@ jstring JNICALL\n JVM_GetTemporaryDirectory(JNIEnv *env)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n-\tjstring result = NULL;\n-\tIDATA size = j9sysinfo_get_tmp(NULL, 0, TRUE);\n-\tif (0 <= size) {\n-\t\tchar *buffer = (char *)j9mem_allocate_memory(size, OMRMEM_CATEGORY_VM);\n-\t\tif (NULL == buffer) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tif (0 == j9sysinfo_get_tmp(buffer, size, TRUE)) {\n-\t\t\tresult = (*env)->NewStringUTF(env, buffer);\n-\t\t}\n-\n-\t\tj9mem_free_memory(buffer);\n-\t}\n-\n+\tchar *tempBuf = NULL;\n+\tchar *tempDir = getTmpDir(env, &tempBuf);\n+\tjstring result = (*env)->NewStringUTF(env, tempDir);\n+\tj9mem_free_memory(tempBuf);\n \treturn result;\n }\n \ndiff --git a/runtime/j9vm/java11vmi.c b/runtime/j9vm/java11vmi.c\nindex 3a61379b7d8..4da0ef86244 100644\n--- a/runtime/j9vm/java11vmi.c\n+++ b/runtime/j9vm/java11vmi.c\n@@ -1900,7 +1900,6 @@ JVM_IsUseContainerSupport(void)\n JNIEXPORT jobjectArray JNICALL\n JVM_GetProperties(JNIEnv *env)\n {\n-\tassert(!\"JVM_GetProperties\");\n-\treturn NULL;\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n #endif /* JAVA_SPEC_VERSION >= 17 */\ndiff --git a/runtime/jcl/common/attach.c b/runtime/jcl/common/attach.c\nindex eacefb6e346..02a6fba1007 100644\n--- a/runtime/jcl/common/attach.c\n+++ b/runtime/jcl/common/attach.c\n@@ -26,8 +26,7 @@\n #include \"stackwalk.h\"\n #include \"jclglob.h\"\n #include \"jclprots.h\"\n-\n-extern char * getTmpDir(JNIEnv *env, char**envSpace);\n+#include \"util_api.h\"\n \n /**\n  * Test if the file is owned by this process's owner or the process is running as root.\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 048eede667f..3f04bbb521c 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -44,27 +44,7 @@\n #endif\n \n \n-\n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n-\n-\n-typedef struct {\n-\tint errorOccurred;\n-\tjobject args;\n-\tjint nCommandLineDefines;\n-\tJNIEnv *env;\n-\tconst char **defaultValues;\n-\tint defaultCount;\n-\tjclass stringClass;\n-} CreateSystemPropertiesData;\n-\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value);\n-static void JNICALL systemPropertyIterator(char* key, char* value, void* userData);\n-jobject getPropertyList(JNIEnv *env);\n-\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL\n Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n {\n@@ -93,7 +73,7 @@ Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n \t\t}\n \t}\n }\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n \n /**\n  * sysPropID\n@@ -172,12 +152,8 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \t\t}\n \t\tbreak;\n \n-\tcase 4: /* default value of java.io.tmpDir before any -D options */\n-\t\tsysPropValue = getTmpDir(env, &envSpace);\n-\t\tbreak;\n-\n #if defined(J9ZOS390) && (JAVA_SPEC_VERSION >= 21)\n-\tcase 5: /* com.ibm.autocvt setting on z/OS */\n+\tcase 4: /* com.ibm.autocvt setting on z/OS */\n \t\tsysPropValue = getDefinedArgumentFromJavaVMInitArgs(vmInitArgs, \"com.ibm.autocvt\");\n \t\tif (NULL == sysPropValue) {\n \t\t\t/* As part of better handling of JEP400 constraints on z/OS, the com.ibm.autocvt property\n@@ -203,10 +179,13 @@ Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass\n \treturn result;\n }\n \n-jobject JNICALL Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n+#if JAVA_SPEC_VERSION < 17\n+jobjectArray JNICALL\n+Java_java_lang_System_getPropertyList(JNIEnv *env, jclass clazz)\n {\n-\treturn getPropertyList(env);\n+\treturn ((J9VMThread *)env)->javaVM->internalVMFunctions->getSystemPropertyList(env);\n }\n+#endif /* JAVA_SPEC_VERSION < 17 */\n \n jstring JNICALL Java_java_lang_System_mapLibraryName(JNIEnv * env, jclass unusedClass, jstring inName)\n {\n@@ -259,350 +238,6 @@ void JNICALL Java_java_lang_System_setFieldImpl(JNIEnv * env, jclass cls, jstrin\n \t(*env)->SetStaticObjectField(env, cls, descriptorFID, stream);\n }\n \n-\n-jobject createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n-{\n-\tVMI_ACCESS_FROM_ENV(env);\n-\n-\tjint i, nCommandLineDefines = 0;\n-\tjclass stringClass;\n-\tjarray args = NULL;\n-\tint propertyCount;\n-\n-\tstringClass = (*env)->FindClass(env, \"java/lang/String\");\n-\tif (!stringClass) {\n-/*\t\tprintf(\"\\nFailed to find class java/lang/String\");*/\n-\t\treturn (jobject) 0;\n-\t}\n-\n-\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n-\tif (propertyCount) {\n-\t\tCreateSystemPropertiesData iteratorData;\n-\n-\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n-\t\tif (NULL == args) {\n-\t\t\treturn NULL;\n-\t\t}\n-\n-\t\titeratorData.errorOccurred = 0;\n-\t\titeratorData.args = args;\n-\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n-\t\titeratorData.env = env;\n-\t\titeratorData.defaultValues = defaultValues;\n-\t\titeratorData.defaultCount = defaultCount;\n-\n-\t\titeratorData.stringClass = stringClass;\n-\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n-\t\tif (iteratorData.errorOccurred) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n-\t}\n-\n-\tif (NULL == args) {\n-\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n-\t}\n-\tif (NULL == args) {\n-/*\t\tprintf(\"\\nFailed to create arg array\");*/\n-\t\treturn NULL;\n-\t}\n-\n-\tfor (i = 0; i < defaultCount; ++i) {\n-\t\tif (defaultValues[i] == NULL) continue;\n-\t\tif (-1 == propertyListAddString( env, args, nCommandLineDefines, defaultValues[i]) ) {\n-\t\t\treturn NULL;\n-\t\t}\n-\t\tnCommandLineDefines++;\n-\t}\n-\n-\treturn args;\n-}\n-\n-/**\n- * @return 0 on success, -1 on error\n- */\n-jint propertyListAddString( JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n-{\n-\t/* String must be well-formed modified UTF-8 */\n-\tjobject str = (*env)->NewStringUTF(env, value);\n-\tif (NULL != str) {\n-\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n-\t}\n-\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n-\treturn ((*env)->ExceptionCheck(env) == JNI_TRUE) ? -1 : 0;\n-}\n-\n-jobject getPropertyList(JNIEnv *env)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tint propIndex = 0;\n-\tjobject propertyList = NULL;\n-#define PROPERTY_COUNT 137\n-\tchar *propertyKey = NULL;\n-\tconst char * language = NULL;\n-\tconst char * region = NULL;\n-\tconst char * variant = NULL;\n-\tconst char *strings[PROPERTY_COUNT] = {0};\n-#define USERNAME_LENGTH 128\n-\tchar username[USERNAME_LENGTH] = {0};\n-\tchar *usernameAlloc = NULL;\n-\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n-\tchar maxDirectMemBuff[24] = {0};\n-\tIDATA result = 0;\n-\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *javaVM = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n-\n-\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n-\t * then follow the propIndex++ convention and consume 2 * slots for each property. 2 * number of property keys is the\n-\t * correct allocation.\n-\t * Also note the call to addSystemProperties below, which may add some configuration-specific properties.  Be sure to leave\n-\t * enough room in the property list for all possibilities.\n-\t */\n-\n-\tif (J9_GC_POLICY_METRONOME == (javaVM->omrVM->gcPolicy)) {\n-\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n-\t\tstrings[propIndex++] = \"soft\";\n-\t}\n-\n-#if defined(J9VM_OPT_SHARED_CLASSES)\n-\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n-\tif ((NULL != javaVM->sharedClassConfig)\n-\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n-\t) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-#if defined(JCL_J2SE)\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n-\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n-\t\tstrings[propIndex++] = \"false\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"true\";\n-\t}\n-\n-\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the registration of signal handlers for what\n-\t * \twe consider to be asynchronous signals.\n-\t * The JCLs do not install handlers for any synchronous signals */\n-\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n-\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n-\t\tstrings[propIndex++] = \"true\";\n-\t} else {\n-\t\tstrings[propIndex++] = \"false\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n-#ifdef J9VM_ENV_DATA64\n-\tstrings[propIndex++] = \"64\";\n-#else\n-\tstrings[propIndex++] = \"32\";\n-#endif\n-\n-\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-\tstrings[propIndex++] = \"sun.cpu.endian\";\n-#ifdef J9VM_ENV_LITTLE_ENDIAN\n-\tstrings[propIndex++] = \"little\";\n-#else\n-\tstrings[propIndex++] = \"big\";\n-#endif\n-\n-/*\tDon't set this property as the class library will look here first and when\n-\tthere is a security manager you will get a security exception. The code\n-\tlooks in this package by default, see URLConnection.getContentHandler()\n-\tstrings[propIndex++] = \"java.content.handler.pkgs\";\n-\tstrings[propIndex++] = \"com.ibm.oti.www.content\";\n-*/\n-\n-\t/*[PR 95709]*/\n-\n-\t/* Get the language, region and variant */\n-\tlanguage = j9nls_get_language();\n-\tregion = j9nls_get_region();\n-\tvariant = j9nls_get_variant();\n-\n-\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n-\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n-\t\tvariant = \"NY\";\n-\t}\n-\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n-\t\tlanguage = \"no\";\n-\t}\n-\n-\tstrings[propIndex++] = \"user.language\";\n-\tstrings[propIndex++] = language;\n-\n-\tpropertyKey = \"user.country\";\n-\tstrings[propIndex++] = propertyKey;\n-\tstrings[propIndex++] = region;\n-\n-\t/* Get the variant */\n-\tstrings[propIndex++] = \"user.variant\";\n-\tstrings[propIndex++] = variant;\n-\n-\t/* Get the User name */\n-\tstrings[propIndex++] = \"user.name\";\n-\tstrings[propIndex] = \"unknown\";\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tresult = -1;\n-\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t} else {\n-\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n-\t\t\t\t\tjclmem_free_memory(env, usernameAlloc);\n-\t\t\t\t\tusernameAlloc = NULL;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#if defined(LINUX) || defined(OSX)\n-\tif (0 != result) {\n-\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n-\t\tif (0 == result) {\n-\t\t\tstrings[propIndex] = username;\n-\t\t} else if (result > 0) {\n-\t\t\tusernameAlloc = jclmem_allocate_memory(env, result);\n-\t\t\tif (NULL != usernameAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n-\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n-\t\t\t\t\t}\n-\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n-\t\t\t\t}\n-\t\t\t\t/* usernameAlloc to be freed before this method returns */\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t}\n-#endif /* defined(LINUX) || defined(OSX) */\n-\tpropIndex += 1;\n-#undef USERNAME_LENGTH\n-\n-#if defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8\n-\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n-\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n-\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n-\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n-\t}\n-#endif /* defined(OPENJ9_BUILD) && JAVA_SPEC_VERSION == 8 */\n-#if !defined(OPENJ9_BUILD)\n-\t/* Don't set a default value for IBM Java 8. */\n-\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n-#endif /* !defined(OPENJ9_BUILD) */\n-\t{\n-\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n-\t\tpropIndex += 1;\n-\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n-\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n-\t\t} else {\n-\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n-\t\t}\n-\t\tstrings[propIndex] = maxDirectMemBuff;\n-\t\tpropIndex += 1;\n-\t}\n-\n-\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n-\n-failed:\n-\tif (NULL != usernameAlloc) {\n-\t\tjclmem_free_memory(env, usernameAlloc);\n-\t}\n-\treturn propertyList;\n-}\n-\n-static void JNICALL\n-systemPropertyIterator(char* key, char* value, void* userData)\n-{\n-\tCreateSystemPropertiesData * iteratorData = userData;\n-\tjobject args = iteratorData->args;\n-\tJNIEnv *env = iteratorData->env;\n-\tconst char **defaultValues = iteratorData->defaultValues;\n-\tint defaultCount = iteratorData->defaultCount;\n-\tjint i;\n-\n-\t/* CMVC 95717: if an error has already occurred get out of here */\n-\tif ( iteratorData->errorOccurred ) {\n-\t\treturn;\n-\t}\n-\n-\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n-\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n-\t\treturn;\n-\t}\n-\n-#if JAVA_SPEC_VERSION >= 21\n-\tif (0 == strcmp(\"java.compiler\", key)) {\n-\t\tPORT_ACCESS_FROM_ENV(env);\n-\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT);\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_JCL_JAVA_COMPILER_WARNING_XINT);\n-\t\t}\n-\t\treturn;\n-\t}\n-#endif /* JAVA_SPEC_VERSION >= 21 */\n-\n-\t/* check for overridden system properties, use linear scan for now */\n-\tfor (i=0; i < defaultCount; i+=2) {\n-\t\tif (defaultValues[i] && !strcmp(key, defaultValues[i])) {\n-\t\t\tdefaultValues[i] = NULL;\n-\t\t\tdefaultValues[i+1] = NULL;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t/* First do the key */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, key) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\t/* Then the value */\n-\tif( propertyListAddString( env, args, iteratorData->nCommandLineDefines++, value) ) {\n-\t\titeratorData->errorOccurred = 1;\n-\t\treturn;\n-\t}\n-\n-\tTrc_JCL_systemPropertyIterator(env, key, value);\n-}\n-\n-\n void JNICALL\n Java_java_lang_System_startSNMPAgent(JNIEnv *env, jclass jlClass)\n {\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex f4b04862ac0..14a9c80a9a0 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -350,7 +350,6 @@ omr_add_exports(jclse\n \tJava_java_lang_J9VMInternals_getStackTrace\n \tJava_java_lang_J9VMInternals_newInstance\n \tJava_java_lang_System_getSysPropBeforePropertiesInitialized\n-\tJava_java_lang_System_getPropertyList\n \tJava_java_lang_System_mapLibraryName\n \tJava_java_lang_System_rasInitializeVersion\n \tJava_java_lang_System_setFieldImpl\n@@ -434,6 +433,7 @@ omr_add_exports(jclse\n \n if(JAVA_SPEC_VERSION LESS 17)\n omr_add_exports(jclse\n+\tJava_java_lang_System_getPropertyList\n \tJava_sun_misc_Unsafe_defineAnonymousClass\n )\n endif()\n@@ -599,13 +599,18 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n+if(JAVA_SPEC_VERSION EQUAL 11)\n+\tomr_add_exports(jclse\n+\t\tJava_java_lang_System_initJCLPlatformEncoding\n+\t)\n+endif()\n+\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\n \t\tJava_java_lang_Class_getNestHostImpl\n \t\tJava_java_lang_Class_getNestMembersImpl\n \t\tJava_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n \t)\n endif()\n \ndiff --git a/runtime/jcl/j9jcl.tdf b/runtime/jcl/j9jcl.tdf\nindex c64230a9bb3..0ec24ba02d6 100644\n--- a/runtime/jcl/j9jcl.tdf\n+++ b/runtime/jcl/j9jcl.tdf\n@@ -467,7 +467,7 @@ TraceEvent=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcess\n TraceExit=Trc_Java_com_ibm_lang_management_OperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl_Exit Overhead=1 Level=3 Template=\"getProcessPrivateMemorySizeImpl Exit\"\n \n TraceEvent=Trc_JCL_java_lang_J9VMInternals_mtTrace Overhead=1 Level=1 Template=\"J9VMInternals.mtTraceImpl: tenant = %s, message = %s\"\n-TraceEvent=Trc_JCL_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n+TraceEvent=Trc_JCL_systemPropertyIterator Obsolete Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\n \n TraceEvent=Trc_JCL_mtTrace Overhead=1 Level=1 Template=\"MT-trace: tenant = %s, message = %s\"\n \ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex 626a197be7a..d844c63d9ba 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,5 +23,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\" />\n+\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n+\t\t<exclude-if condition=\"spec.java12\"/>\n+\t</export>\n </exports>\ndiff --git a/runtime/jcl/uma/se6_vm-side_natives_exports.xml b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\nindex b8a780711eb..549a8712e3b 100644\n--- a/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n+++ b/runtime/jcl/uma/se6_vm-side_natives_exports.xml\n@@ -249,7 +249,9 @@\n \t<export name=\"Java_java_lang_reflect_Proxy_defineClassImpl\" />\n \t<export name=\"Java_java_lang_reflect_Array_multiNewArrayImpl\" />\n \t<export name=\"Java_java_lang_System_getSysPropBeforePropertiesInitialized\" />\n-\t<export name=\"Java_java_lang_System_getPropertyList\" />\n+\t<export name=\"Java_java_lang_System_getPropertyList\">\n+\t\t<exclude-if condition=\"spec.java17\" />\n+\t</export>\n \t<export name=\"Java_java_lang_System_mapLibraryName\" />\n \t<export name=\"Java_java_lang_System_setFieldImpl\" />\n \t<export name=\"Java_java_lang_System_rasInitializeVersion\" />\ndiff --git a/runtime/jcl/unix/syshelp.c b/runtime/jcl/unix/syshelp.c\nindex d1f9ff46fb4..a1bae22f747 100644\n--- a/runtime/jcl/unix/syshelp.c\n+++ b/runtime/jcl/unix/syshelp.c\n@@ -41,9 +41,6 @@\n #include \"atoe.h\"\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n /* defineCodepageTable */\n /* NULL separated list of code page aliases. The first name is */\n /* the name of the System property, the names following before */\n@@ -63,159 +60,6 @@ char* CodepageTable[] = {\n #endif\n };\n \n-/**\n- * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n- * As a last resort, the '.' representing the current directory is returned.\n- */\n-char * getTmpDir(JNIEnv *env, char**envSpace) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tI_32 envSize;\n-\tif ((envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0))> 0) {\n-\t\t*envSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\tif(*envSpace==NULL) return \".\";\n-\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n-\t\tif (j9file_attr(*envSpace) > -1)\n-\t\t\treturn *envSpace;\n-\t\t/* directory was not there, free up memory and continue */\n-\t\tjclmem_free_memory(env,*envSpace);\n-\t\t*envSpace = NULL;\n-\t\t}\n-\tif (j9file_attr(P_tmpdir) > -1)\n-\t\treturn P_tmpdir;\n-\tif (j9file_attr(\"/tmp\") > -1)\n-\t\treturn \"/tmp\";\n-\treturn \".\";\n-}\n-\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n-{\n-\tPORT_ACCESS_FROM_ENV(env);\n-\tchar *charResult = NULL;\n-\tchar *envSpace = NULL;\n-\tjobject plist = NULL;\n-\tchar userdir[EsMaxPath] = {0};\n-\tchar home[EsMaxPath] = {0};\n-\tchar *homeAlloc = NULL;\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n-\tJ9JavaVM *vm = currentThread->javaVM;\n-\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-#if defined(J9ZOS390)\n-\tif (J2SE_VERSION_FROM_ENV(env)) {\n-\t\tstrings[propIndex++] = \"platform.notASCII\";\n-\t\tstrings[propIndex++] = \"true\";\n-\n-\t\tstrings[propIndex++] = \"os.encoding\";\n-\t\tstrings[propIndex++] = \"ISO8859_1\";\n-\t}\n-#endif\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"/\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\n\";\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tcharResult = getcwd(userdir, EsMaxPath);\n-\tif (charResult == NULL) {\n-\t\tstrings[propIndex++] = \".\";\n-\t} else {\n-\t\tstrings[propIndex++] = charResult;\n-\t}\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\tcharResult = NULL;\n-#if defined(J9ZOS390)\n-\tcharResult = getenv(\"HOME\");\n-\tif (NULL != charResult) {\n-\t\tstrings[propIndex++] = charResult;\n-\t} else {\n-\t\tuid_t uid = geteuid();\n-\t\tif (0 != uid) {\n-\t\t\tstruct passwd *userDescription = getpwuid(uid);\n-\t\t\tif (NULL != userDescription) {\n-\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchar *loginID = getlogin();\n-\t\t\tif (NULL != loginID) {\n-\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n-\t\t\t\tif (NULL != userDescription) {\n-\t\t\t\t\tcharResult = userDescription->pw_dir;\n-\t\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* there exist situations where one of the above calls will fail.  Fall through to the Unix solution for those cases */\n-#endif\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t/* Skip getpwuid if a checkpoint can be taken.\n-\t * https://github.com/eclipse-openj9/openj9/issues/15800\n-\t */\n-\tif (!vmFuncs->isCheckpointAllowed(vm))\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t{\n-\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n-\t\tif (NULL == charResult) {\n-\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n-\t\t\tif (NULL != pwentry) {\n-\t\t\t\tcharResult = pwentry->pw_dir;\n-\t\t\t\tstrings[propIndex++] = charResult;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (NULL == charResult) {\n-\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n-\t\tstrings[propIndex] = \".\";\n-\t\tif (0 == result) {\n-\t\t\tif (strlen(home) > 0) {\n-\t\t\t\tstrings[propIndex] = home;\n-\t\t\t}\n-\t\t} else if (result > 0) {\n-\t\t\thomeAlloc = j9mem_allocate_memory(result, J9MEM_CATEGORY_VM_JCL);\n-\t\t\tif (NULL != homeAlloc) {\n-\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n-\t\t\t\tif (0 == result) {\n-\t\t\t\t\tstrings[propIndex] = homeAlloc;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n-\t\t\t\tgoto failed;\n-\t\t\t}\n-\t\t}\n-\t\tpropIndex += 1;\n-\t}\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\tplist = createSystemPropertyList(env, strings, propIndex);\n-\tif (NULL != envSpace) {\n-\t\tjclmem_free_memory(env,envSpace);\n-\t}\n-\n-failed:\n-\tif (NULL != homeAlloc) {\n-\t\tjclmem_free_memory(env, homeAlloc);\n-\t}\n-\treturn plist;\n-}\n-\n /**\n  * Turns a platform independent DLL name into a platform specific one.\n  */\t\ndiff --git a/runtime/jcl/win32/syshelp.c b/runtime/jcl/win32/syshelp.c\nindex c6adf96b6a4..7bd081a6614 100644\n--- a/runtime/jcl/win32/syshelp.c\n+++ b/runtime/jcl/win32/syshelp.c\n@@ -43,139 +43,11 @@\n #include <VersionHelpers.h>\n #endif\n \n-/* JCL_J2SE */\n-#define JCL_J2SE\n-\n \n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32 convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir(JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName(const char *inPath, char *outPath);\n \n \n-jobject getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n-\tOSVERSIONINFO versionInfo;\n-#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n-\tI_32 envSize;\n-\tchar *envSpace = NULL, *tempdir = NULL;\n-\tjobject result;\n-\tchar userhome[EsMaxPath];\n-\twchar_t unicodeTemp[EsMaxPath];\n-\tint i;\n-\tchar userdir[EsMaxPath];\n-\twchar_t unicodeHome[EsMaxPath];\n-\tHANDLE process, token;\n-\tUDATA handle;\n-\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n-#if !defined(JCL_J2SE)\n-\tUINT codePage;\n-\tchar codePageBuf[32];\n-\tCPINFO cpInfo;\n-#endif\n-\n-\t/* Hard coded file/path separators and other values */\n-\n-\tstrings[propIndex++] = \"file.separator\";\n-\tstrings[propIndex++] = \"\\\\\";\n-\n-\tstrings[propIndex++] = \"line.separator\";\n-\tstrings[propIndex++] = \"\\r\\n\";\n-\n-\t/* Get the Temp Dir name */\n-\tstrings[propIndex++] = \"java.io.tmpdir\";\n-\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-\n-\tstrings[propIndex++] = \"user.home\";\n-\ti = propIndex;\n-\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n-\tif (-1 != envSize) {\n-\t\t\tenvSpace = jclmem_allocate_memory(env, envSize); /* trailing null taken into account */\n-\t\t\tif (NULL == envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t}\n-#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n-\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n-\tif ((i == propIndex) && IsWindowsVersionOrGreater( 5, 0, 0))\n-#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n-\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (versionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT))\n-#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n-\t{\n-\t\tprocess = GetCurrentProcess();\n-\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n-\t\t\tenvSize = 0;\n-\t\t\tif (j9util_open_system_library(\"userenv\", &handle, TRUE) == 0) {\n-\t\t\t\tif (i == propIndex) {\n-\t\t\t\t\tif (j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\") == 0) {\n-\t\t\t\t\t\tenvSize = EsMaxPath;\n-\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n-\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n-\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\tif (!wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n-\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n-\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n-\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n-\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n-\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n-\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tif (i == propIndex) {\n-\t\t/* Fallback to Windows Directory */\n-\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n-\t\tif (-1 == envSize) {\n-\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t} else {\n-\t\t\tenvSpace = jclmem_allocate_memory(env,envSize);\t/* trailing null taken into account */\n-\t\t\tif(!envSpace) {\n-\t\t\t\tstrings[propIndex++] = \"\\\\\";\n-\t\t\t} else {\n-\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n-\t\t\t\tstrings[propIndex++] = envSpace;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/* Get the directory where the executable was started */\n-\tstrings[propIndex++] = \"user.dir\";\n-\tif (GetCurrentDirectoryW(EsMaxPath, unicodeTemp) == 0) {\n-\t\tstrings[propIndex++] = \"\\\\\";\n-\t} else {\n-\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n-\t\tstrings[propIndex++] = userdir;\n-\t}\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n-\n-\t/* Jazz 52075 JCL_J2SE is always true */\n-\n-\tresult = createSystemPropertyList(env, strings, propIndex);\n-\tif (tempdir) jclmem_free_memory(env,tempdir);\n-\tif (envSpace) jclmem_free_memory(env,envSpace);\n-\treturn result;\n-}\n-\n-\n char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodingType) {\n \tPORT_ACCESS_FROM_ENV(env);\n \tLCID threadLocale;\n@@ -228,11 +100,7 @@ char* getPlatformFileEncoding(JNIEnv *env, char *codepage, int size, int encodin\n \t\tcodepage[1] = 'S';\n \t} else {\n \t\tcodepage[0] = 'C';\n-#if defined(JCL_J2SE)\n \t\tcodepage[1] = 'p';\n-#else\n-\t\tcodepage[1] = 'P';\n-#endif\n \t}\n \n \treturn codepage;\n@@ -246,64 +114,3 @@ void mapLibraryToPlatformName(const char *inPath, char *outPath) {\n \tstrcpy(outPath,inPath);\n \tstrcat(outPath, \".dll\");\n }\n-\n-\n-/**\n- * Try to find the 'correct' windows temp directory.\n- */\n-char * getTmpDir(JNIEnv *env, char **tempdir) {\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-\tDWORD rc;\n-\twchar_t unicodeBuffer[EsMaxPath];\n-\tchar *buffer = NULL;\n-\tchar *retVal = \".\";\n-\n-\trc = GetTempPathW(EsMaxPath, unicodeBuffer);\n-\n-\t/* If the function succeeds, the return value is the number of characters stored into \n-\tthe buffer, not including the terminating null character. If the buffer is not large enough, \n-\tthe return value will exceed the length parameter (i.e. the required size)\n-\t*/\n-\n-\tif((rc != 0) && (rc < EsMaxPath)) {\n-\t\t/* convert */\n-\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n-\t\tif(rc != 0) {\n-\t\t\tbuffer = jclmem_allocate_memory(env, rc);\n-\t\t\tif(NULL != buffer) {\n-\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1,  buffer, rc, NULL, NULL);\n-\t\t\t\tif(rc == 0) {\n-\t\t\t\t\tjclmem_free_memory(env, buffer);\n-\t\t\t\t\tbuffer = NULL;\n-\t\t\t\t} else {\n-\t\t\t\t\tretVal = buffer;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\t*tempdir = buffer;\n-\treturn retVal;\n-}\n-\n-/**\n- * @internal\n- * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n- *\n- * @param[in] portLibrary The port library\n- * @param[in] unicodeString The unicode buffer to convert\n- * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n- * @param[in] size The size of utf8Buffer\n- *\n- * @return 0 on success, -1 on failure.\n- */\n-I_32\n-convertToUTF8(J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size)\n-{\n-\tPORT_ACCESS_FROM_PORT(portLibrary);\n-\tif(0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n-\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n-\t\treturn -1;\n-\t}\n-\treturn 0;\n-}\ndiff --git a/runtime/nls/j9cl/j9jcl.nls b/runtime/nls/j9cl/j9jcl.nls\nindex a7912fb5583..ba13180f677 100644\n--- a/runtime/nls/j9cl/j9jcl.nls\n+++ b/runtime/nls/j9cl/j9jcl.nls\n@@ -580,20 +580,16 @@ J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.system_action=The JVM will fail to star\n J9NLS_JCL_FIPS_MODE_SET_TO_INVALID_VALUE.user_response=Check the fips mode value is consistent with the FIPS 140-3 preview being enabled / disabled.\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xjit\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XJIT.user_response=\n # END NON-TRANSLATABLE\n \n-# Note: \"java.compiler\" is a system property name and should not be translated.\n-# Note: \"-Xint\" is a command line parameter and should not be translated.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT=\n # START NON-TRANSLATABLE\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n-J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.explanation=NOTAG\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.system_action=\n+J9NLS_JCL_JAVA_COMPILER_WARNING_XINT.user_response=\n # END NON-TRANSLATABLE\ndiff --git a/runtime/nls/j9vm/j9vm.nls b/runtime/nls/j9vm/j9vm.nls\nindex 21495596345..73e295f0128 100644\n--- a/runtime/nls/j9vm/j9vm.nls\n+++ b/runtime/nls/j9vm/j9vm.nls\n@@ -2430,3 +2430,21 @@ J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.explanation=Couldn't find or load JFR\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.system_action=The JVM will not generate a JFR file.\n J9NLS_VM_OPENJ9_JFR_METADATA_FILE_NOT_LOAD.user_response=Contact your service representative.\n # END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xjit\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xjit instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XJIT.user_response=Use the -Xjit option to enable the JIT.\n+# END NON-TRANSLATABLE\n+\n+# Note: \"java.compiler\" is a system property name and should not be translated.\n+# Note: \"-Xint\" is a command line parameter and should not be translated.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT=Setting the java.compiler system property is obsolete in version 21 and later, use -Xint instead.\n+# START NON-TRANSLATABLE\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.explanation=The java.compiler system property can no longer be used to enable or disable the JIT.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.system_action=Setting the java.compiler system property is ignored.\n+J9NLS_VM_JAVA_COMPILER_WARNING_XINT.user_response=Use the -Xint option to disable the JIT.\n+# END NON-TRANSLATABLE\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 063b95bba56..0dd1b5dd065 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5352,6 +5352,7 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tjobjectArray (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n \n /* Jazz 99339: define a new structure to replace JavaVM so as to pass J9NativeLibrary to JVMTIEnv  */\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex e35676d0fae..03527a43384 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,11 +190,13 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION >= 11\n+#if JAVA_SPEC_VERSION == 11\n void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION >= 11 */\n+#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n+#if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n jstring JNICALL Java_java_lang_System_mapLibraryName (JNIEnv * env, jclass unusedClass, jstring inName);\n void JNICALL Java_java_lang_System_initLocale (JNIEnv *env, jclass clazz);\n \n@@ -800,10 +802,6 @@ jcharArray JNICALL Java_com_ibm_oti_io_NativeCharacterConverter_convertBytesToCh\n \n /* BBjclNativesWin32SystemHelpers*/\n char* getPlatformFileEncoding (JNIEnv *env, char *codepage, int size, int encodingType);\n-I_32\n-convertToUTF8 (J9PortLibrary* portLibrary, const wchar_t* unicodeString, char* utf8Buffer, UDATA size);\n-char * getTmpDir (JNIEnv *env, char **tempdir);\n-jobject getPlatformPropertyList (JNIEnv *env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /************************************************************\n@@ -812,8 +810,6 @@ void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* BBjclNativesUNIXSystemHelpers*/\n char *getPlatformFileEncoding (JNIEnv * env, char *codepageProp, int propSize, int encodingType);\n-char * getTmpDir (JNIEnv *env, char**envSpace);\n-jobject getPlatformPropertyList (JNIEnv * env, const char *strings[], int propIndex);\n void mapLibraryToPlatformName (const char *inPath, char *outPath);\n \n /* orbvmhelpers.c */\ndiff --git a/runtime/oti/util_api.h b/runtime/oti/util_api.h\nindex 8cbe8e3aeb3..9e605c155c3 100644\n--- a/runtime/oti/util_api.h\n+++ b/runtime/oti/util_api.h\n@@ -2665,6 +2665,12 @@ j9util_open_system_library(char *name, UDATA *descriptor, UDATA flags);\n \n #endif /*if defined(WIN32)*/\n \n+/* ---------------- filehelp.c ---------------- */\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char * getTmpDir(JNIEnv *env, char **envSpace);\n \n #if defined(J9VM_JIT_FREE_SYSTEM_STACK_POINTER)\n /* ---------------- freessp.c ---------------- */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex f8247aa7ca7..a9f574f77d2 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4335,6 +4335,14 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n  */\n UDATA\n addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray getSystemPropertyList(JNIEnv *env);\n+\n /* ---------------- vmruntimestate.c ---------------- */\n \n /**\ndiff --git a/runtime/util/CMakeLists.txt b/runtime/util/CMakeLists.txt\nindex 394304ae25e..1487fb806a7 100644\n--- a/runtime/util/CMakeLists.txt\n+++ b/runtime/util/CMakeLists.txt\n@@ -116,6 +116,12 @@ elseif(OMR_OS_ZOS)\n \ttarget_sources(j9util PRIVATE zos/freessp.c)\n endif()\n \n+if(OMR_OS_WINDOWS)\n+\ttarget_sources(j9util PRIVATE win32/filehelp.c)\n+else()\n+\ttarget_sources(j9util PRIVATE unix/filehelp.c)\n+endif()\n+\n if(OMR_ARCH_X86)\n \ttarget_sources(j9util\n \t\tPRIVATE\ndiff --git a/runtime/util/module.xml b/runtime/util/module.xml\nindex 9e00e0836ea..c246c3bd583 100644\n--- a/runtime/util/module.xml\n+++ b/runtime/util/module.xml\n@@ -50,6 +50,12 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t\t</makefilestub>\n \t\t</makefilestubs>\n \t\t<vpaths>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"unix\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<exclude-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n+\t\t\t<vpath pattern=\"filehelp.c\" path=\"win32\" augmentObjects=\"true\" type=\"relativepath\">\n+\t\t\t\t<include-if condition=\"spec.win_x86.*\"/>\n+\t\t\t</vpath>\n \t\t\t<vpath pattern=\"freessp.c\" path=\"zos\" augmentObjects=\"true\" type=\"relativepath\">\n \t\t\t\t<include-if condition=\"spec.zos.*\"/>\n \t\t\t</vpath>\ndiff --git a/runtime/util/unix/filehelp.c b/runtime/util/unix/filehelp.c\nnew file mode 100644\nindex 00000000000..343fbff4ecc\n--- /dev/null\n+++ b/runtime/util/unix/filehelp.c\n@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <stdio.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' unix temp directory, as taken from the man page for tmpnam.\n+ * As a last resort, '.' representing the current directory is returned.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **envSpace)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tI_32 envSize = j9sysinfo_get_env(\"TMPDIR\", NULL, 0);\n+\tif (envSize > 0) {\n+\t\t*envSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == *envSpace) {\n+\t\t\treturn \".\";\n+\t\t}\n+\t\tj9sysinfo_get_env(\"TMPDIR\", *envSpace, envSize);\n+\t\tif (j9file_attr(*envSpace) > -1) {\n+\t\t\treturn *envSpace;\n+\t\t}\n+\t\t/* directory was not there, free up memory and continue */\n+\t\tj9mem_free_memory(*envSpace);\n+\t\t*envSpace = NULL;\n+\t}\n+\tif (j9file_attr(P_tmpdir) > -1) {\n+\t\treturn P_tmpdir;\n+\t}\n+\tif (j9file_attr(\"/tmp\") > -1) {\n+\t\treturn \"/tmp\";\n+\t}\n+\treturn \".\";\n+}\ndiff --git a/runtime/util/win32/filehelp.c b/runtime/util/win32/filehelp.c\nnew file mode 100644\nindex 00000000000..55b241301c0\n--- /dev/null\n+++ b/runtime/util/win32/filehelp.c\n@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+#include <windows.h>\n+#include \"j9.h\"\n+\n+/**\n+ * Try to find the 'correct' windows temp directory.\n+ */\n+char *\n+getTmpDir(JNIEnv *env, char **tempdir)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\n+\twchar_t unicodeBuffer[EsMaxPath];\n+\tchar *buffer = NULL;\n+\tchar *retVal = \".\";\n+\tDWORD rc = GetTempPathW(EsMaxPath, unicodeBuffer);\n+\n+\tif ((0 != rc) && (rc < EsMaxPath)) {\n+\t\t/* convert */\n+\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, NULL, 0, NULL, NULL);\n+\t\tif (0 != rc) {\n+\t\t\tbuffer = j9mem_allocate_memory(rc, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != buffer) {\n+\t\t\t\trc = WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeBuffer, -1, buffer, rc, NULL, NULL);\n+\t\t\t\tif (0 == rc) {\n+\t\t\t\t\tj9mem_free_memory(buffer);\n+\t\t\t\t\tbuffer = NULL;\n+\t\t\t\t} else {\n+\t\t\t\t\tretVal = buffer;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t*tempdir = buffer;\n+\treturn retVal;\n+}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex cf7e9afdea2..5fe0a7e6a9c 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -486,4 +486,5 @@ J9InternalVMFunctions J9InternalFunctions = {\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n+\tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/j9vm.tdf b/runtime/vm/j9vm.tdf\nindex 5447aeb934d..c7d04229b2a 100644\n--- a/runtime/vm/j9vm.tdf\n+++ b/runtime/vm/j9vm.tdf\n@@ -1017,3 +1017,5 @@ TraceEntry=Trc_VM_getTypeIdUTF8_Entry Overhead=1 Level=5 Template=\"getTypeIdUTF8\n TraceExit=Trc_VM_getTypeIdUTF8_Exit Overhead=1 Level=5 Template=\"getTypeIdUTF8 className %.*s clazz=%p result=%lli\"\n TraceEntry=Trc_VM_getTypeId_Entry Overhead=1 Level=5 Template=\"getTypeId clazz=%p\"\n TraceExit=Trc_VM_getTypeId_Exit Overhead=1 Level=5 Template=\"getTypeId clazz=%p result=%lli\"\n+\n+TraceEvent=Trc_systemPropertyIterator Overhead=1 Level=10 Template=\"systemPropertyIterator: added VM system property '%s'='%s'\"\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 74f0f9327ec..5e4db9c54c3 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -20,6 +20,13 @@\n  * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n  *******************************************************************************/\n \n+#if defined(WIN32)\n+#include <windows.h>\n+#else /* defined(WIN32) */\n+#include <pwd.h>\n+#include <unistd.h>\n+#endif /* defined(WIN32) */\n+\n #include <string.h>\n #include \"j9protos.h\"\n #include \"j9port.h\"\n@@ -32,24 +39,28 @@\n #include \"vmargs_api.h\"\n #include \"vendor_version.h\"\n \n+#if defined(J9ZOS390)\n+#include \"atoe.h\"\n+#endif /* defined(J9ZOS390) */\n+\n #if defined(LINUX)\n /* Copy the system properties names and values into malloced memory */\n static void copySystemProperties(J9JavaVM* vm);\n #endif /* defined(LINUX) */\n \n-static U_8*  unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength);\n+static U_8 *unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength);\n static UDATA getLibSubDir(J9JavaVM *VM, const char *subDir, char **value);\n \n #define JAVA_ENDORSED_DIRS \"java.endorsed.dirs\"\n #define JAVA_EXT_DIRS \"java.ext.dirs\"\n \n-UDATA addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags);\n-static char * getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n+UDATA addSystemProperty(J9JavaVM *vm, const char *propName,  const char *propValue, UDATA flags);\n+static char *getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen);\n static UDATA addPropertyForOptionWithPathArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n static UDATA addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDATA optionNameLen, const char *propName);\n static UDATA addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *basePropName, UDATA basePropNameLen, UDATA *propertyCount);\n static UDATA addPropertyForOptionWithEqualsArg(J9JavaVM *vm, const char *optionName, UDATA optionNameLen, const char *propName);\n-static UDATA addModularitySystemProperties(J9JavaVM * vm);\n+static UDATA addModularitySystemProperties(J9JavaVM *vm);\n \n /*\n  * Create a copy of the given string in allocated memory.\n@@ -168,7 +179,7 @@ getOptionArg(J9JavaVM *vm, IDATA argIndex, UDATA optionNameLen)\n {\n \tchar *option = NULL;\n \tchar *optionArg = NULL;\n-\tJ9VMInitArgs* j9vm_args = vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \n \tif ((argIndex < 0) || ((UDATA)argIndex >= vm->vmArgsArray->nOptions)) {\n \t\tgoto _end;\n@@ -315,7 +326,7 @@ addPropertyForOptionWithModuleListArg(J9JavaVM *vm, const char *optionName, IDAT\n {\n \tIDATA argIndex = -1;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n-\tJ9VMInitArgs* j9vm_args\t= vm->vmArgsArray;\n+\tJ9VMInitArgs *j9vm_args = vm->vmArgsArray;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \targIndex = FIND_ARG_IN_VMARGS_FORWARD(OPTIONAL_LIST_MATCH_USING_EQUALS, optionName, NULL);\n@@ -461,7 +472,7 @@ addPropertiesForOptionWithAssignArg(J9JavaVM *vm, const char *optionName, UDATA\n  * @return returns J9SYSPROP_ERROR_NONE on success, any other J9SYSPROP_ERROR code on failure\n  */\n static UDATA\n-addModularitySystemProperties(J9JavaVM * vm)\n+addModularitySystemProperties(J9JavaVM *vm)\n {\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \n@@ -559,7 +570,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n \n \trc = getSystemProperty(vm, \"java.home\", &javaHomeProp);\n \tif (J9SYSPROP_ERROR_NONE == rc) {\n-\t\tchar* libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n+\t\tchar *libSubDir = j9mem_allocate_memory(strlen(javaHomeProp->value) + LITERAL_STRLEN(DIR_SEPARATOR_STR) + LITERAL_STRLEN(\"lib\") + LITERAL_STRLEN(DIR_SEPARATOR_STR) + strlen(subDir) + 1, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == libSubDir) {\n \t\t\trc = J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t\tgoto _end;\n@@ -586,7 +597,7 @@ getLibSubDir(J9JavaVM *vm, const char *subDir, char **value)\n  * @return On success J9SYSPROP_ERROR_NONE, otherwise a J9SYSPROP_ERR constant.\n  */\n UDATA\n-initializeSystemProperties(J9JavaVM * vm)\n+initializeSystemProperties(J9JavaVM *vm)\n {\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n@@ -595,22 +606,22 @@ initializeSystemProperties(J9JavaVM * vm)\n \tJavaVMInitArgs *initArgs = NULL;\n \tchar *jclName = J9_JAVA_SE_DLL_NAME;\n \tUDATA j2seVersion = J2SE_VERSION(vm);\n-\tconst char* propValue = NULL;\n+\tconst char *propValue = NULL;\n \tUDATA rc = J9SYSPROP_ERROR_NONE;\n \tconst char *specificationVersion = NULL;\n \tBOOLEAN addManagementModule = FALSE;\n \n-\tif (omrthread_monitor_init(&(vm->systemPropertiesMutex), 0) != 0) {\n+\tif (0 != omrthread_monitor_init(&(vm->systemPropertiesMutex), 0)) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n \t/* Count the number of -D properties and find the JCL config */\n \tinitArgs = vm->vmArgsArray->actualVMArgs;\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \t\tAssert_VM_notNull(optionString);\n \n-\t\tif (strncmp(\"-Xjcl:\", optionString, 6) == 0) {\n+\t\tif (0 == strncmp(\"-Xjcl:\", optionString, 6)) {\n \t\t\tjclName = optionString + 6;\n \t\t}\n \t}\n@@ -621,7 +632,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \n \t/* Allocate the properties pool */\n-\tif ((vm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary))) == NULL) {\n+\tvm->systemProperties = pool_new(sizeof(J9VMSystemProperty), 0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(vm->portLibrary));\n+\tif (NULL == vm->systemProperties) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n@@ -632,7 +644,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t}\n \n-\tif (JAVA_SPEC_VERSION == 8) {\n+\tif (8 == JAVA_SPEC_VERSION) {\n \t\tspecificationVersion = \"1.8\";\n \t} else {\n \t\tspecificationVersion = JAVA_SPEC_VERSION_STRING;\n@@ -656,7 +668,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t}\n \t{\n \t\tconst char *classVersion = NULL;\n-\t\tif (JAVA_SPEC_VERSION == 8) {\n+\t\tif (8 == JAVA_SPEC_VERSION) {\n \t\t\tclassVersion = \"52.0\";\n \t\t} else {\n \t\t\tclassVersion = \"55.0\"; /* Java 11 */\n@@ -746,14 +758,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_NAME) */\n \n #if defined(J9JDK_EXT_VERSION)\n \trc = addSystemProperty(vm, \"jdk.extensions.version\", J9JDK_EXT_VERSION, 0);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9JDK_EXT_VERSION) */\n \n #if JAVA_SPEC_VERSION < 21\n \t/* Don't know the JIT yet, put in a placeholder and make it writeable for now */\n@@ -766,9 +778,9 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* We don't have enough information yet. Put in placeholders. */\n #if defined(J9VM_OPT_SIDECAR) && !defined(WIN32)\n \tpropValue = \"../..\";\n-#else\n+#else /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \tpropValue = \"..\";\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) && !defined(WIN32) */\n \trc = addSystemProperty(vm, \"java.home\", propValue, J9SYSPROP_FLAG_WRITEABLE);\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n@@ -796,12 +808,12 @@ initializeSystemProperties(J9JavaVM * vm)\n \tif (J9SYSPROP_ERROR_NONE != rc) {\n \t\tgoto fail;\n \t}\n-#endif\n+#endif /* defined(J9VM_OPT_SIDECAR) */\n \n \t/* Figure out the path separator by querying port library */\n \t{\n-\t\tchar *pathSep = (char*) j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n-\t\tif (pathSep == NULL) {\n+\t\tchar *pathSep = (char *)j9mem_allocate_memory(2, OMRMEM_CATEGORY_VM);\n+\t\tif (NULL == pathSep) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t\t}\n \t\tpathSep[0] = (char) j9sysinfo_get_classpathSeparator();\n@@ -911,16 +923,16 @@ initializeSystemProperties(J9JavaVM * vm)\n \t/* Create the -D properties. This may override any of the writeable properties above.\n \t    Should the command line override read-only props? */\n \tfor (i = 0; i < initArgs->nOptions; ++i) {\n-\t\tchar * optionString = initArgs->options[i].optionString;\n+\t\tchar *optionString = initArgs->options[i].optionString;\n \n-\t\tif (strncmp(\"-D\", optionString, 2) == 0) {\n+\t\tif (0 == strncmp(\"-D\", optionString, 2)) {\n \t\t\tJ9VMSystemProperty *currentProp = NULL;\n \t\t\tchar *propNameCopy = NULL;\n \t\t\tchar *propValueCopy = NULL;\n \t\t\tUDATA propNameLen = 0;\n \n \t\t\tpropValue = strchr(optionString + 2, '=');\n-\t\t\tif (propValue == NULL) {\n+\t\t\tif (NULL == propValue) {\n \t\t\t\tpropNameLen = strlen(optionString) - 2;\n \t\t\t\tpropValue = optionString + 2 + propNameLen;\n \t\t\t} else {\n@@ -970,7 +982,7 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (getSystemProperty(vm, propNameCopy, &currentProp) == J9SYSPROP_ERROR_NONE) {\n+\t\t\tif (J9SYSPROP_ERROR_NONE == getSystemProperty(vm, propNameCopy, &currentProp)) {\n \t\t\t\t/* We already have a property of the given name, free the propNameCopy buffer */\n \t\t\t\tj9mem_free_memory(propNameCopy);\n \n@@ -1024,8 +1036,8 @@ initializeSystemProperties(J9JavaVM * vm)\n \t\t}\n \t} else {\n \t\t/* look for java.endorsed.dirs and set if not set */\n-\t\tif ( getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty) != J9SYSPROP_ERROR_NONE ) {\n-\t\t\tchar *defaultEndorsedDir =  NULL;\n+\t\tif (J9SYSPROP_ERROR_NONE != getSystemProperty(vm, JAVA_ENDORSED_DIRS, &javaEndorsedDirsProperty)) {\n+\t\t\tchar *defaultEndorsedDir = NULL;\n \n \t\t\trc = getLibSubDir(vm, \"endorsed\", &defaultEndorsedDir);\n \t\t\tif (NULL != defaultEndorsedDir) {\n@@ -1117,14 +1129,14 @@ initializeSystemProperties(J9JavaVM * vm)\n \n \n void\n-freeSystemProperties(J9JavaVM * vm)\n+freeSystemProperties(J9JavaVM *vm)\n {\n \tif (NULL != vm->systemProperties) {\n \t\tPORT_ACCESS_FROM_JAVAVM(vm);\n \t\tpool_state walkState;\n \n \t\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\t\twhile (property != NULL) {\n+\t\twhile (NULL != property) {\n \t\t\tif (property->flags & J9SYSPROP_FLAG_NAME_ALLOCATED) {\n \t\t\t\tj9mem_free_memory(property->name);\n \t\t\t}\n@@ -1145,13 +1157,13 @@ freeSystemProperties(J9JavaVM * vm)\n \n \n UDATA\n-getSystemProperty(J9JavaVM * vm, const char * name, J9VMSystemProperty ** propertyPtr)\n+getSystemProperty(J9JavaVM *vm, const char *name, J9VMSystemProperty **propertyPtr)\n {\n \tpool_state walkState;\n \n-\tJ9VMSystemProperty* property = pool_startDo(vm->systemProperties, &walkState);\n-\twhile (property != NULL) {\n-\t\tif (strcmp(property->name, name) == 0) {\n+\tJ9VMSystemProperty *property = pool_startDo(vm->systemProperties, &walkState);\n+\twhile (NULL != property) {\n+\t\tif (0 == strcmp(property->name, name)) {\n \t\t\tif (NULL != propertyPtr) {\n \t\t\t\t*propertyPtr = property;\n \t\t\t}\n@@ -1174,21 +1186,21 @@ getJ9VMVersionString(J9JavaVM *vm) {\n \n \n UDATA\n-addSystemProperty(J9JavaVM * vm, const char* propName,  const char* propValue, UDATA flags)\n+addSystemProperty(J9JavaVM *vm, const char *propName, const char *propValue, UDATA flags)\n {\n-\tJ9VMSystemProperty* newProp = pool_newElement(vm->systemProperties);\n+\tJ9VMSystemProperty *newProp = pool_newElement(vm->systemProperties);\n \tif (NULL == newProp) {\n \t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n \t}\n \n-\tnewProp->name = (char*)propName;\n-\tnewProp->value = (char*)propValue;\n+\tnewProp->name = (char *)propName;\n+\tnewProp->value = (char *)propValue;\n \tnewProp->flags = flags;\n \treturn J9SYSPROP_ERROR_NONE;\n }\n \n UDATA\n-setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newValue, BOOLEAN allocated)\n+setSystemPropertyValue(J9JavaVM *vm, J9VMSystemProperty *property, char *newValue, BOOLEAN allocated)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1210,7 +1222,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n \t\t\tproperty->flags |= J9SYSPROP_FLAG_VALUE_ALLOCATED;\n \t\t}\n \t\tproperty->value = newValue;\n-\t\tif (strcmp(property->name, \"java.home\") == 0) {\n+\t\tif (0 == strcmp(property->name, \"java.home\")) {\n \t\t\tvm->javaHome = (U_8*)newValue;\n \t\t}\n \t}\n@@ -1218,7 +1230,7 @@ setSystemPropertyValue(J9JavaVM * vm, J9VMSystemProperty * property, char * newV\n }\n \n UDATA\n-setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * value)\n+setSystemProperty(J9JavaVM *vm, J9VMSystemProperty *property, const char *value)\n {\n \t/* Make sure the property is writeable */\n \n@@ -1230,7 +1242,7 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n \n \tif (NULL != value) {\n \t\t/* Make a copy of the value */\n-\t\tchar * copiedValue = copyToMem(vm, value);\n+\t\tchar *copiedValue = copyToMem(vm, value);\n \n \t\tif (NULL == copiedValue) {\n \t\t\treturn J9SYSPROP_ERROR_OUT_OF_MEMORY;\n@@ -1249,12 +1261,12 @@ setSystemProperty(J9JavaVM * vm, J9VMSystemProperty * property, const char * val\n  * @return buffer containing the transliterated string or NULL in case of error\n  */\n #define TRANSCODE_BUFFER_SIZE 64\n-static U_8*\n-unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escapeLength) {\n+static U_8 *\n+unicodeEscapeStringToMUtf8(J9JavaVM *vm, const char *escapeString, UDATA escapeLength) {\n \tU_16 localUnicodeBuffer[TRANSCODE_BUFFER_SIZE]; /* handle short strings without allocating memory */\n-\tU_16* unicodeBuffer = localUnicodeBuffer;\n-\tUDATA bufferLength = (escapeLength+1)*2; /* This is an overestimate */\n-\tconst char *cursor;\n+\tU_16 *unicodeBuffer = localUnicodeBuffer;\n+\tUDATA bufferLength = (escapeLength + 1) * 2; /* This is an overestimate */\n+\tconst char *cursor = NULL;\n \tconst char *escapeStringEnd = escapeString + escapeLength;\n \tIDATA unicodeDigitCounter = -1; /* for walking through \"\\\\u1234\" */\n \tU_16 currentChar = 0;\n@@ -1267,7 +1279,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n \n \tif (bufferLength > TRANSCODE_BUFFER_SIZE) {\n-\t\tunicodeBuffer = (U_16*) j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n+\t\tunicodeBuffer = (U_16 *)j9mem_allocate_memory(bufferLength, OMRMEM_CATEGORY_VM);\n \t\tif (NULL == unicodeBuffer) {\n \t\t\treturn NULL;\n \t\t}\n@@ -1275,7 +1287,7 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \n \tcursor = escapeString;\n \twhile (cursor < escapeStringEnd) {\n-\t\tif (cursor[0]=='\\\\' && cursor[1]=='u') {\n+\t\tif (('\\\\' == cursor[0]) && ('u' == cursor[1])) {\n \t\t\tslashChar = cursor[0];\n \t\t\tunicodeDigitCounter = 0;\n \t\t\tcursor += 2;\n@@ -1317,14 +1329,14 @@ unicodeEscapeStringToMUtf8(J9JavaVM * vm, const char* escapeString, UDATA escape\n \t\tcursor++;\n \t}\n \n-\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n+\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n \t\t\tNULL, 0); /* get the size of the MUTF8 */\n \tif (mutf8Size >= 0) {\n \t\t++mutf8Size; /* leave enough space to null-terminate the string */\n \t\tresult = j9mem_allocate_memory(mutf8Size, OMRMEM_CATEGORY_VM); /* allow room for terminating null */\n \t\tif (NULL != result) {\n-\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char*)unicodeBuffer, unicodeCharacterCounter*2,\n-\t\t\t\t\t(char*)result, mutf8Size);\n+\t\t\tmutf8Size = j9str_convert(J9STR_CODE_WIDE, J9STR_CODE_MUTF8, (char *)unicodeBuffer, unicodeCharacterCounter * 2,\n+\t\t\t\t\t(char *)result, mutf8Size);\n \t\t\tif (mutf8Size < 0) {\n \t\t\t\tj9mem_free_memory(result);\n \t\t\t\tresult = NULL;\n@@ -1361,8 +1373,8 @@ containsBackslashU(const char *userString, UDATA stringLength) {\n \tif (stringLength > 0) {\n \t\tU_32 cursor = 0;\n \t\tfor (cursor = 0; cursor < (stringLength-1); cursor++) {\n-\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor+1])) {\n-\t\t\t\t/* cursor+1 is safe because the loop stops one character before the end */\n+\t\t\tif (('\\\\' == userString[cursor]) && ('u' == userString[cursor + 1])) {\n+\t\t\t\t/* cursor + 1 is safe because the loop stops one character before the end */\n \t\t\t\treturn TRUE;\n \t\t\t}\n \t\t}\n@@ -1433,3 +1445,647 @@ getMUtf8String(J9JavaVM *vm, const char *userString, UDATA stringLength)\n \t}\n \treturn result;\n }\n+\n+/**\n+ * @return JNI_FALSE on success, JNI_TRUE on error\n+ */\n+static jboolean\n+propertyListAddString(JNIEnv *env, jarray array, jint arrayIndex, const char *value)\n+{\n+\t/* String must be well-formed modified UTF-8 */\n+\tjobject str = (*env)->NewStringUTF(env, value);\n+\tif (NULL != str) {\n+\t\t(*env)->SetObjectArrayElement(env, array, arrayIndex, str);\n+\t}\n+\t/* NewStringUTF does not throw an exception, other than OutOfMemory */\n+\treturn (*env)->ExceptionCheck(env);\n+}\n+\n+typedef struct {\n+\tjboolean errorOccurred;\n+\tjobject args;\n+\tjint nCommandLineDefines;\n+\tJNIEnv *env;\n+\tconst char **defaultValues;\n+\tint defaultCount;\n+\tjclass stringClass;\n+} CreateSystemPropertiesData;\n+\n+static void JNICALL\n+systemPropertyIterator(char *key, char *value, void *userData)\n+{\n+\tCreateSystemPropertiesData *iteratorData = userData;\n+\tjobject args = iteratorData->args;\n+\tJNIEnv *env = iteratorData->env;\n+\tconst char **defaultValues = iteratorData->defaultValues;\n+\tint defaultCount = iteratorData->defaultCount;\n+\tjint i = 0;\n+\n+\t/* CMVC 95717: if an error has already occurred get out of here */\n+\tif (iteratorData->errorOccurred) {\n+\t\treturn;\n+\t}\n+\n+\tif (0 == strcmp(\"com.ibm.oti.shared.enabled\", key)) {\n+\t\t/* JAZZ103 85641: Prevent com.ibm.oti.shared.enabled from being overwritten by a command line option */\n+\t\treturn;\n+\t}\n+\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (0 == strcmp(\"java.compiler\", key)) {\n+\t\tPORT_ACCESS_FROM_ENV(env);\n+\t\tif ((0 == strcmp(\"jitc\", value)) || (0 == strcmp(J9_JIT_DLL_NAME, value))) {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XJIT);\n+\t\t} else {\n+\t\t\tj9nls_printf(PORTLIB, J9NLS_WARNING, J9NLS_VM_JAVA_COMPILER_WARNING_XINT);\n+\t\t}\n+\t\treturn;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\n+\t/* check for overridden system properties, use linear scan for now */\n+\tfor (i = 0; i < defaultCount; i += 2) {\n+\t\tif ((NULL != defaultValues[i]) && (0 == strcmp(key, defaultValues[i]))) {\n+\t\t\tdefaultValues[i] = NULL;\n+\t\t\tdefaultValues[i + 1] = NULL;\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t/* First do the key */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, key)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\t/* Then the value */\n+\tif (propertyListAddString(env, args, iteratorData->nCommandLineDefines++, value)) {\n+\t\titeratorData->errorOccurred = JNI_TRUE;\n+\t\treturn;\n+\t}\n+\n+\tTrc_systemPropertyIterator(env, key, value);\n+}\n+\n+jobject\n+createSystemPropertyList(JNIEnv *env, const char *defaultValues[], int defaultCount)\n+{\n+\tVMI_ACCESS_FROM_ENV(env);\n+\n+\tjint i = 0;\n+\tjint nCommandLineDefines = 0;\n+\tjarray args = NULL;\n+\tint propertyCount = 0;\n+\tjclass stringClass = (*env)->FindClass(env, \"java/lang/String\");\n+\tif (NULL == stringClass) {\n+\t\treturn NULL;\n+\t}\n+\n+\t(*VMI)->CountSystemProperties(VMI, &propertyCount);\n+\tif (0 != propertyCount) {\n+\t\tCreateSystemPropertiesData iteratorData;\n+\n+\t\targs = (*env)->NewObjectArray(env, defaultCount + (propertyCount * 2), stringClass, NULL);\n+\t\tif (NULL == args) {\n+\t\t\treturn NULL;\n+\t\t}\n+\n+\t\titeratorData.errorOccurred = JNI_FALSE;\n+\t\titeratorData.args = args;\n+\t\titeratorData.nCommandLineDefines = nCommandLineDefines;\n+\t\titeratorData.env = env;\n+\t\titeratorData.defaultValues = defaultValues;\n+\t\titeratorData.defaultCount = defaultCount;\n+\n+\t\titeratorData.stringClass = stringClass;\n+\t\t(*VMI)->IterateSystemProperties(VMI, systemPropertyIterator, &iteratorData);\n+\t\tif (iteratorData.errorOccurred) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines = iteratorData.nCommandLineDefines;\n+\t}\n+\n+\tif (NULL == args) {\n+\t\targs = (*env)->NewObjectArray(env, defaultCount, stringClass, NULL);\n+\t}\n+\tif (NULL == args) {\n+\t\treturn NULL;\n+\t}\n+\n+\tfor (i = 0; i < defaultCount; ++i) {\n+\t\tif (NULL == defaultValues[i]) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (propertyListAddString(env, args, nCommandLineDefines, defaultValues[i])) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t\tnCommandLineDefines++;\n+\t}\n+\n+\treturn args;\n+}\n+\n+#if defined(WIN32)\n+\n+/**\n+ * @internal\n+ * Converts the Unicode string to UTF8 encoded data in the provided buffer.\n+ *\n+ * @param[in] portLibrary The port library\n+ * @param[in] unicodeString The unicode buffer to convert\n+ * @param[in] utf8Buffer The buffer to store the UTF8 encoded bytes into\n+ * @param[in] size The size of utf8Buffer\n+ *\n+ * @return 0 on success, -1 on failure.\n+ */\n+static I_32\n+convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *utf8Buffer, UDATA size)\n+{\n+\tPORT_ACCESS_FROM_PORT(portLibrary);\n+\tif (0 == WideCharToMultiByte(OS_ENCODING_CODE_PAGE, OS_ENCODING_WC_FLAGS, unicodeString, -1, utf8Buffer, (int)size, NULL, NULL)) {\n+\t\tj9error_set_last_error(GetLastError(), J9PORT_ERROR_OPFAILED); /* continue */\n+\t\treturn -1;\n+\t}\n+\treturn 0;\n+}\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+#if !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE)\n+\tOSVERSIONINFO versionInfo;\n+#endif /* !defined(_WIN32_WINNT_WINBLUE) || (_WIN32_WINNT_MAXVER < _WIN32_WINNT_WINBLUE) */\n+\tI_32 envSize = 0;\n+\tchar *envSpace = NULL;\n+\tchar *tempdir = NULL;\n+\tjobject result = NULL;\n+\tchar userhome[EsMaxPath];\n+\twchar_t unicodeTemp[EsMaxPath];\n+\tint i = 0;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath];\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\twchar_t unicodeHome[EsMaxPath];\n+\tHANDLE process = 0;\n+\tHANDLE token = 0;\n+\tUDATA handle = 0;\n+\tBOOL (WINAPI *func)(HANDLE hToken, LPWSTR lpProfileDir, LPDWORD lpcchSize);\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"\\\\\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\r\\n\";\n+\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &tempdir);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\ti = propIndex;\n+\tenvSize = (I_32)j9sysinfo_get_env(\"USERPROFILE\", NULL, 0);\n+\tif (-1 != envSize) {\n+\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM); /* trailing null taken into account */\n+\t\tif (NULL == envSpace) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tj9sysinfo_get_env(\"USERPROFILE\", envSpace, envSize);\n+\t\t\tstrings[propIndex++] = envSpace;\n+\t\t}\n+\t}\n+#if defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE)\n+\t/* dwPlatformId, VER_PLATFORM_WIN32_NT = https://msdn.microsoft.com/en-us/library/windows/desktop/ms724834(v=vs.85).aspx */\n+\tif ((i == propIndex) && IsWindowsVersionOrGreater(5, 0, 0))\n+#else /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\tversionInfo.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n+#pragma warning(suppress : 4996) /* ignore warning 'GetVersionExA': was declared deprecated */\n+\tif ((i == propIndex) && GetVersionEx(&versionInfo) && (VER_PLATFORM_WIN32_NT == versionInfo.dwPlatformId))\n+#endif /* defined(_WIN32_WINNT_WINBLUE) && (_WIN32_WINNT_MAXVER >= _WIN32_WINNT_WINBLUE) */\n+\t{\n+\t\tprocess = GetCurrentProcess();\n+\t\tif (OpenProcessToken(process, TOKEN_QUERY, &token)) {\n+\t\t\tenvSize = 0;\n+\t\t\tif (0 == j9util_open_system_library(\"userenv\", &handle, TRUE)) {\n+\t\t\t\tif (i == propIndex) {\n+\t\t\t\t\tif (0 == j9sl_lookup_name(handle, \"GetUserProfileDirectoryW\", (UDATA *)&func, \"ZPLP\")) {\n+\t\t\t\t\t\tenvSize = EsMaxPath;\n+\t\t\t\t\t\tif (func(token, unicodeHome, &envSize)) {\n+\t\t\t\t\t\t\t/* When the SystemDrive environment variable isn't set, such as when j9 is exec'ed\n+\t\t\t\t\t\t\t * running JCK tests, we get %SystemDrive%/Documents and Settings/...\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tif (0 == wcsncmp(unicodeHome, L\"%SystemDrive%\", 13)) {\n+\t\t\t\t\t\t\t\t/* Borrow userdir variable, which is used for real below */\n+\t\t\t\t\t\t\t\tif (GetSystemDirectoryW(unicodeTemp, EsMaxPath) > 1) {\n+\t\t\t\t\t\t\t\t\tunicodeHome[0] = unicodeTemp[0];\n+\t\t\t\t\t\t\t\t\tunicodeHome[1] = unicodeTemp[1];\n+\t\t\t\t\t\t\t\t\twcsncpy(&unicodeHome[2], &unicodeHome[13], envSize - 13);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tconvertToUTF8(PORTLIB, unicodeHome, userhome, EsMaxPath);\n+\t\t\t\t\t\t\tstrings[propIndex++] = userhome;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (i == propIndex) {\n+\t\t/* Fallback to Windows Directory */\n+\t\tenvSize = (I_32)j9sysinfo_get_env(\"WINDIR\", NULL, 0);\n+\t\tif (-1 == envSize) {\n+\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t} else {\n+\t\t\tenvSpace = j9mem_allocate_memory(envSize, OMRMEM_CATEGORY_VM);\t/* trailing null taken into account */\n+\t\t\tif (NULL == envSpace) {\n+\t\t\t\tstrings[propIndex++] = \"\\\\\";\n+\t\t\t} else {\n+\t\t\t\tj9sysinfo_get_env(\"WINDIR\", envSpace, envSize);\n+\t\t\t\tstrings[propIndex++] = envSpace;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n+\t\tstrings[propIndex++] = \"\\\\\";\n+\t} else {\n+\t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n+\t\tstrings[propIndex++] = userdir;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tresult = createSystemPropertyList(env, strings, propIndex);\n+\tj9mem_free_memory(tempdir);\n+\tj9mem_free_memory(envSpace);\n+\treturn result;\n+}\n+\n+#else /* defined(WIN32) */\n+\n+jobject\n+getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tchar *charResult = NULL;\n+\tchar *envSpace = NULL;\n+\tjobject plist = NULL;\n+#if JAVA_SPEC_VERSION < 17\n+\tchar userdir[EsMaxPath] = {0};\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tchar home[EsMaxPath] = {0};\n+\tchar *homeAlloc = NULL;\n+\tJ9VMThread *currentThread = (J9VMThread*)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\n+\t/* Hard coded file/path separators and other values */\n+\n+#if defined(J9ZOS390)\n+\tif (J2SE_VERSION_FROM_ENV(env)) {\n+\t\tstrings[propIndex++] = \"platform.notASCII\";\n+\t\tstrings[propIndex++] = \"true\";\n+\n+\t\tstrings[propIndex++] = \"os.encoding\";\n+\t\tstrings[propIndex++] = \"ISO8859_1\";\n+\t}\n+#endif /* defined(J9ZOS390) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"file.separator\";\n+\tstrings[propIndex++] = \"/\";\n+\n+\tstrings[propIndex++] = \"line.separator\";\n+\tstrings[propIndex++] = \"\\n\";\n+\n+\t/* Get the directory where the executable was started */\n+\tstrings[propIndex++] = \"user.dir\";\n+\tcharResult = getcwd(userdir, EsMaxPath);\n+\tif (NULL == charResult) {\n+\t\tstrings[propIndex++] = \".\";\n+\t} else {\n+\t\tstrings[propIndex++] = charResult;\n+\t}\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tstrings[propIndex++] = \"user.home\";\n+\tcharResult = NULL;\n+#if defined(J9ZOS390)\n+\tcharResult = getenv(\"HOME\");\n+\tif (NULL != charResult) {\n+\t\tstrings[propIndex++] = charResult;\n+\t} else {\n+\t\tuid_t uid = geteuid();\n+\t\tif (0 != uid) {\n+\t\t\tstruct passwd *userDescription = getpwuid(uid);\n+\t\t\tif (NULL != userDescription) {\n+\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tchar *loginID = getlogin();\n+\t\t\tif (NULL != loginID) {\n+\t\t\t\tstruct passwd *userDescription = getpwnam(loginID);\n+\t\t\t\tif (NULL != userDescription) {\n+\t\t\t\t\tcharResult = userDescription->pw_dir;\n+\t\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/* There exist situations where one of the above calls will fail.\n+\t * Fall through to the Unix solution for those cases.\n+\t */\n+#endif /* defined(J9ZOS390) */\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip getpwuid if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tif (!vmFuncs->isCheckpointAllowed(vm))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\t/*[PR 101939] user.home not set correctly when j9 invoked via execve(x,y,null) */\n+\t\tif (NULL == charResult) {\n+\t\t\tstruct passwd *pwentry = getpwuid(getuid());\n+\t\t\tif (NULL != pwentry) {\n+\t\t\t\tcharResult = pwentry->pw_dir;\n+\t\t\t\tstrings[propIndex++] = charResult;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == charResult) {\n+\t\tIDATA result = j9sysinfo_get_env(\"HOME\", home, sizeof(home));\n+\t\tstrings[propIndex] = \".\";\n+\t\tif (0 == result) {\n+\t\t\tif (strlen(home) > 0) {\n+\t\t\t\tstrings[propIndex] = home;\n+\t\t\t}\n+\t\t} else if (result > 0) {\n+\t\t\thomeAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != homeAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"HOME\", homeAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = homeAlloc;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t\tpropIndex += 1;\n+\t}\n+\n+#if JAVA_SPEC_VERSION < 17\n+\t/* Get the Temp Dir name */\n+\tstrings[propIndex++] = \"java.io.tmpdir\";\n+\tstrings[propIndex++] = getTmpDir(env, &envSpace);\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\tif (JAVA_SPEC_VERSION < 12) {\n+\t\t/* Get the timezone */\n+\t\tstrings[propIndex++] = \"user.timezone\";\n+\t\tstrings[propIndex++] = \"\";\n+\t}\n+\n+\tplist = createSystemPropertyList(env, strings, propIndex);\n+\tif (NULL != envSpace) {\n+\t\tj9mem_free_memory(envSpace);\n+\t}\n+\n+failed:\n+\tif (NULL != homeAlloc) {\n+\t\tj9mem_free_memory(homeAlloc);\n+\t}\n+\treturn plist;\n+}\n+\n+#endif /* defined(WIN32) */\n+\n+/**\n+ * @brief Get the default system properties.\n+ *\n+ * @return an Object array of system property key value pairs\n+ */\n+jobjectArray\n+getSystemPropertyList(JNIEnv *env)\n+{\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tint propIndex = 0;\n+\tjobject propertyList = NULL;\n+#define PROPERTY_COUNT 137\n+#if JAVA_SPEC_VERSION < 17\n+\tchar *propertyKey = NULL;\n+\tconst char *language = NULL;\n+\tconst char *region = NULL;\n+\tconst char *variant = NULL;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\tconst char *strings[PROPERTY_COUNT] = {0};\n+#define USERNAME_LENGTH 128\n+\tchar username[USERNAME_LENGTH] = {0};\n+\tchar *usernameAlloc = NULL;\n+\t/* buffer to hold the size of the maximum direct byte buffer allocations */\n+\tchar maxDirectMemBuff[24] = {0};\n+\tIDATA result = 0;\n+\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *javaVM = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\n+\t/* Change the allocation value PROPERTY_COUNT above as you add/remove properties,\n+\t * then follow the propIndex++ convention and consume 2 * slots for each property.\n+\t * 2 * number of property keys is the correct allocation. Also note the call to\n+\t * addSystemProperties below, which may add some configuration-specific properties.\n+\t * Be sure to leave enough room in the property list for all possibilities.\n+\t */\n+\n+\tif (J9_GC_POLICY_METRONOME == javaVM->omrVM->gcPolicy) {\n+\t\tstrings[propIndex++] = \"com.ibm.jvm.realtime\";\n+\t\tstrings[propIndex++] = \"soft\";\n+\t}\n+\n+#if defined(J9VM_OPT_SHARED_CLASSES)\n+\tstrings[propIndex++] = \"com.ibm.oti.shared.enabled\";\n+\tif ((NULL != javaVM->sharedClassConfig)\n+\t\t&& J9_ARE_ALL_BITS_SET(javaVM->sharedClassConfig->runtimeFlags, J9SHR_RUNTIMEFLAG_ENABLE_CACHE_NON_BOOT_CLASSES)\n+\t) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+#endif /* defined(J9VM_OPT_SHARED_CLASSES) */\n+\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigchain\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_CHAIN)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\tstrings[propIndex++] = \"ibm.signalhandling.sigint\";\n+\tif (J9_ARE_ANY_BITS_SET(javaVM->sigFlags, J9_SIG_NO_SIG_INT)) {\n+\t\tstrings[propIndex++] = \"false\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"true\";\n+\t}\n+\n+\t/* The JCLs use ibm.signalhandling.rs to determine if they should prevent the\n+\t * registration of signal handlers for what we consider to be asynchronous signals.\n+\t * The JCLs do not install handlers for any synchronous signals.\n+\t */\n+\tstrings[propIndex++] = \"ibm.signalhandling.rs\";\n+\tif (J9_ARE_ALL_BITS_SET(javaVM->sigFlags, J9_SIG_XRS_ASYNC)) {\n+\t\tstrings[propIndex++] = \"true\";\n+\t} else {\n+\t\tstrings[propIndex++] = \"false\";\n+\t}\n+\n+\tstrings[propIndex++] = \"com.ibm.vm.bitmode\";\n+#if defined(J9VM_ENV_DATA64)\n+\tstrings[propIndex++] = \"64\";\n+#else /* defined(J9VM_ENV_DATA64) */\n+\tstrings[propIndex++] = \"32\";\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\n+\tstrings[propIndex++] = \"com.ibm.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+#if JAVA_SPEC_VERSION < 17\n+\tstrings[propIndex++] = \"sun.cpu.endian\";\n+#if defined(J9VM_ENV_LITTLE_ENDIAN)\n+\tstrings[propIndex++] = \"little\";\n+#else /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\tstrings[propIndex++] = \"big\";\n+#endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n+\n+\t/* Get the language, region and variant */\n+\tlanguage = j9nls_get_language();\n+\tregion = j9nls_get_region();\n+\tvariant = j9nls_get_variant();\n+\n+\t/* CMVC 144405 : Norwegian Bokmal and Nynorsk need special consideration */\n+\tif ((0 == strcmp(language, \"nn\")) && (0 == strcmp(region, \"NO\"))) {\n+\t\tvariant = \"NY\";\n+\t}\n+\tif ((0 == strcmp(language, \"nn\")) || (0 == strcmp(language, \"nb\"))) {\n+\t\tlanguage = \"no\";\n+\t}\n+\n+\tstrings[propIndex++] = \"user.language\";\n+\tstrings[propIndex++] = language;\n+\n+\tpropertyKey = \"user.country\";\n+\tstrings[propIndex++] = propertyKey;\n+\tstrings[propIndex++] = region;\n+\n+\t/* Get the variant */\n+\tstrings[propIndex++] = \"user.variant\";\n+\tstrings[propIndex++] = variant;\n+#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the User name */\n+\tstrings[propIndex++] = \"user.name\";\n+\tstrings[propIndex] = \"unknown\";\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t/* Skip j9sysinfo_get_username if a checkpoint can be taken.\n+\t * https://github.com/eclipse-openj9/openj9/issues/15800\n+\t */\n+\tresult = -1;\n+\tif (!vmFuncs->isCheckpointAllowed(javaVM))\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t{\n+\t\tresult = j9sysinfo_get_username(username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_username(usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t} else {\n+\t\t\t\t\t/* free the memory, try j9sysinfo_get_env later */\n+\t\t\t\t\tj9mem_free_memory(usernameAlloc);\n+\t\t\t\t\tusernameAlloc = NULL;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#if defined(LINUX) || defined(OSX)\n+\tif (0 != result) {\n+\t\tresult = j9sysinfo_get_env(\"USER\", username, USERNAME_LENGTH);\n+\t\tif (0 == result) {\n+\t\t\tstrings[propIndex] = username;\n+\t\t} else if (result > 0) {\n+\t\t\tusernameAlloc = j9mem_allocate_memory(result, OMRMEM_CATEGORY_VM);\n+\t\t\tif (NULL != usernameAlloc) {\n+\t\t\t\tresult = j9sysinfo_get_env(\"USER\", usernameAlloc, result);\n+\t\t\t\tif (0 == result) {\n+\t\t\t\t\tif (strlen(usernameAlloc) > 0) {\n+\t\t\t\t\t\tstrings[propIndex] = usernameAlloc;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* keep it as \"unknown\" if the env value is empty */\n+\t\t\t\t}\n+\t\t\t\t/* usernameAlloc to be freed before this method returns */\n+\t\t\t} else {\n+\t\t\t\tvmFuncs->setNativeOutOfMemoryError(currentThread, 0, 0);\n+\t\t\t\tgoto failed;\n+\t\t\t}\n+\t\t}\n+\t}\n+#endif /* defined(LINUX) || defined(OSX) */\n+\tpropIndex += 1;\n+#undef USERNAME_LENGTH\n+\n+#if defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8)\n+\t/* Set the maximum direct byte buffer allocation property if it has not been set manually */\n+\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\tUDATA heapSize = javaVM->memoryManagerFunctions->j9gc_get_maximum_heap_size(javaVM);\n+\t\t/* allow up to 7/8 of the heap to be direct byte buffers */\n+\t\tjavaVM->directByteBufferMemoryMax = heapSize - (heapSize / 8);\n+\t}\n+#endif /* defined(OPENJ9_BUILD) && (JAVA_SPEC_VERSION == 8) */\n+#if !defined(OPENJ9_BUILD)\n+\t/* Don't set a default value for IBM Java 8. */\n+\tif ((~(UDATA)0) != javaVM->directByteBufferMemoryMax)\n+#endif /* !defined(OPENJ9_BUILD) */\n+\t{\n+\t\tstrings[propIndex] = \"sun.nio.MaxDirectMemorySize\";\n+\t\tpropIndex += 1;\n+\t\tif ((~(UDATA)0) == javaVM->directByteBufferMemoryMax) {\n+\t\t\tstrcpy(maxDirectMemBuff, \"-1\");\n+\t\t} else {\n+\t\t\tj9str_printf(maxDirectMemBuff, sizeof(maxDirectMemBuff), \"%zu\", javaVM->directByteBufferMemoryMax);\n+\t\t}\n+\t\tstrings[propIndex] = maxDirectMemBuff;\n+\t\tpropIndex += 1;\n+\t}\n+\n+\tpropertyList = getPlatformPropertyList(env, strings, propIndex);\n+\n+failed:\n+\tif (NULL != usernameAlloc) {\n+\t\tj9mem_free_memory(usernameAlloc);\n+\t}\n+\treturn propertyList;\n+}\ndiff --git a/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml b/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\nindex 61cf36f8be9..0997bd516ae 100644\n--- a/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\n+++ b/test/functional/cmdLineTests/pageAlignDirectMemory/PageAlignDirectMemory.xml\n@@ -26,9 +26,9 @@\n \n <suite id=\"PageAlignDirectMemory Command-Line Option Tests\" timeout=\"2400\">\n \n- <variable name=\"SUNPROP_TRUE\" value=\"j9jcl.352      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='true'\" />\n- <variable name=\"SUNPROP_FALSE\" value=\"j9jcl.352      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='false'\" />\n- <variable name=\"CLASS\" value=\"-Xtrace:print={j9jcl.352} -cp $Q$$RESJAR$$Q$ SystemProperties\" />\n+ <variable name=\"SUNPROP_TRUE\" value=\"j9vm.791      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='true'\" />\n+ <variable name=\"SUNPROP_FALSE\" value=\"j9vm.791      - systemPropertyIterator: added VM system property 'sun.nio.PageAlignDirectMemory'='false'\" />\n+ <variable name=\"CLASS\" value=\"-Xtrace:print={j9vm.791} -cp $Q$$RESJAR$$Q$ SystemProperties\" />\n \n  <variable name=\"ALIGNED\" value=\"-XX:+PageAlignDirectMemory\" />\n  <variable name=\"UNALIGNED\" value=\"-XX:-PageAlignDirectMemory\" />\n",
    "f9945bb01a8e6aaa2f2c53d30f610ac68e1f68b4": "diff --git a/runtime/compiler/optimizer/TreeLowering.cpp b/runtime/compiler/optimizer/TreeLowering.cpp\nindex b483f6ef120..57ad1df1d7b 100644\n--- a/runtime/compiler/optimizer/TreeLowering.cpp\n+++ b/runtime/compiler/optimizer/TreeLowering.cpp\n@@ -155,7 +155,7 @@ TR::TreeLowering::Transformer::splitForFastpath(TR::Block* const block, TR::Tree\n  * (substituted). That is, if a register dependency is found under `sourceNode`\n  * for the same register that is set on `substituteNode`, then `substituteNode`\n  * will be used instead of the dependency from `sourceNode`. Note that the\n- * reference of of `substituteNode` is incremented if/when it gets added. If\n+ * reference of `substituteNode` is incremented if/when it gets added. If\n  * `substituteNode` is NULL the no substitution will be attempted.\n  *\n  * @param targetNode is the GlRegDeps node that reg deps are copied to\ndiff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 727b167c8df..4af9d95ba27 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -7479,7 +7479,7 @@ static void handleOffHeapDataForArrays(\n \n       TR::Register *discontiguousDataAddrOffsetReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, discontiguousDataAddrOffsetReg, discontiguousDataAddrOffsetReg, cg);\n-      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n       generateRegImmInstruction(TR::InstOpCode::CMP4RegImm4, node, sizeReg, 1, cg);\n       generateRegImmInstruction(TR::InstOpCode::ADCRegImm4(), node, discontiguousDataAddrOffsetReg, 0, cg);\n \n@@ -7491,7 +7491,7 @@ static void handleOffHeapDataForArrays(\n       // Clear out tempReg if dealing with 0 length array\n       zeroReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, zeroReg, zeroReg, cg);\n-      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n       generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n       generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n       srm->reclaimScratchRegister(zeroReg);\n@@ -7536,7 +7536,7 @@ static void handleOffHeapDataForArrays(\n          // Clear out tempReg if dealing with 0 length array\n          zeroReg = srm->findOrCreateScratchRegister();\n          generateRegRegInstruction(TR::InstOpCode::XORRegReg(), node, zeroReg, zeroReg, cg);\n-         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n          generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n          generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n          srm->reclaimScratchRegister(zeroReg);\ndiff --git a/runtime/libffi/arm/gentramp.sh b/runtime/libffi/arm/gentramp.sh\nindex 05c43a30fc4..8ec38b24451 100644\n--- a/runtime/libffi/arm/gentramp.sh\n+++ b/runtime/libffi/arm/gentramp.sh\n@@ -2,7 +2,7 @@\n \n # -----------------------------------------------------------------------\n #  gentramp.sh - Copyright (c) 2010, Plausible Labs Cooperative, Inc.\n-#  \n+#\n #  ARM Trampoline Page Generator\n #\n #  Permission is hereby granted, free of charge, to any person obtaining\n@@ -41,7 +41,7 @@ PAGE_SIZE=4096\n # are unreachable due to our maximum pc-relative ldr offset.\n PAGE_AVAIL=`expr $PAGE_SIZE - 16`\n \n-# Compute the number of of available trampolines. \n+# Compute the number of available trampolines.\n TRAMPOLINE_COUNT=`expr $PAGE_AVAIL / $TRAMPOLINE_SIZE`\n \n header () {\n@@ -52,7 +52,7 @@ header () {\n     # Write out the license header\n cat << EOF\n #  Copyright (c) 2010, Plausible Labs Cooperative, Inc.\n-#  \n+#\n #  Permission is hereby granted, free of charge, to any person obtaining\n #  a copy of this software and associated documentation files (the\n #  ``Software''), to deal in the Software without restriction, including\n",
    "0c17bb52deb31ca34a9930001672bbd07f151b53": "diff --git a/runtime/compiler/optimizer/TreeLowering.cpp b/runtime/compiler/optimizer/TreeLowering.cpp\nindex b483f6ef120..57ad1df1d7b 100644\n--- a/runtime/compiler/optimizer/TreeLowering.cpp\n+++ b/runtime/compiler/optimizer/TreeLowering.cpp\n@@ -155,7 +155,7 @@ TR::TreeLowering::Transformer::splitForFastpath(TR::Block* const block, TR::Tree\n  * (substituted). That is, if a register dependency is found under `sourceNode`\n  * for the same register that is set on `substituteNode`, then `substituteNode`\n  * will be used instead of the dependency from `sourceNode`. Note that the\n- * reference of of `substituteNode` is incremented if/when it gets added. If\n+ * reference of `substituteNode` is incremented if/when it gets added. If\n  * `substituteNode` is NULL the no substitution will be attempted.\n  *\n  * @param targetNode is the GlRegDeps node that reg deps are copied to\ndiff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 727b167c8df..4af9d95ba27 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -7479,7 +7479,7 @@ static void handleOffHeapDataForArrays(\n \n       TR::Register *discontiguousDataAddrOffsetReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, discontiguousDataAddrOffsetReg, discontiguousDataAddrOffsetReg, cg);\n-      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n       generateRegImmInstruction(TR::InstOpCode::CMP4RegImm4, node, sizeReg, 1, cg);\n       generateRegImmInstruction(TR::InstOpCode::ADCRegImm4(), node, discontiguousDataAddrOffsetReg, 0, cg);\n \n@@ -7491,7 +7491,7 @@ static void handleOffHeapDataForArrays(\n       // Clear out tempReg if dealing with 0 length array\n       zeroReg = srm->findOrCreateScratchRegister();\n       generateRegRegInstruction(TR::InstOpCode::XOR4RegReg, node, zeroReg, zeroReg, cg);\n-      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+      // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n       generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n       generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n       srm->reclaimScratchRegister(zeroReg);\n@@ -7536,7 +7536,7 @@ static void handleOffHeapDataForArrays(\n          // Clear out tempReg if dealing with 0 length array\n          zeroReg = srm->findOrCreateScratchRegister();\n          generateRegRegInstruction(TR::InstOpCode::XORRegReg(), node, zeroReg, zeroReg, cg);\n-         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of of sizeReg.\n+         // Since array size is capped at 32 bits, we only need to check lower half (0-31 bits) of sizeReg.\n          generateRegRegInstruction(TR::InstOpCode::TEST4RegReg, node, sizeReg, sizeReg, cg);\n          generateRegRegInstruction(TR::InstOpCode::CMOVERegReg(), node, tempReg, zeroReg, cg);\n          srm->reclaimScratchRegister(zeroReg);\ndiff --git a/runtime/libffi/arm/gentramp.sh b/runtime/libffi/arm/gentramp.sh\nindex 05c43a30fc4..8ec38b24451 100644\n--- a/runtime/libffi/arm/gentramp.sh\n+++ b/runtime/libffi/arm/gentramp.sh\n@@ -2,7 +2,7 @@\n \n # -----------------------------------------------------------------------\n #  gentramp.sh - Copyright (c) 2010, Plausible Labs Cooperative, Inc.\n-#  \n+#\n #  ARM Trampoline Page Generator\n #\n #  Permission is hereby granted, free of charge, to any person obtaining\n@@ -41,7 +41,7 @@ PAGE_SIZE=4096\n # are unreachable due to our maximum pc-relative ldr offset.\n PAGE_AVAIL=`expr $PAGE_SIZE - 16`\n \n-# Compute the number of of available trampolines. \n+# Compute the number of available trampolines.\n TRAMPOLINE_COUNT=`expr $PAGE_AVAIL / $TRAMPOLINE_SIZE`\n \n header () {\n@@ -52,7 +52,7 @@ header () {\n     # Write out the license header\n cat << EOF\n #  Copyright (c) 2010, Plausible Labs Cooperative, Inc.\n-#  \n+#\n #  Permission is hereby granted, free of charge, to any person obtaining\n #  a copy of this software and associated documentation files (the\n #  ``Software''), to deal in the Software without restriction, including\n",
    "33767c224086bcd72d02c5529fe56a00bea9413d": "diff --git a/runtime/vm/BufferWriter.hpp b/runtime/vm/BufferWriter.hpp\nindex 4cfdcf4467d..7bd18bb50cc 100644\n--- a/runtime/vm/BufferWriter.hpp\n+++ b/runtime/vm/BufferWriter.hpp\n@@ -31,6 +31,7 @@ class VM_BufferWriter {\n \t * Data members\n \t */\n \tprivate:\n+\tJ9PortLibrary *_portLibrary;\n \tU_8 *_buffer;\n \tU_8 *_cursor;\n \tU_8 *_bufferEnd;\n@@ -90,8 +91,9 @@ class VM_BufferWriter {\n \n \tpublic:\n \n-\tVM_BufferWriter(U_8 *buffer, UDATA size)\n-\t\t: _buffer(buffer)\n+\tVM_BufferWriter(J9PortLibrary *portLibrary, U_8 *buffer, UDATA size)\n+\t\t: _portLibrary(portLibrary)\n+\t\t, _buffer(buffer)\n \t\t, _cursor(buffer)\n \t\t, _bufferEnd(buffer + size)\n \t\t, _maxCursor(NULL)\n@@ -342,6 +344,20 @@ class VM_BufferWriter {\n \t\twriteU8(val ? 1 : 0);\n \t}\n \n+\tvoid\n+\twriteFormattedString(const char *format, ...)\n+\t{\n+\t\tOMRPORT_ACCESS_FROM_J9PORT(_portLibrary);\n+\t\tva_list args;\n+\t\tva_start(args, format);\n+\t\tuintptr_t totalLength = omrstr_vprintf(NULL, 0, format, args);\n+\t\tif (checkBounds(totalLength)) {\n+\t\t\tomrstr_vprintf((char *)_cursor, _bufferEnd - _cursor, format, args);\n+\t\t\t_cursor += totalLength;\n+\t\t}\n+\t\tva_end(args);\n+\t}\n+\n \tstatic U_32\n \tconvertFromLEB128ToU32(U_8 *start)\n \t{\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex 3c77832f388..c11d962f4c6 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -965,4 +965,247 @@ VM_JFRChunkWriter::writeThreadStatisticsEvent(void *anElement, void *userData)\n \twriteEventSize(_bufferWriter, dataStart);\n }\n \n+static void\n+writeObject(J9JavaVM *vm, j9object_t obj, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9ROMClass *romClass = NULL;\n+\tif (J9VM_IS_INITIALIZED_HEAPCLASS_VM(vm, obj)) {\n+\t\tromClass = J9VM_J9CLASS_FROM_HEAPCLASS_VM(vm, obj)->romClass;\n+\t} else {\n+\t\tromClass = J9OBJECT_CLAZZ_VM(vm, obj)->romClass;\n+\t}\n+\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(romClass);\n+\tbufferWriter->writeFormattedString(\"%.*s@%p\", J9UTF8_LENGTH(className), J9UTF8_DATA(className), obj);\n+}\n+\n+static UDATA\n+stackWalkCallback(J9VMThread *vmThread, J9StackWalkState *state)\n+{\n+\tJ9JavaVM *vm = vmThread->javaVM;\n+\tJ9ObjectMonitorInfo *monitorInfo = (J9ObjectMonitorInfo *)state->userData2;\n+\tIDATA *monitorCount = (IDATA *)(&state->userData3);\n+\tJ9Method *method = state->method;\n+\tJ9Class *methodClass = J9_CLASS_FROM_METHOD(method);\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(methodClass->romClass);\n+\tJ9ROMMethod *romMethod = J9_ROM_METHOD_FROM_RAM_METHOD(method);\n+\tJ9UTF8 *methodName = J9ROMMETHOD_NAME(romMethod);\n+\n+\tVM_BufferWriter *bufferWriter = (VM_BufferWriter *)state->userData1;\n+\n+\tbufferWriter->writeFormattedString(\n+\t\t\t\"at %.*s.%.*s\",\n+\t\t\tJ9UTF8_LENGTH(className), J9UTF8_DATA(className),\n+\t\t\tJ9UTF8_LENGTH(methodName), J9UTF8_DATA(methodName));\n+\n+\tif (J9_ARE_ANY_BITS_SET(romMethod->modifiers, J9AccNative)) {\n+\t\tbufferWriter->writeFormattedString(\"(Native Method)\\n\");\n+\t} else {\n+\t\tUDATA offsetPC = state->bytecodePCOffset;\n+\t\tbool compiledMethod = (NULL != state->jitInfo);\n+\t\tJ9UTF8 *sourceFile = getSourceFileNameForROMClass(vm, methodClass->classLoader, methodClass->romClass);\n+\t\tif (NULL != sourceFile) {\n+\t\t\tbufferWriter->writeFormattedString(\n+\t\t\t\t\t\"(%.*s\", J9UTF8_LENGTH(sourceFile), J9UTF8_DATA(sourceFile));\n+\n+\t\t\tUDATA lineNumber = getLineNumberForROMClass(vm, method, offsetPC);\n+\n+\t\t\tif ((UDATA)-1 != lineNumber) {\n+\t\t\t\tbufferWriter->writeFormattedString(\":%zu\", lineNumber);\n+\t\t\t}\n+\n+\t\t\tif (compiledMethod) {\n+\t\t\t\tbufferWriter->writeFormattedString(\"(Compiled Code)\");\n+\t\t\t}\n+\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\t\t} else {\n+\t\t\tbufferWriter->writeFormattedString(\"(Bytecode PC: %zu\", offsetPC);\n+\t\t\tif (compiledMethod) {\n+\t\t\t\tbufferWriter->writeFormattedString(\"(Compiled Code)\");\n+\t\t\t}\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\t\t}\n+\n+\t\t/* Use a while loop as there may be more than one lock taken in a stack frame. */\n+\t\twhile ((0 != *monitorCount) && ((UDATA)monitorInfo->depth == state->framesWalked)) {\n+\t\t\tbufferWriter->writeFormattedString(\"\\t(entered lock: \");\n+\t\t\twriteObject(vm, monitorInfo->object, bufferWriter);\n+\t\t\tbufferWriter->writeFormattedString(\")\\n\");\n+\n+\t\t\tmonitorInfo += 1;\n+\t\t\tstate->userData2 = monitorInfo;\n+\n+\t\t\t(*monitorCount) -= 1;\n+\t\t}\n+\t}\n+\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+\n+static void\n+writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tUDATA javaTID = J9VMJAVALANGTHREAD_TID(currentThread, walkThread->threadObject);\n+\tUDATA osTID = ((J9AbstractThread *)walkThread->osThread)->tid;\n+\tUDATA javaPriority = vmFuncs->getJavaThreadPriority(vm, walkThread);\n+\tUDATA state = J9VMTHREAD_STATE_UNKNOWN;\n+\tconst char *stateStr = \"?\";\n+\tj9object_t monitorObject = NULL;\n+\tchar *threadName = NULL;\n+\n+\t/* Get thread state and monitor */\n+\tstate = getVMThreadObjectState(walkThread, &monitorObject, NULL, NULL);\n+\tswitch (state) {\n+\tcase J9VMTHREAD_STATE_RUNNING:\n+\t\tstateStr = \"R\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_BLOCKED:\n+\t\tstateStr = \"B\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_WAITING:\n+\tcase J9VMTHREAD_STATE_WAITING_TIMED:\n+\tcase J9VMTHREAD_STATE_SLEEPING:\n+\t\tstateStr = \"CW\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_PARKED:\n+\tcase J9VMTHREAD_STATE_PARKED_TIMED:\n+\t\tstateStr = \"P\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_SUSPENDED:\n+\t\tstateStr = \"S\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_DEAD:\n+\t\tstateStr = \"Z\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_INTERRUPTED:\n+\t\tstateStr = \"I\";\n+\t\tbreak;\n+\tcase J9VMTHREAD_STATE_UNKNOWN:\n+\t\tstateStr = \"?\";\n+\t\tbreak;\n+\tdefault:\n+\t\tstateStr = \"??\";\n+\t\tbreak;\n+\t}\n+\n+/* Get thread name */\n+#if JAVA_SPEC_VERSION >= 21\n+\tif (IS_JAVA_LANG_VIRTUALTHREAD(currentThread, walkThread->threadObject)) {\n+\t\t/* For VirtualThread, get name from threadObject directly. */\n+\t\tj9object_t nameObject = J9VMJAVALANGTHREAD_NAME(currentThread, walkThread->threadObject);\n+\t\tthreadName = getVMThreadNameFromString(currentThread, nameObject);\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 21 */\n+\t{\n+\t\tthreadName = getOMRVMThreadName(walkThread->omrVMThread);\n+\t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n+\t}\n+\tbufferWriter->writeFormattedString(\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s\",\n+\t\t\tthreadName,\n+\t\t\twalkThread,\n+\t\t\tjavaTID,\n+\t\t\tosTID,\n+\t\t\tjavaPriority,\n+\t\t\tstateStr);\n+\n+\tif (J9VMTHREAD_STATE_BLOCKED == state) {\n+\t\tbufferWriter->writeFormattedString(\" blocked on: \");\n+\t} else if ((J9VMTHREAD_STATE_WAITING == state) || (J9VMTHREAD_STATE_WAITING_TIMED == state)) {\n+\t\tbufferWriter->writeFormattedString(\" waiting on: \");\n+\t} else if ((J9VMTHREAD_STATE_PARKED == state) || (J9VMTHREAD_STATE_PARKED_TIMED == state)) {\n+\t\tbufferWriter->writeFormattedString(\" parked on: \");\n+\t} else {\n+\t\tbufferWriter->writeFormattedString(\"\\n\");\n+\t\treturn;\n+\t}\n+\n+\tif (NULL != monitorObject) {\n+\t\twriteObject(vm, monitorObject, bufferWriter);\n+\t} else {\n+\t\tbufferWriter->writeFormattedString(\"<unknown>\");\n+\t}\n+\tbufferWriter->writeFormattedString(\"\\n\");\n+}\n+\n+static void\n+writeStacktrace(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWriter *bufferWriter)\n+{\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tJ9StackWalkState stackWalkState = {0};\n+\tconst size_t maxMonitorInfosPerThread = 32;\n+\tJ9ObjectMonitorInfo monitorInfos[maxMonitorInfosPerThread];\n+\tmemset(monitorInfos, 0, sizeof(monitorInfos));\n+\n+\tIDATA monitorCount = vmFuncs->getOwnedObjectMonitors(currentThread, walkThread, monitorInfos, maxMonitorInfosPerThread, FALSE);\n+\n+\tstackWalkState.walkThread = walkThread;\n+\tstackWalkState.flags =\n+\t\t\tJ9_STACKWALK_ITERATE_FRAMES\n+\t\t\t| J9_STACKWALK_INCLUDE_NATIVES\n+\t\t\t| J9_STACKWALK_VISIBLE_ONLY\n+\t\t\t| J9_STACKWALK_RECORD_BYTECODE_PC_OFFSET\n+\t\t\t| J9_STACKWALK_NO_ERROR_REPORT;\n+\tstackWalkState.skipCount = 0;\n+\tstackWalkState.frameWalkFunction = stackWalkCallback;\n+\tstackWalkState.userData1 = bufferWriter;\n+\tstackWalkState.userData2 = monitorInfos;\n+\tstackWalkState.userData3 = (void *)monitorCount;\n+\n+\tvmFuncs->haltThreadForInspection(currentThread, walkThread);\n+\tvm->walkStackFrames(currentThread, &stackWalkState);\n+\tvmFuncs->resumeThreadForInspection(currentThread, walkThread);\n+\n+\tbufferWriter->writeFormattedString(\"\\n\");\n+}\n+\n+U_8 *\n+VM_JFRChunkWriter::writeThreadDumpEvent()\n+{\n+\t/* reserve size field */\n+\tU_8 *dataStart = reserveEventSize();\n+\n+\t_bufferWriter->writeLEB128(ThreadDumpID);\n+\n+\t/* write start time */\n+\t_bufferWriter->writeLEB128(j9time_current_time_millis());\n+\n+\tconst U_64 bufferSize = THREAD_DUMP_EVENT_SIZE_PER_THREAD * _vm->peakThreadCount;\n+\tU_8 *resultBuffer = (U_8 *)j9mem_allocate_memory(sizeof(U_8) * bufferSize, OMRMEM_CATEGORY_VM);\n+\n+\tif (NULL != resultBuffer) {\n+\t\tVM_BufferWriter resultWriter(privatePortLibrary, resultBuffer, bufferSize);\n+\t\tJ9VMThread *walkThread = J9_LINKED_LIST_START_DO(_vm->mainThread);\n+\t\tUDATA numThreads = 0;\n+\t\tJ9InternalVMFunctions *vmFuncs = _vm->internalVMFunctions;\n+\n+\t\tAssert_VM_mustHaveVMAccess(_currentThread);\n+\t\tvmFuncs->acquireExclusiveVMAccess(_currentThread);\n+\n+\t\twhile (NULL != walkThread) {\n+\t\t\twriteThreadInfo(_currentThread, walkThread, &resultWriter);\n+\t\t\twriteStacktrace(_currentThread, walkThread, &resultWriter);\n+\n+\t\t\twalkThread = J9_LINKED_LIST_NEXT_DO(_vm->mainThread, walkThread);\n+\t\t\tnumThreads += 1;\n+\t\t}\n+\t\tresultWriter.writeFormattedString(\"Number of threads: %zd\", numThreads);\n+\n+\t\tvmFuncs->releaseExclusiveVMAccess(_currentThread);\n+\n+\t\twriteUTF8String(resultWriter.getBufferStart(), resultWriter.getSize());\n+\t\tj9mem_free_memory(resultBuffer);\n+\t} else {\n+\t\t_buildResult = OutOfMemory;\n+\t}\n+\n+\t/* write size */\n+\twriteEventSize(dataStart);\n+\n+\treturn dataStart;\n+}\n #endif /* defined(J9VM_OPT_JFR) */\ndiff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex 84a35eecb05..f5412f0931e 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -81,6 +81,7 @@ enum MetadataTypeID {\n \tClassLoadingStatisticsID = 100,\n \tPhysicalMemoryID = 108,\n \tExecutionSampleID = 109,\n+\tThreadDumpID = 111,\n \tThreadID = 164,\n \tThreadGroupID = 165,\n \tClassID = 166,\n@@ -176,6 +177,7 @@ class VM_JFRChunkWriter {\n \tstatic constexpr int CLASS_LOADING_STATISTICS_EVENT_SIZE = 5 * sizeof(I_64);\n \tstatic constexpr int THREAD_CONTEXT_SWITCH_RATE_SIZE = sizeof(float) + (3 * sizeof(I_64));\n \tstatic constexpr int THREAD_STATISTICS_EVENT_SIZE = (6 * sizeof(U_64)) + sizeof(U_32);\n+\tstatic constexpr int THREAD_DUMP_EVENT_SIZE_PER_THREAD = 1000;\n \n \tstatic constexpr int METADATA_ID = 1;\n \n@@ -290,7 +292,7 @@ class VM_JFRChunkWriter {\n \n \t}\n \n-\tvoid writeJFRChunk()\n+\tvoid writeJFRChunk(bool dumpCalled)\n \t{\n \t\tU_8 *buffer = NULL;\n \t\tUDATA requiredBufferSize = 0;\n@@ -328,7 +330,7 @@ class VM_JFRChunkWriter {\n \t\tif (NULL == buffer) {\n \t\t\t_buildResult = OutOfMemory;\n \t\t} else {\n-\t\t\tVM_BufferWriter writer(buffer, requiredBufferSize);\n+\t\t\tVM_BufferWriter writer(privatePortLibrary, buffer, requiredBufferSize);\n \n \t\t\t_bufferWriter = &writer;\n \n@@ -401,6 +403,10 @@ class VM_JFRChunkWriter {\n \n \t\t\twritePhysicalMemoryEvent();\n \n+\t\t\tif (dumpCalled) {\n+\t\t\t\twriteThreadDumpEvent();\n+\t\t\t}\n+\n \t\t\twriteJFRHeader();\n \n \t\t\tif (_bufferWriter->overflowOccurred()) {\n@@ -758,6 +764,8 @@ class VM_JFRChunkWriter {\n \n \tvoid writeStringLiteral(const char *string, UDATA len);\n \n+\tvoid writeFormattedString(const char *format, ...);\n+\n \tU_8 *writeThreadStateCheckpointEvent();\n \n \tU_8 *writePackageCheckpointEvent();\n@@ -790,6 +798,8 @@ class VM_JFRChunkWriter {\n \n \tU_8 *writeOSInformationEvent();\n \n+\tU_8 *writeThreadDumpEvent();\n+\n \tvoid writeInitialSystemPropertyEvents(J9JavaVM *vm);\n \n \tvoid writeInitialEnvironmentVariableEvents();\n@@ -868,7 +878,9 @@ class VM_JFRChunkWriter {\n \n \t\trequiredBufferSize += _constantPoolTypes.getThreadContextSwitchRateCount() * THREAD_CONTEXT_SWITCH_RATE_SIZE;\n \n-\t\trequiredBufferSize += (_constantPoolTypes.getThreadStatisticsCount() * THREAD_STATISTICS_EVENT_SIZE);\n+\t\trequiredBufferSize += _constantPoolTypes.getThreadStatisticsCount() * THREAD_STATISTICS_EVENT_SIZE;\n+\n+\t\trequiredBufferSize += _vm->peakThreadCount * THREAD_DUMP_EVENT_SIZE_PER_THREAD;\n \n \t\treturn requiredBufferSize;\n \t}\ndiff --git a/runtime/vm/JFRWriter.hpp b/runtime/vm/JFRWriter.hpp\nindex 6e301665970..273d03dd257 100644\n--- a/runtime/vm/JFRWriter.hpp\n+++ b/runtime/vm/JFRWriter.hpp\n@@ -175,7 +175,7 @@ class VM_JFRWriter {\n \t}\n \n \tstatic bool\n-\tflushJFRDataToFile(J9VMThread *currentThread, bool finalWrite)\n+\tflushJFRDataToFile(J9VMThread *currentThread, bool finalWrite, bool dumpCalled)\n \t{\n \t\tbool result = true;\n \t\tVM_JFRChunkWriter chunkWriter(currentThread, finalWrite);\n@@ -191,7 +191,7 @@ class VM_JFRWriter {\n \t\t\tgoto fail;\n \t\t}\n \n-\t\tchunkWriter.writeJFRChunk();\n+\t\tchunkWriter.writeJFRChunk(dumpCalled);\n \t\tif (!chunkWriter.isOkay()) {\n \t\t\tresult = false;\n \t\t\tgoto fail;\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 6aff9c8e464..898dde79772 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -177,7 +177,7 @@ areJFRBuffersReadyForWrite(J9VMThread *currentThread)\n  * @returns true on success, false on failure\n  */\n static bool\n-writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite)\n+writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite, bool dumpCalled)\n {\n \tJ9JavaVM *vm = currentThread->javaVM;\n \n@@ -187,7 +187,7 @@ writeOutGlobalBuffer(J9VMThread *currentThread, bool finalWrite)\n #endif /* defined(DEBUG) */\n \n \tif (areJFRBuffersReadyForWrite(currentThread)) {\n-\t\tVM_JFRWriter::flushJFRDataToFile(currentThread, finalWrite);\n+\t\tVM_JFRWriter::flushJFRDataToFile(currentThread, finalWrite, dumpCalled);\n \n \t\t/* Reset the buffer */\n \t\tvm->jfrBuffer.bufferRemaining = vm->jfrBuffer.bufferSize;\n@@ -231,7 +231,7 @@ flushBufferToGlobal(J9VMThread *currentThread, J9VMThread *flushThread)\n \n \tomrthread_monitor_enter(vm->jfrBufferMutex);\n \tif (vm->jfrBuffer.bufferRemaining < bufferSize) {\n-\t\tif (!writeOutGlobalBuffer(currentThread, false)) {\n+\t\tif (!writeOutGlobalBuffer(currentThread, false, false)) {\n \t\t\tomrthread_monitor_exit(vm->jfrBufferMutex);\n \t\t\tsuccess = false;\n \t\t\tgoto done;\n@@ -442,7 +442,7 @@ jfrClassesUnload(J9HookInterface **hook, UDATA eventNum, void *eventData, void *\n \t * invalid, so write out all of the available data now.\n \t */\n \tflushAllThreadBuffers(currentThread, false);\n-\twriteOutGlobalBuffer(currentThread, false);\n+\twriteOutGlobalBuffer(currentThread, false, false);\n }\n \n /**\n@@ -477,7 +477,7 @@ jfrVMShutdown(J9HookInterface **hook, UDATA eventNum, void *eventData, void *use\n \n \t/* Flush and free all the thread buffers and write out the global buffer */\n \tflushAllThreadBuffers(currentThread, true);\n-\twriteOutGlobalBuffer(currentThread, true);\n+\twriteOutGlobalBuffer(currentThread, true, false);\n \n \tif (acquiredExclusive) {\n \t\treleaseExclusiveVMAccess(currentThread);\n@@ -544,7 +544,7 @@ jfrThreadEnd(J9HookInterface **hook, UDATA eventNum, void *eventData, void *user\n \tPORT_ACCESS_FROM_VMC(currentThread);\n \tacquireExclusiveVMAccess(currentThread);\n \tflushAllThreadBuffers(currentThread, false);\n-\twriteOutGlobalBuffer(currentThread, false);\n+\twriteOutGlobalBuffer(currentThread, false, false);\n \n \t/* Free the thread local buffer */\n \tj9mem_free_memory((void*)currentThread->jfrBuffer.bufferStart);\n@@ -1194,7 +1194,7 @@ jfrDump(J9VMThread *currentThread, BOOLEAN finalWrite)\n {\n \t/* Flush all the thread buffers and write out the global buffer. */\n \tflushAllThreadBuffers(currentThread, finalWrite);\n-\twriteOutGlobalBuffer(currentThread, finalWrite);\n+\twriteOutGlobalBuffer(currentThread, finalWrite, true);\n }\n \n static UDATA\n",
    "9712a35045dadc3593fcdbe7cf8eeafbcf10308c": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 1cb1b12d803..9f9a07dc825 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -404,6 +404,13 @@ MM_ConfigurationIncrementalGenerational::tearDown(MM_EnvironmentBase *env)\n \t}\n #endif /* defined(OMR_GC_VLHGC_CONCURRENT_COPY_FORWARD) */\n \n+#if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n+\tif (NULL != extensions->largeObjectVirtualMemory) {\n+\t\textensions->largeObjectVirtualMemory->kill(env);\n+\t\textensions->largeObjectVirtualMemory = NULL;\n+\t}\n+#endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n+\n \tMM_Configuration::tearDown(env);\n \n \t// cleanup after extensions->heapRegionManager\n",
    "be4088f0a3bd900d8e174c69473ff5b7fc9f1109": "diff --git a/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java b/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\nindex 14d53f2dda7..95243fda5f4 100644\n--- a/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\n+++ b/jcl/src/java.base/share/classes/java/lang/J9VMInternals.java\n@@ -173,7 +173,7 @@ private static void completeInitialization() {\n \t\t\tRuntime.getRuntime().addShutdownHook(new Thread(runnable, \"CommonCleanerShutdown\", true, false, false, null)); //$NON-NLS-1$\n \t\t}\n \t\t/*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n-/*[IF CRAC_SUPPORT]*/\n+\t\t/*[IF CRAC_SUPPORT]*/\n \t\tif (openj9.internal.criu.InternalCRIUSupport.isCRaCSupportEnabled()) {\n \t\t\t// export java.base/jdk.crac unconditionally\n \t\t\tJ9VMInternals.class.getModule().implAddExports(\"jdk.crac\"); //$NON-NLS-1$\n@@ -184,7 +184,17 @@ private static void completeInitialization() {\n \t\t\t\tom.get().implAddExports(\"jdk.crac.management\"); //$NON-NLS-1$\n \t\t\t}\n \t\t}\n-/*[ENDIF] CRAC_SUPPORT */\n+\t\t/*[ENDIF] CRAC_SUPPORT */\n+\t\t/*[IF (11 <= JAVA_SPEC_VERSION) & (JAVA_SPEC_VERSION <= 17)]*/\n+\t\t/* ImageReader should be initialized before main() is called to\n+\t\t * avoid being affected by a potential invalid java.home path.\n+\t\t */\n+\t\ttry {\n+\t\t\tjdk.internal.jimage.ImageReaderFactory.getImageReader();\n+\t\t} catch (java.io.UncheckedIOException e) {\n+\t\t\t// Ignored deliberately.\n+\t\t}\n+\t\t/*[ENDIF] (11 <= JAVA_SPEC_VERSION) & (JAVA_SPEC_VERSION <= 17) */\n \t}\n \n \t/**\ndiff --git a/test/functional/cmdLineTests/imageReaderInitializationTest/build.xml b/test/functional/cmdLineTests/imageReaderInitializationTest/build.xml\nnew file mode 100644\nindex 00000000000..24221d9ece7\n--- /dev/null\n+++ b/test/functional/cmdLineTests/imageReaderInitializationTest/build.xml\n@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+<project name=\"ImageReader\" default=\"build\" basedir=\".\">\n+\t<taskdef resource=\"net/sf/antcontrib/antlib.xml\" />\n+\t<description>\n+\t\tBuild cmdLineTests_imageReaderInitializationTest\n+\t</description>\n+\n+\t<import file=\"${TEST_ROOT}/functional/cmdLineTests/buildTools.xml\" />\n+\n+\t<!-- set properties for this build -->\n+\t<property name=\"DEST\" value=\"${BUILD_ROOT}/functional/cmdLineTests/imageReaderInitializationTest\" />\n+\t<property name=\"src\" location=\"src\" />\n+\t<property name=\"build\" location=\"bin\" />\n+\n+\t<target name=\"init\">\n+\t\t<mkdir dir=\"${DEST}\" />\n+\t\t<mkdir dir=\"${build}\" />\n+\t</target>\n+\n+\t<target name=\"compile\" depends=\"init\" description=\"Using java ${JDK_VERSION} to compile the source\">\n+\t\t<echo>Ant version is ${ant.version}</echo>\n+\t\t<echo>============COMPILER SETTINGS============</echo>\n+\t\t<echo>===fork:                         yes</echo>\n+\t\t<echo>===executable:                   ${compiler.javac}</echo>\n+\t\t<echo>===debug:                        on</echo>\n+\t\t<echo>===destdir:                      ${DEST}</echo>\n+\t\t<javac srcdir=\"${src}\" destdir=\"${build}\" debug=\"true\" fork=\"true\" executable=\"${compiler.javac}\" includeAntRuntime=\"false\" encoding=\"ISO-8859-1\">\n+\t\t\t<src path=\"${src}\" />\n+\t\t</javac>\n+\t</target>\n+\n+\t<target name=\"dist\" depends=\"compile\" description=\"generate the distribution\">\n+\t\t<jar jarfile=\"${DEST}/imageReaderInitializationTest.jar\" filesonly=\"true\">\n+\t\t\t<fileset dir=\"${build}\" />\n+\t\t\t<fileset dir=\"${src}\" />\n+\t\t</jar>\n+\t\t<copy todir=\"${DEST}\">\n+\t\t\t<fileset dir=\"${src}/../\">\n+\t\t\t\t<include name=\"**/*.mk\" />\n+\t\t\t\t<include name=\"**/*.xml\" />\n+\t\t\t</fileset>\n+\t\t</copy>\n+\t</target>\n+\n+\t<target name=\"clean\" depends=\"dist\" description=\"clean up\">\n+\t\t<!-- Delete the ${build} directory trees -->\n+\t\t<delete dir=\"${build}\" />\n+\t</target>\n+\n+\t<target name=\"build\" depends=\"buildCmdLineTestTools\">\n+\t\t<antcall target=\"clean\" inheritall=\"true\" />\n+\t</target>\n+</project>\ndiff --git a/test/functional/cmdLineTests/imageReaderInitializationTest/imageReaderInitializationTest.xml b/test/functional/cmdLineTests/imageReaderInitializationTest/imageReaderInitializationTest.xml\nnew file mode 100644\nindex 00000000000..bb93a6003b8\n--- /dev/null\n+++ b/test/functional/cmdLineTests/imageReaderInitializationTest/imageReaderInitializationTest.xml\n@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n+\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+\n+<!DOCTYPE suite SYSTEM \"cmdlinetester.dtd\">\n+\n+<suite id=\"ImageReader Initialization Test\" timeout=\"60\">\n+\t<test id=\"ImageReader Initialization Test\">\n+\t\t<command>$EXE$ -cp $RESJAR$ org.openj9.test.ImageReaderInitializationTest</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">IllegalStateException</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">ExceptionInInitializerError</output>\n+\t</test>\n+</suite>\ndiff --git a/test/functional/cmdLineTests/imageReaderInitializationTest/playlist.xml b/test/functional/cmdLineTests/imageReaderInitializationTest/playlist.xml\nnew file mode 100644\nindex 00000000000..ff36c1a159b\n--- /dev/null\n+++ b/test/functional/cmdLineTests/imageReaderInitializationTest/playlist.xml\n@@ -0,0 +1,45 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!--\n+Copyright IBM Corp. and others 2025\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] https://openjdk.org/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+-->\n+<playlist xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../TKG/playlist.xsd\">\n+\t<include>../variables.mk</include>\n+\t<test>\n+\t\t<testCaseName>cmdLineTester_imageReaderInitializationTest</testCaseName>\n+\t\t<variations>\n+\t\t\t<variation>NoOptions</variation>\n+\t\t</variations>\n+\t\t<command>\n+\t\t\t$(JAVA_COMMAND) $(CMDLINETESTER_JVM_OPTIONS) -Xdump \\\n+\t\t\t-DEXE=$(SQ)$(JAVA_COMMAND) $(JVM_OPTIONS)$(SQ) \\\n+\t\t\t-DRESJAR=$(Q)$(TEST_RESROOT)$(D)imageReaderInitializationTest.jar$(Q) \\\n+\t\t\t-jar $(CMDLINETESTER_JAR) -config $(Q)$(TEST_RESROOT)$(D)imageReaderInitializationTest.xml$(Q) \\\n+\t\t\t-explainExcludes -xids all,$(PLATFORM),$(VARIATION), -nonZeroExitWhenError; \\\n+\t\t\t${TEST_STATUS}\n+\t\t</command>\n+\t\t<levels>\n+\t\t\t<level>sanity</level>\n+\t\t</levels>\n+\t\t<groups>\n+\t\t\t<group>functional</group>\n+\t\t</groups>\n+\t</test>\n+</playlist>\ndiff --git a/test/functional/cmdLineTests/imageReaderInitializationTest/src/org/openj9/test/ImageReaderInitializationTest.java b/test/functional/cmdLineTests/imageReaderInitializationTest/src/org/openj9/test/ImageReaderInitializationTest.java\nnew file mode 100644\nindex 00000000000..c92f01797e0\n--- /dev/null\n+++ b/test/functional/cmdLineTests/imageReaderInitializationTest/src/org/openj9/test/ImageReaderInitializationTest.java\n@@ -0,0 +1,37 @@\n+/*\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ */\n+package org.openj9.test;\n+\n+/*\n+ * This test is to make sure that ImageReader is initialized during boot.\n+ * So in case an invalid java.home is set and an exception is thrown in\n+ * the code, the exception can be correctly thrown.\n+ */\n+public class ImageReaderInitializationTest {\n+\tpublic static void main(String[] args) {\n+\t\tSystem.setProperty(\"java.home\", \"/invalid/path/to/java\");\n+\t\tString javaHome = System.getProperty(\"java.home\");\n+\t\tif (javaHome.equals(\"/invalid/path/to/java\")) {\n+\t\t\tthrow new IllegalStateException(\"Invalid Java home set, throwing expected IllegalStateException\");\n+\t\t}\n+\t}\n+}\n",
    "00a6c450285770d5a955b392610b0aba20290819": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\nindex 3ff9acbf9d3..3cf742ab16b 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\n@@ -23,6 +23,8 @@\n \n import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n@@ -33,12 +35,29 @@\n import com.ibm.j9ddr.StructureReader.StructureDescriptor;\n import com.ibm.j9ddr.tools.FlagStructureList;\n \n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n import jdk.internal.org.objectweb.asm.ClassWriter;\n import jdk.internal.org.objectweb.asm.Label;\n import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n import jdk.internal.org.objectweb.asm.Type;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.function.Consumer;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n /**\n  * Generates the class bytecodes needed by DDR to represent, as Java classes,\n@@ -138,14 +157,6 @@ public static byte[] getStructureClassBytes(StructureDescriptor structure, Strin\n final class FlagsHelper extends HelperBase {\n \n \tpublic static byte[] getClassBytes(StructureDescriptor structure, String className) {\n-\t\tClassWriter clazz = new ClassWriter(0);\n-\n-\t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n-\n-\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n-\n-\t\tclinit.visitCode();\n-\n \t\tboolean useCName = BytecodeGenerator.shouldUseCNameFor(structure.getName());\n \t\tMap<String, Boolean> values = new TreeMap<>();\n \n@@ -159,11 +170,20 @@ public static byte[] getClassBytes(StructureDescriptor structure, String classNa\n \t\t\tvalues.put(name, Boolean.valueOf(constant.getValue() != 0));\n \t\t}\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassWriter clazz = new ClassWriter(0);\n+\n+\t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n+\n+\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n+\n+\t\tclinit.visitCode();\n+\n \t\tfor (Map.Entry<String, Boolean> entry : values.entrySet()) {\n \t\t\tString name = entry.getKey();\n \t\t\tBoolean value = entry.getValue();\n \n-\t\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, name, \"Z\", null, null).visitEnd();\n+\t\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, name, \"Z\", null, null).visitEnd();\n \n \t\t\tclinit.visitInsn(value.booleanValue() ? ICONST_1 : ICONST_0);\n \t\t\tclinit.visitFieldInsn(PUTSTATIC, className, name, Type.BOOLEAN_TYPE.getDescriptor());\n@@ -185,33 +205,72 @@ public static byte[] getClassBytes(StructureDescriptor structure, String classNa\n \t\tclazz.visitEnd();\n \n \t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc classDesc = ClassDesc.ofInternalName(className);\n+\n+\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\tfor (Map.Entry<String, Boolean> entry : values.entrySet()) {\n+\t\t\t\tbody.loadConstant(entry.getValue().booleanValue() ? 1 : 0);\n+\t\t\t\tbody.putstatic(classDesc, entry.getKey(), ConstantDescs.CD_boolean);\n+\t\t\t}\n+\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\tbody.aload(0);\n+\t\t\tbody.invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<ClassBuilder> builder = body -> {\n+\t\t\tbody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_FINAL | ClassFile.ACC_SUPER);\n+\n+\t\t\tfor (String name : values.keySet()) {\n+\t\t\t\tbody.withField(name, ConstantDescs.CD_boolean,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tbody.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC, clinit);\n+\n+\t\t\tbody.withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PRIVATE, init);\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n }\n \n-abstract class HelperBase implements Opcodes {\n+abstract class HelperBase\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\timplements Opcodes\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+{\n+\n+\tstatic final String byteFromLong = \"(J)B\";\n \n-\tstatic final String byteFromLong = Type.getMethodDescriptor(Type.BYTE_TYPE, Type.LONG_TYPE);\n+\tstatic final String doubleFromLong = \"(J)D\";\n \n-\tstatic final String doubleFromLong = Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.LONG_TYPE);\n+\tstatic final String doubleFromVoid = \"()D\";\n \n-\tstatic final String doubleFromVoid = Type.getMethodDescriptor(Type.DOUBLE_TYPE);\n+\tstatic final String floatFromLong = \"(J)F\";\n \n-\tstatic final String floatFromLong = Type.getMethodDescriptor(Type.FLOAT_TYPE, Type.LONG_TYPE);\n+\tstatic final String floatFromVoid = \"()F\";\n \n-\tstatic final String floatFromVoid = Type.getMethodDescriptor(Type.FLOAT_TYPE);\n+\tstatic final String intFromLong = \"(J)I\";\n \n-\tstatic final String intFromLong = Type.getMethodDescriptor(Type.INT_TYPE, Type.LONG_TYPE);\n+\tstatic final String longFromLong = \"(J)J\";\n \n-\tstatic final String longFromLong = Type.getMethodDescriptor(Type.LONG_TYPE, Type.LONG_TYPE);\n+\tstatic final String longFromVoid = \"()J\";\n \n-\tstatic final String longFromVoid = Type.getMethodDescriptor(Type.LONG_TYPE);\n+\tstatic final String shortFromLong = \"(J)S\";\n \n-\tstatic final String shortFromLong = Type.getMethodDescriptor(Type.SHORT_TYPE, Type.LONG_TYPE);\n+\tstatic final String voidFromLong = \"(J)V\";\n \n-\tstatic final String voidFromLong = Type.getMethodDescriptor(Type.VOID_TYPE, Type.LONG_TYPE);\n+\tstatic final String voidMethod = \"()V\";\n \n-\tstatic final String voidMethod = Type.getMethodDescriptor(Type.VOID_TYPE);\n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \n \tstatic final void addLong(MethodVisitor method, long value) {\n \t\tif (value != 0) {\n@@ -244,7 +303,13 @@ static final void loadInt(MethodVisitor method, int value) {\n \t\t\tmethod.visitInsn(ICONST_5);\n \t\t\tbreak;\n \t\tdefault:\n-\t\t\tmethod.visitLdcInsn(Integer.valueOf(value));\n+\t\t\tif ((Byte.MIN_VALUE <= value) && (value <= Byte.MAX_VALUE)) {\n+\t\t\t\tmethod.visitIntInsn(BIPUSH, value);\n+\t\t\t} else if ((Short.MIN_VALUE <= value) && (value <= Short.MAX_VALUE)) {\n+\t\t\t\tmethod.visitIntInsn(SIPUSH, value);\n+\t\t\t} else {\n+\t\t\t\tmethod.visitLdcInsn(Integer.valueOf(value));\n+\t\t\t}\n \t\t\tbreak;\n \t\t}\n \t}\n@@ -259,6 +324,16 @@ static final void loadLong(MethodVisitor method, long value) {\n \t\t}\n \t}\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tstatic final void addLong(CodeBuilder code, long value) {\n+\t\tif (value != 0) {\n+\t\t\tcode.loadConstant(value).ladd();\n+\t\t}\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n }\n \n final class PointerHelper extends HelperBase {\n@@ -287,6 +362,7 @@ private static Set<String> addNames(Set<String> set, String names) {\n \t\treturn set;\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate static boolean checkPresent(FieldDescriptor field, MethodVisitor method) {\n \t\tif (field.isPresent()) {\n \t\t\treturn true;\n@@ -302,6 +378,20 @@ private static boolean checkPresent(FieldDescriptor field, MethodVisitor method)\n \n \t\treturn false;\n \t}\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tprivate static boolean checkPresent(FieldDescriptor field, CodeBuilder body) {\n+\t\tif (field.isPresent()) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tbody.new_(noSuchFieldDesc);\n+\t\tbody.dup();\n+\t\tbody.invokespecial(noSuchFieldDesc, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\tbody.athrow();\n+\n+\t\treturn false;\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t/*\n \t * The new DDR tooling doesn't always distinguish between IDATA and I32 or I64\n@@ -367,29 +457,47 @@ private static String removeTypeTags(String type) {\n \t\treturn TypeTagPattern.matcher(type).replaceAll(\"\").trim();\n \t}\n \n-\tprivate final Type abstractPointerType;\n-\n \tprivate final String basePrefix;\n \n \tprivate final String className;\n \n-\tprivate final Type classType;\n-\n-\tprivate final ClassWriter clazz;\n-\n-\tprivate final String[] normalThrows;\n-\n-\tprivate final String[] optionalThrows;\n-\n \tprivate final StructureReader reader;\n \n-\tprivate final Type scalarType;\n-\n \tprivate final StructureDescriptor structure;\n \n \tprivate final StructureTypeManager typeManager;\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\tprivate final Type abstractPointerType;\n+\tprivate final Type classType;\n+\tprivate final ClassWriter clazz;\n+\tprivate final String[] normalThrows;\n+\tprivate final String[] optionalThrows;\n+\tprivate final Type scalarType;\n \tprivate final Type udataType;\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tprivate static final ClassDesc corruptDataDesc = ClassDesc.of(\"com.ibm.j9ddr.CorruptDataException\");\n+\tprivate static final ClassDesc fieldAccessorDesc = ClassDesc.of(\"com.ibm.j9ddr.GeneratedFieldAccessor\");\n+\tprivate static final ClassDesc generatedPointerDesc = ClassDesc.of(\"com.ibm.j9ddr.GeneratedPointerClass\");\n+\tprivate static final ClassDesc noSuchFieldDesc = ClassDesc.of(\"java.lang.NoSuchFieldException\");\n+\n+\tprivate static final List<ClassDesc> normalThrows = List.of(corruptDataDesc);\n+\tprivate static final List<ClassDesc> optionalThrows = List.of(corruptDataDesc, noSuchFieldDesc);\n+\n+\tprivate static final MethodTypeDesc long2int = MethodTypeDesc.of(ConstantDescs.CD_int, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc long2long = MethodTypeDesc.of(ConstantDescs.CD_long, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc long2void = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc void2long = MethodTypeDesc.of(ConstantDescs.CD_long);\n+\n+\tprivate final ClassDesc abstractPointerDesc;\n+\tprivate ClassBuilder classBuilder;\n+\tprivate final ClassDesc classDesc;\n+\tprivate final MethodTypeDesc long2abstact;\n+\tprivate final MethodTypeDesc scalar2abstract;\n+\tprivate final ClassDesc scalarDesc;\n+\tprivate ClassDesc superDesc;\n+\tprivate final ClassDesc udataDesc;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tprivate PointerHelper(StructureReader reader, StructureTypeManager typeManager, StructureDescriptor structure,\n \t\t\tString className) {\n@@ -403,20 +511,32 @@ private PointerHelper(StructureReader reader, StructureTypeManager typeManager,\n \n \t\tString prefix = className.substring(0, index + 1); // ends with '/vmNN/'\n \n-\t\tthis.abstractPointerType = Type.getObjectType(prefix + \"pointer/AbstractPointer\");\n \t\tthis.basePrefix = prefix;\n \t\tthis.className = className;\n+\t\tthis.reader = reader;\n+\t\tthis.structure = structure;\n+\t\tthis.typeManager = typeManager;\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tthis.abstractPointerType = Type.getObjectType(prefix + \"pointer/AbstractPointer\");\n \t\tthis.classType = Type.getObjectType(className);\n \t\tthis.clazz = new ClassWriter(0);\n \t\tthis.normalThrows = new String[] { \"com/ibm/j9ddr/CorruptDataException\" };\n \t\tthis.optionalThrows = new String[] { \"com/ibm/j9ddr/CorruptDataException\", \"java/lang/NoSuchFieldException\" };\n-\t\tthis.reader = reader;\n \t\tthis.scalarType = Type.getObjectType(prefix + \"types/Scalar\");\n-\t\tthis.structure = structure;\n-\t\tthis.typeManager = typeManager;\n \t\tthis.udataType = Type.getObjectType(prefix + \"types/UDATA\");\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tthis.abstractPointerDesc = ClassDesc.ofInternalName(prefix + \"pointer/AbstractPointer\");\n+\t\tthis.classDesc = ClassDesc.ofInternalName(className);\n+\t\tthis.long2abstact = MethodTypeDesc.of(abstractPointerDesc, ConstantDescs.CD_long);\n+\t\tthis.scalarDesc = ClassDesc.ofInternalName(prefix + \"types/Scalar\");\n+\t\tthis.scalar2abstract = MethodTypeDesc.of(abstractPointerDesc, scalarDesc);\n+\t\tthis.udataDesc = ClassDesc.ofInternalName(prefix + \"types/UDATA\");\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\n \tprivate MethodVisitor beginAnnotatedMethod(FieldDescriptor field, String name, String descriptor) {\n \t\tMethodVisitor method = beginMethod(field, name, descriptor);\n \n@@ -438,6 +558,43 @@ private MethodVisitor beginMethod(FieldDescriptor field, String name, String des\n \t\treturn clazz.visitMethod(ACC_PUBLIC, name, descriptor, null, exceptions);\n \t}\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate void addAnnotatedMethod(FieldDescriptor field, String name, MethodTypeDesc type,\n+\t\t\tConsumer<CodeBuilder> code) {\n+\t\tConsumer<MethodBuilder> method = builder -> {\n+\t\t\tList<ClassDesc> exceptions = field.isOptional() ? optionalThrows : normalThrows;\n+\n+\t\t\tbuilder.with(ExceptionsAttribute.ofSymbols(exceptions));\n+\n+\t\t\tif (field.isPresent()) {\n+\t\t\t\tAnnotation annotation = Annotation.of( //\n+\t\t\t\t\t\tfieldAccessorDesc, //\n+\t\t\t\t\t\tAnnotationElement.ofString(\"offsetFieldName\", String.format(\"_%sOffset_\", field.getName())), //\n+\t\t\t\t\t\tAnnotationElement.ofString(\"declaredType\", field.getDeclaredType()));\n+\n+\t\t\t\tbuilder.with(RuntimeVisibleAnnotationsAttribute.of(annotation));\n+\t\t\t}\n+\n+\t\t\tbuilder.withCode(code);\n+\t\t};\n+\n+\t\tclassBuilder.withMethod(name, type, ClassFile.ACC_PUBLIC, method);\n+\t}\n+\n+\tprivate void addMethod(FieldDescriptor field, String name, MethodTypeDesc type, Consumer<CodeBuilder> code) {\n+\t\tConsumer<MethodBuilder> method = builder -> {\n+\t\t\tList<ClassDesc> exceptions = field.isOptional() ? optionalThrows : normalThrows;\n+\n+\t\t\tbuilder.with(ExceptionsAttribute.ofSymbols(exceptions));\n+\t\t\tbuilder.withCode(code);\n+\t\t};\n+\n+\t\tclassBuilder.withMethod(name, type, ClassFile.ACC_PUBLIC, method);\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n \tprivate void doAccessorMethods() {\n \t\tfor (FieldDescriptor field : structure.getFields()) {\n \t\t\tString fieldName = field.getName();\n@@ -602,13 +759,14 @@ private void doArrayMethod(FieldDescriptor field) {\n \t */\n \tprivate void doBitfieldMethod(FieldDescriptor field, String baseType, int width) {\n \t\tString fieldName = field.getName();\n+\t\tString startFieldName = String.format(\"_%s_s_\", fieldName);\n+\t\tString accessorName = String.format(\"get%sBitfield\", baseType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType qualifiedBaseType = Type.getObjectType(qualifyType(baseType));\n \t\tType qualifiedReturnType = Type.getObjectType(qualifyType(generalizeSimpleType(baseType)));\n \t\tString returnDesc = Type.getMethodDescriptor(qualifiedReturnType);\n-\t\tString startFieldName = String.format(\"_%s_s_\", fieldName);\n-\t\tString accessorName = String.format(\"get%sBitfield\", baseType);\n \t\tString accessorDesc = Type.getMethodDescriptor(qualifiedBaseType, Type.INT_TYPE, Type.INT_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, fieldName, returnDesc);\n \n \t\tmethod.visitCode();\n@@ -621,6 +779,26 @@ private void doBitfieldMethod(FieldDescriptor field, String baseType, int width)\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc qualifiedBaseDesc = ClassDesc.ofInternalName(qualifyType(baseType));\n+\t\tClassDesc qualifiedReturnDesc = ClassDesc.ofInternalName(qualifyType(generalizeSimpleType(baseType)));\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(qualifiedBaseDesc, ConstantDescs.CD_int, ConstantDescs.CD_int);\n+\t\tClassDesc structureDesc = ClassDesc.ofInternalName(getStructureClassName());\n+\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(qualifiedReturnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getstatic(structureDesc, startFieldName, ConstantDescs.CD_int);\n+\t\t\t\tbody.loadConstant(width);\n+\t\t\t\tbody.invokevirtual(classDesc, accessorName, accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// no EA method for a bitfield\n \t}\n@@ -633,9 +811,9 @@ private void doBitfieldMethod(FieldDescriptor field, String baseType, int width)\n \t * }\n \t */\n \tprivate void doBooleanMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tString returnDesc = Type.getMethodDescriptor(Type.BOOLEAN_TYPE);\n \t\tString accessorDesc = Type.getMethodDescriptor(Type.BOOLEAN_TYPE, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -647,28 +825,56 @@ private void doBooleanMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_boolean);\n+\t\tMethodTypeDesc long2boolean = MethodTypeDesc.of(ConstantDescs.CD_boolean, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getBoolAtOffset\", long2boolean);\n+\t\t\t\tbody.ireturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Bool\", field);\n \t}\n \n \tprivate void doClassAnnotation() {\n \t\t// @com.ibm.j9ddr.GeneratedPointerClass(structureClass=BASE.class)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType annotationType = Type.getObjectType(\"com/ibm/j9ddr/GeneratedPointerClass\");\n \t\tAnnotationVisitor annotation = clazz.visitAnnotation(annotationType.getDescriptor(), true);\n \t\tType structureType = Type.getObjectType(getStructureClassName());\n \n \t\tannotation.visit(\"structureClass\", structureType);\n \t\tannotation.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc structureDesc = ClassDesc.ofInternalName(getStructureClassName());\n+\t\tAnnotationElement element = AnnotationElement.ofClass(\"structureClass\", structureDesc);\n+\n+\t\tclassBuilder.with(RuntimeVisibleAnnotationsAttribute.of(Annotation.of(generatedPointerDesc, element)));\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \tprivate void doConstructors(String superClassName) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tfinal String abstractPointerFromLong = Type.getMethodDescriptor(abstractPointerType, Type.LONG_TYPE);\n \t\tfinal String abstractPointerFromScalar = Type.getMethodDescriptor(abstractPointerType, scalarType);\n \t\tfinal String classFromLong = Type.getMethodDescriptor(classType, Type.LONG_TYPE);\n \t\tfinal String classFromScalar = Type.getMethodDescriptor(classType, scalarType);\n \t\tMethodVisitor method;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc long2self = MethodTypeDesc.of(classDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc scalar2self = MethodTypeDesc.of(classDesc, scalarDesc);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// protected SELF(long address) { super(address); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PROTECTED, \"<init>\", voidFromLong, null, null);\n \n@@ -680,8 +886,21 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokespecial(superDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.return_();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(ConstantDescs.INIT_NAME, long2void, ClassFile.ACC_PROTECTED, init);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(long address) { if (address == 0) return NULL; return new SELF(address); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\", classFromLong, null, null);\n \n@@ -706,8 +925,32 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(4, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tLabel nonNull = body.newLabel();\n+\n+\t\t\t\tbody.lload(0);\n+\t\t\t\tbody.lconst_0();\n+\t\t\t\tbody.lcmp();\n+\t\t\t\tbody.ifne(nonNull);\n+\t\t\t\tbody.getstatic(classDesc, \"NULL\", classDesc);\n+\t\t\t\tbody.areturn();\n+\n+\t\t\t\tbody.labelBinding(nonNull);\n+\t\t\t\tbody.new_(classDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.lload(0);\n+\t\t\t\tbody.invokespecial(classDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", long2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(AbstractPointer structure) { return cast(structure.getAddress()); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\",\n \t\t\t\t\tType.getMethodDescriptor(classType, abstractPointerType), null, null);\n@@ -721,8 +964,23 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc abstract2self = MethodTypeDesc.of(classDesc, abstractPointerDesc);\n+\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(abstractPointerDesc, \"getAddress\", void2long);\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", abstract2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(UDATA udata) { return cast(udata.longValue()); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\", Type.getMethodDescriptor(classType, udataType),\n \t\t\t\t\tnull, null);\n@@ -735,8 +993,24 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc udata2self = MethodTypeDesc.of(classDesc, udataDesc);\n+\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(udataDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", udata2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF add(long count) { return addOffset(count * BASE.SIZEOF); }\n+\t\t// bridge: AbstractPointer add(long count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"add\", classFromLong, null, null);\n \n@@ -750,7 +1024,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(5, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer add(long count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"add\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -761,8 +1034,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> add = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lmul();\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", long2self, ClassFile.ACC_PUBLIC, add);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF add(Scalar count) { return add(count.longValue()); }\n+\t\t// bridge: AbstractPointer add(Scalar count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"add\", classFromScalar, null, null);\n \n@@ -775,7 +1074,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer add(Scalar count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"add\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -786,8 +1084,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> add = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", scalar2self, ClassFile.ACC_PUBLIC, add);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF addOffset(long offset) { return cast(address + offset); }\n+\t\t// bridge: AbstractPointer addOffset(long offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"addOffset\", classFromLong, null, null);\n \n@@ -801,7 +1124,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(4, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer addOffset(long offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"addOffset\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -812,8 +1134,35 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> addOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.ladd();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", long2self, ClassFile.ACC_PUBLIC, addOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\n+\t\t\t\t\t\"addOffset\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF addOffset(Scalar offset) { return addOffset(offset.longValue()); }\n+\t\t// bridge: AbstractPointer addOffset(Scalar offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"addOffset\", classFromScalar, null, null);\n \n@@ -826,7 +1175,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer addOffset(Scalar offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"addOffset\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -837,8 +1185,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> addOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", scalar2self, ClassFile.ACC_PUBLIC, addOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF sub(long count) { return subOffset(count * SIZEOF); }\n+\t\t// bridge: AbstractPointer sub(long count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"sub\", classFromLong, null, null);\n \n@@ -852,7 +1225,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(5, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer sub(long count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"sub\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -863,8 +1235,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sub = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lmul();\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", long2self, ClassFile.ACC_PUBLIC, sub);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF sub(Scalar count) { return sub(count.longValue()); }\n+\t\t// bridge: AbstractPointer sub(Scalar count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"sub\", classFromScalar, null, null);\n \n@@ -877,7 +1275,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer sub(Scalar count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"sub\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -888,8 +1285,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sub = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", scalar2self, ClassFile.ACC_PUBLIC, sub);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF subOffset(long offset) { return cast(address - offset); }\n+\t\t// bridge: AbstractPointer subOffset(long offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"subOffset\", classFromLong, null, null);\n \n@@ -900,10 +1322,9 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitInsn(LSUB);\n \t\t\tmethod.visitMethodInsn(INVOKESTATIC, className, \"cast\", classFromLong, false);\n \t\t\tmethod.visitInsn(ARETURN);\n-\t\t\tmethod.visitMaxs(5, 3);\n+\t\t\tmethod.visitMaxs(4, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer subOffset(long offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"subOffset\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -914,8 +1335,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> subOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.lsub();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", long2self, ClassFile.ACC_PUBLIC, subOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF subOffset(Scalar offset) { return subOffset(offset.longValue()); }\n+\t\t// bridge: AbstractPointer subOffset(Scalar offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"subOffset\", classFromScalar, null, null);\n \n@@ -928,7 +1375,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer subOffset(Scalar offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"subOffset\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -939,8 +1385,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> subOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", scalar2self, ClassFile.ACC_PUBLIC, subOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF untag(long mask) { return cast(address & ~mask); }\n+\t\t// bridge: AbstractPointer untag(long tagBits)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"untag\", classFromLong, null, null);\n \n@@ -957,7 +1428,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(6, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer untag(long tagBits)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"untag\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -968,8 +1438,36 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> untag = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant(-1L);\n+\t\t\t\tbody.lxor();\n+\t\t\t\tbody.land();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", long2self, ClassFile.ACC_PUBLIC, untag);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF untag() { return untag(UDATA.SIZEOF - 1); }\n+\t\t// bridge: AbstractPointer untag()\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tString classFromVoid = Type.getMethodDescriptor(classType);\n \n@@ -983,7 +1481,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 1);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer untag()\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"untag\", Type.getMethodDescriptor(abstractPointerType), null, null);\n \n \t\t\tmethod.visitCode();\n@@ -993,8 +1490,32 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(1, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc void2self = MethodTypeDesc.of(classDesc);\n+\n+\t\t\tConsumer<CodeBuilder> untag = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) (reader.getSizeOfUDATA() - 1));\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", void2self, ClassFile.ACC_PUBLIC, untag);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", void2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", MethodTypeDesc.of(abstractPointerDesc),\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// protected long sizeOfBaseType() { return BASE.SIZEOF; }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PROTECTED, \"sizeOfBaseType\", longFromVoid, null, null);\n \n@@ -1004,6 +1525,16 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sizeof = body -> {\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lreturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sizeOfBaseType\", void2long, ClassFile.ACC_PROTECTED, sizeof);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1014,6 +1545,7 @@ private void doConstructors(String superClassName) {\n \t * }\n \t */\n \tprivate void doDoubleMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), doubleFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1025,6 +1557,21 @@ private void doDoubleMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_double);\n+\t\tMethodTypeDesc long2double = MethodTypeDesc.of(ConstantDescs.CD_double, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getDoubleAtOffset\", long2double);\n+\t\t\t\tbody.dreturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Double\", field);\n \t}\n@@ -1041,6 +1588,7 @@ private void doEAMethod(String actualType, FieldDescriptor field) {\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n \t\tString qualifiedActualType = qualifyPointerType(actualType);\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tString actualDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedActualType), Type.LONG_TYPE);\n \n@@ -1056,17 +1604,37 @@ private void doEAMethod(String actualType, FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc actualDesc = ClassDesc.ofInternalName(qualifiedActualType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(actualDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(actualDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n \t *\n \t * public EnumPointer _buildResultEA() throws CorruptDataException {\n-\t *     return EnumPointer.cast(nonNullFieldEA(ClassFileWriter.__buildResultOffset_, BuildResult.class));\n+\t *     return EnumPointer.cast(nonNullFieldEA(ClassFileWriter.__buildResultOffset_), BuildResult.class);\n \t * }\n \t */\n \tprivate void doEnumEAMethod(FieldDescriptor field) {\n \t\tString accessorName = field.getName() + \"EA\";\n \t\tString enumPointerDesc = qualifyPointerType(\"Enum\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType enumPointerType = Type.getObjectType(enumPointerDesc);\n \t\tString returnDesc = Type.getMethodDescriptor(enumPointerType);\n \t\tString castDesc = Type.getMethodDescriptor(enumPointerType, Type.LONG_TYPE, Type.getType(Class.class));\n@@ -1085,6 +1653,24 @@ private void doEnumEAMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc enumDesc = ClassDesc.ofInternalName(qualifyType(getEnumType(field.getType())));\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(enumDesc, ConstantDescs.CD_long, ConstantDescs.CD_Class);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(enumDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.ldc(enumDesc);\n+\t\t\t\tbody.invokestatic(enumDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1102,6 +1688,7 @@ private void doEnumMethod(FieldDescriptor field) {\n \t\tint enumSize = reader.getStructureSizeOf(enumType);\n \t\tPrimitiveAccessor accessor = PrimitiveAccessor.forSize(enumSize);\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), longFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1116,6 +1703,21 @@ private void doEnumMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, accessor.methodName, accessor.descriptor);\n+\t\t\t\tif (!accessor.returnsLong) {\n+\t\t\t\t\tbody.i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.lreturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), void2long, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEnumEAMethod(field);\n \t}\n@@ -1129,6 +1731,8 @@ private void doEnumMethod(FieldDescriptor field) {\n \t */\n \tprivate void doEnumPointerMethod(FieldDescriptor field) {\n \t\tString enumPointerDesc = qualifyPointerType(\"Enum\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType enumPointerType = Type.getObjectType(enumPointerDesc);\n \t\tString returnDesc = Type.getMethodDescriptor(enumPointerType);\n \t\tString castDesc = Type.getMethodDescriptor(enumPointerType, Type.LONG_TYPE, Type.getType(Class.class));\n@@ -1148,6 +1752,24 @@ private void doEnumPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 2);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc enumDesc = ClassDesc.ofInternalName(enumPointerDesc);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(enumDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(enumDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.ldc(enumDesc);\n+\t\t\t\tbody.invokestatic(enumDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1160,6 +1782,7 @@ private void doEnumPointerMethod(FieldDescriptor field) {\n \t * }\n \t */\n \tprivate void doFJ9ObjectMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifyPointerType(\"J9Object\"));\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1175,6 +1798,22 @@ private void doFJ9ObjectMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(qualifyPointerType(\"J9Object\"));\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectReferenceAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectReference\", field);\n \t}\n@@ -1188,6 +1827,8 @@ private void doFJ9ObjectMethod(FieldDescriptor field) {\n \t */\n \tprivate void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1204,6 +1845,23 @@ private void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1216,6 +1874,7 @@ private void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t * }\n \t */\n \tprivate void doFloatMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), floatFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1227,6 +1886,21 @@ private void doFloatMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_float);\n+\t\tMethodTypeDesc long2double = MethodTypeDesc.of(ConstantDescs.CD_float, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getFloatAtOffset\", long2double);\n+\t\t\t\tbody.freturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Float\", field);\n \t}\n@@ -1240,6 +1914,8 @@ private void doFloatMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"J9Class\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1255,6 +1931,22 @@ private void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectClassAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectClassReference\", field);\n \t}\n@@ -1268,6 +1960,8 @@ private void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectClassReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1284,6 +1978,23 @@ private void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(objectDesc, \"cast\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1297,6 +2008,8 @@ private void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"J9ObjectMonitor\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1312,6 +2025,22 @@ private void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectMonitorAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectMonitorReference\", field);\n \t}\n@@ -1325,6 +2054,8 @@ private void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectMonitorPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectMonitorReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1341,25 +2072,63 @@ private void doJ9ObjectMonitorPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(objectDesc, \"cast\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n \n \tprivate void doNullInstance() {\n \t\t// public static final SELF NULL = new SELF(0);\n-\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, \"NULL\", classType.getDescriptor(), null, null).visitEnd();\n-\n-\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n-\n-\t\tclinit.visitCode();\n-\t\tclinit.visitTypeInsn(NEW, className);\n-\t\tclinit.visitInsn(DUP);\n-\t\tclinit.visitInsn(LCONST_0);\n-\t\tclinit.visitMethodInsn(INVOKESPECIAL, className, \"<init>\", voidFromLong, false);\n-\t\tclinit.visitFieldInsn(PUTSTATIC, className, \"NULL\", classType.getDescriptor());\n-\t\tclinit.visitInsn(RETURN);\n-\t\tclinit.visitMaxs(4, 0);\n-\t\tclinit.visitEnd();\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\t{\n+\t\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, \"NULL\", classType.getDescriptor(), null, null).visitEnd();\n+\n+\t\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n+\n+\t\t\tclinit.visitCode();\n+\t\t\tclinit.visitTypeInsn(NEW, className);\n+\t\t\tclinit.visitInsn(DUP);\n+\t\t\tclinit.visitInsn(LCONST_0);\n+\t\t\tclinit.visitMethodInsn(INVOKESPECIAL, className, \"<init>\", voidFromLong, false);\n+\t\t\tclinit.visitFieldInsn(PUTSTATIC, className, \"NULL\", classType.getDescriptor());\n+\t\t\tclinit.visitInsn(RETURN);\n+\t\t\tclinit.visitMaxs(4, 0);\n+\t\t\tclinit.visitEnd();\n+\t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tclassBuilder.withField(\"NULL\", classDesc,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\n+\t\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\t\tbody.new_(classDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.lconst_0();\n+\t\t\t\tbody.invokespecial(classDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.putstatic(classDesc, \"NULL\", classDesc);\n+\t\t\t\tbody.return_();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC,\n+\t\t\t\t\tclinit);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1372,12 +2141,13 @@ private void doNullInstance() {\n \tprivate void doPointerMethod(FieldDescriptor field) {\n \t\tString targetType = getTargetType(removeTypeTags(field.getType()));\n \t\tString qualifiedTargetType = qualifyPointerType(targetType);\n-\t\tString castDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedTargetType), Type.LONG_TYPE);\n \n \t\tString returnType = generalizeSimpleType(targetType);\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n-\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tString castDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedTargetType), Type.LONG_TYPE);\n+\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1390,6 +2160,24 @@ private void doPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc targetDesc = ClassDesc.ofInternalName(qualifiedTargetType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(targetDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(targetDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1407,8 +2195,9 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \t\tString qualifiedFieldType = qualifyType(fieldType);\n \t\tString qualifiedReturnType = qualifyType(returnType);\n \t\tPrimitiveAccessor accessor = simpleTypeAccessor(type);\n-\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1426,6 +2215,28 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \t\t}\n \t\tmethod.visitMaxs(5, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc qualifiedFieldDesc = ClassDesc.ofInternalName(qualifiedFieldType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.new_(qualifiedFieldDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, accessor.methodName, accessor.descriptor);\n+\t\t\t\tif (!accessor.returnsLong) {\n+\t\t\t\t\tbody.i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.invokespecial(qualifiedFieldDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(fieldType, field);\n \t}\n@@ -1439,10 +2250,11 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \tprivate void doSRPEAMethod(FieldDescriptor field, boolean isWide) {\n \t\tString accessorName = field.getName() + \"EA\";\n \t\tString returnTypeName = qualifyPointerType(isWide ? \"WideSelfRelative\" : \"SelfRelative\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType returnType = Type.getObjectType(returnTypeName);\n \t\tString returnDesc = Type.getMethodDescriptor(returnType);\n \t\tString castDesc = Type.getMethodDescriptor(returnType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginMethod(field, accessorName, returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1455,6 +2267,23 @@ private void doSRPEAMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnTypeName);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1505,11 +2334,12 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \n \t\tString returnTypeName = qualifyPointerType(generalizeSimpleType(targetType));\n+\t\tString qualifiedPointerName = qualifyPointerType(targetType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType returnType = Type.getObjectType(returnTypeName);\n \t\tString returnDesc = Type.getMethodDescriptor(returnType);\n-\t\tString qualifiedPointerName = qualifyPointerType(targetType);\n \t\tString qualifiedPointerDesc = Type.getObjectType(qualifiedPointerName).getDescriptor();\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1557,6 +2387,54 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \t\tmethod.visitMaxs(4, isWide ? 3 : 2);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnTypeName);\n+\t\tClassDesc qualifiedPointerDesc = ClassDesc.ofInternalName(qualifiedPointerName);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tLabel nonNull = body.newLabel();\n+\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tif (isWide) {\n+\t\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\t\tbody.lstore(1);\n+\n+\t\t\t\t\tbody.lload(1);\n+\t\t\t\t\tbody.lconst_0();\n+\t\t\t\t\tbody.lcmp();\n+\t\t\t\t} else {\n+\t\t\t\t\tbody.invokevirtual(classDesc, \"getIntAtOffset\", long2int);\n+\t\t\t\t\tbody.istore(1);\n+\n+\t\t\t\t\tbody.iload(1);\n+\t\t\t\t}\n+\t\t\t\tbody.ifne(nonNull);\n+\n+\t\t\t\tbody.getstatic(qualifiedPointerDesc, \"NULL\", qualifiedPointerDesc);\n+\t\t\t\tbody.areturn();\n+\n+\t\t\t\tbody.labelBinding(nonNull);\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\taddLong(body, field.getOffset());\n+\t\t\t\tif (isWide) {\n+\t\t\t\t\tbody.lload(1);\n+\t\t\t\t} else {\n+\t\t\t\t\tbody.iload(1).i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.ladd();\n+\n+\t\t\t\tbody.invokestatic(qualifiedPointerDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoSRPEAMethod(field, isWide);\n \t}\n@@ -1570,10 +2448,11 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t */\n \tprivate void doSRPPointerMethod(FieldDescriptor field, boolean wide) {\n \t\tString returnType = qualifyPointerType(wide ? \"WideSelfRelative\" : \"SelfRelative\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1586,6 +2465,23 @@ private void doSRPPointerMethod(FieldDescriptor field, boolean wide) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1601,10 +2497,11 @@ private void doStructureMethod(FieldDescriptor field) {\n \t\tString fieldType = removeTypeTags(field.getType());\n \t\tString returnType = \"void\".equals(fieldType) ? \"Void\" : fieldType;\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifiedReturnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1617,6 +2514,23 @@ private void doStructureMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1631,10 +2545,11 @@ private void doStructureMethod(FieldDescriptor field) {\n \tprivate void doStructurePointerMethod(FieldDescriptor field) {\n \t\tString returnType = getTargetType(removeTypeTags(field.getType()));\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifiedReturnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1647,19 +2562,31 @@ private void doStructurePointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n \n \tprivate byte[] generate() {\n-\t\tString superClassName = structure.getSuperName();\n-\n-\t\tif (superClassName.isEmpty()) {\n-\t\t\tsuperClassName = basePrefix + \"pointer/StructurePointer\";\n-\t\t} else {\n-\t\t\tsuperClassName = basePrefix + \"pointer/generated/\" + superClassName + \"Pointer\";\n-\t\t}\n+\t\tString superClassName = getSuperClassName();\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_SUPER, className, null, superClassName, null);\n \n \t\tdoClassAnnotation();\n@@ -1670,12 +2597,42 @@ private byte[] generate() {\n \t\tclazz.visitEnd();\n \n \t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tsuperDesc = ClassDesc.ofInternalName(superClassName);\n+\n+\t\tConsumer<ClassBuilder> builder = body -> {\n+\t\t\tclassBuilder = body;\n+\n+\t\t\tbody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_SUPER);\n+\t\t\tbody.withSuperclass(superDesc);\n+\n+\t\t\tdoClassAnnotation();\n+\t\t\tdoNullInstance();\n+\t\t\tdoConstructors(superClassName);\n+\t\t\tdoAccessorMethods();\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \tprivate String getStructureClassName() {\n \t\treturn basePrefix + \"structure/\" + structure.getName();\n \t}\n \n+\tprivate String getSuperClassName() {\n+\t\tString superName = structure.getSuperName();\n+\t\tString superClassName;\n+\n+\t\tif (superName.isEmpty()) {\n+\t\t\tsuperClassName = basePrefix + \"pointer/StructurePointer\";\n+\t\t} else {\n+\t\t\tsuperClassName = basePrefix + \"pointer/generated/\" + superName + \"Pointer\";\n+\t\t}\n+\n+\t\treturn superClassName;\n+\t}\n+\n \tprivate String qualifyPointerType(String type) {\n \t\tString subPackage = predefinedPointerTypes.contains(type) ? \"pointer/\" : \"pointer/generated/\";\n \n@@ -1746,7 +2703,11 @@ static PrimitiveAccessor forSize(int size) {\n \t\t}\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tfinal String descriptor;\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tfinal MethodTypeDesc descriptor;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tfinal String methodName;\n \n@@ -1754,7 +2715,11 @@ static PrimitiveAccessor forSize(int size) {\n \n \tPrimitiveAccessor(String methodName, String descriptor, boolean returnsLong) {\n \t\tthis.methodName = methodName;\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tthis.descriptor = descriptor;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tthis.descriptor = MethodTypeDesc.ofDescriptor(descriptor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\tthis.returnsLong = returnsLong;\n \t}\n \n@@ -1770,26 +2735,32 @@ static byte[] getClassBytes(StructureDescriptor structure, String className) {\n \n \tprivate final String className;\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate final ClassWriter clazz;\n \n \tprivate final MethodVisitor clinit;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tprivate final StructureDescriptor structure;\n \n \tprivate StructureHelper(StructureDescriptor structure, String className) {\n \t\tsuper();\n \t\tthis.className = className;\n+\t\tthis.structure = structure;\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tthis.clazz = new ClassWriter(0);\n \t\tthis.clazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n \t\tthis.clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n \t\tthis.clinit.visitCode();\n-\t\tthis.structure = structure;\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate void defineField(String name, Type type, long value) {\n \t\tString typeDescriptor = type.getDescriptor();\n \n-\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, name, typeDescriptor, null, null).visitEnd();\n+\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, name, typeDescriptor, null, null).visitEnd();\n \n \t\tif (type.getSort() == Type.INT) {\n \t\t\tloadInt(clinit, (int) value);\n@@ -1809,6 +2780,93 @@ private void defineFields() {\n \t\t}\n \n \t\t// offsets\n+\t\tfor (Map.Entry<String, Integer> entry : getFieldMap().entrySet()) {\n+\t\t\tString fieldName = entry.getKey();\n+\t\t\tint fieldValue = entry.getValue().intValue();\n+\n+\t\t\tdefineField(fieldName, Type.INT_TYPE, fieldValue);\n+\t\t}\n+\n+\t\tclinit.visitInsn(RETURN);\n+\t\tclinit.visitMaxs(2, 0);\n+\t\tclinit.visitEnd();\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate byte[] generate() {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tdefineFields();\n+\n+\t\tMethodVisitor method = clazz.visitMethod(ACC_PUBLIC, \"<init>\", voidMethod, null, null);\n+\n+\t\tmethod.visitCode();\n+\t\tmethod.visitVarInsn(ALOAD, 0);\n+\t\tmethod.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", voidMethod, false);\n+\t\tmethod.visitInsn(RETURN);\n+\t\tmethod.visitMaxs(1, 1);\n+\t\tmethod.visitEnd();\n+\n+\t\tclazz.visitEnd();\n+\n+\t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc classDesc = ClassDesc.ofInternalName(className);\n+\t\tMap<String, Integer> fieldMap = getFieldMap();\n+\n+\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\tbody.putstatic(classDesc, \"SIZEOF\", ConstantDescs.CD_long);\n+\n+\t\t\t// other constants\n+\t\t\tfor (ConstantDescriptor constant : structure.getConstants()) {\n+\t\t\t\tbody.loadConstant(constant.getValue());\n+\t\t\t\tbody.putstatic(classDesc, constant.getName(), ConstantDescs.CD_long);\n+\t\t\t}\n+\n+\t\t\tfor (Map.Entry<String, Integer> entry : fieldMap.entrySet()) {\n+\t\t\t\tbody.loadConstant(entry.getValue().intValue());\n+\t\t\t\tbody.putstatic(classDesc, entry.getKey(), ConstantDescs.CD_int);\n+\t\t\t}\n+\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\tbody.aload(0);\n+\t\t\tbody.invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<ClassBuilder> builder = classBody -> {\n+\t\t\tclassBody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_FINAL | ClassFile.ACC_SUPER);\n+\n+\t\t\tclassBody.withField(\"SIZEOF\", ConstantDescs.CD_long,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\n+\t\t\t// other constants\n+\t\t\tfor (ConstantDescriptor constant : structure.getConstants()) {\n+\t\t\t\tclassBody.withField(constant.getName(), ConstantDescs.CD_long,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tfor (String fieldName : fieldMap.keySet()) {\n+\t\t\t\tclassBody.withField(fieldName, ConstantDescs.CD_int,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tclassBody.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC,\n+\t\t\t\t\tclinit);\n+\n+\t\t\tclassBody.withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC, init);\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t}\n+\n+\tprivate Map<String, Integer> getFieldMap() {\n+\t\tMap<String, Integer> fields = new LinkedHashMap<>();\n+\n \t\tint bitFieldBitCount = 0;\n \t\tfor (FieldDescriptor field : structure.getFields()) {\n \t\t\tif (!field.isPresent()) {\n@@ -1823,7 +2881,7 @@ private void defineFields() {\n \t\t\t// make sure match a bitfield, not a C++ namespace\n \t\t\tif (colonIndex <= 0 || type.charAt(colonIndex - 1) == ':') {\n \t\t\t\t// regular offset field\n-\t\t\t\tdefineField(String.format(\"_%sOffset_\", fieldName), Type.INT_TYPE, fieldOffset);\n+\t\t\t\tfields.put(String.format(\"_%sOffset_\", fieldName), fieldOffset);\n \t\t\t} else {\n \t\t\t\t// bitfield\n \t\t\t\tint bitSize = Integer.parseInt(type.substring(colonIndex + 1).trim());\n@@ -1842,35 +2900,16 @@ private void defineFields() {\n \t\t\t\t}\n \n \t\t\t\t// 's' field\n-\t\t\t\tdefineField(String.format(\"_%s_s_\", fieldName), Type.INT_TYPE, bitFieldBitCount);\n+\t\t\t\tfields.put(String.format(\"_%s_s_\", fieldName), bitFieldBitCount);\n \n \t\t\t\t// 'b' field\n-\t\t\t\tdefineField(String.format(\"_%s_b_\", fieldName), Type.INT_TYPE, bitSize);\n+\t\t\t\tfields.put(String.format(\"_%s_b_\", fieldName), bitSize);\n \n \t\t\t\tbitFieldBitCount += bitSize;\n \t\t\t}\n \t\t}\n \n-\t\tclinit.visitInsn(RETURN);\n-\t\tclinit.visitMaxs(2, 0);\n-\t\tclinit.visitEnd();\n-\t}\n-\n-\tprivate byte[] generate() {\n-\t\tdefineFields();\n-\n-\t\tMethodVisitor method = clazz.visitMethod(ACC_PUBLIC, \"<init>\", voidMethod, null, null);\n-\n-\t\tmethod.visitCode();\n-\t\tmethod.visitVarInsn(ALOAD, 0);\n-\t\tmethod.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", voidMethod, false);\n-\t\tmethod.visitInsn(RETURN);\n-\t\tmethod.visitMaxs(1, 1);\n-\t\tmethod.visitEnd();\n-\n-\t\tclazz.visitEnd();\n-\n-\t\treturn clazz.toByteArray();\n+\t\treturn fields;\n \t}\n \n }\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\nindex 2212f4ec068..5cce8e3833e 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\n@@ -33,18 +33,22 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.jar.JarEntry;\n import java.util.jar.JarInputStream;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n import jdk.internal.org.objectweb.asm.ClassReader;\n import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n import com.ibm.j9ddr.IVMData;\n import com.ibm.j9ddr.tools.ddrinteractive.DDRInteractiveCommandException;\n@@ -53,7 +57,7 @@\n \n /**\n  * DDR Interactive classloader which is responsible for finding all classes specified by the plugins property.\n- * \n+ *\n  * @author apilkington\n  */\n public class DDRInteractiveClassLoader extends ClassLoader {\n@@ -78,6 +82,9 @@ public class DDRInteractiveClassLoader extends ClassLoader {\n \tprotected static ArrayList<String> runtimeCommandClasses = new ArrayList<>(); //classes that implement ICommand and are added after startup\n \tprivate final ArrayList<File> pluginSearchPath = new ArrayList<>(); //specify classloader paths by URI as this can be used by the File class and converted into a URL\n \n+\tstatic final String extensionClassname = DebugExtension.class.getName().replace('.', '/');\n+\tstatic final String extensionDescriptor = \"L\" + extensionClassname + \";\";\n+\n \tpublic DDRInteractiveClassLoader(IVMData vmdata) throws DDRInteractiveCommandException {\n \t\tthis(vmdata, vmdata.getClassLoader());\n \t}\n@@ -91,11 +98,11 @@ public DDRInteractiveClassLoader(IVMData vmdata, ClassLoader loader) throws DDRI\n \t\tconfigureSearchPath();\n \t\tloadPlugins();\n \t}\n-\t\n+\n \t/**\n \t * Check to see if a class has the version annotation and if so whether it matches the version of the currently\n \t * running vm.\n-\t * \n+\t *\n \t * @param url\n \t * @param clazz\n \t */\n@@ -140,11 +147,11 @@ private void definePackage(String name) {\n \t}\n \n \t/**\n-\t * At the bottom of this file is a main and a special constructor which is useful for running and testing \n+\t * At the bottom of this file is a main and a special constructor which is useful for running and testing\n \t * this class loader as a stand-alone application\n \t */\n \n-\t//if the required system property has been set then parse it and add the paths to the classloader search path\n+\t// if the required system property has been set then parse it and add the paths to the classloader search path\n \tprivate void configureSearchPath() {\n \t\t// The search path can be set by a system property or environment variable with the sys prop taking precedence\n \t\t// TODO handle quoted string, blanks in the file name\n@@ -173,26 +180,28 @@ private void configureSearchPath() {\n \t\t}\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t/**\n-\t * Used with asm's ClassReader - checks if a given class has a DTFJPlugin annotation and reads its name.\n+\t * Used with ASM's ClassReader - checks if a given class has a DTFJPlugin annotation and reads its name.\n \t *\n \t * @author blazejc\n \t */\n-\tprivate static class DTFJPluginSnifferVisitor extends ClassVisitor {\n-\t\tprivate boolean isDebugExtension = false;\n-\t\tprivate String className;\n+\tprivate static final class DTFJPluginSnifferVisitor extends ClassVisitor {\n \n-\t\tpublic DTFJPluginSnifferVisitor() {\n+\t\tboolean isDebugExtension;\n+\t\tString className;\n+\n+\t\tDTFJPluginSnifferVisitor() {\n \t\t\tsuper(Opcodes.ASM4, null);\n \t\t}\n \n+\t\t@Override\n \t\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n-\t\t\tString extensionClassname = DebugExtension.class.getName().replace(\".\", \"/\");\n \t\t\tlogger.finest(\"Inspecting annotation \" + desc + \" looking for annotation \" + extensionClassname);\n \n-\t\t\t// check if the annotation on this class contains the class name of the DebugExtension annotation\n+\t\t\t// check if the annotation on this class matches the class name of the DebugExtension annotation\n \t\t\t// this amounts to the annotation being present or not on the visited class\n-\t\t\tif (desc.contains(extensionClassname)) {\n+\t\t\tif (extensionDescriptor.equals(desc)) {\n \t\t\t\tlogger.finest(\"Found DebugExtension annotation\");\n \t\t\t\tisDebugExtension = true;\n \t\t\t} else {\n@@ -202,19 +211,47 @@ public AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n \t\t\treturn null;\n \t\t}\n \n+\t\t@Override\n \t\tpublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n-\t\t\tclassName = name.replace(\"/\", \".\");\n+\t\t\tclassName = name.replace('/', '.');\n+\t\t}\n+\n+\t}\n+\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\t/**\n+\t * Used with classfile API - checks if a given class has a DTFJPlugin annotation and reads its name.\n+\t */\n+\tprivate static final class DTFJPluginSnifferVisitor {\n+\n+\t\tboolean isDebugExtension;\n+\t\tString className;\n+\n+\t\tDTFJPluginSnifferVisitor() {\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\tvoid visit(ClassModel model) {\n+\t\t\tclassName = model.thisClass().asInternalName().replace('/', '.');\n+\n+\t\t\tOptional<RuntimeVisibleAnnotationsAttribute> attribute = model\n+\t\t\t\t\t.findAttribute(Attributes.runtimeVisibleAnnotations());\n+\n+\t\t\tif (attribute.isPresent()) {\n+\t\t\t\tfor (java.lang.classfile.Annotation annotation : attribute.get().annotations()) {\n+\t\t\t\t\tif (annotation.className().equalsString(extensionDescriptor)) {\n+\t\t\t\t\t\tisDebugExtension = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n-\t\tpublic void visitAttribute(Attribute attr) {}\n-\t\tpublic void visitEnd() {}\n-\t\tpublic FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return null; }\n-\t\tpublic void visitInnerClass(String arg0, String arg1, String arg2, int arg3) {}\n-\t\tpublic MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) { return null; }\n-\t\tpublic void visitOuterClass(String arg0, String arg1, String arg2) {}\n-\t\tpublic void visitSource(String arg0, String arg1) {}\n \t}\n \n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n \t//******************************************************************************************************\n \t//******************************************************************************************************\n \t//******************************************************************************************************\n@@ -248,9 +285,9 @@ private abstract class ClassFile {\n \t\tpublic abstract URL toURL();\n \n \t\t/**\n-\t\t * Load the code into a buffer then pass the buffer to \n+\t\t * Load the code into a buffer then pass the buffer to\n \t\t * loadByteCodeFromBuffer(String...) for loading\n-\t\t * \n+\t\t *\n \t\t * @return the class if loaded OK, otherwise null\n \t\t */\n \t\tpublic Class<?> loadByteCode() {\n@@ -288,6 +325,7 @@ public Class<?> loadByteCode() {\n \t\t * @throws IOException\n \t\t */\n \t\tprivate byte[] readByteCodeFromStream(InputStream in) throws IOException {\n+\t\t\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \t\t\tbyte[] buffer = new byte[4096];\n \t\t\tByteArrayOutputStream out = new ByteArrayOutputStream(4096);\n \t\t\tint bytesRead = 0;\n@@ -295,6 +333,9 @@ private byte[] readByteCodeFromStream(InputStream in) throws IOException {\n \t\t\t\tout.write(buffer, 0, bytesRead);\n \t\t\t}\n \t\t\treturn out.toByteArray();\n+\t\t\t/*[ELSE] JAVA_SPEC_VERSION == 8 */\n+\t\t\treturn in.readAllBytes();\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION == 8 */\n \t\t}\n \n \t\t/**\n@@ -347,7 +388,7 @@ private Class<?> loadByteCodeFromBuffer(URL u, String packageName, byte[] byteco\n \t}\n \n \t/**\n-\t * Represents the information we need to locate a class within a jar file \n+\t * Represents the information we need to locate a class within a jar file\n \t */\n \tprivate class ClassFileWithinJarFile extends ClassFile {\n \t\tprivate File jarFile;\n@@ -404,18 +445,21 @@ public InputStream getStreamForByteCode() throws FileNotFoundException, IOExcept\n \t}\n \n \t/**\n-\t * Scans the plugins classpath and loads any DTFJPlugins found \n+\t * Scans the plugins classpath and loads any DTFJPlugins found\n \t * @throws CommandException if any location on the plugins search path does not exist\n \t */\n \tpublic void loadPlugins() throws DDRInteractiveCommandException {\n \t\tscanForClassFiles();\n \n-\t\tfor (String str : classFilesOnClasspath.keySet()) {\n+\t\tfor (Map.Entry<String, ClassFile> entry : classFilesOnClasspath.entrySet()) {\n+\t\t\tString className = entry.getKey();\n+\t\t\tClassFile classFile = entry.getValue();\n+\n \t\t\ttry {\n-\t\t\t\tDTFJPluginSnifferVisitor sniffer = sniffClassFile(classFilesOnClasspath.get(str).getStreamForByteCode());\n+\t\t\t\tDTFJPluginSnifferVisitor sniffer = sniffClassFile(classFile.getStreamForByteCode());\n \t\t\t\tif (sniffer.isDebugExtension) {\n-\t\t\t\t\tClass<?> clazz = loadClass(str);\n-\t\t\t\t\texamineClass(classFilesOnClasspath.get(str).toURL(), clazz);\n+\t\t\t\t\tClass<?> clazz = loadClass(className);\n+\t\t\t\t\texamineClass(classFile.toURL(), clazz);\n \t\t\t\t}\n \t\t\t} catch (ClassNotFoundException e) {\n \t\t\t\tlogger.log(logLevelForPluginLoadFailures, \"Exception while loading plugins : \" + e.getMessage());\n@@ -423,6 +467,7 @@ public void loadPlugins() throws DDRInteractiveCommandException {\n \t\t\t\tlogger.fine(e.getMessage());\n \t\t\t}\n \t\t}\n+\n \t\taddRuntimeCommands();\n \t}\n \n@@ -441,13 +486,13 @@ private void addRuntimeCommands() {\n \n \t/**\n \t * Scan the supplied plugin path to find commands which are written.\n-\t * This method does not support MVS on z/OS, the path needs to point to HFS locations \n+\t * This method does not support MVS on z/OS, the path needs to point to HFS locations\n \t * @param urls\n-\t * \n+\t *\n \t * @throws CommandException if any location on the plugins search path does not exist\n \t */\n \tprivate void scanForClassFiles() throws DDRInteractiveCommandException {\n-\t\tfor (File file : pluginSearchPath) { //a path entry can be null if the URI was malformed\n+\t\tfor (File file : pluginSearchPath) { // a path entry can be null if the URI was malformed\n \t\t\tlogger.fine(\"Scanning path \" + file + \" in search of DDR plugins\");\n \t\t\tif (!file.exists()) {\n \t\t\t\t//log that the entry does not exist and skip\n@@ -533,10 +578,17 @@ private void examineClassFile(File file) {\n \t\t}\n \t}\n \n-\tprivate DTFJPluginSnifferVisitor sniffClassFile(InputStream in) throws IOException {\n+\tprivate static DTFJPluginSnifferVisitor sniffClassFile(InputStream in) throws IOException {\n \t\tDTFJPluginSnifferVisitor sniffer = new DTFJPluginSnifferVisitor();\n-\t\tClassReader cr = new ClassReader(in);\n-\t\tcr.accept(sniffer, 0);\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassReader reader = new ClassReader(in);\n+\t\treader.accept(sniffer, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tbyte[] content = in.readAllBytes();\n+\t\tClassModel model = java.lang.classfile.ClassFile.of().parse(content);\n+\n+\t\tsniffer.visit(model);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\treturn sniffer;\n \t}\n \n@@ -597,7 +649,7 @@ public ArrayList<PluginConfig> getPluginFailures() {\n \t\treturn pluginFailures;\n \t}\n \n-\t/** \n+\t/**\n \t * Searches for and loads a class from the plugins search path.\n \t * @return the loaded class or null\n \t */\n@@ -652,7 +704,7 @@ public void removeCommandClass(String className) {\n //\tvmversion = \"any old rubbish\";\n //\tlogger.setLevel(Level.FINEST);\n //\tHandler handler = new ConsoleHandler();\n-//\thandler.setFormatter(new Formatter(){ \n+//\thandler.setFormatter(new Formatter(){\n //\t\tpublic String format(LogRecord logRecord) {\n //\t\t\treturn logRecord.getLevel() + \" \" + formatMessage(logRecord) + \"\\n\";\n //\t\t} // log message is a single line with level then text\ndiff --git a/jcl/src/java.base/share/classes/module-info.java.extra b/jcl/src/java.base/share/classes/module-info.java.extra\nindex 06289508e8e..88b369b7522 100644\n--- a/jcl/src/java.base/share/classes/module-info.java.extra\n+++ b/jcl/src/java.base/share/classes/module-info.java.extra\n@@ -47,9 +47,11 @@ exports openj9.management.internal to\n     openj9.jvm;\n exports openj9.internal.management to\n     java.management;\n+/*[IF JAVA_SPEC_VERSION < 24]*/\n exports jdk.internal.org.objectweb.asm to\n     openj9.dtfj,\n     openj9.dtfjview;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n // Following allows dtfj/dtfjview modules invoke module addReads & addExports programmatically via reflection APIs.\n exports jdk.internal.module to\n     openj9.dtfj,\ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\nindex 3e6277bd8bc..622b9e11549 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\n@@ -83,7 +83,9 @@ static final class ImageReference {\n \t\ttry {\n \t\t\tModule baseModule = String.class.getModule();\n \n+\t\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t\tModules.addExportsToAllUnnamed(baseModule, \"jdk.internal.org.objectweb.asm\"); //$NON-NLS-1$\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t\tModule thisModule = ImageFactory.class.getModule();\n \ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\nindex 8ec8e57d1e5..6dde2f3b5ad 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\n@@ -22,28 +22,99 @@\n  */\n package com.ibm.java.diagnostics.utils.plugins.impl;\n \n+import java.io.InputStream;\n+import java.io.IOException;\n import java.net.URL;\n import java.util.Set;\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+import java.util.Optional;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \n+import com.ibm.java.diagnostics.utils.plugins.Annotation;\n+import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n+import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n+\n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n+import jdk.internal.org.objectweb.asm.ClassReader;\n import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.util.function.Function;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n+public final class ClassScanner\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\textends ClassVisitor\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+{\n+\n+\tpublic static ClassInfo getClassInfo(InputStream file, URL url, Set<ClassListener> listeners) throws IOException {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassScanner scanner = new ClassScanner(url, listeners);\n+\t\tClassReader reader = new ClassReader(file);\n+\n+\t\treader.accept(scanner, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n+\n+\t\treturn scanner.info;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tFunction<ClassEntry, String> toDotted = entry -> entry.asInternalName().replace('/', '.');\n+\t\tClassModel model = ClassFile.of().parse(file.readAllBytes());\n+\t\tint version = model.majorVersion() + (model.minorVersion() << 16);\n+\t\tint access = model.flags().flagsMask();\n+\t\tString dotName = toDotted.apply(model.thisClass());\n+\t\tString signature = null; // not currently used\n+\t\tString dotSuperName = model.superclass().map(toDotted).orElse(null);\n+\t\tString[] interfaces = model.interfaces().stream().map(toDotted).toArray(String[]::new);\n+\n+\t\tClassInfo info = new ClassInfo(dotName, url);\n+\n+\t\tfor (String iface : interfaces) {\n+\t\t\tinfo.addInterface(iface);\n+\t\t}\n \n-import com.ibm.java.diagnostics.utils.plugins.Annotation;\n-import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n-import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n+\t\tfor (ClassListener listener : listeners) {\n+\t\t\tlistener.visit(version, access, dotName, signature, dotSuperName, interfaces);\n+\t\t}\n+\n+\t\tOptional<RuntimeVisibleAnnotationsAttribute> attribute = model\n+\t\t\t\t.findAttribute(Attributes.runtimeVisibleAnnotations());\n+\n+\t\tif (attribute.isPresent()) {\n+\t\t\tfor (java.lang.classfile.Annotation annotation : attribute.get().annotations()) {\n+\t\t\t\tString classDescriptor = annotation.className().stringValue();\n+\t\t\t\tAnnotation current = info.addAnnotation(classDescriptor);\n+\n+\t\t\t\tfor (ClassListener listener : listeners) {\n+\t\t\t\t\tlistener.visitAnnotation(classDescriptor, true /* visible */);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (AnnotationElement element : annotation.elements()) {\n+\t\t\t\t\tif (element.value() instanceof AnnotationValue.OfConstant constant) {\n+\t\t\t\t\t\tcurrent.addEntry(element.name().stringValue(), constant.resolvedValue());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-public class ClassScanner extends ClassVisitor {\n+\t\treturn info;\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate ClassInfo info;\n-\tprivate Annotation currentAnnotation = null;\n+\tprivate Annotation currentAnnotation;\n \tprivate final URL url; // where the class is being scanned from\n \tprivate final Set<ClassListener> listeners;\n \n-\tpublic ClassScanner(URL url, Set<ClassListener> listeners) {\n+\tprivate ClassScanner(URL url, Set<ClassListener> listeners) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n \t\tsuper(Opcodes.ASM9, null);\n \t\t/*[ELSEIF JAVA_SPEC_VERSION >= 15]*/\n@@ -58,12 +129,31 @@ public ClassScanner(URL url, Set<ClassListener> listeners) {\n \t}\n \n \t@Override\n-\tpublic AnnotationVisitor visitAnnotation(String classname, boolean visible) {\n-\t\tcurrentAnnotation = info.addAnnotation(classname);\n+\tpublic AnnotationVisitor visitAnnotation(String className, boolean visible) {\n+\t\tfinal class ClassScannerAnnotation extends AnnotationVisitor {\n+\n+\t\t\tClassScannerAnnotation(int api) {\n+\t\t\t\tsuper(api);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void visit(String name, Object value) {\n+\t\t\t\tClassScanner.this.visitAnnotationValue(name, value);\n+\t\t\t}\n+\t\t}\n+\n+\t\tcurrentAnnotation = info.addAnnotation(className);\n+\t\tfor (ClassListener listener : listeners) {\n+\t\t\tlistener.visitAnnotation(className, visible);\n+\t\t}\n+\t\treturn new ClassScannerAnnotation(api);\n+\t}\n+\n+\tfinal void visitAnnotationValue(String name, Object value) {\n+\t\tcurrentAnnotation.addEntry(name, value);\n \t\tfor (ClassListener listener : listeners) {\n-\t\t\tlistener.visitAnnotation(classname, visible);\n+\t\t\tlistener.visitAnnotationValue(name, value);\n \t\t}\n-\t\treturn new ClassScannerAnnotation(Opcodes.ASM4);\n \t}\n \n \t@Override\n@@ -71,85 +161,15 @@ public void visit(int version, int access, String name, String signature, String\n \t\tString dotName = name.replace('/', '.');\n \t\tString dotSuperName = superName.replace('/', '.');\n \t\tinfo = new ClassInfo(dotName, url);\n-\t\t//record all interfaces supplied by this class\n-\t\tfor(String iface : interfaces) {\n+\t\t// record all interfaces supplied by this class\n+\t\tfor (String iface : interfaces) {\n \t\t\tinfo.addInterface(iface);\n \t\t}\n-\t\tfor(ClassListener listener : listeners) {\n+\t\tfor (ClassListener listener : listeners) {\n \t\t\tlistener.visit(version, access, dotName, signature, dotSuperName, interfaces);\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void visitAttribute(Attribute attr) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic void visitEnd() {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic void visitInnerClass(String arg0, String arg1, String arg2, int arg3) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic void visitOuterClass(String arg0, String arg1, String arg2) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic void visitSource(String arg0, String arg1) {\n-\t\treturn;\n-\t}\n-\n-\tpublic ClassInfo getClassInfo() {\n-\t\treturn info;\n-\t}\n-\n-\tclass ClassScannerAnnotation extends AnnotationVisitor {\n-\n-\t\tpublic ClassScannerAnnotation(int arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic AnnotationVisitor visitAnnotation(String name, String desc) {\n-\t\t\treturn null; //not interested in nested annotations\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic AnnotationVisitor visitArray(String name) {\n-\t\t\treturn null; //not interested in arrays\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void visitEnum(String name, String desc, String value) {\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void visit(String name, Object value) {\n-\t\t\tcurrentAnnotation.addEntry(name, value);\n-\t\t\tfor (ClassListener listener : listeners) {\n-\t\t\t\tlistener.visitAnnotationValue(name, value);\n-\t\t\t}\n-\n-\t\t}\n-\t}\n-\n \t/*[IF JAVA_SPEC_VERSION == 17]*/\n \t@Deprecated\n \t@Override\n@@ -165,4 +185,11 @@ public void visitPermittedSubclassExperimental(String className) {\n \t}\n \t/*[ENDIF] JAVA_SPEC_VERSION == 17 */\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate ClassScanner() {\n+\t\tsuper();\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n }\ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\nindex 4cedb70116a..64ac8c9a2ec 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\n@@ -43,8 +43,6 @@\n import java.util.stream.Stream;\n /*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n \n-import jdk.internal.org.objectweb.asm.ClassReader;\n-\n import com.ibm.java.diagnostics.utils.commands.CommandException;\n import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n@@ -72,14 +70,14 @@ public class PluginManagerImpl implements PluginManager {\n \t */\n \tprotected final ArrayList<File> pluginSearchPath = new ArrayList<>();\n \n-\tprivate static PluginManagerImpl instance = null;\n+\tprivate static PluginManagerImpl instance;\n \n \t/**\n \t * listeners for moving over classes\n \t */\n \tprivate final Set<ClassListener> listeners = new HashSet<>();\n \n-\tprivate URL[] classpath = null;\n+\tprivate URL[] classpath;\n \n \tpublic static PluginManager getPluginManager() {\n \t\tif (instance == null) {\n@@ -179,7 +177,9 @@ private void scanModule(String moduleName) {\n \t}\n \n \tvoid listClassFiles(Path path) {\n-\t\ttry (Stream<Path> paths = Files.list(path).filter(filePath -> !filePath.endsWith(\"module-info.class\"))) { //$NON-NLS-1$\n+\t\ttry (Stream<Path> files = Files.list(path);\n+\t\t\tStream<Path> paths = files.filter(filePath -> !filePath.endsWith(\"module-info.class\")) //$NON-NLS-1$\n+\t\t) {\n \t\t\tpaths.forEach(filePath -> {\n \t\t\t\tif (Files.isRegularFile(filePath)) {\n \t\t\t\t\ttry {\n@@ -312,10 +312,7 @@ private Entry examineClassFile(InputStream is, URL url) {\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n \n \tprivate ClassInfo scanClassFile(InputStream file, URL url) throws IOException {\n-\t\tClassScanner scanner = new ClassScanner(url, listeners);\n-\t\tClassReader cr = new ClassReader(file);\n-\t\tcr.accept(scanner, 0);\n-\t\treturn scanner.getClassInfo();\n+\t\treturn ClassScanner.getClassInfo(file, url, listeners);\n \t}\n \n \t/**\n",
    "17e5f7ee48c6e1b5772d3b23977243ea261fc1bc": "diff --git a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\nindex dca8d3cb27a..779403384b3 100644\n--- a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n+++ b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n@@ -314,19 +314,6 @@ void J9::RecognizedCallTransformer::process_java_lang_StringLatin1_inflate_BIBII\n    TR::Node *dstOff = node->getChild(3);\n    TR::Node *length = node->getChild(4);\n \n-   TR::Node *hdrSize = createHdrSizeNode(comp(), node);\n-\n-   TR::Node *strideNode;\n-   if (is64BitTarget)\n-      {\n-      strideNode = TR::Node::create(node, TR::lconst);\n-      strideNode->setLongInt(2);\n-      }\n-   else\n-      {\n-      strideNode = TR::Node::create(node, TR::iconst, 0, 2);\n-      }\n-\n    TR::Node *arrayTranslateNode = TR::Node::create(node, TR::arraytranslate, 6);\n    arrayTranslateNode->setSourceIsByteArrayTranslate(true);\n    arrayTranslateNode->setTargetIsByteArrayTranslate(false);\n@@ -335,42 +322,11 @@ void J9::RecognizedCallTransformer::process_java_lang_StringLatin1_inflate_BIBII\n    arrayTranslateNode->setTableBackedByRawStorage(true);\n    arrayTranslateNode->setSymbolReference(comp()->getSymRefTab()->findOrCreateArrayTranslateSymbol());\n \n-   TR::Node *srcAddr, *dstAddr;\n+   TR::Node *tmpNode = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), srcOff, NULL, 1, false);\n+   TR::Node *srcAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), srcObj, tmpNode);\n+   tmpNode = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), dstOff, NULL, 2, false);\n+   TR::Node *dstAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), dstObj, tmpNode);\n \n-#if defined(OMR_GC_SPARSE_HEAP_ALLOCATION)\n-   if (TR::Compiler->om.isOffHeapAllocationEnabled())\n-      {\n-      dstOff = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), dstOff, strideNode, 0, false);\n-      srcAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), srcObj, srcOff);\n-      dstAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), dstObj, dstOff);\n-      }\n-   else\n-#endif /* OMR_GC_SPARSE_HEAP_ALLOCATION */\n-      {\n-      TR::Node *tmpNode;\n-      if (is64BitTarget)\n-         {\n-         tmpNode = TR::Node::create(node, TR::i2l, 1, srcOff);\n-         tmpNode = TR::Node::create(node, TR::ladd, 2, tmpNode, hdrSize);\n-         }\n-      else\n-         {\n-         tmpNode = TR::Node::create(node, TR::iadd, 2, srcOff, hdrSize);\n-         }\n-      srcAddr = TR::Node::create(node, is64BitTarget ? TR::aladd : TR::aiadd, 2, srcObj, tmpNode);\n-\n-      if (is64BitTarget)\n-         {\n-         tmpNode = TR::Node::create(node, TR::i2l, 1, dstOff);\n-         tmpNode = TR::Node::create(node, TR::lmul, 2, tmpNode, strideNode);\n-         }\n-      else\n-         {\n-         tmpNode = TR::Node::create(node, TR::imul, 2, dstOff, strideNode);\n-         }\n-      tmpNode = TR::Node::create(node, is64BitTarget ? TR::ladd : TR::iadd, 2, tmpNode, hdrSize);\n-      dstAddr = TR::Node::create(node, is64BitTarget ? TR::aladd : TR::aiadd, 2, dstObj, tmpNode);\n-      }\n    TR::Node *termCharNode = TR::Node::create(node, TR::iconst, 0, 0xffff); // mask for ISO 8859-1 decoder\n    TR::Node *tableNode = TR::Node::create(node, TR::iconst, 0, 0); // dummy table node\n    TR::Node *stoppingNode = TR::Node::create(node, TR::iconst, 0, -1); // dummy stop index node\n",
    "f5a031fefb2856f8c249ebf4392a807e353e0ad1": "diff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex f5412f0931e..6ae37259957 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -602,13 +602,13 @@ class VM_JFRChunkWriter {\n \t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n \n \t\t/* reserve size field */\n-\t\tU_8 *dataStart = _bufferWriter->getAndIncCursor(sizeof(U_32));\n+\t\tU_8 *dataStart = reserveEventSize(_bufferWriter);\n \n \t\t/* write event type */\n \t\t_bufferWriter->writeLEB128(MonitorEnterID);\n \n-\t\t/* write start time - this is when the sleep started not when it ended so we\n-\t\t * need to subtract the duration since the event is emitted when the sleep ends.\n+\t\t/* write start time - this is when the monitor enter started not when it ended so we\n+\t\t * need to subtract the duration since the event is emitted when the monitor enter ends.\n \t\t */\n \t\t_bufferWriter->writeLEB128(entry->ticks - entry->duration);\n \ndiff --git a/runtime/vm/JFRConstantPoolTypes.cpp b/runtime/vm/JFRConstantPoolTypes.cpp\nindex 093bf2b70cc..4196b17d032 100644\n--- a/runtime/vm/JFRConstantPoolTypes.cpp\n+++ b/runtime/vm/JFRConstantPoolTypes.cpp\n@@ -770,12 +770,25 @@ VM_JFRConstantPoolTypes::addThreadEntry(J9VMThread *vmThread)\n \tU_32 index = U_32_MAX;\n \tThreadEntry *entry = NULL;\n \tThreadEntry entryBuffer = {0};\n+\tomrthread_t osThread = NULL;\n+\tj9object_t threadObject = NULL;\n+\n+\tif (NULL == vmThread) {\n+\t\tindex = 0;\n+\t\tgoto done;\n+\t}\n \n \tentry = &entryBuffer;\n \tentry->vmThread = vmThread;\n \t_buildResult = OK;\n-\tomrthread_t osThread = vmThread->osThread;\n-\tj9object_t threadObject = vmThread->threadObject;\n+\tosThread = vmThread->osThread;\n+\tthreadObject = vmThread->threadObject;\n+\n+\tif ((NULL == osThread) || (NULL == threadObject)) {\n+\t\t/* this can happen if a thread dies during a monitor enter */\n+\t\tindex = 0;\n+\t\tgoto done;\n+\t}\n \n \tentry = (ThreadEntry *) hashTableFind(_threadTable, entry);\n \tif (NULL != entry) {\n@@ -1102,6 +1115,9 @@ VM_JFRConstantPoolTypes::addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterD\n \tentry->threadIndex = addThreadEntry(monitorEnterData->vmThread);\n \tif (isResultNotOKay()) goto done;\n \n+\tentry->previousOwnerThread = addThreadEntry(monitorEnterData->previousOwner);\n+\tif (isResultNotOKay()) goto done;\n+\n \tentry->eventThreadIndex = addThreadEntry(monitorEnterData->vmThread);\n \tif (isResultNotOKay()) goto done;\n \ndiff --git a/runtime/vm/ObjectMonitor.cpp b/runtime/vm/ObjectMonitor.cpp\nindex 520f5140c8e..71ecdc5df37 100644\n--- a/runtime/vm/ObjectMonitor.cpp\n+++ b/runtime/vm/ObjectMonitor.cpp\n@@ -168,6 +168,7 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\tobject = NULL; // for safety, since object may be moved by the GC at various points after this\n \t\t/* Ensure object monitor isn't deflated while we block */\n \t\tomrthread_monitor_t monitor = objectMonitor->monitor;\n+\t\tJ9VMThread *previousOwner = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\tVM_AtomicSupport::add(&monitor->pinCount, 1);\n \t\t/* Initialize our wait time to 1ms. Increase it as we have to wait more and more\n \t\t * using the sequence 1, 4, 16, 64 and then 64 thereafter.\n@@ -291,9 +292,8 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\t((J9ThreadMonitor*)monitor)->flags &= ~(UDATA)J9THREAD_MONITOR_SUPPRESS_CONTENDED_EXIT;\n \t\tVM_AtomicSupport::subtract(&monitor->pinCount, 1);\n \t\tif (J9_EVENT_IS_HOOKED(vm->hookInterface, J9HOOK_VM_MONITOR_CONTENDED_ENTERED)) {\n-\t\t\tJ9VMThread *ownerThread = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\t\tbool frameBuilt = saveBlockingEnterObject(currentThread);\n-\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, ownerThread);\n+\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, previousOwner);\n \t\t\trestoreBlockingEnterObject(currentThread, frameBuilt);\n \t\t}\n \t}\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 898dde79772..feb5ec0bc12 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -679,6 +679,7 @@ jfrVMMonitorEntered(J9HookInterface **hook, UDATA eventNum, void *eventData, voi\n \t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n \t\tjfrEvent->monitorClass = event->monitorClass;\n \t\tjfrEvent->monitorAddress = (UDATA)event->monitor;\n+\t\tjfrEvent->previousOwner = event->previousOwner;\n \t}\n }\n \ndiff --git a/test/functional/cmdLineTests/jfr/jfrevents.xml b/test/functional/cmdLineTests/jfr/jfrevents.xml\nindex d96fbf69769..71aca7e125c 100644\n--- a/test/functional/cmdLineTests/jfr/jfrevents.xml\n+++ b/test/functional/cmdLineTests/jfr/jfrevents.xml\n@@ -64,4 +64,15 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">stackTrace</output>\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">jfr print: could not read recording</output>\n \t</test>\n+\t<test id=\"test jfr monitor enter - approx 30seconds\">\n+\t\t<command>$JFR_EXE$ print --xml --events \"JavaMonitorEnter\" --stack-depth 1 defaultJ9recording.jfr</command>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">http://www.w3.org/2001/XMLSchema-instance</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">jdk.JavaMonitorEnter</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">eventThread</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">osName</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">osThreadId</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">javaName</output>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">stackTrace</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">jfr print: could not read recording</output>\n+\t</test>\n </suite>\ndiff --git a/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java b/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\nindex 135aaf106f3..a38adb1f8fa 100644\n--- a/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\n+++ b/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\n@@ -35,6 +35,10 @@ public class WorkLoad {\n \tpublic static double average;\n \tpublic static double stdDev;\n \n+\tprivate static long globalCounter = 0;\n+\tstatic interface GlobalLoack {};\n+\tprivate static Object globalLock = new GlobalLoack(){};\n+\n \tpublic WorkLoad(int numberOfThreads, int sizeOfNumberList, int repeats) {\n \t\tthis.numberOfThreads = numberOfThreads;\n \t\tthis.sizeOfNumberList = sizeOfNumberList;\n@@ -93,10 +97,22 @@ private void workload() {\n \t\t\tgenerateTimedSleep();\n \t\t\tgenerateTimedWait();\n \t\t\tthrowThrowables();\n+\t\t\tcontendOnLock();\n \t\t\tburnCPU();\n \t\t}\n \t}\n \n+\tprivate void contendOnLock() {\n+\t\tsynchronized (globalLock) {\n+\t\t\tglobalCounter++;\n+\t\t\ttry {\n+\t\t\t\tThread.sleep(1);\n+\t\t\t} catch (InterruptedException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tprivate void recursiveFucntion(int depth) {\n \t\tif (0 == depth) {\n \t\t\treturn;\n",
    "2b1ec1c1d85a5856b920ad59490b83220c18df88": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 4af9d95ba27..397e3e3b92e 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -12039,14 +12039,14 @@ J9::X86::TreeEvaluator::directCallEvaluator(TR::Node *node, TR::CodeGenerator *c\n          return TR::TreeEvaluator::encodeUTF16Evaluator(node, cg);\n \n       case TR::java_lang_String_hashCodeImplDecompressed:\n-         if (cg->getSupportsInlineStringHashCode() && !node->getBlock()->isCold())\n+         if (cg->getSupportsInlineStringHashCode() && !cg->getCurrentBlock()->isCold())\n             returnRegister = inlineStringHashCode(node, false, cg);\n \n          callInlined = (returnRegister != NULL);\n          break;\n \n       case TR::java_lang_String_hashCodeImplCompressed:\n-         if (cg->getSupportsInlineStringHashCode() && !node->getBlock()->isCold())\n+         if (cg->getSupportsInlineStringHashCode() && !cg->getCurrentBlock()->isCold())\n             returnRegister = inlineStringHashCode(node, true, cg);\n \n          callInlined = (returnRegister != NULL);\n",
    "be0196b37870640bbe8ab245d17ff3082156efb5": "diff --git a/runtime/gc_base/IndexableObjectAllocationModel.cpp b/runtime/gc_base/IndexableObjectAllocationModel.cpp\nindex a666a08002f..07e4f5a9c82 100644\n--- a/runtime/gc_base/IndexableObjectAllocationModel.cpp\n+++ b/runtime/gc_base/IndexableObjectAllocationModel.cpp\n@@ -401,11 +401,10 @@ MM_IndexableObjectAllocationModel::getSparseAddressAndDecommitLeaves(MM_Environm\n \t\tvoid *virtualLargeObjectHeapAddress = extensions->largeObjectVirtualMemory->allocateSparseFreeEntryAndMapToHeapObject(spine, byteAmount);\n \t\tif (NULL != virtualLargeObjectHeapAddress) {\n \t\t\tindexableObjectModel->setDataAddrForContiguous((J9IndexableObject *)spine, virtualLargeObjectHeapAddress);\n+\t\t} else {\n+\t\t\t_allocateDescription.setSpine(NULL);\n+\t\t\tspine = NULL;\n \t\t}\n-\t\t/*\n-\t\t * TODO:we might need a special state for this regions (different from just plain ARRAYLET),\n-\t\t * such as ARRAYLET_DECOMMITED or just DECOMMITED\n-\t\t */\n \t}\n \n \tTrc_MM_getSparseAddressAndDecommitLeaves_Exit(env->getLanguageVMThread(), spine, (void *)bytesRemaining);\n",
    "592b97d65e62aa487120fe5c54f87ee4cd66765b": "diff --git a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\nindex dca8d3cb27a..779403384b3 100644\n--- a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n+++ b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n@@ -314,19 +314,6 @@ void J9::RecognizedCallTransformer::process_java_lang_StringLatin1_inflate_BIBII\n    TR::Node *dstOff = node->getChild(3);\n    TR::Node *length = node->getChild(4);\n \n-   TR::Node *hdrSize = createHdrSizeNode(comp(), node);\n-\n-   TR::Node *strideNode;\n-   if (is64BitTarget)\n-      {\n-      strideNode = TR::Node::create(node, TR::lconst);\n-      strideNode->setLongInt(2);\n-      }\n-   else\n-      {\n-      strideNode = TR::Node::create(node, TR::iconst, 0, 2);\n-      }\n-\n    TR::Node *arrayTranslateNode = TR::Node::create(node, TR::arraytranslate, 6);\n    arrayTranslateNode->setSourceIsByteArrayTranslate(true);\n    arrayTranslateNode->setTargetIsByteArrayTranslate(false);\n@@ -335,42 +322,11 @@ void J9::RecognizedCallTransformer::process_java_lang_StringLatin1_inflate_BIBII\n    arrayTranslateNode->setTableBackedByRawStorage(true);\n    arrayTranslateNode->setSymbolReference(comp()->getSymRefTab()->findOrCreateArrayTranslateSymbol());\n \n-   TR::Node *srcAddr, *dstAddr;\n+   TR::Node *tmpNode = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), srcOff, NULL, 1, false);\n+   TR::Node *srcAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), srcObj, tmpNode);\n+   tmpNode = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), dstOff, NULL, 2, false);\n+   TR::Node *dstAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), dstObj, tmpNode);\n \n-#if defined(OMR_GC_SPARSE_HEAP_ALLOCATION)\n-   if (TR::Compiler->om.isOffHeapAllocationEnabled())\n-      {\n-      dstOff = TR::TransformUtil::generateConvertArrayElementIndexToOffsetTrees(comp(), dstOff, strideNode, 0, false);\n-      srcAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), srcObj, srcOff);\n-      dstAddr = TR::TransformUtil::generateArrayElementAddressTrees(comp(), dstObj, dstOff);\n-      }\n-   else\n-#endif /* OMR_GC_SPARSE_HEAP_ALLOCATION */\n-      {\n-      TR::Node *tmpNode;\n-      if (is64BitTarget)\n-         {\n-         tmpNode = TR::Node::create(node, TR::i2l, 1, srcOff);\n-         tmpNode = TR::Node::create(node, TR::ladd, 2, tmpNode, hdrSize);\n-         }\n-      else\n-         {\n-         tmpNode = TR::Node::create(node, TR::iadd, 2, srcOff, hdrSize);\n-         }\n-      srcAddr = TR::Node::create(node, is64BitTarget ? TR::aladd : TR::aiadd, 2, srcObj, tmpNode);\n-\n-      if (is64BitTarget)\n-         {\n-         tmpNode = TR::Node::create(node, TR::i2l, 1, dstOff);\n-         tmpNode = TR::Node::create(node, TR::lmul, 2, tmpNode, strideNode);\n-         }\n-      else\n-         {\n-         tmpNode = TR::Node::create(node, TR::imul, 2, dstOff, strideNode);\n-         }\n-      tmpNode = TR::Node::create(node, is64BitTarget ? TR::ladd : TR::iadd, 2, tmpNode, hdrSize);\n-      dstAddr = TR::Node::create(node, is64BitTarget ? TR::aladd : TR::aiadd, 2, dstObj, tmpNode);\n-      }\n    TR::Node *termCharNode = TR::Node::create(node, TR::iconst, 0, 0xffff); // mask for ISO 8859-1 decoder\n    TR::Node *tableNode = TR::Node::create(node, TR::iconst, 0, 0); // dummy table node\n    TR::Node *stoppingNode = TR::Node::create(node, TR::iconst, 0, -1); // dummy stop index node\n",
    "330959cfa13b9b1fd6da4a102fe2e0cd473d6c07": "diff --git a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\nindex 779403384b3..f0f7b83fcd2 100644\n--- a/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n+++ b/runtime/compiler/optimizer/J9RecognizedCallTransformer.cpp\n@@ -1693,6 +1693,14 @@ bool J9::RecognizedCallTransformer::isInlineable(TR::TreeTop* treetop)\n          case TR::java_lang_Long_rotateLeft:\n          case TR::java_lang_Long_rotateRight:\n             return comp()->target().cpu.getSupportsHardware64bitRotate();\n+         case TR::java_lang_Integer_compress:\n+            return comp()->target().cpu.getSupportsHardware32bitCompress();\n+         case TR::java_lang_Long_compress:\n+            return comp()->target().cpu.getSupportsHardware64bitCompress();\n+         case TR::java_lang_Integer_expand:\n+            return comp()->target().cpu.getSupportsHardware32bitExpand();\n+         case TR::java_lang_Long_expand:\n+            return comp()->target().cpu.getSupportsHardware64bitExpand();\n          case TR::java_lang_Math_abs_I:\n          case TR::java_lang_Math_abs_L:\n             return cg()->supportsIntAbs();\n@@ -1815,6 +1823,18 @@ void J9::RecognizedCallTransformer::transform(TR::TreeTop* treetop)\n \n             break;\n             }\n+         case TR::java_lang_Integer_compress:\n+            processIntrinsicFunction(treetop, node, TR::icompressbits);\n+            break;\n+         case TR::java_lang_Long_compress:\n+            processIntrinsicFunction(treetop, node, TR::lcompressbits);\n+            break;\n+         case TR::java_lang_Integer_expand:\n+            processIntrinsicFunction(treetop, node, TR::iexpandbits);\n+            break;\n+         case TR::java_lang_Long_expand:\n+            processIntrinsicFunction(treetop, node, TR::lexpandbits);\n+            break;\n          case TR::java_lang_Math_abs_I:\n             processIntrinsicFunction(treetop, node, TR::iabs);\n             break;\ndiff --git a/runtime/compiler/x/env/J9CPU.cpp b/runtime/compiler/x/env/J9CPU.cpp\nindex ddde9002cc0..da12e98247b 100644\n--- a/runtime/compiler/x/env/J9CPU.cpp\n+++ b/runtime/compiler/x/env/J9CPU.cpp\n@@ -88,7 +88,7 @@ J9::X86::CPU::enableFeatureMasks()\n                                         OMR_FEATURE_X86_FMA, OMR_FEATURE_X86_HLE, OMR_FEATURE_X86_RTM,\n                                         OMR_FEATURE_X86_SSE3, OMR_FEATURE_X86_AVX2, OMR_FEATURE_X86_AVX512F,\n                                         OMR_FEATURE_X86_AVX512VL, OMR_FEATURE_X86_AVX512BW, OMR_FEATURE_X86_AVX512DQ,\n-                                        OMR_FEATURE_X86_AVX512CD, OMR_FEATURE_X86_SSE4_2};\n+                                        OMR_FEATURE_X86_AVX512CD, OMR_FEATURE_X86_SSE4_2, OMR_FEATURE_X86_BMI2};\n \n    memset(_supportedFeatureMasks.features, 0, OMRPORT_SYSINFO_FEATURES_SIZE*sizeof(uint32_t));\n    OMRPORT_ACCESS_FROM_OMRPORT(TR::Compiler->omrPortLib);\n@@ -350,6 +350,8 @@ J9::X86::CPU::supports_feature_test(uint32_t feature)\n          return TR::CodeGenerator::getX86ProcessorInfo().supportsHLE() == ans;\n       case OMR_FEATURE_X86_TM:\n          return TR::CodeGenerator::getX86ProcessorInfo().hasThermalMonitor() == ans;\n+      case OMR_FEATURE_X86_BMI2:\n+         return TR::CodeGenerator::getX86ProcessorInfo().supportsBMI2() == ans;\n       case OMR_FEATURE_X86_AVX:\n       case OMR_FEATURE_X86_AVX2:\n       case OMR_FEATURE_X86_AVX512F:\n",
    "c963071fe4296e09304a563506db1b8c283e159e": "diff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 6aa706ee69b..eb251a92c43 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -845,6 +845,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n \t\t\t\t\t\tgoto done;\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t}\n \n \t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n@@ -877,6 +879,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n \t\t\t\t\t\tgoto done;\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t}\n \n \t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n",
    "a85b6bb330437dd8baf33769e6f82f9181845e49": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex ad3304e1210..4b74769d7ac 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -2943,7 +2943,7 @@ class INTERPRETER_CLASS\n \t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n \t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n-\t\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tif ((NULL != head) && (NULL != head->vthread)) {\n \t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n \t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n \t\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\n",
    "cbe2b8cda7404ca1942aa0d63f070b89efe7067a": "diff --git a/runtime/gc_base/ReferenceChainWalker.cpp b/runtime/gc_base/ReferenceChainWalker.cpp\nindex 472e68ec911..d186c4d9b5c 100644\n--- a/runtime/gc_base/ReferenceChainWalker.cpp\n+++ b/runtime/gc_base/ReferenceChainWalker.cpp\n@@ -32,6 +32,9 @@\n \n #include \"ClassIteratorClassSlots.hpp\"\n #include \"ClassIteratorDeclarationOrder.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"Forge.hpp\"\n #include \"GCExtensions.hpp\"\n@@ -418,6 +421,16 @@ MM_ReferenceChainWalker::scanContinuationNativeSlots(J9Object *objectPtr)\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForReferenceChainWalker, false, _trackVisibleStackFrameDepth);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \n@@ -651,6 +664,31 @@ MM_ReferenceChainWalker::doVMClassSlot(J9Class *classPtr)\n \tdoClassSlot(classPtr, J9GC_ROOT_TYPE_VM_CLASS_SLOT, -1, NULL);\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @todo Provide function documentation\n+ */\n+void\n+MM_ReferenceChainWalker::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tJ9Object *slotValue = *slotPtr;\n+\t/* Only report heap objects */\n+\tif (isHeapObject(slotValue) && !_heap->objectIsInGap(slotValue)) {\n+\t\tswitch(continuationSlotIterator->getState()) {\n+\t\tcase GC_ContinuationSlotIterator::state_monitor_records:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_CONTINUATION_MONITOR, -1, NULL);\n+\t\t\tbreak;\n+\t\tcase GC_ContinuationSlotIterator::state_vthread:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_CONTINUATION_VTHREAD, -1, NULL);\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_UNKNOWN, -1, NULL);\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /**\n  * @todo Provide function documentation\n  */\ndiff --git a/runtime/gc_base/ReferenceChainWalker.hpp b/runtime/gc_base/ReferenceChainWalker.hpp\nindex dd41009d095..8ad7c3a8c12 100644\n--- a/runtime/gc_base/ReferenceChainWalker.hpp\n+++ b/runtime/gc_base/ReferenceChainWalker.hpp\n@@ -127,6 +127,9 @@ class MM_ReferenceChainWalker : public MM_RootScanner\n \tvirtual void doStringTableSlot(J9Object **slotPtr, GC_StringTableIterator *stringTableIterator);\n \tvirtual void doVMClassSlot(J9Class *classPtr);\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvirtual void doStackSlot(J9Object **slotPtr, void *walkState, const void* stackLocation);\n \tvirtual void doSlot(J9Object **slotPtr);\n \tvirtual void doClassSlot(J9Class *classPtr);\ndiff --git a/runtime/gc_base/RootScanner.cpp b/runtime/gc_base/RootScanner.cpp\nindex f239df0f7d5..d8007f8dd32 100644\n--- a/runtime/gc_base/RootScanner.cpp\n+++ b/runtime/gc_base/RootScanner.cpp\n@@ -356,6 +356,20 @@ MM_RootScanner::doClassSlot(J9Class *classPtr)\n \t/* ignore class slots by default */\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @todo Provide function documentation\n+ */\n+void\n+MM_RootScanner::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\t/* ensure that this isn't a slot pointing into the gap (only matters for split heap VMs) */\n+\tif (!_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(slotPtr);\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /**\n  * @todo Provide function documentation\n  */\n@@ -552,6 +566,14 @@ MM_RootScanner::scanOneThread(MM_EnvironmentBase *env, J9VMThread *walkThread, v\n \t\t/* At this point we know that a virtual thread is mounted. We previously scanned its stack,\n \t\t * and now we will scan carrier's stack, that continuation struct is currently pointing to. */\n \t\tGC_VMThreadStackSlotIterator::scanSlots(currentThread, walkThread, walkThread->currentContinuation, localData, stackSlotIterator, isStackFrameClassWalkNeeded(), _trackVisibleStackFrameDepth);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(walkThread, walkThread->currentContinuation);\n+\n+\t\twhile (J9Object **slot = continuationSlotIterator.nextSlot()) {\n+\t\t\t/* do current continuation slot (mounted vthread case, the slot for saved carrier thread) */\n+\t\t\tdoContinuationSlot(slot, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \treturn false;\ndiff --git a/runtime/gc_base/RootScanner.hpp b/runtime/gc_base/RootScanner.hpp\nindex 6a97be571eb..711654325fb 100644\n--- a/runtime/gc_base/RootScanner.hpp\n+++ b/runtime/gc_base/RootScanner.hpp\n@@ -35,6 +35,9 @@\n \n #include \"BaseVirtual.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"GCExtensions.hpp\"\n #include \"JVMTIObjectTagTableIterator.hpp\"\n@@ -582,6 +585,10 @@ class MM_RootScanner : public MM_BaseVirtual\n \tvirtual void doDoubleMappedObjectSlot(J9Object *objectPtr, struct J9PortVmemIdentifier *identifier);\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/**\n \t * Called for each object stack slot. Subclasses may override.\n \t * \ndiff --git a/runtime/gc_glue_java/CompactSchemeFixupObject.cpp b/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\nindex 613c35c1e4c..70a4c50d9a5 100644\n--- a/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\n+++ b/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\n@@ -26,17 +26,21 @@\n #include \"objectdescription.h\"\n \n #include \"CollectorLanguageInterfaceImpl.hpp\"\n-#include \"EnvironmentStandard.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"Debug.hpp\"\n+#include \"EnvironmentStandard.hpp\"\n+#include \"FlattenedContiguousArrayIterator.hpp\"\n #include \"HeapRegionIteratorStandard.hpp\"\n #include \"MixedObjectIterator.hpp\"\n #include \"ObjectAccessBarrier.hpp\"\n #include \"OwnableSynchronizerObjectBuffer.hpp\"\n-#include \"VMHelpers.hpp\"\n #include \"ParallelDispatcher.hpp\"\n #include \"PointerContiguousArrayIterator.hpp\"\n-#include \"FlattenedContiguousArrayIterator.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"Task.hpp\"\n+#include \"VMHelpers.hpp\"\n \n void\n MM_CompactSchemeFixupObject::fixupMixedObject(omrobjectptr_t objectPtr)\n@@ -50,11 +54,30 @@ MM_CompactSchemeFixupObject::fixupMixedObject(omrobjectptr_t objectPtr)\n }\n \n void\n-MM_CompactSchemeFixupObject::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slot)\n+MM_CompactSchemeFixupObject::doSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr)\n+{\n+\t*slotPtr = _compactScheme->getForwardingPtr(*slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_CompactSchemeFixupObject::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n {\n-\t*slot = _compactScheme->getForwardingPtr(*slot);\n+\tif (isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n }\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n+void\n+MM_CompactSchemeFixupObject::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t}\n+}\n /**\n  * @todo Provide function documentation\n  */\n@@ -62,7 +85,7 @@ void\n stackSlotIteratorForCompactScheme(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4CompactSchemeFixupObject *data = (StackIteratorData4CompactSchemeFixupObject *)localData;\n-\tdata->compactSchemeFixupObject->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->compactSchemeFixupObject->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n \n@@ -85,6 +108,16 @@ MM_CompactSchemeFixupObject::fixupContinuationNativeSlots(MM_EnvironmentStandard\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForCompactScheme, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \ndiff --git a/runtime/gc_glue_java/CompactSchemeFixupObject.hpp b/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\nindex dec8925967b..c48239d2d1e 100644\n--- a/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\n+++ b/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\n@@ -29,6 +29,10 @@\n #include \"CompactScheme.hpp\"\n #include \"GCExtensions.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n class MM_CompactSchemeFixupObject {\n public:\n protected:\n@@ -38,7 +42,11 @@ class MM_CompactSchemeFixupObject {\n \tMM_CompactScheme *_compactScheme;\n public:\n \n-\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slot);\n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * Perform fixup for a single object\n \t * @param env[in] the current thread\n@@ -82,6 +90,15 @@ class MM_CompactSchemeFixupObject {\n \t * @param object -- The object of type or subclass of java.util.concurrent.locks.AbstractOwnableSynchronizer.\n \t */\n \tMMINLINE void addOwnableSynchronizerObjectInList(MM_EnvironmentBase *env, omrobjectptr_t objectPtr);\n+\n+\t/**\n+\t * Determine whether the object pointer is found within the heap proper.\n+\t * @return Boolean indicating if the object pointer is within the heap boundaries.\n+\t */\n+\tMMINLINE bool isHeapObject(J9Object *objectPtr)\n+\t{\n+\t\treturn (_extensions->heap->getHeapBase() <= (uint8_t *)objectPtr) && (_extensions->heap->getHeapTop() > (uint8_t *)objectPtr);\n+\t}\n };\n \n typedef struct StackIteratorData4CompactSchemeFixupObject {\ndiff --git a/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp b/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\nindex c5b082fbc6f..08b6d68afeb 100644\n--- a/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\n+++ b/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\n@@ -25,6 +25,9 @@\n #include \"AsyncCallbackHandler.hpp\"\n #include \"ClassLoaderIterator.hpp\"\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"FinalizeListManager.hpp\"\n #include \"Heap.hpp\"\n #include \"HeapRegionDescriptorStandard.hpp\"\n@@ -35,6 +38,32 @@\n #include \"VMInterface.hpp\"\n #include \"VMThreadListIterator.hpp\"\n \n+void\n+MM_ConcurrentMarkingDelegate::doSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr)\n+{\n+\t_markingScheme->markObject(env, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_ConcurrentMarkingDelegate::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !env->getExtensions()->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_ConcurrentMarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tomrobjectptr_t object = *slotPtr;\n+\tif (_markingScheme->isHeapObject(object) && !env->getExtensions()->heap->objectIsInGap(object)) {\n+\t\tdoSlot(env, slotPtr);\n+\t}\n+}\n /**\n  * Concurrents stack slot iterator.\n  * Called for each slot in a threads active stack frames which contains a object reference.\n@@ -48,19 +77,7 @@ void\n concurrentStackSlotIterator(J9JavaVM *javaVM, omrobjectptr_t *objectIndirect, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tMM_ConcurrentMarkingDelegate::markSchemeStackIteratorData *data = (MM_ConcurrentMarkingDelegate::markSchemeStackIteratorData *)localData;\n-\n-\tomrobjectptr_t object = *objectIndirect;\n-\tif (data->env->getExtensions()->heap->objectIsInGap(object)) {\n-\t\t/* CMVC 136483:  Ensure that the object is not in the gap of a split heap (stack-allocated object) since we can't mark that part of the address space */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(data->env));\n-\t} else if (data->markingScheme->isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(data->env));\n-\t\tdata->markingScheme->markObject(data->env, object);\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(data->env));\n-\t}\n+\tdata->concurrentMarkingDelegate->doStackSlot(data->env, objectIndirect, walkState, stackLocation);\n }\n \n bool\n@@ -150,7 +167,7 @@ MM_ConcurrentMarkingDelegate::scanThreadRoots(MM_EnvironmentBase *env)\n \t}\n \n \tmarkSchemeStackIteratorData localData;\n-\tlocalData.markingScheme = _markingScheme;\n+\tlocalData.concurrentMarkingDelegate = this;\n \tlocalData.env = env;\n \t/* In a case this thread is a carrier thread, and a virtual thread is mounted, we will scan virtual thread's stack. */\n \tGC_VMThreadStackSlotIterator::scanSlots(vmThread, vmThread, (void *)&localData, concurrentStackSlotIterator, true, false);\n@@ -158,6 +175,13 @@ MM_ConcurrentMarkingDelegate::scanThreadRoots(MM_EnvironmentBase *env)\n #if JAVA_SPEC_VERSION >= 19\n \tif (NULL != vmThread->currentContinuation) {\n \t\tGC_VMThreadStackSlotIterator::scanSlots(vmThread, vmThread, vmThread->currentContinuation, (void *)&localData, concurrentStackSlotIterator, true, false);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(vmThread, vmThread->currentContinuation);\n+\n+\t\twhile (J9Object **slot = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slot, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \ndiff --git a/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp b/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\nindex 436e14849d8..ee599482b7b 100644\n--- a/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\n+++ b/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\n@@ -46,6 +46,9 @@\n #include \"ScanClassesMode.hpp\"\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_VMThreadIterator;\n class MM_ConcurrentGC;\n class MM_MarkingScheme;\n@@ -87,7 +90,7 @@ class MM_ConcurrentMarkingDelegate\n \t};\n \n \ttypedef struct markSchemeStackIteratorData {\n-\t\tMM_MarkingScheme *markingScheme;\n+\t\tMM_ConcurrentMarkingDelegate *concurrentMarkingDelegate;\n \t\tMM_EnvironmentBase *env;\n \t} markSchemeStackIteratorData;\n \n@@ -114,6 +117,11 @@ class MM_ConcurrentMarkingDelegate\n \t */\n \tbool initialize(MM_EnvironmentBase *env, MM_ConcurrentGC *collector);\n \n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * In the case of Weak Consistency platforms we require this method to bring mutator threads to a safe point. A safe\n \t * point is a point at which a GC may occur.\ndiff --git a/runtime/gc_glue_java/HeapWalkerDelegate.cpp b/runtime/gc_glue_java/HeapWalkerDelegate.cpp\nindex 1f9dab4d6ba..b8999144d72 100644\n--- a/runtime/gc_glue_java/HeapWalkerDelegate.cpp\n+++ b/runtime/gc_glue_java/HeapWalkerDelegate.cpp\n@@ -24,6 +24,9 @@\n #include \"HeapWalkerDelegate.hpp\"\n \n #include \"j9.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"GCExtensions.hpp\"\n #include \"ObjectModel.hpp\"\n@@ -72,5 +75,15 @@ MM_HeapWalkerDelegate::doContinuationNativeSlots(MM_EnvironmentBase *env, omrobj\n \t\tlocalData.userData = userData;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForHeapWalker, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\t_heapWalker->heapWalkerSlotCallback(env, slotPtr, function, userData);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\ndiff --git a/runtime/gc_glue_java/MarkingDelegate.cpp b/runtime/gc_glue_java/MarkingDelegate.cpp\nindex ef1a8b44245..41f4577f629 100644\n--- a/runtime/gc_glue_java/MarkingDelegate.cpp\n+++ b/runtime/gc_glue_java/MarkingDelegate.cpp\n@@ -39,6 +39,9 @@\n #include \"CollectorLanguageInterfaceImpl.hpp\"\n #endif /* defined(J9VM_GC_FINALIZATION) */\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentDelegate.hpp\"\n #include \"FinalizableReferenceBuffer.hpp\"\n #include \"GlobalCollector.hpp\"\n@@ -239,14 +242,31 @@ MM_MarkingDelegate::startRootListProcessing(MM_EnvironmentBase *env)\n }\n \n void\n-MM_MarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr)\n+MM_MarkingDelegate::doSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr)\n {\n-\tomrobjectptr_t object = *slotPtr;\n-\tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n-\t\tif (_extensions->isConcurrentScavengerEnabled() && _extensions->isScavengerBackOutFlagRaised()) {\n-\t\t\t_markingScheme->fixupForwardedSlot(slotPtr);\n-\t\t}\n-\t\t_markingScheme->inlineMarkObject(env, *slotPtr);\n+\tif (_extensions->isConcurrentScavengerEnabled() && _extensions->isScavengerBackOutFlagRaised()) {\n+\t\t_markingScheme->fixupForwardedSlot(slotPtr);\n+\t}\n+\t_markingScheme->inlineMarkObject(env, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MarkingDelegate::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, objectPtr, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_MarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, objectPtr, slotPtr);\n \t}\n }\n \n@@ -257,7 +277,7 @@ void\n stackSlotIteratorForMarkingDelegate(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4MarkingDelegate *data = (StackIteratorData4MarkingDelegate *)localData;\n-\tdata->markingDelegate->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->markingDelegate->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n \n@@ -281,6 +301,16 @@ MM_MarkingDelegate::scanContinuationNativeSlots(MM_EnvironmentBase *env, omrobje\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForMarkingDelegate, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/MarkingDelegate.hpp b/runtime/gc_glue_java/MarkingDelegate.hpp\nindex db8f0419bf1..b098c7a551d 100644\n--- a/runtime/gc_glue_java/MarkingDelegate.hpp\n+++ b/runtime/gc_glue_java/MarkingDelegate.hpp\n@@ -36,6 +36,9 @@\n #include \"ReferenceObjectScanner.hpp\"\n #include \"PointerArrayObjectScanner.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_ObjectScanner;\n class MM_EnvironmentBase;\n class MM_HeapRegionDescriptorStandard;\n@@ -128,7 +131,11 @@ class MM_MarkingDelegate\n \t\treturn 0;\n \t}\n \n-\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr);\n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation);\n \tvoid scanContinuationNativeSlots(MM_EnvironmentBase *env, omrobjectptr_t objectPtr);\n \n \tMMINLINE GC_ObjectScanner *\ndiff --git a/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp b/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\nindex d807f5d85a9..1930b870cb0 100644\n--- a/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\n+++ b/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\n@@ -46,20 +46,32 @@ MM_MarkingSchemeRootMarker::doStackSlot(omrobjectptr_t *slotPtr, void *walkState\n \tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n \t\t/* heap object - validate and mark */\n \t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(_env));\n-\t\t_markingScheme->inlineMarkObject(_env, object);\n-\n+\t\tdoSlot(slotPtr);\n \t} else if (NULL != object) {\n \t\t/* stack object - just validate */\n \t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(_env));\n \t}\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MarkingSchemeRootMarker::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tomrobjectptr_t object = *slotPtr;\n+\tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n+\t\tdoSlot(slotPtr);\n+\t} else if (NULL != object) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n void\n MM_MarkingSchemeRootMarker::doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator)\n {\n \tomrobjectptr_t object = *slotPtr;\n \tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n-\t\t_markingScheme->inlineMarkObject(_env, object);\n+\t\tdoSlot(slotPtr);\n \t} else if (NULL != object) {\n \t\tAssert_MM_true(vmthreaditerator_state_monitor_records == vmThreadIterator->getState());\n \t}\ndiff --git a/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp b/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\nindex 366d853c035..9ee98d4ac6f 100644\n--- a/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\n+++ b/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\n@@ -52,6 +52,9 @@ class MM_MarkingSchemeRootMarker : public MM_RootScanner\n \n \tvirtual void doSlot(omrobjectptr_t *slotPtr);\n \tvirtual void doStackSlot(omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvirtual void doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator);\n \tvirtual void doClass(J9Class *clazz);\n \tvirtual void doClassLoader(J9ClassLoader *classLoader);\ndiff --git a/runtime/gc_glue_java/MetronomeDelegate.cpp b/runtime/gc_glue_java/MetronomeDelegate.cpp\nindex b9cbe0f858b..a793cb26f76 100644\n--- a/runtime/gc_glue_java/MetronomeDelegate.cpp\n+++ b/runtime/gc_glue_java/MetronomeDelegate.cpp\n@@ -31,6 +31,9 @@\n #include \"ClassLoaderLinkedListIterator.hpp\"\n #include \"ClassLoaderManager.hpp\"\n #include \"ClassLoaderSegmentIterator.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentRealtime.hpp\"\n #include \"FinalizableClassLoaderBuffer.hpp\"\n #include \"FinalizableObjectBuffer.hpp\"\n@@ -1633,30 +1636,46 @@ MM_MetronomeDelegate::unsetUnmarkedImpliesCleared()\n }\n \n void\n-stackSlotIteratorForRealtimeGC(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n+MM_MetronomeDelegate::doSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr)\n {\n-\tStackIteratorData4RealtimeMarkingScheme *data = (StackIteratorData4RealtimeMarkingScheme *)localData;\n-\tMM_RealtimeMarkingScheme *realtimeMarkingScheme = data->realtimeMarkingScheme;\n-\tMM_EnvironmentRealtime *env = data->env;\n-\n \tJ9Object *object = *slotPtr;\n-\tif (realtimeMarkingScheme->isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(env));\n-\t\tif (MUTATOR_THREAD == env->getThreadType()) {\n-\t\t\t/* special handle by mutator thread for preMountContinuation case */\n-\t\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n-\t\t\t((MM_RealtimeAccessBarrier *)extensions->accessBarrier)->rememberObject(env, object);\n-\t\t} else {\n-\t\t\t/* scan object by the GC Thread */\n-\t\t\trealtimeMarkingScheme->markObject(env, object);\n-\t\t}\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(env));\n+\tif (MUTATOR_THREAD == env->getThreadType()) {\n+\t\t/* special handle by mutator thread for preMountContinuation case */\n+\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n+\t\t((MM_RealtimeAccessBarrier *)extensions->accessBarrier)->rememberObject(env, object);\n+\t} else {\n+\t\t/* scan object by the GC Thread */\n+\t\t_markingScheme->markObject(env, object);\n \t}\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MetronomeDelegate::doContinuationSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_MetronomeDelegate::doStackSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t}\n+}\n+\n+void\n+stackSlotIteratorForRealtimeGC(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tStackIteratorData4RealtimeMarkingScheme *data = (StackIteratorData4RealtimeMarkingScheme *)localData;\n+\tdata->metronomeDelegate->doStackSlot(data->env, slotPtr, walkState, stackLocation);\n+}\n+\n void\n MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J9Object *objectPtr, bool beingMounted)\n {\n@@ -1665,7 +1684,7 @@ MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J\n \tconst bool isGlobalGC = true;\n \tif (MM_GCExtensions::needScanStacksForContinuationObject(currentThread, objectPtr, isConcurrentGC, isGlobalGC, beingMounted)) {\n \t\tStackIteratorData4RealtimeMarkingScheme localData;\n-\t\tlocalData.realtimeMarkingScheme = _markingScheme;\n+\t\tlocalData.metronomeDelegate = this;\n \t\tlocalData.env = env;\n \t\tlocalData.fromObject = objectPtr;\n \n@@ -1676,6 +1695,16 @@ MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J\n \t\t/* In STW GC there are no racing carrier threads doing mount and no need for the synchronization. */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForRealtimeGC, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/MetronomeDelegate.hpp b/runtime/gc_glue_java/MetronomeDelegate.hpp\nindex bb651dedfad..54b55162f96 100644\n--- a/runtime/gc_glue_java/MetronomeDelegate.hpp\n+++ b/runtime/gc_glue_java/MetronomeDelegate.hpp\n@@ -37,6 +37,9 @@\n #include \"Scheduler.hpp\"\n #include \"StackSlotValidator.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_HeapRegionDescriptorRealtime;\n class MM_RealtimeMarkingSchemeRootMarker;\n class MM_RealtimeRootScanner;\n@@ -58,6 +61,12 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n \tstatic int J9THREAD_PROC metronomeAlarmThreadWrapper(void *userData);\n \tstatic uintptr_t signalProtectedFunction(J9PortLibrary *privatePortLibrary, void *userData);\n \n+\tMMINLINE void doSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n+\n \tMM_MetronomeDelegate(MM_EnvironmentBase *env) :\n \t\t_extensions(MM_GCExtensions::getExtensions(env)),\n \t\t_realtimeGC(NULL),\n@@ -580,7 +589,7 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n };\n \n typedef struct StackIteratorData4RealtimeMarkingScheme {\n-\tMM_RealtimeMarkingScheme *realtimeMarkingScheme;\n+\tMM_MetronomeDelegate *metronomeDelegate;\n \tMM_EnvironmentRealtime *env;\n \tJ9Object *fromObject;\n } StackIteratorData4RealtimeMarkingScheme;\ndiff --git a/runtime/gc_glue_java/ScavengerDelegate.cpp b/runtime/gc_glue_java/ScavengerDelegate.cpp\nindex 14edc04f5f8..bd2737ddc70 100644\n--- a/runtime/gc_glue_java/ScavengerDelegate.cpp\n+++ b/runtime/gc_glue_java/ScavengerDelegate.cpp\n@@ -53,6 +53,9 @@\n #include \"ConcurrentSweepScheme.hpp\"\n #endif /* J9VM_GC_CONCURRENT_SWEEP */\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"ContinuationStats.hpp\"\n #include \"EnvironmentStandard.hpp\"\n #include \"ExcessiveGCStats.hpp\"\n@@ -105,6 +108,7 @@\n #include \"ScavengerStats.hpp\"\n #include \"ScavengerBackOutScanner.hpp\"\n #include \"SlotObject.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"StandardAccessBarrier.hpp\"\n #include \"SublistFragment.hpp\"\n #include \"StringTable.hpp\"\n@@ -305,33 +309,53 @@ MM_ScavengerDelegate::internalGarbageCollect_shouldPercolateGarbageCollect(MM_En\n }\n \n void\n-MM_ScavengerDelegate::doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember)\n+MM_ScavengerDelegate::doSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember)\n {\n \tMM_Scavenger *scavenger = _extensions->scavenger;\n-\tif (scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n-\t\tswitch (reason) {\n-\t\tcase SCAN_REASON_SCAVENGE:\n-\t\t\t*shouldRemember |= scavenger->copyObjectSlot(env, slotPtr);\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_FIXUP:\n+\n+\tswitch (reason) {\n+\tcase SCAN_REASON_SCAVENGE:\n+\t\t*shouldRemember |= scavenger->copyObjectSlot(env, slotPtr);\n+\t\tbreak;\n+\tcase SCAN_REASON_FIXUP:\n #if defined(OMR_GC_CONCURRENT_SCAVENGER)\n \t\t\tscavenger->fixupSlot(slotPtr);\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_BACKOUT:\n+\t\tbreak;\n+\tcase SCAN_REASON_BACKOUT:\n #if defined(OMR_GC_CONCURRENT_SCAVENGER)\n-\t\t\tif (_extensions->concurrentScavenger) {\n-\t\t\t\tscavenger->fixupSlotWithoutCompression(slotPtr);\n-\t\t\t} else\n+\t\tif (_extensions->concurrentScavenger) {\n+\t\t\tscavenger->fixupSlotWithoutCompression(slotPtr);\n+\t\t} else\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n-\t\t\t{\n-\t\t\t\tscavenger->backOutFixSlotWithoutCompression(slotPtr);\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_SHOULDREMEMBER:\n-\t\t\t*shouldRemember |= scavenger->shouldRememberSlot(slotPtr);\n-\t\t\tbreak;\n+\t\t{\n+\t\t\tscavenger->backOutFixSlotWithoutCompression(slotPtr);\n \t\t}\n+\t\tbreak;\n+\tcase SCAN_REASON_SHOULDREMEMBER:\n+\t\t*shouldRemember |= scavenger->shouldRememberSlot(slotPtr);\n+\t\tbreak;\n+\t}\n+}\n+\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_ScavengerDelegate::doContinuationSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_extensions->scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr, reason, shouldRemember);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_ScavengerDelegate::doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, void *walkState, const void* stackLocation)\n+{\n+\tif (_extensions->scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr, reason, shouldRemember);\n \t}\n }\n \n@@ -342,7 +366,7 @@ void\n stackSlotIteratorForScavenge(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4Scavenge *data = (StackIteratorData4Scavenge *)localData;\n-\tdata->scavengerDelegate->doStackSlot(data->env, slotPtr, data->reason, data->shouldRemember);\n+\tdata->scavengerDelegate->doStackSlot(data->env, slotPtr, data->reason, data->shouldRemember, walkState, stackLocation);\n }\n \n bool\n@@ -369,6 +393,16 @@ MM_ScavengerDelegate::scanContinuationNativeSlots(MM_EnvironmentStandard *env, o\n \t\tlocalData.shouldRemember = &shouldRemember;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForScavenge, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slotPtr,reason, &shouldRemember, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/ScavengerDelegate.hpp b/runtime/gc_glue_java/ScavengerDelegate.hpp\nindex 708045ee703..028ae3e83bc 100644\n--- a/runtime/gc_glue_java/ScavengerDelegate.hpp\n+++ b/runtime/gc_glue_java/ScavengerDelegate.hpp\n@@ -43,6 +43,9 @@\n #include \"MarkingScheme.hpp\"\n #include \"ScanClassesMode.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_ObjectScanner;\n class GC_VMThreadIterator;\n class MM_CompactScheme;\n@@ -177,7 +180,11 @@ class MM_ScavengerDelegate : public MM_BaseNonVirtual {\n \tvoid poisonSlots(MM_EnvironmentBase *env);\n \tvoid healSlots(MM_EnvironmentBase *env);\n #endif /* defined(OMR_ENV_DATA64) && defined(OMR_GC_FULL_POINTERS) */\n-\tvoid doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember);\n+\tMMINLINE void doSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, void *walkState, const void* stackLocation);\n \n \tbool initialize(MM_EnvironmentBase *env);\n \tvoid tearDown(MM_EnvironmentBase *env);\ndiff --git a/runtime/gc_glue_java/ScavengerRootScanner.hpp b/runtime/gc_glue_java/ScavengerRootScanner.hpp\nindex 8035184b13a..eba17f59964 100644\n--- a/runtime/gc_glue_java/ScavengerRootScanner.hpp\n+++ b/runtime/gc_glue_java/ScavengerRootScanner.hpp\n@@ -110,6 +110,22 @@ class MM_ScavengerRootScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t/*\n+\t * Handle continuation slots specially so that we can auto-remember referenced objects\n+\t */\n+\tvirtual void\n+\tdoContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+\t{\n+\t\tMM_EnvironmentStandard *envStandard = MM_EnvironmentStandard::getEnvironment(_env);\n+\t\tif (_scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\t\t_scavenger->copyAndForwardThreadSlot(envStandard, slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/*\n \t * Handle stack and thread slots specially so that we can auto-remember stack-referenced objects\n \t */\ndiff --git a/runtime/gc_glue_java/ScavengerThreadRescanner.hpp b/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\nindex 51678d19fc7..3d014033266 100644\n--- a/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\n+++ b/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\n@@ -54,6 +54,12 @@ class MM_ScavengerThreadRescanner : public MM_RootScanner\n \t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n \t}\ndiff --git a/runtime/gc_include/j9modron.h b/runtime/gc_include/j9modron.h\nindex 59884c72f9d..02e6489be73 100644\n--- a/runtime/gc_include/j9modron.h\n+++ b/runtime/gc_include/j9modron.h\n@@ -131,6 +131,8 @@ typedef jvmtiIterationControl J9MODRON_REFERENCE_CHAIN_WALKER_CALLBACK(J9Object\n #define J9GC_ROOT_TYPE_JVMTI_TAG_REF 21\n #define J9GC_ROOT_TYPE_OWNABLE_SYNCHRONIZER_OBJECT 22\n #define J9GC_ROOT_TYPE_CONTINUATION_OBJECT 23\n+#define J9GC_ROOT_TYPE_CONTINUATION_MONITOR 24\n+#define J9GC_ROOT_TYPE_CONTINUATION_VTHREAD 25\n \n #define J9GC_REFERENCE_TYPE_UNKNOWN -1 /**< reference to an object that fell through a default state in an iterator */\n #define J9GC_REFERENCE_TYPE_FIELD -2\t/**< field reference to an object */\ndiff --git a/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp b/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\nindex a0d4cfa3c27..eca3d9f42a9 100644\n--- a/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\n+++ b/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\n@@ -105,9 +105,9 @@ class MM_RealtimeMarkingSchemeRootMarker : public MM_RealtimeRootScanner\n \t * @see MM_Metronome::markObject()\n \t */\n \tvirtual void\n-\tdoSlot(J9Object** slot)\n+\tdoSlot(J9Object **slotPtr)\n \t{\n-\t\t_markingScheme->markObject(_env, *slot);\n+\t\t_markingScheme->markObject(_env, *slotPtr);\n \t}\n \t\n \tvirtual void\n@@ -117,18 +117,29 @@ class MM_RealtimeMarkingSchemeRootMarker : public MM_RealtimeRootScanner\n \t\tif (_markingScheme->isHeapObject(object)) {\n \t\t\t/* heap object - validate and mark */\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(_env));\n-\t\t\t_markingScheme->markObject(_env, object);\n+\t\t\tdoSlot(slotPtr);\n \t\t} else if (NULL != object) {\n \t\t\t/* stack object - just validate */\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(_env));\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tJ9Object *object = *slotPtr;\n+\t\tif (_markingScheme->isHeapObject(object)) {\n+\t\t\tdoSlot(slotPtr);\n+\t\t} else if (NULL != object) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void\n \tdoVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tJ9Object *object = *slotPtr;\n \t\tif (_markingScheme->isHeapObject(object)) {\n-\t\t\t_markingScheme->markObject(_env, object);\n+\t\t\tdoSlot(slotPtr);\n \t\t} else if (NULL != object) {\n \t\t\tAssert_MM_true(vmthreaditerator_state_monitor_records == vmThreadIterator->getState());\n \t\t}\ndiff --git a/runtime/gc_structs/CMakeLists.txt b/runtime/gc_structs/CMakeLists.txt\nindex 9fdebffe041..db59bdf533c 100644\n--- a/runtime/gc_structs/CMakeLists.txt\n+++ b/runtime/gc_structs/CMakeLists.txt\n@@ -38,6 +38,7 @@ set(gc_structs_sources\n \tConstantDynamicSlotIterator.cpp\n \tConstantPoolClassSlotIterator.cpp\n \tConstantPoolObjectSlotIterator.cpp\n+\tContinuationSlotIterator.cpp\n \tJVMTIObjectTagTableIterator.cpp\n \tMethodTypesIterator.cpp\n \tMixedObjectDeclarationOrderIterator.cpp\ndiff --git a/runtime/gc_structs/ContinuationSlotIterator.cpp b/runtime/gc_structs/ContinuationSlotIterator.cpp\nnew file mode 100644\nindex 00000000000..5cacc43e4a5\n--- /dev/null\n+++ b/runtime/gc_structs/ContinuationSlotIterator.cpp\n@@ -0,0 +1,61 @@\n+\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup GC_Structs\n+ */\n+\n+#include \"j9.h\"\n+#include \"j9cfg.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+\n+/**\n+ * @return the next slot in the J9VMContinuation\n+ * @return NULL if there are no more such slots\n+ */\n+j9object_t *\n+GC_ContinuationSlotIterator::nextSlot()\n+{\n+\tj9object_t *ret = NULL;\n+\tif (NULL != _monitorRecord) {\n+\t\tJ9MonitorEnterRecord *currentMonitorRecord = _monitorRecord;\n+\t\t_monitorRecord = currentMonitorRecord->next;\n+\t\t_state = state_monitor_records;\n+\t\tret = &currentMonitorRecord->object;\n+\t} else if (NULL != _jniMonitorRecord) {\n+\t\tJ9MonitorEnterRecord *currentMonitorRecord = _jniMonitorRecord;\n+\t\t_jniMonitorRecord = currentMonitorRecord->next;\n+\t\t_state = state_monitor_records;\n+\t\tret = &currentMonitorRecord->object;\n+\t} else if (NULL != _vthread) {\n+\t\t_state = state_vthread;\n+\t\tret = _vthread;\n+\t\t_vthread = NULL;\n+\t} else {\n+\t\t_state = state_end;\n+\t}\n+\treturn ret;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\ndiff --git a/runtime/gc_structs/ContinuationSlotIterator.hpp b/runtime/gc_structs/ContinuationSlotIterator.hpp\nnew file mode 100644\nindex 00000000000..4eb84640f1a\n--- /dev/null\n+++ b/runtime/gc_structs/ContinuationSlotIterator.hpp\n@@ -0,0 +1,96 @@\n+\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup GC_Structs\n+ */\n+\n+#if !defined(CONTINUATIONSLOTITERATOR_HPP_)\n+#define CONTINUATIONSLOTITERATOR_HPP_\n+#if JAVA_SPEC_VERSION >= 24\n+\n+#include \"j9.h\"\n+#include \"j9cfg.h\"\n+#include \"modron.h\"\n+\n+/**\n+ * Iterate over monitor records slots and vthread slot in a J9VMContinuation.\n+ * Used by ScanContinuationNativeSlots() (JAVA_SPEC_VERSION >= 24 only).\n+ * @ingroup GC_Structs\n+ */\n+class GC_ContinuationSlotIterator\n+{\n+public:\n+\t/**\n+\t * State constants representing the current stage of the iteration process\n+\t */\n+\tenum State {\n+\t\tstate_start = 0,\n+\t\tstate_monitor_records,\n+\t\tstate_vthread,\n+\t\tstate_end\n+\t};\n+\n+protected:\n+\tJ9VMThread *_vmThread;\n+\tState _state;\n+\n+\tj9object_t *_vthread;\n+\tJ9MonitorEnterRecord *_monitorRecord;\n+\tJ9MonitorEnterRecord *_jniMonitorRecord;\n+\n+public:\n+\tGC_ContinuationSlotIterator(J9VMThread *vmThread, J9VMContinuation *continuation)\n+\t\t: _vmThread(vmThread)\n+\t\t, _state(state_start)\n+\t\t, _vthread(&continuation->vthread)\n+\t\t, _monitorRecord(continuation->monitorEnterRecords)\n+\t\t, _jniMonitorRecord(continuation->jniMonitorEnterRecords)\n+\t{};\n+\n+\t/**\n+\t * @return @ref ContinuationSlotIteratorState representing the current state (stage\n+\t * of the iteration process)\n+\t */\n+\tMMINLINE int\n+\tgetState()\n+\t{\n+\t\treturn _state;\n+\t}\n+\n+\t/**\n+\t * Get the J9VMThread * for the thread being iterated\n+\t * @return _vmThread - the J9VMThread being iterated.\n+\t */\n+\tMMINLINE J9VMThread *\n+\tgetVMThread()\n+\t{\n+\t\treturn _vmThread;\n+\t}\n+\n+\tj9object_t *nextSlot();\n+};\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+#endif /* CONTINUATIONSLOTITERATOR_HPP_ */\ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.cpp b/runtime/gc_vlhgc/CopyForwardScheme.cpp\nindex 8e2afee8344..a6fa81fe80e 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.cpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.cpp\n@@ -51,6 +51,9 @@\n #include \"CompactGroupManager.hpp\"\n #include \"CompactGroupPersistentStats.hpp\"\n #include \"CompressedCardTable.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CopyForwardCompactGroup.hpp\"\n #include \"CopyForwardGMPCardCleaner.hpp\"\n #include \"CopyForwardNoGMPCardCleaner.hpp\"\n@@ -2310,17 +2313,30 @@ MM_CopyForwardScheme::scanOwnableSynchronizerObjectSlots(MM_EnvironmentVLHGC *en\n }\n \n void\n-MM_CopyForwardScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+MM_CopyForwardScheme::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n+{\n+\t/* the reservingContext is base on related Continuation object */\n+\tMM_AllocationContextTarok *reservingContext = getContextForHeapAddress(fromObject);\n+\tcopyAndForward(env, reservingContext, fromObject, slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_CopyForwardScheme::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n {\n \tif (isHeapObject(*slotPtr)) {\n-\t\t/* heap object - validate and copyforward */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::COULD_BE_FORWARDED, *slotPtr, stackLocation, walkState).validate(env));\n-\t\tJ9VMThread *thread = ((J9StackWalkState *)walkState)->currentThread;\n-\t\tMM_AllocationContextTarok *reservingContext = (MM_AllocationContextTarok *)MM_EnvironmentVLHGC::getEnvironment(thread)->getAllocationContext();\n-\t\tcopyAndForward(MM_EnvironmentVLHGC::getEnvironment(env), reservingContext, fromObject, slotPtr);\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t} else if (NULL != *slotPtr) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(env));\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_CopyForwardScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -2355,6 +2371,15 @@ MM_CopyForwardScheme::scanContinuationNativeSlots(MM_EnvironmentVLHGC *env, MM_A\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForCopyForwardScheme, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n }\n \n@@ -3830,6 +3855,18 @@ class MM_CopyForwardSchemeRootScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n+\t\t\tJ9VMThread *thread = continuationSlotIterator->getVMThread();\n+\t\t\tMM_AllocationContextTarok *reservingContext = (MM_AllocationContextTarok *)MM_EnvironmentVLHGC::getEnvironment(thread)->getAllocationContext();\n+\t\t\t_copyForwardScheme->copyAndForward(MM_EnvironmentVLHGC::getEnvironment(_env), reservingContext, slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tif (_copyForwardScheme->isHeapObject(* slotPtr)) {\n \t\t\t/* we know that threads are bound to nodes so relocalize this object into the node of the thread which directly references it */\n@@ -4572,6 +4609,16 @@ class MM_CopyForwardVerifyScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n+\t\t\tverifyObject(slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n \t\t\tverifyObject(slotPtr);\ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.hpp b/runtime/gc_vlhgc/CopyForwardScheme.hpp\nindex 0606bf0532e..0d060c8a89b 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.hpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.hpp\n@@ -39,6 +39,9 @@\n #include \"GCExtensions.hpp\"\n #include \"ModronTypes.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_SlotObject;\n class MM_AllocationContextTarok;\n class MM_CardCleaner;\n@@ -1129,6 +1132,11 @@ class MM_CopyForwardScheme : public MM_BaseNonVirtual\n \t}\n \n \tvoid abandonTLHRemainders(MM_EnvironmentVLHGC *env);\n+\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \n \tfriend class MM_CopyForwardGMPCardCleaner;\ndiff --git a/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp b/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\nindex 012456ab8f0..2bdeb91a46c 100644\n--- a/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\n+++ b/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\n@@ -30,6 +30,9 @@\n #include \"CardTable.hpp\"\n #include \"ClassLoaderClassesIterator.hpp\"\n #include \"ClassIterator.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CycleState.hpp\"\n #include \"EnvironmentVLHGC.hpp\"\n #include \"HeapMapWordIterator.hpp\"\n@@ -182,7 +185,9 @@ void\n stackSlotIteratorForGlobalMarkCardScrubber(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4GlobalMarkCardScrubber *data = (StackIteratorData4GlobalMarkCardScrubber *)localData;\n-\tif (*data->doScrub) {\n+\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(javaVM);\n+\tif (*data->doScrub && (extensions->heap->getHeapBase() <= *slotPtr) && (extensions->heap->getHeapTop() > *slotPtr)) {\n+\t\t/* *slotPtr is heap object */\n \t\t*data->doScrub = data->globalMarkCardScrubber->mayScrubReference(data->env, data->fromObject, *slotPtr);\n \t}\n \t/* It's unfortunate, but we probably cannot terminate iteration of slots once we do see for one slot that we cannot scurb */\n@@ -203,6 +208,21 @@ bool MM_GlobalMarkCardScrubber::scrubContinuationNativeSlots(MM_EnvironmentVLHGC\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForGlobalMarkCardScrubber, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n+\n+\t\tJ9Object **slotPtr = NULL;\n+\t\twhile (doScrub && (NULL != (slotPtr = continuationSlotIterator.nextSlot()))) {\n+\t\t\tif ((extensions->heap->getHeapBase() <= *slotPtr) && (extensions->heap->getHeapTop() > *slotPtr)) {\n+\t\t\t\t/* *slotPtr is heap object */\n+\t\t\t\tdoScrub = mayScrubReference(env, objectPtr, *slotPtr);\n+\t\t\t}\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n \treturn doScrub;\n }\ndiff --git a/runtime/gc_vlhgc/GlobalMarkingScheme.cpp b/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\nindex 9e75f9019ec..d6e7d2b1c51 100644\n--- a/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\n+++ b/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\n@@ -40,6 +40,9 @@\n #include \"ClassLoaderRememberedSet.hpp\"\n #include \"ClassLoaderSegmentIterator.hpp\"\n #include \"ClassModel.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CycleState.hpp\"\n #include \"Debug.hpp\"\n #include \"EnvironmentVLHGC.hpp\"\n@@ -775,17 +778,29 @@ MM_GlobalMarkingScheme::scanPointerArrayObject(MM_EnvironmentVLHGC *env, J9Index\n }\n \n void\n-MM_GlobalMarkingScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n-{\n-\tJ9Object *object = *slotPtr;\n-\tif (isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, *slotPtr, stackLocation, walkState).validate(env));\n-\t\tmarkObject(env, object);\n-\t\trememberReferenceIfRequired(env, fromObject, object);\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(env));\n+MM_GlobalMarkingScheme::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n+{\n+\tmarkObject(env, *slotPtr);\n+\trememberReferenceIfRequired(env, fromObject, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_GlobalMarkingScheme::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_GlobalMarkingScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -815,6 +830,16 @@ MM_GlobalMarkingScheme::scanContinuationNativeSlots(MM_EnvironmentVLHGC *env, J9\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForGlobalMarkingScheme, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\n@@ -1163,7 +1188,18 @@ class MM_GlobalMarkingSchemeRootMarker : public MM_RootScanner\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(_env));\n \t\t}\n \t}\n-\t\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tJ9Object *object = *slotPtr;\n+\t\tif (_markingScheme->isHeapObject(object)) {\n+\t\t\t_markingScheme->markObject((MM_EnvironmentVLHGC *)_env, object);\n+\t\t} else if (NULL != object) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tJ9Object *object = *slotPtr;\n \t\tif (_markingScheme->isHeapObject(object)) {\ndiff --git a/runtime/gc_vlhgc/GlobalMarkingScheme.hpp b/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\nindex 3f2dbfba7fe..d8624890aa2 100644\n--- a/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\n+++ b/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\n@@ -44,6 +44,9 @@\n /**\n  * @}\n  */\n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_CardCleaner;\n class MM_Collector;\n class MM_CycleState;\n@@ -513,6 +516,10 @@ class MM_GlobalMarkingScheme : public MM_BaseVirtual\n \t */\n \tvoid flushBuffers(MM_EnvironmentVLHGC *env);\n \t\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * Create a GlobalMarkingScheme object.\ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.cpp b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\nindex f9dd418d449..36c0763faea 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n@@ -45,6 +45,9 @@\n #include \"CompactGroupManager.hpp\"\n #include \"ContinuationObjectBuffer.hpp\"\n #include \"ContinuationObjectList.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"VMHelpers.hpp\"\n #include \"WriteOnceCompactor.hpp\"\n #include \"Debug.hpp\"\n@@ -81,6 +84,7 @@\n #include \"SparseVirtualMemory.hpp\"\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n #include \"SlotObject.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"SublistPool.hpp\"\n #include \"SublistPuddle.hpp\"\n #include \"ParallelTask.hpp\"\n@@ -1213,15 +1217,33 @@ MM_WriteOnceCompactor::fixupMixedObject(MM_EnvironmentVLHGC* env, J9Object *obje\n }\n \n void\n-MM_WriteOnceCompactor::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slot)\n+MM_WriteOnceCompactor::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n {\n-\tJ9Object *pointer = *slot;\n-\tif (isHeapObject(pointer)) {\n-\t\tJ9Object *forwardedPtr = getForwardingPtr(pointer);\n-\t\tif (pointer != forwardedPtr) {\n-\t\t\t*slot = forwardedPtr;\n-\t\t}\n-\t\t_interRegionRememberedSet->rememberReferenceForCompact(env, fromObject, forwardedPtr);\n+\tJ9Object *pointer = *slotPtr;\n+\tJ9Object *forwardedPtr = getForwardingPtr(pointer);\n+\tif (pointer != forwardedPtr) {\n+\t\t*slotPtr = forwardedPtr;\n+\t}\n+\t_interRegionRememberedSet->rememberReferenceForCompact(env, fromObject, forwardedPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_WriteOnceCompactor::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_WriteOnceCompactor::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -1232,7 +1254,7 @@ void\n stackSlotIteratorForWriteOnceCompactor(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4WriteOnceCompactor *data = (StackIteratorData4WriteOnceCompactor *)localData;\n-\tdata->writeOnceCompactor->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->writeOnceCompactor->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n void\n@@ -1253,6 +1275,16 @@ MM_WriteOnceCompactor::fixupContinuationNativeSlots(MM_EnvironmentVLHGC* env, J9\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForWriteOnceCompactor, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \n@@ -1664,7 +1696,7 @@ class MM_WriteOnceCompactFixupRoots : public MM_RootScanner {\n \n \t}\n \t\n-\tvirtual void doSlot(J9Object** slot)\n+\tvirtual void doSlot(J9Object **slot)\n \t{\n \t\tJ9Object *pointer = *slot;\n \t\tif ((pointer >= _heapBase) && (pointer < _heapTop)) {\n@@ -1837,7 +1869,7 @@ class MM_WriteOnceCompactorCheckMarkRoots : public MM_RootScanner {\n \t\t_typeId = __FUNCTION__;\n \t}\n \n-\tvirtual void doSlot(J9Object** slot)\n+\tvirtual void doSlot(J9Object **slot)\n \t{\n \t}\n \ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.hpp b/runtime/gc_vlhgc/WriteOnceCompactor.hpp\nindex 1743ad7a7f2..180e9870e0d 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.hpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.hpp\n@@ -47,6 +47,9 @@\n \n #if defined(J9VM_GC_MODRON_COMPACTION)\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_AllocateDescription;\n class MM_WriteOnceCompactor;\n class MM_ParallelDispatcher;\n@@ -608,7 +611,11 @@ class MM_WriteOnceCompactor : public MM_BaseVirtual\n \t * @param workStackBaseHighPriority[in/out] The \"high priority\" work stack base.  This reference parameter will be updated before the function returns is region is high priority\n \t */\n \tvoid pushRegionOntoWorkStack(MM_HeapRegionDescriptorVLHGC **workStackBase, MM_HeapRegionDescriptorVLHGC **workStackBaseHighPriority, MM_HeapRegionDescriptorVLHGC *region);\n-\tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slot);\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \n \tfriend class MM_WriteOnceCompactFixupRoots;\n \tfriend class MM_ParallelWriteOnceCompactTask;\n",
    "72b169f3c84ba4ddfd9d5bbf00a90c085ca22bf6": "diff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\nindex 3ff9acbf9d3..3cf742ab16b 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/BytecodeGenerator.java\n@@ -23,6 +23,8 @@\n \n import java.util.Arrays;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n@@ -33,12 +35,29 @@\n import com.ibm.j9ddr.StructureReader.StructureDescriptor;\n import com.ibm.j9ddr.tools.FlagStructureList;\n \n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n import jdk.internal.org.objectweb.asm.ClassWriter;\n import jdk.internal.org.objectweb.asm.Label;\n import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n import jdk.internal.org.objectweb.asm.Type;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.Annotation;\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.ClassBuilder;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.Label;\n+import java.lang.classfile.MethodBuilder;\n+import java.lang.classfile.Opcode;\n+import java.lang.classfile.attribute.ExceptionsAttribute;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.MethodTypeDesc;\n+import java.util.function.Consumer;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n /**\n  * Generates the class bytecodes needed by DDR to represent, as Java classes,\n@@ -138,14 +157,6 @@ public static byte[] getStructureClassBytes(StructureDescriptor structure, Strin\n final class FlagsHelper extends HelperBase {\n \n \tpublic static byte[] getClassBytes(StructureDescriptor structure, String className) {\n-\t\tClassWriter clazz = new ClassWriter(0);\n-\n-\t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n-\n-\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n-\n-\t\tclinit.visitCode();\n-\n \t\tboolean useCName = BytecodeGenerator.shouldUseCNameFor(structure.getName());\n \t\tMap<String, Boolean> values = new TreeMap<>();\n \n@@ -159,11 +170,20 @@ public static byte[] getClassBytes(StructureDescriptor structure, String classNa\n \t\t\tvalues.put(name, Boolean.valueOf(constant.getValue() != 0));\n \t\t}\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassWriter clazz = new ClassWriter(0);\n+\n+\t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n+\n+\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n+\n+\t\tclinit.visitCode();\n+\n \t\tfor (Map.Entry<String, Boolean> entry : values.entrySet()) {\n \t\t\tString name = entry.getKey();\n \t\t\tBoolean value = entry.getValue();\n \n-\t\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, name, \"Z\", null, null).visitEnd();\n+\t\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, name, \"Z\", null, null).visitEnd();\n \n \t\t\tclinit.visitInsn(value.booleanValue() ? ICONST_1 : ICONST_0);\n \t\t\tclinit.visitFieldInsn(PUTSTATIC, className, name, Type.BOOLEAN_TYPE.getDescriptor());\n@@ -185,33 +205,72 @@ public static byte[] getClassBytes(StructureDescriptor structure, String classNa\n \t\tclazz.visitEnd();\n \n \t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc classDesc = ClassDesc.ofInternalName(className);\n+\n+\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\tfor (Map.Entry<String, Boolean> entry : values.entrySet()) {\n+\t\t\t\tbody.loadConstant(entry.getValue().booleanValue() ? 1 : 0);\n+\t\t\t\tbody.putstatic(classDesc, entry.getKey(), ConstantDescs.CD_boolean);\n+\t\t\t}\n+\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\tbody.aload(0);\n+\t\t\tbody.invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<ClassBuilder> builder = body -> {\n+\t\t\tbody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_FINAL | ClassFile.ACC_SUPER);\n+\n+\t\t\tfor (String name : values.keySet()) {\n+\t\t\t\tbody.withField(name, ConstantDescs.CD_boolean,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tbody.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC, clinit);\n+\n+\t\t\tbody.withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PRIVATE, init);\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n }\n \n-abstract class HelperBase implements Opcodes {\n+abstract class HelperBase\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\timplements Opcodes\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+{\n+\n+\tstatic final String byteFromLong = \"(J)B\";\n \n-\tstatic final String byteFromLong = Type.getMethodDescriptor(Type.BYTE_TYPE, Type.LONG_TYPE);\n+\tstatic final String doubleFromLong = \"(J)D\";\n \n-\tstatic final String doubleFromLong = Type.getMethodDescriptor(Type.DOUBLE_TYPE, Type.LONG_TYPE);\n+\tstatic final String doubleFromVoid = \"()D\";\n \n-\tstatic final String doubleFromVoid = Type.getMethodDescriptor(Type.DOUBLE_TYPE);\n+\tstatic final String floatFromLong = \"(J)F\";\n \n-\tstatic final String floatFromLong = Type.getMethodDescriptor(Type.FLOAT_TYPE, Type.LONG_TYPE);\n+\tstatic final String floatFromVoid = \"()F\";\n \n-\tstatic final String floatFromVoid = Type.getMethodDescriptor(Type.FLOAT_TYPE);\n+\tstatic final String intFromLong = \"(J)I\";\n \n-\tstatic final String intFromLong = Type.getMethodDescriptor(Type.INT_TYPE, Type.LONG_TYPE);\n+\tstatic final String longFromLong = \"(J)J\";\n \n-\tstatic final String longFromLong = Type.getMethodDescriptor(Type.LONG_TYPE, Type.LONG_TYPE);\n+\tstatic final String longFromVoid = \"()J\";\n \n-\tstatic final String longFromVoid = Type.getMethodDescriptor(Type.LONG_TYPE);\n+\tstatic final String shortFromLong = \"(J)S\";\n \n-\tstatic final String shortFromLong = Type.getMethodDescriptor(Type.SHORT_TYPE, Type.LONG_TYPE);\n+\tstatic final String voidFromLong = \"(J)V\";\n \n-\tstatic final String voidFromLong = Type.getMethodDescriptor(Type.VOID_TYPE, Type.LONG_TYPE);\n+\tstatic final String voidMethod = \"()V\";\n \n-\tstatic final String voidMethod = Type.getMethodDescriptor(Type.VOID_TYPE);\n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \n \tstatic final void addLong(MethodVisitor method, long value) {\n \t\tif (value != 0) {\n@@ -244,7 +303,13 @@ static final void loadInt(MethodVisitor method, int value) {\n \t\t\tmethod.visitInsn(ICONST_5);\n \t\t\tbreak;\n \t\tdefault:\n-\t\t\tmethod.visitLdcInsn(Integer.valueOf(value));\n+\t\t\tif ((Byte.MIN_VALUE <= value) && (value <= Byte.MAX_VALUE)) {\n+\t\t\t\tmethod.visitIntInsn(BIPUSH, value);\n+\t\t\t} else if ((Short.MIN_VALUE <= value) && (value <= Short.MAX_VALUE)) {\n+\t\t\t\tmethod.visitIntInsn(SIPUSH, value);\n+\t\t\t} else {\n+\t\t\t\tmethod.visitLdcInsn(Integer.valueOf(value));\n+\t\t\t}\n \t\t\tbreak;\n \t\t}\n \t}\n@@ -259,6 +324,16 @@ static final void loadLong(MethodVisitor method, long value) {\n \t\t}\n \t}\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tstatic final void addLong(CodeBuilder code, long value) {\n+\t\tif (value != 0) {\n+\t\t\tcode.loadConstant(value).ladd();\n+\t\t}\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n }\n \n final class PointerHelper extends HelperBase {\n@@ -287,6 +362,7 @@ private static Set<String> addNames(Set<String> set, String names) {\n \t\treturn set;\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate static boolean checkPresent(FieldDescriptor field, MethodVisitor method) {\n \t\tif (field.isPresent()) {\n \t\t\treturn true;\n@@ -302,6 +378,20 @@ private static boolean checkPresent(FieldDescriptor field, MethodVisitor method)\n \n \t\treturn false;\n \t}\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tprivate static boolean checkPresent(FieldDescriptor field, CodeBuilder body) {\n+\t\tif (field.isPresent()) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tbody.new_(noSuchFieldDesc);\n+\t\tbody.dup();\n+\t\tbody.invokespecial(noSuchFieldDesc, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\tbody.athrow();\n+\n+\t\treturn false;\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t/*\n \t * The new DDR tooling doesn't always distinguish between IDATA and I32 or I64\n@@ -367,29 +457,47 @@ private static String removeTypeTags(String type) {\n \t\treturn TypeTagPattern.matcher(type).replaceAll(\"\").trim();\n \t}\n \n-\tprivate final Type abstractPointerType;\n-\n \tprivate final String basePrefix;\n \n \tprivate final String className;\n \n-\tprivate final Type classType;\n-\n-\tprivate final ClassWriter clazz;\n-\n-\tprivate final String[] normalThrows;\n-\n-\tprivate final String[] optionalThrows;\n-\n \tprivate final StructureReader reader;\n \n-\tprivate final Type scalarType;\n-\n \tprivate final StructureDescriptor structure;\n \n \tprivate final StructureTypeManager typeManager;\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\tprivate final Type abstractPointerType;\n+\tprivate final Type classType;\n+\tprivate final ClassWriter clazz;\n+\tprivate final String[] normalThrows;\n+\tprivate final String[] optionalThrows;\n+\tprivate final Type scalarType;\n \tprivate final Type udataType;\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tprivate static final ClassDesc corruptDataDesc = ClassDesc.of(\"com.ibm.j9ddr.CorruptDataException\");\n+\tprivate static final ClassDesc fieldAccessorDesc = ClassDesc.of(\"com.ibm.j9ddr.GeneratedFieldAccessor\");\n+\tprivate static final ClassDesc generatedPointerDesc = ClassDesc.of(\"com.ibm.j9ddr.GeneratedPointerClass\");\n+\tprivate static final ClassDesc noSuchFieldDesc = ClassDesc.of(\"java.lang.NoSuchFieldException\");\n+\n+\tprivate static final List<ClassDesc> normalThrows = List.of(corruptDataDesc);\n+\tprivate static final List<ClassDesc> optionalThrows = List.of(corruptDataDesc, noSuchFieldDesc);\n+\n+\tprivate static final MethodTypeDesc long2int = MethodTypeDesc.of(ConstantDescs.CD_int, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc long2long = MethodTypeDesc.of(ConstantDescs.CD_long, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc long2void = MethodTypeDesc.of(ConstantDescs.CD_void, ConstantDescs.CD_long);\n+\tprivate static final MethodTypeDesc void2long = MethodTypeDesc.of(ConstantDescs.CD_long);\n+\n+\tprivate final ClassDesc abstractPointerDesc;\n+\tprivate ClassBuilder classBuilder;\n+\tprivate final ClassDesc classDesc;\n+\tprivate final MethodTypeDesc long2abstact;\n+\tprivate final MethodTypeDesc scalar2abstract;\n+\tprivate final ClassDesc scalarDesc;\n+\tprivate ClassDesc superDesc;\n+\tprivate final ClassDesc udataDesc;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tprivate PointerHelper(StructureReader reader, StructureTypeManager typeManager, StructureDescriptor structure,\n \t\t\tString className) {\n@@ -403,20 +511,32 @@ private PointerHelper(StructureReader reader, StructureTypeManager typeManager,\n \n \t\tString prefix = className.substring(0, index + 1); // ends with '/vmNN/'\n \n-\t\tthis.abstractPointerType = Type.getObjectType(prefix + \"pointer/AbstractPointer\");\n \t\tthis.basePrefix = prefix;\n \t\tthis.className = className;\n+\t\tthis.reader = reader;\n+\t\tthis.structure = structure;\n+\t\tthis.typeManager = typeManager;\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tthis.abstractPointerType = Type.getObjectType(prefix + \"pointer/AbstractPointer\");\n \t\tthis.classType = Type.getObjectType(className);\n \t\tthis.clazz = new ClassWriter(0);\n \t\tthis.normalThrows = new String[] { \"com/ibm/j9ddr/CorruptDataException\" };\n \t\tthis.optionalThrows = new String[] { \"com/ibm/j9ddr/CorruptDataException\", \"java/lang/NoSuchFieldException\" };\n-\t\tthis.reader = reader;\n \t\tthis.scalarType = Type.getObjectType(prefix + \"types/Scalar\");\n-\t\tthis.structure = structure;\n-\t\tthis.typeManager = typeManager;\n \t\tthis.udataType = Type.getObjectType(prefix + \"types/UDATA\");\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tthis.abstractPointerDesc = ClassDesc.ofInternalName(prefix + \"pointer/AbstractPointer\");\n+\t\tthis.classDesc = ClassDesc.ofInternalName(className);\n+\t\tthis.long2abstact = MethodTypeDesc.of(abstractPointerDesc, ConstantDescs.CD_long);\n+\t\tthis.scalarDesc = ClassDesc.ofInternalName(prefix + \"types/Scalar\");\n+\t\tthis.scalar2abstract = MethodTypeDesc.of(abstractPointerDesc, scalarDesc);\n+\t\tthis.udataDesc = ClassDesc.ofInternalName(prefix + \"types/UDATA\");\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\n \tprivate MethodVisitor beginAnnotatedMethod(FieldDescriptor field, String name, String descriptor) {\n \t\tMethodVisitor method = beginMethod(field, name, descriptor);\n \n@@ -438,6 +558,43 @@ private MethodVisitor beginMethod(FieldDescriptor field, String name, String des\n \t\treturn clazz.visitMethod(ACC_PUBLIC, name, descriptor, null, exceptions);\n \t}\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate void addAnnotatedMethod(FieldDescriptor field, String name, MethodTypeDesc type,\n+\t\t\tConsumer<CodeBuilder> code) {\n+\t\tConsumer<MethodBuilder> method = builder -> {\n+\t\t\tList<ClassDesc> exceptions = field.isOptional() ? optionalThrows : normalThrows;\n+\n+\t\t\tbuilder.with(ExceptionsAttribute.ofSymbols(exceptions));\n+\n+\t\t\tif (field.isPresent()) {\n+\t\t\t\tAnnotation annotation = Annotation.of( //\n+\t\t\t\t\t\tfieldAccessorDesc, //\n+\t\t\t\t\t\tAnnotationElement.ofString(\"offsetFieldName\", String.format(\"_%sOffset_\", field.getName())), //\n+\t\t\t\t\t\tAnnotationElement.ofString(\"declaredType\", field.getDeclaredType()));\n+\n+\t\t\t\tbuilder.with(RuntimeVisibleAnnotationsAttribute.of(annotation));\n+\t\t\t}\n+\n+\t\t\tbuilder.withCode(code);\n+\t\t};\n+\n+\t\tclassBuilder.withMethod(name, type, ClassFile.ACC_PUBLIC, method);\n+\t}\n+\n+\tprivate void addMethod(FieldDescriptor field, String name, MethodTypeDesc type, Consumer<CodeBuilder> code) {\n+\t\tConsumer<MethodBuilder> method = builder -> {\n+\t\t\tList<ClassDesc> exceptions = field.isOptional() ? optionalThrows : normalThrows;\n+\n+\t\t\tbuilder.with(ExceptionsAttribute.ofSymbols(exceptions));\n+\t\t\tbuilder.withCode(code);\n+\t\t};\n+\n+\t\tclassBuilder.withMethod(name, type, ClassFile.ACC_PUBLIC, method);\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n \tprivate void doAccessorMethods() {\n \t\tfor (FieldDescriptor field : structure.getFields()) {\n \t\t\tString fieldName = field.getName();\n@@ -602,13 +759,14 @@ private void doArrayMethod(FieldDescriptor field) {\n \t */\n \tprivate void doBitfieldMethod(FieldDescriptor field, String baseType, int width) {\n \t\tString fieldName = field.getName();\n+\t\tString startFieldName = String.format(\"_%s_s_\", fieldName);\n+\t\tString accessorName = String.format(\"get%sBitfield\", baseType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType qualifiedBaseType = Type.getObjectType(qualifyType(baseType));\n \t\tType qualifiedReturnType = Type.getObjectType(qualifyType(generalizeSimpleType(baseType)));\n \t\tString returnDesc = Type.getMethodDescriptor(qualifiedReturnType);\n-\t\tString startFieldName = String.format(\"_%s_s_\", fieldName);\n-\t\tString accessorName = String.format(\"get%sBitfield\", baseType);\n \t\tString accessorDesc = Type.getMethodDescriptor(qualifiedBaseType, Type.INT_TYPE, Type.INT_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, fieldName, returnDesc);\n \n \t\tmethod.visitCode();\n@@ -621,6 +779,26 @@ private void doBitfieldMethod(FieldDescriptor field, String baseType, int width)\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc qualifiedBaseDesc = ClassDesc.ofInternalName(qualifyType(baseType));\n+\t\tClassDesc qualifiedReturnDesc = ClassDesc.ofInternalName(qualifyType(generalizeSimpleType(baseType)));\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(qualifiedBaseDesc, ConstantDescs.CD_int, ConstantDescs.CD_int);\n+\t\tClassDesc structureDesc = ClassDesc.ofInternalName(getStructureClassName());\n+\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(qualifiedReturnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getstatic(structureDesc, startFieldName, ConstantDescs.CD_int);\n+\t\t\t\tbody.loadConstant(width);\n+\t\t\t\tbody.invokevirtual(classDesc, accessorName, accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// no EA method for a bitfield\n \t}\n@@ -633,9 +811,9 @@ private void doBitfieldMethod(FieldDescriptor field, String baseType, int width)\n \t * }\n \t */\n \tprivate void doBooleanMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tString returnDesc = Type.getMethodDescriptor(Type.BOOLEAN_TYPE);\n \t\tString accessorDesc = Type.getMethodDescriptor(Type.BOOLEAN_TYPE, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -647,28 +825,56 @@ private void doBooleanMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_boolean);\n+\t\tMethodTypeDesc long2boolean = MethodTypeDesc.of(ConstantDescs.CD_boolean, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getBoolAtOffset\", long2boolean);\n+\t\t\t\tbody.ireturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Bool\", field);\n \t}\n \n \tprivate void doClassAnnotation() {\n \t\t// @com.ibm.j9ddr.GeneratedPointerClass(structureClass=BASE.class)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType annotationType = Type.getObjectType(\"com/ibm/j9ddr/GeneratedPointerClass\");\n \t\tAnnotationVisitor annotation = clazz.visitAnnotation(annotationType.getDescriptor(), true);\n \t\tType structureType = Type.getObjectType(getStructureClassName());\n \n \t\tannotation.visit(\"structureClass\", structureType);\n \t\tannotation.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc structureDesc = ClassDesc.ofInternalName(getStructureClassName());\n+\t\tAnnotationElement element = AnnotationElement.ofClass(\"structureClass\", structureDesc);\n+\n+\t\tclassBuilder.with(RuntimeVisibleAnnotationsAttribute.of(Annotation.of(generatedPointerDesc, element)));\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \tprivate void doConstructors(String superClassName) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tfinal String abstractPointerFromLong = Type.getMethodDescriptor(abstractPointerType, Type.LONG_TYPE);\n \t\tfinal String abstractPointerFromScalar = Type.getMethodDescriptor(abstractPointerType, scalarType);\n \t\tfinal String classFromLong = Type.getMethodDescriptor(classType, Type.LONG_TYPE);\n \t\tfinal String classFromScalar = Type.getMethodDescriptor(classType, scalarType);\n \t\tMethodVisitor method;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc long2self = MethodTypeDesc.of(classDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc scalar2self = MethodTypeDesc.of(classDesc, scalarDesc);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// protected SELF(long address) { super(address); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PROTECTED, \"<init>\", voidFromLong, null, null);\n \n@@ -680,8 +886,21 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokespecial(superDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.return_();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(ConstantDescs.INIT_NAME, long2void, ClassFile.ACC_PROTECTED, init);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(long address) { if (address == 0) return NULL; return new SELF(address); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\", classFromLong, null, null);\n \n@@ -706,8 +925,32 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(4, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tLabel nonNull = body.newLabel();\n+\n+\t\t\t\tbody.lload(0);\n+\t\t\t\tbody.lconst_0();\n+\t\t\t\tbody.lcmp();\n+\t\t\t\tbody.ifne(nonNull);\n+\t\t\t\tbody.getstatic(classDesc, \"NULL\", classDesc);\n+\t\t\t\tbody.areturn();\n+\n+\t\t\t\tbody.labelBinding(nonNull);\n+\t\t\t\tbody.new_(classDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.lload(0);\n+\t\t\t\tbody.invokespecial(classDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", long2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(AbstractPointer structure) { return cast(structure.getAddress()); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\",\n \t\t\t\t\tType.getMethodDescriptor(classType, abstractPointerType), null, null);\n@@ -721,8 +964,23 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc abstract2self = MethodTypeDesc.of(classDesc, abstractPointerDesc);\n+\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(abstractPointerDesc, \"getAddress\", void2long);\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", abstract2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public static SELF cast(UDATA udata) { return cast(udata.longValue()); }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_STATIC, \"cast\", Type.getMethodDescriptor(classType, udataType),\n \t\t\t\t\tnull, null);\n@@ -735,8 +993,24 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc udata2self = MethodTypeDesc.of(classDesc, udataDesc);\n+\n+\t\t\tConsumer<CodeBuilder> cast = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(udataDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"cast\", udata2self, ClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC, cast);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF add(long count) { return addOffset(count * BASE.SIZEOF); }\n+\t\t// bridge: AbstractPointer add(long count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"add\", classFromLong, null, null);\n \n@@ -750,7 +1024,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(5, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer add(long count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"add\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -761,8 +1034,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> add = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lmul();\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", long2self, ClassFile.ACC_PUBLIC, add);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF add(Scalar count) { return add(count.longValue()); }\n+\t\t// bridge: AbstractPointer add(Scalar count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"add\", classFromScalar, null, null);\n \n@@ -775,7 +1074,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer add(Scalar count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"add\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -786,8 +1084,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> add = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", scalar2self, ClassFile.ACC_PUBLIC, add);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"add\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"add\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF addOffset(long offset) { return cast(address + offset); }\n+\t\t// bridge: AbstractPointer addOffset(long offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"addOffset\", classFromLong, null, null);\n \n@@ -801,7 +1124,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(4, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer addOffset(long offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"addOffset\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -812,8 +1134,35 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> addOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.ladd();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", long2self, ClassFile.ACC_PUBLIC, addOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\n+\t\t\t\t\t\"addOffset\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF addOffset(Scalar offset) { return addOffset(offset.longValue()); }\n+\t\t// bridge: AbstractPointer addOffset(Scalar offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"addOffset\", classFromScalar, null, null);\n \n@@ -826,7 +1175,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer addOffset(Scalar offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"addOffset\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -837,8 +1185,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> addOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", scalar2self, ClassFile.ACC_PUBLIC, addOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"addOffset\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"addOffset\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF sub(long count) { return subOffset(count * SIZEOF); }\n+\t\t// bridge: AbstractPointer sub(long count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"sub\", classFromLong, null, null);\n \n@@ -852,7 +1225,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(5, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer sub(long count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"sub\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -863,8 +1235,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sub = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lmul();\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", long2self, ClassFile.ACC_PUBLIC, sub);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF sub(Scalar count) { return sub(count.longValue()); }\n+\t\t// bridge: AbstractPointer sub(Scalar count)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"sub\", classFromScalar, null, null);\n \n@@ -877,7 +1275,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer sub(Scalar count)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"sub\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -888,8 +1285,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sub = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", scalar2self, ClassFile.ACC_PUBLIC, sub);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"sub\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sub\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF subOffset(long offset) { return cast(address - offset); }\n+\t\t// bridge: AbstractPointer subOffset(long offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"subOffset\", classFromLong, null, null);\n \n@@ -900,10 +1322,9 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitInsn(LSUB);\n \t\t\tmethod.visitMethodInsn(INVOKESTATIC, className, \"cast\", classFromLong, false);\n \t\t\tmethod.visitInsn(ARETURN);\n-\t\t\tmethod.visitMaxs(5, 3);\n+\t\t\tmethod.visitMaxs(4, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer subOffset(long offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"subOffset\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -914,8 +1335,34 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> subOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.lsub();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", long2self, ClassFile.ACC_PUBLIC, subOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF subOffset(Scalar offset) { return subOffset(offset.longValue()); }\n+\t\t// bridge: AbstractPointer subOffset(Scalar offset)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"subOffset\", classFromScalar, null, null);\n \n@@ -928,7 +1375,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 2);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer subOffset(Scalar offset)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"subOffset\", abstractPointerFromScalar, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -939,8 +1385,33 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 2);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> subOffset = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(scalarDesc, \"longValue\", void2long);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", scalar2self, ClassFile.ACC_PUBLIC, subOffset);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.aload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"subOffset\", scalar2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"subOffset\", scalar2abstract,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF untag(long mask) { return cast(address & ~mask); }\n+\t\t// bridge: AbstractPointer untag(long tagBits)\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC, \"untag\", classFromLong, null, null);\n \n@@ -957,7 +1428,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(6, 3);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer untag(long tagBits)\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"untag\", abstractPointerFromLong, null, null);\n \n \t\t\tmethod.visitCode();\n@@ -968,8 +1438,36 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 3);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> untag = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.loadConstant(-1L);\n+\t\t\t\tbody.lxor();\n+\t\t\t\tbody.land();\n+\t\t\t\tbody.invokestatic(classDesc, \"cast\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", long2self, ClassFile.ACC_PUBLIC, untag);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.lload(1);\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", long2abstact,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// public SELF untag() { return untag(UDATA.SIZEOF - 1); }\n+\t\t// bridge: AbstractPointer untag()\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tString classFromVoid = Type.getMethodDescriptor(classType);\n \n@@ -983,7 +1481,6 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(3, 1);\n \t\t\tmethod.visitEnd();\n \n-\t\t\t// bridge: AbstractPointer untag()\n \t\t\tmethod = clazz.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, \"untag\", Type.getMethodDescriptor(abstractPointerType), null, null);\n \n \t\t\tmethod.visitCode();\n@@ -993,8 +1490,32 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(1, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tMethodTypeDesc void2self = MethodTypeDesc.of(classDesc);\n+\n+\t\t\tConsumer<CodeBuilder> untag = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) (reader.getSizeOfUDATA() - 1));\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", long2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", void2self, ClassFile.ACC_PUBLIC, untag);\n+\n+\t\t\tConsumer<CodeBuilder> bridge = body -> {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.invokevirtual(classDesc, \"untag\", void2self);\n+\t\t\t\tbody.areturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"untag\", MethodTypeDesc.of(abstractPointerDesc),\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_BRIDGE | ClassFile.ACC_SYNTHETIC, bridge);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t// protected long sizeOfBaseType() { return BASE.SIZEOF; }\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t{\n \t\t\tmethod = clazz.visitMethod(ACC_PROTECTED, \"sizeOfBaseType\", longFromVoid, null, null);\n \n@@ -1004,6 +1525,16 @@ private void doConstructors(String superClassName) {\n \t\t\tmethod.visitMaxs(2, 1);\n \t\t\tmethod.visitEnd();\n \t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tConsumer<CodeBuilder> sizeof = body -> {\n+\t\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\t\tbody.lreturn();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(\"sizeOfBaseType\", void2long, ClassFile.ACC_PROTECTED, sizeof);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1014,6 +1545,7 @@ private void doConstructors(String superClassName) {\n \t * }\n \t */\n \tprivate void doDoubleMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), doubleFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1025,6 +1557,21 @@ private void doDoubleMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_double);\n+\t\tMethodTypeDesc long2double = MethodTypeDesc.of(ConstantDescs.CD_double, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getDoubleAtOffset\", long2double);\n+\t\t\t\tbody.dreturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Double\", field);\n \t}\n@@ -1041,6 +1588,7 @@ private void doEAMethod(String actualType, FieldDescriptor field) {\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n \t\tString qualifiedActualType = qualifyPointerType(actualType);\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tString actualDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedActualType), Type.LONG_TYPE);\n \n@@ -1056,17 +1604,37 @@ private void doEAMethod(String actualType, FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc actualDesc = ClassDesc.ofInternalName(qualifiedActualType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(actualDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(actualDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n \t *\n \t * public EnumPointer _buildResultEA() throws CorruptDataException {\n-\t *     return EnumPointer.cast(nonNullFieldEA(ClassFileWriter.__buildResultOffset_, BuildResult.class));\n+\t *     return EnumPointer.cast(nonNullFieldEA(ClassFileWriter.__buildResultOffset_), BuildResult.class);\n \t * }\n \t */\n \tprivate void doEnumEAMethod(FieldDescriptor field) {\n \t\tString accessorName = field.getName() + \"EA\";\n \t\tString enumPointerDesc = qualifyPointerType(\"Enum\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType enumPointerType = Type.getObjectType(enumPointerDesc);\n \t\tString returnDesc = Type.getMethodDescriptor(enumPointerType);\n \t\tString castDesc = Type.getMethodDescriptor(enumPointerType, Type.LONG_TYPE, Type.getType(Class.class));\n@@ -1085,6 +1653,24 @@ private void doEnumEAMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc enumDesc = ClassDesc.ofInternalName(qualifyType(getEnumType(field.getType())));\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(enumDesc, ConstantDescs.CD_long, ConstantDescs.CD_Class);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(enumDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.ldc(enumDesc);\n+\t\t\t\tbody.invokestatic(enumDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1102,6 +1688,7 @@ private void doEnumMethod(FieldDescriptor field) {\n \t\tint enumSize = reader.getStructureSizeOf(enumType);\n \t\tPrimitiveAccessor accessor = PrimitiveAccessor.forSize(enumSize);\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), longFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1116,6 +1703,21 @@ private void doEnumMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, accessor.methodName, accessor.descriptor);\n+\t\t\t\tif (!accessor.returnsLong) {\n+\t\t\t\t\tbody.i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.lreturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), void2long, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEnumEAMethod(field);\n \t}\n@@ -1129,6 +1731,8 @@ private void doEnumMethod(FieldDescriptor field) {\n \t */\n \tprivate void doEnumPointerMethod(FieldDescriptor field) {\n \t\tString enumPointerDesc = qualifyPointerType(\"Enum\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType enumPointerType = Type.getObjectType(enumPointerDesc);\n \t\tString returnDesc = Type.getMethodDescriptor(enumPointerType);\n \t\tString castDesc = Type.getMethodDescriptor(enumPointerType, Type.LONG_TYPE, Type.getType(Class.class));\n@@ -1148,6 +1752,24 @@ private void doEnumPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 2);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc enumDesc = ClassDesc.ofInternalName(enumPointerDesc);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(enumDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(enumDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.ldc(enumDesc);\n+\t\t\t\tbody.invokestatic(enumDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1160,6 +1782,7 @@ private void doEnumPointerMethod(FieldDescriptor field) {\n \t * }\n \t */\n \tprivate void doFJ9ObjectMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifyPointerType(\"J9Object\"));\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1175,6 +1798,22 @@ private void doFJ9ObjectMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(qualifyPointerType(\"J9Object\"));\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectReferenceAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectReference\", field);\n \t}\n@@ -1188,6 +1827,8 @@ private void doFJ9ObjectMethod(FieldDescriptor field) {\n \t */\n \tprivate void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1204,6 +1845,23 @@ private void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1216,6 +1874,7 @@ private void doFJ9ObjectPointerMethod(FieldDescriptor field) {\n \t * }\n \t */\n \tprivate void doFloatMethod(FieldDescriptor field) {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), floatFromVoid);\n \n \t\tmethod.visitCode();\n@@ -1227,6 +1886,21 @@ private void doFloatMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(ConstantDescs.CD_float);\n+\t\tMethodTypeDesc long2double = MethodTypeDesc.of(ConstantDescs.CD_float, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getFloatAtOffset\", long2double);\n+\t\t\t\tbody.freturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Float\", field);\n \t}\n@@ -1240,6 +1914,8 @@ private void doFloatMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"J9Class\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1255,6 +1931,22 @@ private void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectClassAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectClassReference\", field);\n \t}\n@@ -1268,6 +1960,8 @@ private void doJ9ObjectClassMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectClassReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1284,6 +1978,23 @@ private void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(objectDesc, \"cast\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1297,6 +2008,8 @@ private void doJ9ObjectClassPointerMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"J9ObjectMonitor\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString accessorDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1312,6 +2025,22 @@ private void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getObjectMonitorAtOffset\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"ObjectMonitorReference\", field);\n \t}\n@@ -1325,6 +2054,8 @@ private void doJ9ObjectMonitorMethod(FieldDescriptor field) {\n \t */\n \tprivate void doJ9ObjectMonitorPointerMethod(FieldDescriptor field) {\n \t\tString returnType = qualifyPointerType(\"ObjectMonitorReference\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n@@ -1341,25 +2072,63 @@ private void doJ9ObjectMonitorPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc objectDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(objectDesc);\n+\t\tMethodTypeDesc accessorDesc = MethodTypeDesc.of(objectDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(objectDesc, \"cast\", accessorDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n \n \tprivate void doNullInstance() {\n \t\t// public static final SELF NULL = new SELF(0);\n-\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, \"NULL\", classType.getDescriptor(), null, null).visitEnd();\n-\n-\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n-\n-\t\tclinit.visitCode();\n-\t\tclinit.visitTypeInsn(NEW, className);\n-\t\tclinit.visitInsn(DUP);\n-\t\tclinit.visitInsn(LCONST_0);\n-\t\tclinit.visitMethodInsn(INVOKESPECIAL, className, \"<init>\", voidFromLong, false);\n-\t\tclinit.visitFieldInsn(PUTSTATIC, className, \"NULL\", classType.getDescriptor());\n-\t\tclinit.visitInsn(RETURN);\n-\t\tclinit.visitMaxs(4, 0);\n-\t\tclinit.visitEnd();\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\t{\n+\t\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, \"NULL\", classType.getDescriptor(), null, null).visitEnd();\n+\n+\t\t\tMethodVisitor clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n+\n+\t\t\tclinit.visitCode();\n+\t\t\tclinit.visitTypeInsn(NEW, className);\n+\t\t\tclinit.visitInsn(DUP);\n+\t\t\tclinit.visitInsn(LCONST_0);\n+\t\t\tclinit.visitMethodInsn(INVOKESPECIAL, className, \"<init>\", voidFromLong, false);\n+\t\t\tclinit.visitFieldInsn(PUTSTATIC, className, \"NULL\", classType.getDescriptor());\n+\t\t\tclinit.visitInsn(RETURN);\n+\t\t\tclinit.visitMaxs(4, 0);\n+\t\t\tclinit.visitEnd();\n+\t\t}\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\t{\n+\t\t\tclassBuilder.withField(\"NULL\", classDesc,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\n+\t\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\t\tbody.new_(classDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.lconst_0();\n+\t\t\t\tbody.invokespecial(classDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.putstatic(classDesc, \"NULL\", classDesc);\n+\t\t\t\tbody.return_();\n+\t\t\t};\n+\n+\t\t\tclassBuilder.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC,\n+\t\t\t\t\tclinit);\n+\t\t}\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1372,12 +2141,13 @@ private void doNullInstance() {\n \tprivate void doPointerMethod(FieldDescriptor field) {\n \t\tString targetType = getTargetType(removeTypeTags(field.getType()));\n \t\tString qualifiedTargetType = qualifyPointerType(targetType);\n-\t\tString castDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedTargetType), Type.LONG_TYPE);\n \n \t\tString returnType = generalizeSimpleType(targetType);\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n-\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tString castDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedTargetType), Type.LONG_TYPE);\n+\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1390,6 +2160,24 @@ private void doPointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc targetDesc = ClassDesc.ofInternalName(qualifiedTargetType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(targetDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(targetDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1407,8 +2195,9 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \t\tString qualifiedFieldType = qualifyType(fieldType);\n \t\tString qualifiedReturnType = qualifyType(returnType);\n \t\tPrimitiveAccessor accessor = simpleTypeAccessor(type);\n-\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tString returnDesc = Type.getMethodDescriptor(Type.getObjectType(qualifiedReturnType));\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1426,6 +2215,28 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \t\t}\n \t\tmethod.visitMaxs(5, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tClassDesc qualifiedFieldDesc = ClassDesc.ofInternalName(qualifiedFieldType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.new_(qualifiedFieldDesc);\n+\t\t\t\tbody.dup();\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, accessor.methodName, accessor.descriptor);\n+\t\t\t\tif (!accessor.returnsLong) {\n+\t\t\t\t\tbody.i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.invokespecial(qualifiedFieldDesc, ConstantDescs.INIT_NAME, long2void);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(fieldType, field);\n \t}\n@@ -1439,10 +2250,11 @@ private void doSimpleTypeMethod(FieldDescriptor field, int type) {\n \tprivate void doSRPEAMethod(FieldDescriptor field, boolean isWide) {\n \t\tString accessorName = field.getName() + \"EA\";\n \t\tString returnTypeName = qualifyPointerType(isWide ? \"WideSelfRelative\" : \"SelfRelative\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType returnType = Type.getObjectType(returnTypeName);\n \t\tString returnDesc = Type.getMethodDescriptor(returnType);\n \t\tString castDesc = Type.getMethodDescriptor(returnType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginMethod(field, accessorName, returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1455,6 +2267,23 @@ private void doSRPEAMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnTypeName);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddMethod(field, accessorName, methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \t/* Sample generated code:\n@@ -1505,11 +2334,12 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \n \t\tString returnTypeName = qualifyPointerType(generalizeSimpleType(targetType));\n+\t\tString qualifiedPointerName = qualifyPointerType(targetType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType returnType = Type.getObjectType(returnTypeName);\n \t\tString returnDesc = Type.getMethodDescriptor(returnType);\n-\t\tString qualifiedPointerName = qualifyPointerType(targetType);\n \t\tString qualifiedPointerDesc = Type.getObjectType(qualifiedPointerName).getDescriptor();\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1557,6 +2387,54 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t\t}\n \t\tmethod.visitMaxs(4, isWide ? 3 : 2);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnTypeName);\n+\t\tClassDesc qualifiedPointerDesc = ClassDesc.ofInternalName(qualifiedPointerName);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tLabel nonNull = body.newLabel();\n+\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tif (isWide) {\n+\t\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\t\tbody.lstore(1);\n+\n+\t\t\t\t\tbody.lload(1);\n+\t\t\t\t\tbody.lconst_0();\n+\t\t\t\t\tbody.lcmp();\n+\t\t\t\t} else {\n+\t\t\t\t\tbody.invokevirtual(classDesc, \"getIntAtOffset\", long2int);\n+\t\t\t\t\tbody.istore(1);\n+\n+\t\t\t\t\tbody.iload(1);\n+\t\t\t\t}\n+\t\t\t\tbody.ifne(nonNull);\n+\n+\t\t\t\tbody.getstatic(qualifiedPointerDesc, \"NULL\", qualifiedPointerDesc);\n+\t\t\t\tbody.areturn();\n+\n+\t\t\t\tbody.labelBinding(nonNull);\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.getfield(classDesc, \"address\", ConstantDescs.CD_long);\n+\t\t\t\taddLong(body, field.getOffset());\n+\t\t\t\tif (isWide) {\n+\t\t\t\t\tbody.lload(1);\n+\t\t\t\t} else {\n+\t\t\t\t\tbody.iload(1).i2l();\n+\t\t\t\t}\n+\t\t\t\tbody.ladd();\n+\n+\t\t\t\tbody.invokestatic(qualifiedPointerDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoSRPEAMethod(field, isWide);\n \t}\n@@ -1570,10 +2448,11 @@ private void doSRPMethod(FieldDescriptor field, boolean isWide) {\n \t */\n \tprivate void doSRPPointerMethod(FieldDescriptor field, boolean wide) {\n \t\tString returnType = qualifyPointerType(wide ? \"WideSelfRelative\" : \"SelfRelative\");\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(returnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1586,6 +2465,23 @@ private void doSRPPointerMethod(FieldDescriptor field, boolean wide) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(returnType);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\n+\t\tConsumer<CodeBuilder> code = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, code);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1601,10 +2497,11 @@ private void doStructureMethod(FieldDescriptor field) {\n \t\tString fieldType = removeTypeTags(field.getType());\n \t\tString returnType = \"void\".equals(fieldType) ? \"Void\" : fieldType;\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifiedReturnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1617,6 +2514,23 @@ private void doStructureMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"nonNullFieldEA\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n@@ -1631,10 +2545,11 @@ private void doStructureMethod(FieldDescriptor field) {\n \tprivate void doStructurePointerMethod(FieldDescriptor field) {\n \t\tString returnType = getTargetType(removeTypeTags(field.getType()));\n \t\tString qualifiedReturnType = qualifyPointerType(returnType);\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tType objectType = Type.getObjectType(qualifiedReturnType);\n \t\tString returnDesc = Type.getMethodDescriptor(objectType);\n \t\tString castDesc = Type.getMethodDescriptor(objectType, Type.LONG_TYPE);\n-\n \t\tMethodVisitor method = beginAnnotatedMethod(field, field.getName(), returnDesc);\n \n \t\tmethod.visitCode();\n@@ -1647,19 +2562,31 @@ private void doStructurePointerMethod(FieldDescriptor field) {\n \t\t}\n \t\tmethod.visitMaxs(3, 1);\n \t\tmethod.visitEnd();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc returnDesc = ClassDesc.ofInternalName(qualifiedReturnType);\n+\t\tMethodTypeDesc castDesc = MethodTypeDesc.of(returnDesc, ConstantDescs.CD_long);\n+\t\tMethodTypeDesc methodDesc = MethodTypeDesc.of(returnDesc);\n+\n+\t\tConsumer<CodeBuilder> accessor = body -> {\n+\t\t\tif (checkPresent(field, body)) {\n+\t\t\t\tbody.aload(0);\n+\t\t\t\tbody.loadConstant((long) field.getOffset());\n+\t\t\t\tbody.invokevirtual(classDesc, \"getPointerAtOffset\", long2long);\n+\t\t\t\tbody.invokestatic(returnDesc, \"cast\", castDesc);\n+\t\t\t\tbody.areturn();\n+\t\t\t}\n+\t\t};\n+\n+\t\taddAnnotatedMethod(field, field.getName(), methodDesc, accessor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\tdoEAMethod(\"Pointer\", field);\n \t}\n \n \tprivate byte[] generate() {\n-\t\tString superClassName = structure.getSuperName();\n-\n-\t\tif (superClassName.isEmpty()) {\n-\t\t\tsuperClassName = basePrefix + \"pointer/StructurePointer\";\n-\t\t} else {\n-\t\t\tsuperClassName = basePrefix + \"pointer/generated/\" + superClassName + \"Pointer\";\n-\t\t}\n+\t\tString superClassName = getSuperClassName();\n \n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tclazz.visit(V1_8, ACC_PUBLIC | ACC_SUPER, className, null, superClassName, null);\n \n \t\tdoClassAnnotation();\n@@ -1670,12 +2597,42 @@ private byte[] generate() {\n \t\tclazz.visitEnd();\n \n \t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tsuperDesc = ClassDesc.ofInternalName(superClassName);\n+\n+\t\tConsumer<ClassBuilder> builder = body -> {\n+\t\t\tclassBuilder = body;\n+\n+\t\t\tbody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_SUPER);\n+\t\t\tbody.withSuperclass(superDesc);\n+\n+\t\t\tdoClassAnnotation();\n+\t\t\tdoNullInstance();\n+\t\t\tdoConstructors(superClassName);\n+\t\t\tdoAccessorMethods();\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n \tprivate String getStructureClassName() {\n \t\treturn basePrefix + \"structure/\" + structure.getName();\n \t}\n \n+\tprivate String getSuperClassName() {\n+\t\tString superName = structure.getSuperName();\n+\t\tString superClassName;\n+\n+\t\tif (superName.isEmpty()) {\n+\t\t\tsuperClassName = basePrefix + \"pointer/StructurePointer\";\n+\t\t} else {\n+\t\t\tsuperClassName = basePrefix + \"pointer/generated/\" + superName + \"Pointer\";\n+\t\t}\n+\n+\t\treturn superClassName;\n+\t}\n+\n \tprivate String qualifyPointerType(String type) {\n \t\tString subPackage = predefinedPointerTypes.contains(type) ? \"pointer/\" : \"pointer/generated/\";\n \n@@ -1746,7 +2703,11 @@ static PrimitiveAccessor forSize(int size) {\n \t\t}\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tfinal String descriptor;\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\tfinal MethodTypeDesc descriptor;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tfinal String methodName;\n \n@@ -1754,7 +2715,11 @@ static PrimitiveAccessor forSize(int size) {\n \n \tPrimitiveAccessor(String methodName, String descriptor, boolean returnsLong) {\n \t\tthis.methodName = methodName;\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tthis.descriptor = descriptor;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tthis.descriptor = MethodTypeDesc.ofDescriptor(descriptor);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\tthis.returnsLong = returnsLong;\n \t}\n \n@@ -1770,26 +2735,32 @@ static byte[] getClassBytes(StructureDescriptor structure, String className) {\n \n \tprivate final String className;\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate final ClassWriter clazz;\n \n \tprivate final MethodVisitor clinit;\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \tprivate final StructureDescriptor structure;\n \n \tprivate StructureHelper(StructureDescriptor structure, String className) {\n \t\tsuper();\n \t\tthis.className = className;\n+\t\tthis.structure = structure;\n+\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\tthis.clazz = new ClassWriter(0);\n \t\tthis.clazz.visit(V1_8, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, className, null, \"java/lang/Object\", null);\n \t\tthis.clinit = clazz.visitMethod(ACC_STATIC, \"<clinit>\", voidMethod, null, null);\n \t\tthis.clinit.visitCode();\n-\t\tthis.structure = structure;\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate void defineField(String name, Type type, long value) {\n \t\tString typeDescriptor = type.getDescriptor();\n \n-\t\tclazz.visitField(ACC_PUBLIC | ACC_FINAL | ACC_STATIC, name, typeDescriptor, null, null).visitEnd();\n+\t\tclazz.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL, name, typeDescriptor, null, null).visitEnd();\n \n \t\tif (type.getSort() == Type.INT) {\n \t\t\tloadInt(clinit, (int) value);\n@@ -1809,6 +2780,93 @@ private void defineFields() {\n \t\t}\n \n \t\t// offsets\n+\t\tfor (Map.Entry<String, Integer> entry : getFieldMap().entrySet()) {\n+\t\t\tString fieldName = entry.getKey();\n+\t\t\tint fieldValue = entry.getValue().intValue();\n+\n+\t\t\tdefineField(fieldName, Type.INT_TYPE, fieldValue);\n+\t\t}\n+\n+\t\tclinit.visitInsn(RETURN);\n+\t\tclinit.visitMaxs(2, 0);\n+\t\tclinit.visitEnd();\n+\t}\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate byte[] generate() {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tdefineFields();\n+\n+\t\tMethodVisitor method = clazz.visitMethod(ACC_PUBLIC, \"<init>\", voidMethod, null, null);\n+\n+\t\tmethod.visitCode();\n+\t\tmethod.visitVarInsn(ALOAD, 0);\n+\t\tmethod.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", voidMethod, false);\n+\t\tmethod.visitInsn(RETURN);\n+\t\tmethod.visitMaxs(1, 1);\n+\t\tmethod.visitEnd();\n+\n+\t\tclazz.visitEnd();\n+\n+\t\treturn clazz.toByteArray();\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tClassDesc classDesc = ClassDesc.ofInternalName(className);\n+\t\tMap<String, Integer> fieldMap = getFieldMap();\n+\n+\t\tConsumer<CodeBuilder> clinit = body -> {\n+\t\t\tbody.loadConstant((long) structure.getSizeOf());\n+\t\t\tbody.putstatic(classDesc, \"SIZEOF\", ConstantDescs.CD_long);\n+\n+\t\t\t// other constants\n+\t\t\tfor (ConstantDescriptor constant : structure.getConstants()) {\n+\t\t\t\tbody.loadConstant(constant.getValue());\n+\t\t\t\tbody.putstatic(classDesc, constant.getName(), ConstantDescs.CD_long);\n+\t\t\t}\n+\n+\t\t\tfor (Map.Entry<String, Integer> entry : fieldMap.entrySet()) {\n+\t\t\t\tbody.loadConstant(entry.getValue().intValue());\n+\t\t\t\tbody.putstatic(classDesc, entry.getKey(), ConstantDescs.CD_int);\n+\t\t\t}\n+\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<CodeBuilder> init = body -> {\n+\t\t\tbody.aload(0);\n+\t\t\tbody.invokespecial(ConstantDescs.CD_Object, ConstantDescs.INIT_NAME, ConstantDescs.MTD_void);\n+\t\t\tbody.return_();\n+\t\t};\n+\n+\t\tConsumer<ClassBuilder> builder = classBody -> {\n+\t\t\tclassBody.withFlags(ClassFile.ACC_PUBLIC | ClassFile.ACC_FINAL | ClassFile.ACC_SUPER);\n+\n+\t\t\tclassBody.withField(\"SIZEOF\", ConstantDescs.CD_long,\n+\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\n+\t\t\t// other constants\n+\t\t\tfor (ConstantDescriptor constant : structure.getConstants()) {\n+\t\t\t\tclassBody.withField(constant.getName(), ConstantDescs.CD_long,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tfor (String fieldName : fieldMap.keySet()) {\n+\t\t\t\tclassBody.withField(fieldName, ConstantDescs.CD_int,\n+\t\t\t\t\t\tClassFile.ACC_PUBLIC | ClassFile.ACC_STATIC | ClassFile.ACC_FINAL);\n+\t\t\t}\n+\n+\t\t\tclassBody.withMethodBody(ConstantDescs.CLASS_INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_STATIC,\n+\t\t\t\t\tclinit);\n+\n+\t\t\tclassBody.withMethodBody(ConstantDescs.INIT_NAME, ConstantDescs.MTD_void, ClassFile.ACC_PUBLIC, init);\n+\t\t};\n+\n+\t\treturn ClassFile.of().build(classDesc, builder);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t}\n+\n+\tprivate Map<String, Integer> getFieldMap() {\n+\t\tMap<String, Integer> fields = new LinkedHashMap<>();\n+\n \t\tint bitFieldBitCount = 0;\n \t\tfor (FieldDescriptor field : structure.getFields()) {\n \t\t\tif (!field.isPresent()) {\n@@ -1823,7 +2881,7 @@ private void defineFields() {\n \t\t\t// make sure match a bitfield, not a C++ namespace\n \t\t\tif (colonIndex <= 0 || type.charAt(colonIndex - 1) == ':') {\n \t\t\t\t// regular offset field\n-\t\t\t\tdefineField(String.format(\"_%sOffset_\", fieldName), Type.INT_TYPE, fieldOffset);\n+\t\t\t\tfields.put(String.format(\"_%sOffset_\", fieldName), fieldOffset);\n \t\t\t} else {\n \t\t\t\t// bitfield\n \t\t\t\tint bitSize = Integer.parseInt(type.substring(colonIndex + 1).trim());\n@@ -1842,35 +2900,16 @@ private void defineFields() {\n \t\t\t\t}\n \n \t\t\t\t// 's' field\n-\t\t\t\tdefineField(String.format(\"_%s_s_\", fieldName), Type.INT_TYPE, bitFieldBitCount);\n+\t\t\t\tfields.put(String.format(\"_%s_s_\", fieldName), bitFieldBitCount);\n \n \t\t\t\t// 'b' field\n-\t\t\t\tdefineField(String.format(\"_%s_b_\", fieldName), Type.INT_TYPE, bitSize);\n+\t\t\t\tfields.put(String.format(\"_%s_b_\", fieldName), bitSize);\n \n \t\t\t\tbitFieldBitCount += bitSize;\n \t\t\t}\n \t\t}\n \n-\t\tclinit.visitInsn(RETURN);\n-\t\tclinit.visitMaxs(2, 0);\n-\t\tclinit.visitEnd();\n-\t}\n-\n-\tprivate byte[] generate() {\n-\t\tdefineFields();\n-\n-\t\tMethodVisitor method = clazz.visitMethod(ACC_PUBLIC, \"<init>\", voidMethod, null, null);\n-\n-\t\tmethod.visitCode();\n-\t\tmethod.visitVarInsn(ALOAD, 0);\n-\t\tmethod.visitMethodInsn(INVOKESPECIAL, \"java/lang/Object\", \"<init>\", voidMethod, false);\n-\t\tmethod.visitInsn(RETURN);\n-\t\tmethod.visitMaxs(1, 1);\n-\t\tmethod.visitEnd();\n-\n-\t\tclazz.visitEnd();\n-\n-\t\treturn clazz.toByteArray();\n+\t\treturn fields;\n \t}\n \n }\ndiff --git a/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java b/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\nindex 2212f4ec068..5cce8e3833e 100644\n--- a/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\n+++ b/debugtools/DDR_VM/src/com/ibm/j9ddr/tools/ddrinteractive/plugins/DDRInteractiveClassLoader.java\n@@ -33,18 +33,22 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.jar.JarEntry;\n import java.util.jar.JarInputStream;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n import jdk.internal.org.objectweb.asm.ClassReader;\n import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n import com.ibm.j9ddr.IVMData;\n import com.ibm.j9ddr.tools.ddrinteractive.DDRInteractiveCommandException;\n@@ -53,7 +57,7 @@\n \n /**\n  * DDR Interactive classloader which is responsible for finding all classes specified by the plugins property.\n- * \n+ *\n  * @author apilkington\n  */\n public class DDRInteractiveClassLoader extends ClassLoader {\n@@ -78,6 +82,9 @@ public class DDRInteractiveClassLoader extends ClassLoader {\n \tprotected static ArrayList<String> runtimeCommandClasses = new ArrayList<>(); //classes that implement ICommand and are added after startup\n \tprivate final ArrayList<File> pluginSearchPath = new ArrayList<>(); //specify classloader paths by URI as this can be used by the File class and converted into a URL\n \n+\tstatic final String extensionClassname = DebugExtension.class.getName().replace('.', '/');\n+\tstatic final String extensionDescriptor = \"L\" + extensionClassname + \";\";\n+\n \tpublic DDRInteractiveClassLoader(IVMData vmdata) throws DDRInteractiveCommandException {\n \t\tthis(vmdata, vmdata.getClassLoader());\n \t}\n@@ -91,11 +98,11 @@ public DDRInteractiveClassLoader(IVMData vmdata, ClassLoader loader) throws DDRI\n \t\tconfigureSearchPath();\n \t\tloadPlugins();\n \t}\n-\t\n+\n \t/**\n \t * Check to see if a class has the version annotation and if so whether it matches the version of the currently\n \t * running vm.\n-\t * \n+\t *\n \t * @param url\n \t * @param clazz\n \t */\n@@ -140,11 +147,11 @@ private void definePackage(String name) {\n \t}\n \n \t/**\n-\t * At the bottom of this file is a main and a special constructor which is useful for running and testing \n+\t * At the bottom of this file is a main and a special constructor which is useful for running and testing\n \t * this class loader as a stand-alone application\n \t */\n \n-\t//if the required system property has been set then parse it and add the paths to the classloader search path\n+\t// if the required system property has been set then parse it and add the paths to the classloader search path\n \tprivate void configureSearchPath() {\n \t\t// The search path can be set by a system property or environment variable with the sys prop taking precedence\n \t\t// TODO handle quoted string, blanks in the file name\n@@ -173,26 +180,28 @@ private void configureSearchPath() {\n \t\t}\n \t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t/**\n-\t * Used with asm's ClassReader - checks if a given class has a DTFJPlugin annotation and reads its name.\n+\t * Used with ASM's ClassReader - checks if a given class has a DTFJPlugin annotation and reads its name.\n \t *\n \t * @author blazejc\n \t */\n-\tprivate static class DTFJPluginSnifferVisitor extends ClassVisitor {\n-\t\tprivate boolean isDebugExtension = false;\n-\t\tprivate String className;\n+\tprivate static final class DTFJPluginSnifferVisitor extends ClassVisitor {\n \n-\t\tpublic DTFJPluginSnifferVisitor() {\n+\t\tboolean isDebugExtension;\n+\t\tString className;\n+\n+\t\tDTFJPluginSnifferVisitor() {\n \t\t\tsuper(Opcodes.ASM4, null);\n \t\t}\n \n+\t\t@Override\n \t\tpublic AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n-\t\t\tString extensionClassname = DebugExtension.class.getName().replace(\".\", \"/\");\n \t\t\tlogger.finest(\"Inspecting annotation \" + desc + \" looking for annotation \" + extensionClassname);\n \n-\t\t\t// check if the annotation on this class contains the class name of the DebugExtension annotation\n+\t\t\t// check if the annotation on this class matches the class name of the DebugExtension annotation\n \t\t\t// this amounts to the annotation being present or not on the visited class\n-\t\t\tif (desc.contains(extensionClassname)) {\n+\t\t\tif (extensionDescriptor.equals(desc)) {\n \t\t\t\tlogger.finest(\"Found DebugExtension annotation\");\n \t\t\t\tisDebugExtension = true;\n \t\t\t} else {\n@@ -202,19 +211,47 @@ public AnnotationVisitor visitAnnotation(String desc, boolean visible) {\n \t\t\treturn null;\n \t\t}\n \n+\t\t@Override\n \t\tpublic void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n-\t\t\tclassName = name.replace(\"/\", \".\");\n+\t\t\tclassName = name.replace('/', '.');\n+\t\t}\n+\n+\t}\n+\n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\t/**\n+\t * Used with classfile API - checks if a given class has a DTFJPlugin annotation and reads its name.\n+\t */\n+\tprivate static final class DTFJPluginSnifferVisitor {\n+\n+\t\tboolean isDebugExtension;\n+\t\tString className;\n+\n+\t\tDTFJPluginSnifferVisitor() {\n+\t\t\tsuper();\n+\t\t}\n+\n+\t\tvoid visit(ClassModel model) {\n+\t\t\tclassName = model.thisClass().asInternalName().replace('/', '.');\n+\n+\t\t\tOptional<RuntimeVisibleAnnotationsAttribute> attribute = model\n+\t\t\t\t\t.findAttribute(Attributes.runtimeVisibleAnnotations());\n+\n+\t\t\tif (attribute.isPresent()) {\n+\t\t\t\tfor (java.lang.classfile.Annotation annotation : attribute.get().annotations()) {\n+\t\t\t\t\tif (annotation.className().equalsString(extensionDescriptor)) {\n+\t\t\t\t\t\tisDebugExtension = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \n-\t\tpublic void visitAttribute(Attribute attr) {}\n-\t\tpublic void visitEnd() {}\n-\t\tpublic FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) { return null; }\n-\t\tpublic void visitInnerClass(String arg0, String arg1, String arg2, int arg3) {}\n-\t\tpublic MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) { return null; }\n-\t\tpublic void visitOuterClass(String arg0, String arg1, String arg2) {}\n-\t\tpublic void visitSource(String arg0, String arg1) {}\n \t}\n \n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n \t//******************************************************************************************************\n \t//******************************************************************************************************\n \t//******************************************************************************************************\n@@ -248,9 +285,9 @@ private abstract class ClassFile {\n \t\tpublic abstract URL toURL();\n \n \t\t/**\n-\t\t * Load the code into a buffer then pass the buffer to \n+\t\t * Load the code into a buffer then pass the buffer to\n \t\t * loadByteCodeFromBuffer(String...) for loading\n-\t\t * \n+\t\t *\n \t\t * @return the class if loaded OK, otherwise null\n \t\t */\n \t\tpublic Class<?> loadByteCode() {\n@@ -288,6 +325,7 @@ public Class<?> loadByteCode() {\n \t\t * @throws IOException\n \t\t */\n \t\tprivate byte[] readByteCodeFromStream(InputStream in) throws IOException {\n+\t\t\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \t\t\tbyte[] buffer = new byte[4096];\n \t\t\tByteArrayOutputStream out = new ByteArrayOutputStream(4096);\n \t\t\tint bytesRead = 0;\n@@ -295,6 +333,9 @@ private byte[] readByteCodeFromStream(InputStream in) throws IOException {\n \t\t\t\tout.write(buffer, 0, bytesRead);\n \t\t\t}\n \t\t\treturn out.toByteArray();\n+\t\t\t/*[ELSE] JAVA_SPEC_VERSION == 8 */\n+\t\t\treturn in.readAllBytes();\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION == 8 */\n \t\t}\n \n \t\t/**\n@@ -347,7 +388,7 @@ private Class<?> loadByteCodeFromBuffer(URL u, String packageName, byte[] byteco\n \t}\n \n \t/**\n-\t * Represents the information we need to locate a class within a jar file \n+\t * Represents the information we need to locate a class within a jar file\n \t */\n \tprivate class ClassFileWithinJarFile extends ClassFile {\n \t\tprivate File jarFile;\n@@ -404,18 +445,21 @@ public InputStream getStreamForByteCode() throws FileNotFoundException, IOExcept\n \t}\n \n \t/**\n-\t * Scans the plugins classpath and loads any DTFJPlugins found \n+\t * Scans the plugins classpath and loads any DTFJPlugins found\n \t * @throws CommandException if any location on the plugins search path does not exist\n \t */\n \tpublic void loadPlugins() throws DDRInteractiveCommandException {\n \t\tscanForClassFiles();\n \n-\t\tfor (String str : classFilesOnClasspath.keySet()) {\n+\t\tfor (Map.Entry<String, ClassFile> entry : classFilesOnClasspath.entrySet()) {\n+\t\t\tString className = entry.getKey();\n+\t\t\tClassFile classFile = entry.getValue();\n+\n \t\t\ttry {\n-\t\t\t\tDTFJPluginSnifferVisitor sniffer = sniffClassFile(classFilesOnClasspath.get(str).getStreamForByteCode());\n+\t\t\t\tDTFJPluginSnifferVisitor sniffer = sniffClassFile(classFile.getStreamForByteCode());\n \t\t\t\tif (sniffer.isDebugExtension) {\n-\t\t\t\t\tClass<?> clazz = loadClass(str);\n-\t\t\t\t\texamineClass(classFilesOnClasspath.get(str).toURL(), clazz);\n+\t\t\t\t\tClass<?> clazz = loadClass(className);\n+\t\t\t\t\texamineClass(classFile.toURL(), clazz);\n \t\t\t\t}\n \t\t\t} catch (ClassNotFoundException e) {\n \t\t\t\tlogger.log(logLevelForPluginLoadFailures, \"Exception while loading plugins : \" + e.getMessage());\n@@ -423,6 +467,7 @@ public void loadPlugins() throws DDRInteractiveCommandException {\n \t\t\t\tlogger.fine(e.getMessage());\n \t\t\t}\n \t\t}\n+\n \t\taddRuntimeCommands();\n \t}\n \n@@ -441,13 +486,13 @@ private void addRuntimeCommands() {\n \n \t/**\n \t * Scan the supplied plugin path to find commands which are written.\n-\t * This method does not support MVS on z/OS, the path needs to point to HFS locations \n+\t * This method does not support MVS on z/OS, the path needs to point to HFS locations\n \t * @param urls\n-\t * \n+\t *\n \t * @throws CommandException if any location on the plugins search path does not exist\n \t */\n \tprivate void scanForClassFiles() throws DDRInteractiveCommandException {\n-\t\tfor (File file : pluginSearchPath) { //a path entry can be null if the URI was malformed\n+\t\tfor (File file : pluginSearchPath) { // a path entry can be null if the URI was malformed\n \t\t\tlogger.fine(\"Scanning path \" + file + \" in search of DDR plugins\");\n \t\t\tif (!file.exists()) {\n \t\t\t\t//log that the entry does not exist and skip\n@@ -533,10 +578,17 @@ private void examineClassFile(File file) {\n \t\t}\n \t}\n \n-\tprivate DTFJPluginSnifferVisitor sniffClassFile(InputStream in) throws IOException {\n+\tprivate static DTFJPluginSnifferVisitor sniffClassFile(InputStream in) throws IOException {\n \t\tDTFJPluginSnifferVisitor sniffer = new DTFJPluginSnifferVisitor();\n-\t\tClassReader cr = new ClassReader(in);\n-\t\tcr.accept(sniffer, 0);\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassReader reader = new ClassReader(in);\n+\t\treader.accept(sniffer, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tbyte[] content = in.readAllBytes();\n+\t\tClassModel model = java.lang.classfile.ClassFile.of().parse(content);\n+\n+\t\tsniffer.visit(model);\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \t\treturn sniffer;\n \t}\n \n@@ -597,7 +649,7 @@ public ArrayList<PluginConfig> getPluginFailures() {\n \t\treturn pluginFailures;\n \t}\n \n-\t/** \n+\t/**\n \t * Searches for and loads a class from the plugins search path.\n \t * @return the loaded class or null\n \t */\n@@ -652,7 +704,7 @@ public void removeCommandClass(String className) {\n //\tvmversion = \"any old rubbish\";\n //\tlogger.setLevel(Level.FINEST);\n //\tHandler handler = new ConsoleHandler();\n-//\thandler.setFormatter(new Formatter(){ \n+//\thandler.setFormatter(new Formatter(){\n //\t\tpublic String format(LogRecord logRecord) {\n //\t\t\treturn logRecord.getLevel() + \" \" + formatMessage(logRecord) + \"\\n\";\n //\t\t} // log message is a single line with level then text\ndiff --git a/jcl/src/java.base/share/classes/module-info.java.extra b/jcl/src/java.base/share/classes/module-info.java.extra\nindex 06289508e8e..88b369b7522 100644\n--- a/jcl/src/java.base/share/classes/module-info.java.extra\n+++ b/jcl/src/java.base/share/classes/module-info.java.extra\n@@ -47,9 +47,11 @@ exports openj9.management.internal to\n     openj9.jvm;\n exports openj9.internal.management to\n     java.management;\n+/*[IF JAVA_SPEC_VERSION < 24]*/\n exports jdk.internal.org.objectweb.asm to\n     openj9.dtfj,\n     openj9.dtfjview;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n // Following allows dtfj/dtfjview modules invoke module addReads & addExports programmatically via reflection APIs.\n exports jdk.internal.module to\n     openj9.dtfj,\ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\nindex 3e6277bd8bc..622b9e11549 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/dtfj/image/j9/ImageFactory.java\n@@ -83,7 +83,9 @@ static final class ImageReference {\n \t\ttry {\n \t\t\tModule baseModule = String.class.getModule();\n \n+\t\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \t\t\tModules.addExportsToAllUnnamed(baseModule, \"jdk.internal.org.objectweb.asm\"); //$NON-NLS-1$\n+\t\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n \n \t\t\tModule thisModule = ImageFactory.class.getModule();\n \ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\nindex 8ec8e57d1e5..6dde2f3b5ad 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/ClassScanner.java\n@@ -22,28 +22,99 @@\n  */\n package com.ibm.java.diagnostics.utils.plugins.impl;\n \n+import java.io.InputStream;\n+import java.io.IOException;\n import java.net.URL;\n import java.util.Set;\n+/*[IF JAVA_SPEC_VERSION >= 24]*/\n+import java.util.Optional;\n+/*[ENDIF] JAVA_SPEC_VERSION >= 24 */\n \n+import com.ibm.java.diagnostics.utils.plugins.Annotation;\n+import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n+import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n+\n+/*[IF JAVA_SPEC_VERSION < 24]*/\n import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Attribute;\n+import jdk.internal.org.objectweb.asm.ClassReader;\n import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n import jdk.internal.org.objectweb.asm.Opcodes;\n+/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+import java.lang.classfile.AnnotationElement;\n+import java.lang.classfile.AnnotationValue;\n+import java.lang.classfile.Attributes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassModel;\n+import java.lang.classfile.attribute.RuntimeVisibleAnnotationsAttribute;\n+import java.lang.classfile.constantpool.ClassEntry;\n+import java.util.function.Function;\n+/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\n+public final class ClassScanner\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\textends ClassVisitor\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+{\n+\n+\tpublic static ClassInfo getClassInfo(InputStream file, URL url, Set<ClassListener> listeners) throws IOException {\n+\t\t/*[IF JAVA_SPEC_VERSION < 24]*/\n+\t\tClassScanner scanner = new ClassScanner(url, listeners);\n+\t\tClassReader reader = new ClassReader(file);\n+\n+\t\treader.accept(scanner, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n+\n+\t\treturn scanner.info;\n+\t\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\t\tFunction<ClassEntry, String> toDotted = entry -> entry.asInternalName().replace('/', '.');\n+\t\tClassModel model = ClassFile.of().parse(file.readAllBytes());\n+\t\tint version = model.majorVersion() + (model.minorVersion() << 16);\n+\t\tint access = model.flags().flagsMask();\n+\t\tString dotName = toDotted.apply(model.thisClass());\n+\t\tString signature = null; // not currently used\n+\t\tString dotSuperName = model.superclass().map(toDotted).orElse(null);\n+\t\tString[] interfaces = model.interfaces().stream().map(toDotted).toArray(String[]::new);\n+\n+\t\tClassInfo info = new ClassInfo(dotName, url);\n+\n+\t\tfor (String iface : interfaces) {\n+\t\t\tinfo.addInterface(iface);\n+\t\t}\n \n-import com.ibm.java.diagnostics.utils.plugins.Annotation;\n-import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n-import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n+\t\tfor (ClassListener listener : listeners) {\n+\t\t\tlistener.visit(version, access, dotName, signature, dotSuperName, interfaces);\n+\t\t}\n+\n+\t\tOptional<RuntimeVisibleAnnotationsAttribute> attribute = model\n+\t\t\t\t.findAttribute(Attributes.runtimeVisibleAnnotations());\n+\n+\t\tif (attribute.isPresent()) {\n+\t\t\tfor (java.lang.classfile.Annotation annotation : attribute.get().annotations()) {\n+\t\t\t\tString classDescriptor = annotation.className().stringValue();\n+\t\t\t\tAnnotation current = info.addAnnotation(classDescriptor);\n+\n+\t\t\t\tfor (ClassListener listener : listeners) {\n+\t\t\t\t\tlistener.visitAnnotation(classDescriptor, true /* visible */);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (AnnotationElement element : annotation.elements()) {\n+\t\t\t\t\tif (element.value() instanceof AnnotationValue.OfConstant constant) {\n+\t\t\t\t\t\tcurrent.addEntry(element.name().stringValue(), constant.resolvedValue());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-public class ClassScanner extends ClassVisitor {\n+\t\treturn info;\n+\t\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n+\t}\n \n+\t/*[IF JAVA_SPEC_VERSION < 24]*/\n \tprivate ClassInfo info;\n-\tprivate Annotation currentAnnotation = null;\n+\tprivate Annotation currentAnnotation;\n \tprivate final URL url; // where the class is being scanned from\n \tprivate final Set<ClassListener> listeners;\n \n-\tpublic ClassScanner(URL url, Set<ClassListener> listeners) {\n+\tprivate ClassScanner(URL url, Set<ClassListener> listeners) {\n \t\t/*[IF JAVA_SPEC_VERSION >= 19]*/\n \t\tsuper(Opcodes.ASM9, null);\n \t\t/*[ELSEIF JAVA_SPEC_VERSION >= 15]*/\n@@ -58,12 +129,31 @@ public ClassScanner(URL url, Set<ClassListener> listeners) {\n \t}\n \n \t@Override\n-\tpublic AnnotationVisitor visitAnnotation(String classname, boolean visible) {\n-\t\tcurrentAnnotation = info.addAnnotation(classname);\n+\tpublic AnnotationVisitor visitAnnotation(String className, boolean visible) {\n+\t\tfinal class ClassScannerAnnotation extends AnnotationVisitor {\n+\n+\t\t\tClassScannerAnnotation(int api) {\n+\t\t\t\tsuper(api);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void visit(String name, Object value) {\n+\t\t\t\tClassScanner.this.visitAnnotationValue(name, value);\n+\t\t\t}\n+\t\t}\n+\n+\t\tcurrentAnnotation = info.addAnnotation(className);\n+\t\tfor (ClassListener listener : listeners) {\n+\t\t\tlistener.visitAnnotation(className, visible);\n+\t\t}\n+\t\treturn new ClassScannerAnnotation(api);\n+\t}\n+\n+\tfinal void visitAnnotationValue(String name, Object value) {\n+\t\tcurrentAnnotation.addEntry(name, value);\n \t\tfor (ClassListener listener : listeners) {\n-\t\t\tlistener.visitAnnotation(classname, visible);\n+\t\t\tlistener.visitAnnotationValue(name, value);\n \t\t}\n-\t\treturn new ClassScannerAnnotation(Opcodes.ASM4);\n \t}\n \n \t@Override\n@@ -71,85 +161,15 @@ public void visit(int version, int access, String name, String signature, String\n \t\tString dotName = name.replace('/', '.');\n \t\tString dotSuperName = superName.replace('/', '.');\n \t\tinfo = new ClassInfo(dotName, url);\n-\t\t//record all interfaces supplied by this class\n-\t\tfor(String iface : interfaces) {\n+\t\t// record all interfaces supplied by this class\n+\t\tfor (String iface : interfaces) {\n \t\t\tinfo.addInterface(iface);\n \t\t}\n-\t\tfor(ClassListener listener : listeners) {\n+\t\tfor (ClassListener listener : listeners) {\n \t\t\tlistener.visit(version, access, dotName, signature, dotSuperName, interfaces);\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void visitAttribute(Attribute attr) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic void visitEnd() {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic FieldVisitor visitField(int arg0, String arg1, String arg2, String arg3, Object arg4) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic void visitInnerClass(String arg0, String arg1, String arg2, int arg3) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic MethodVisitor visitMethod(int arg0, String arg1, String arg2, String arg3, String[] arg4) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic void visitOuterClass(String arg0, String arg1, String arg2) {\n-\t\treturn;\n-\t}\n-\n-\t@Override\n-\tpublic void visitSource(String arg0, String arg1) {\n-\t\treturn;\n-\t}\n-\n-\tpublic ClassInfo getClassInfo() {\n-\t\treturn info;\n-\t}\n-\n-\tclass ClassScannerAnnotation extends AnnotationVisitor {\n-\n-\t\tpublic ClassScannerAnnotation(int arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic AnnotationVisitor visitAnnotation(String name, String desc) {\n-\t\t\treturn null; //not interested in nested annotations\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic AnnotationVisitor visitArray(String name) {\n-\t\t\treturn null; //not interested in arrays\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void visitEnum(String name, String desc, String value) {\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void visit(String name, Object value) {\n-\t\t\tcurrentAnnotation.addEntry(name, value);\n-\t\t\tfor (ClassListener listener : listeners) {\n-\t\t\t\tlistener.visitAnnotationValue(name, value);\n-\t\t\t}\n-\n-\t\t}\n-\t}\n-\n \t/*[IF JAVA_SPEC_VERSION == 17]*/\n \t@Deprecated\n \t@Override\n@@ -165,4 +185,11 @@ public void visitPermittedSubclassExperimental(String className) {\n \t}\n \t/*[ENDIF] JAVA_SPEC_VERSION == 17 */\n \n+\t/*[ELSE] JAVA_SPEC_VERSION < 24 */\n+\n+\tprivate ClassScanner() {\n+\t\tsuper();\n+\t}\n+\n+\t/*[ENDIF] JAVA_SPEC_VERSION < 24 */\n }\ndiff --git a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\nindex 4cedb70116a..64ac8c9a2ec 100644\n--- a/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\n+++ b/jcl/src/openj9.dtfj/share/classes/com/ibm/java/diagnostics/utils/plugins/impl/PluginManagerImpl.java\n@@ -43,8 +43,6 @@\n import java.util.stream.Stream;\n /*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n \n-import jdk.internal.org.objectweb.asm.ClassReader;\n-\n import com.ibm.java.diagnostics.utils.commands.CommandException;\n import com.ibm.java.diagnostics.utils.plugins.ClassInfo;\n import com.ibm.java.diagnostics.utils.plugins.ClassListener;\n@@ -72,14 +70,14 @@ public class PluginManagerImpl implements PluginManager {\n \t */\n \tprotected final ArrayList<File> pluginSearchPath = new ArrayList<>();\n \n-\tprivate static PluginManagerImpl instance = null;\n+\tprivate static PluginManagerImpl instance;\n \n \t/**\n \t * listeners for moving over classes\n \t */\n \tprivate final Set<ClassListener> listeners = new HashSet<>();\n \n-\tprivate URL[] classpath = null;\n+\tprivate URL[] classpath;\n \n \tpublic static PluginManager getPluginManager() {\n \t\tif (instance == null) {\n@@ -179,7 +177,9 @@ private void scanModule(String moduleName) {\n \t}\n \n \tvoid listClassFiles(Path path) {\n-\t\ttry (Stream<Path> paths = Files.list(path).filter(filePath -> !filePath.endsWith(\"module-info.class\"))) { //$NON-NLS-1$\n+\t\ttry (Stream<Path> files = Files.list(path);\n+\t\t\tStream<Path> paths = files.filter(filePath -> !filePath.endsWith(\"module-info.class\")) //$NON-NLS-1$\n+\t\t) {\n \t\t\tpaths.forEach(filePath -> {\n \t\t\t\tif (Files.isRegularFile(filePath)) {\n \t\t\t\t\ttry {\n@@ -312,10 +312,7 @@ private Entry examineClassFile(InputStream is, URL url) {\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 9 */\n \n \tprivate ClassInfo scanClassFile(InputStream file, URL url) throws IOException {\n-\t\tClassScanner scanner = new ClassScanner(url, listeners);\n-\t\tClassReader cr = new ClassReader(file);\n-\t\tcr.accept(scanner, 0);\n-\t\treturn scanner.getClassInfo();\n+\t\treturn ClassScanner.getClassInfo(file, url, listeners);\n \t}\n \n \t/**\n",
    "07d2353c2f6b47aace47f4a86f79feec1a871198": "diff --git a/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp b/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\nindex d015963624c..1182808e766 100644\n--- a/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\n@@ -607,10 +607,10 @@ generateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg, bool isArdbar\n \n    generateLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n-   bool needSync = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && comp->target().isSMP());\n-   if (needSync)\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       comp->target().isSMP())\n       {\n-      // Issue an Acquire barrier after volatile load\n+      // Issue an Acquire barrier after acquire load\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishld);\n       }\n \n@@ -1218,8 +1218,6 @@ J9::ARM64::TreeEvaluator::awrtbarEvaluator(TR::Node *node, TR::CodeGenerator *cg\n \n    TR::Register *sourceRegister;\n    bool killSource = false;\n-   bool isVolatileMode = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && cg->comp()->target().isSMP());\n-   bool isOrderedMode = (node->getSymbolReference()->getSymbol()->isShadow() && node->getSymbolReference()->getSymbol()->isOrdered() && cg->comp()->target().isSMP());\n \n    if (firstChild->getReferenceCount() > 1 && firstChild->getRegister() != NULL)\n       {\n@@ -1239,14 +1237,15 @@ J9::ARM64::TreeEvaluator::awrtbarEvaluator(TR::Node *node, TR::CodeGenerator *cg\n \n    TR::MemoryReference *tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, node);\n \n-   // Issue a StoreStore barrier before each volatile store.\n-   if (isVolatileMode || isOrderedMode)\n+   // Issue a StoreStore barrier before each release store.\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\n \n    generateMemSrc1Instruction(cg, TR::InstOpCode::strimmx, node, tempMR, sourceRegister, NULL);\n \n    // Issue a StoreLoad barrier after each volatile store.\n-   if (isVolatileMode)\n+   if (node->getSymbolReference()->getSymbol()->isVolatile() && cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ish);\n \n    wrtbarEvaluator(node, sourceRegister, destinationRegister, firstChild->isNonNull(), cg);\n@@ -1271,8 +1270,6 @@ J9::ARM64::TreeEvaluator::awrtbariEvaluator(TR::Node *node, TR::CodeGenerator *c\n    TR::Register *sourceRegister;\n    bool killSource = false;\n    bool usingCompressedPointers = TR::TreeEvaluator::getIndirectWrtbarValueNode(cg, node, secondChild, true);\n-   bool isVolatileMode = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && cg->comp()->target().isSMP());\n-   bool isOrderedMode = (node->getSymbolReference()->getSymbol()->isShadow() && node->getSymbolReference()->getSymbol()->isOrdered() && cg->comp()->target().isSMP());\n \n    if (secondChild->getReferenceCount() > 1 && secondChild->getRegister() != NULL)\n       {\n@@ -1306,14 +1303,15 @@ J9::ARM64::TreeEvaluator::awrtbariEvaluator(TR::Node *node, TR::CodeGenerator *c\n \n    TR::MemoryReference *tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, node);\n \n-   // Issue a StoreStore barrier before each volatile store.\n-   if (isVolatileMode || isOrderedMode)\n+   // Issue a StoreStore barrier before each release store.\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\n \n    generateMemSrc1Instruction(cg, storeOp, node, tempMR, translatedSrcReg);\n \n    // Issue a StoreLoad barrier after each volatile store.\n-   if (isVolatileMode)\n+   if (node->getSymbolReference()->getSymbol()->isVolatile() && cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ish);\n \n    wrtbarEvaluator(node, sourceRegister, destinationRegister, secondChild->isNonNull(), cg);\n@@ -2641,20 +2639,25 @@ J9::ARM64::TreeEvaluator::flushEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n          TR::Node *child = (node->getNumChildren() >= 1) ? node->getFirstChild() : NULL;\n          if (!child || (node->getOpCodeValue() != TR::monexit && child->getOpCodeValue() != TR::monexit))\n             {\n-            // Iterate the next tree to see if there is a resolved volatile load/store node that has yet to be evaluated\n-            // An unresolved volatile might not actually be a volatile access, and therefore can not replace the AllocationFence\n-            // An node that is already evaluated will not actually emit a 'dmb' so it can not replace the AllocationFence\n-            bool volatileAccessFound = false;\n+            // Iterate the next tree to see if there is a resolved acquire/release load/store node that has yet to be evaluated\n+            // An unresolved acquire/release might not actually be an acquire/release access, and therefore can not replace the AllocationFence\n+            // A node that is already evaluated will not actually emit a 'dmb' so it can not replace the AllocationFence\n+            // NOTE: As things currently stand, we won't ever encounter an unresolved symref that is strictly acquire/release,\n+            // but the following code will handle unresolved volatile symrefs as well\n+            bool fencedAccessFound = false;\n             for (TR::PreorderNodeIterator it(tt, cg->comp()); it.currentTree() == tt; ++it)\n                {\n                node = it.currentNode();\n-               if (node->getOpCode().hasSymbolReference() && !node->hasUnresolvedSymbolReference() && node->getSymbolReference()->getSymbol()->isVolatile() && !node->getRegister())\n+               if (node->getOpCode().hasSymbolReference() &&\n+                   !node->hasUnresolvedSymbolReference() &&\n+                   node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease()\n+                   && !node->getRegister())\n                   {\n-                  volatileAccessFound = true;\n+                  fencedAccessFound = true;\n                   break;\n                   }\n                }\n-            if (!volatileAccessFound)\n+            if (!fencedAccessFound)\n                {\n                // StoreStore barrier is required after publishing new object reference to other threads.\n                generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\ndiff --git a/runtime/compiler/codegen/J9CodeGenerator.cpp b/runtime/compiler/codegen/J9CodeGenerator.cpp\nindex 8a86d55aab8..15b9d17181f 100644\n--- a/runtime/compiler/codegen/J9CodeGenerator.cpp\n+++ b/runtime/compiler/codegen/J9CodeGenerator.cpp\n@@ -1052,7 +1052,8 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       {\n       TR::SymbolReference *symRef = node->getSymbolReference();\n       TR::Symbol *symbol = symRef->getSymbol();\n-      if (symbol->isVolatile() && node->getDataType() == TR::Int64 && !symRef->isUnresolved() && self()->comp()->target().is32Bit() &&\n+      // bitwise atomicity is required for opaque or stronger memory semantics\n+      if (symbol->isAtLeastOrStrongerThanOpaque() && node->getDataType() == TR::Int64 && !symRef->isUnresolved() && self()->comp()->target().is32Bit() &&\n           !self()->getSupportsInlinedAtomicLongVolatiles())\n          {\n          bool isLoad = false;\n@@ -1384,7 +1385,7 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       {\n       if ((node->getFirstChild()->getReferenceCount() == 1) &&\n           node->getFirstChild()->getOpCode().isLoadVar() &&\n-          !node->getFirstChild()->getSymbolReference()->getSymbol()->isVolatile())\n+          node->getFirstChild()->getSymbolReference()->getSymbol()->isTransparent())\n          {\n          TR::Node::recreate(node->getFirstChild(), TR::PassThrough);\n          }\ndiff --git a/runtime/compiler/ilgen/Walker.cpp b/runtime/compiler/ilgen/Walker.cpp\nindex fc22a0da33d..2c0473a6870 100644\n--- a/runtime/compiler/ilgen/Walker.cpp\n+++ b/runtime/compiler/ilgen/Walker.cpp\n@@ -5462,7 +5462,7 @@ TR_J9ByteCodeIlGenerator::loadStatic(int32_t cpIndex)\n    TR::Node * treeTopNode = 0;\n    if (symRef->isUnresolved())\n       treeTopNode = genResolveCheck(load);\n-   else if (symbol->isVolatile() || _generateReadBarriersForFieldWatch)\n+   else if (!symbol->isTransparent() || _generateReadBarriersForFieldWatch)\n       treeTopNode = load;\n \n    if (treeTopNode)\ndiff --git a/runtime/compiler/optimizer/EscapeAnalysis.cpp b/runtime/compiler/optimizer/EscapeAnalysis.cpp\nindex 8bdd4c72d88..fd219b515b3 100644\n--- a/runtime/compiler/optimizer/EscapeAnalysis.cpp\n+++ b/runtime/compiler/optimizer/EscapeAnalysis.cpp\n@@ -9362,7 +9362,7 @@ void TR_FlowSensitiveEscapeAnalysis::analyzeNode(TR::Node *node, TR::TreeTop *tr\n    if (opCode.hasSymbolReference())\n       {\n       TR::SymbolReference *symReference = node->getSymbolReference();\n-      if (symReference->getSymbol()->isVolatile())\n+      if (!symReference->getSymbol()->isTransparent())\n          {\n          _blocksWithSyncs->set(blockNum);\n          // Keep track of this volatile load/store node tt, prefer volatile load/store over monexits since monexits can skip sync in some cases\n@@ -9690,11 +9690,8 @@ bool TR_LocalFlushElimination::examineNode(TR::Node *node, TR::TreeTop *tt, TR::\n          if (opCode.hasSymbolReference())\n             {\n             TR::SymbolReference *symReference = node->getSymbolReference();\n-            if (symReference->getSymbol()->isVolatile())\n-               {\n-               nodeHasSync = true;\n-               nodeHasVolatile = true;\n-               }\n+            nodeHasSync = symReference->getSymbol()->isAtLeastOrStrongerThanAcquireRelease();\n+            nodeHasVolatile = symReference->getSymbol()->isVolatile();\n             }\n          // Due to lock-reservation and lock reentry it's not guaranteed that a synchronised method will issue a flush\n          //if (opCode.isCall() &&\ndiff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex fddae7d956c..e5aab81bc65 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -814,7 +814,7 @@ TR_J9InlinerPolicy::genIndirectAccessCodeForUnsafeGetPut(TR::Node* directAccessO\n       indirectAccessNode = indirectAccessOrTempStoreNode->getFirstChild();\n       }\n \n-   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->isVolatile());\n+   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->isOpaque());\n \n    indirectAccessNode->setSymbolReference(indirectSymRef);\n \n@@ -1477,7 +1477,7 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n \n    if (isOrdered)\n       {\n-      symRef->getSymbol()->setOrdered();\n+      symRef->getSymbol()->setAcquireRelease();\n       orderedCallNode = callNodeTreeTop->getNode()->duplicateTree();\n       orderedCallNode->getFirstChild()->setDontInlinePutOrderedCall(comp());\n \ndiff --git a/runtime/compiler/optimizer/J9TransformUtil.cpp b/runtime/compiler/optimizer/J9TransformUtil.cpp\nindex 1c3f5407776..db51ceb35d0 100644\n--- a/runtime/compiler/optimizer/J9TransformUtil.cpp\n+++ b/runtime/compiler/optimizer/J9TransformUtil.cpp\n@@ -2295,7 +2295,7 @@ J9::TransformUtil::fieldShouldBeCompressed(TR::Node *node, TR::Compilation *comp\n          !symRefTab->isVtableEntrySymbolRef(symRef) &&\n          (symRef != symRefTab->findClassFromJavaLangClassSymbolRef()) &&\n          (symRef != symRefTab->findAddressOfClassOfMethodSymbolRef()) &&\n-         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->isVolatile())) &&\n+         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->isOpaque())) &&\n          !symbol->isStatic() &&\n          (symbol->isCollectedReference() || symbol->isArrayletShadowSymbol() || symbol == symRefTab->findGenericIntShadowSymbol()) &&\n          !(symbol->isUnsafeShadowSymbol() && symbol->getDataType() != TR::Address))\ndiff --git a/runtime/compiler/optimizer/MonitorElimination.cpp b/runtime/compiler/optimizer/MonitorElimination.cpp\nindex cbc1fd8be6d..3066141b0b3 100644\n--- a/runtime/compiler/optimizer/MonitorElimination.cpp\n+++ b/runtime/compiler/optimizer/MonitorElimination.cpp\n@@ -2608,7 +2608,7 @@ void TR::MonitorElimination::coarsenMonitorRanges()\n       if (node->getOpCode().hasSymbolReference())\n          symRef = node->getSymbolReference();\n       if (node->getOpCode().isStore() ||\n-          node->mightHaveVolatileSymbolReference())\n+          node->mightHaveNonTransparentSymbolReference())\n          {\n          if (symRef->sharesSymbol())\n             {\n@@ -2661,10 +2661,10 @@ void TR::MonitorElimination::coarsenMonitorRanges()\n             }\n          }\n \n-      bool performsVolatileAccess=node->performsVolatileAccess(volatileVisitCount);\n+      bool performsNonTransparentAccess=node->performsNonTransparentAccess(volatileVisitCount);\n       if (virtCall)\n          _guardedVirtualCallBlocks->set(blockNum);\n-      else if (performsVolatileAccess || exceptionInThisTree)\n+      else if (performsNonTransparentAccess || exceptionInThisTree)\n          {\n            //dumpOptDetails(comp(), \"Contains calls set for block_%d because of node %p\\n\", blockNum, treetopNode);\n          _containsCalls->set(blockNum);\n@@ -5207,7 +5207,7 @@ bool TR::MonitorElimination::symbolsAreNotWrittenInTrees(TR::TreeTop *startTree,\n          cursorNode = cursorNode->getFirstChild();\n \n       if (cursorNode->getOpCode().isStore() ||\n-          cursorNode->mightHaveVolatileSymbolReference())\n+          cursorNode->mightHaveNonTransparentSymbolReference())\n          {\n          TR::SymbolReference *symReference = cursorNode->getSymbolReference();\n          if (_symRefsInSimpleLockedRegion->get(symReference->getReferenceNumber()))\ndiff --git a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp b/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\nindex e4d9d4a94d8..04f5a9b5531 100644\n--- a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\n@@ -436,11 +436,6 @@ TR::Register *outlinedHelperWrtbarEvaluator(TR::Node *node, TR::CodeGenerator *c\n    TR::Register *dstObjectReg = cg->gprClobberEvaluate(node->getSecondChild());\n    TR::Compilation* comp = cg->comp();\n \n-   TR::Symbol *storeSym = node->getSymbolReference()->getSymbol();\n-   const bool isOrderedShadowStore = storeSym->isShadow() && storeSym->isOrdered();\n-   const bool needSync = comp->target().isSMP() && (storeSym->isSyncVolatile() || isOrderedShadowStore);\n-   const bool lazyVolatile = comp->target().isSMP() && isOrderedShadowStore;\n-\n    // Under real-time, store happens after the wrtbar\n    // For other GC modes, store happens before the wrtbar\n    if (comp->getOptions()->realTimeGC())\n@@ -1536,7 +1531,7 @@ TR::Register *iGenerateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg\n    generateDepLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n    // TODO: Allow this to be patched or skipped at runtime for unresolved symrefs\n-   if (node->getSymbol()->isSyncVolatile() && comp->target().isSMP())\n+   if (node->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() && comp->target().isSMP())\n       {\n       generateInstruction(cg, comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P7) ? TR::InstOpCode::lwsync : TR::InstOpCode::isync, node);\n       }\n@@ -1633,7 +1628,7 @@ TR::Register *aGenerateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg\n    generateDepLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n    // TODO: Allow this to be patched or skipped at runtime for unresolved symrefs\n-   if (node->getSymbol()->isSyncVolatile() && comp->target().isSMP())\n+   if (node->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() && comp->target().isSMP())\n       {\n       generateInstruction(cg, comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P7) ? TR::InstOpCode::lwsync : TR::InstOpCode::isync, node);\n       }\n@@ -3352,20 +3347,25 @@ TR::Register *J9::Power::TreeEvaluator::flushEvaluator(TR::Node *node, TR::CodeG\n          TR::Node *child = (node->getNumChildren() >= 1) ? node->getFirstChild() : NULL;\n          if (!child || (node->getOpCodeValue() != TR::monexit && child->getOpCodeValue() != TR::monexit))\n             {\n-            // Iterate the next tree to see if there is a resolved volatile load/store node that has yet to be evaluated\n-            // An unresolved volatile might not actually be a volatile access, and therefore can not replace the AllocationFence\n-            // An node that is already evaluated will not actually emit an 'lwsync' so it can not replace the AllocationFence\n-            bool volatileAccessFound = false;\n+            // Iterate the next tree to see if there is a resolved acquire/release load/store node that has yet to be evaluated\n+            // An unresolved acquire/release might not actually be an acquire/release access, and therefore can not replace the AllocationFence\n+            // A node that is already evaluated will not actually emit an 'lwsync' so it can not replace the AllocationFence\n+            // NOTE: As things currently stand, we won't ever encounter an unresolved symref that is strictly acquire/release,\n+            // but the following code will handle unresolved volatile symrefs as well\n+            bool fencedAccessFound = false;\n             for (TR::PreorderNodeIterator it(tt, cg->comp()); it.currentTree() == tt; ++it)\n                {\n                node = it.currentNode();\n-               if (node->getOpCode().hasSymbolReference() && !node->hasUnresolvedSymbolReference() && node->getSymbolReference()->getSymbol()->isVolatile() && !node->getRegister())\n+               if (node->getOpCode().hasSymbolReference() &&\n+                   !node->hasUnresolvedSymbolReference() &&\n+                   node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+                   !node->getRegister())\n                   {\n-                  volatileAccessFound = true;\n+                  fencedAccessFound = true;\n                   break;\n                   }\n                }\n-            if (!volatileAccessFound)\n+            if (!fencedAccessFound)\n                generateInstruction(cg, TR::InstOpCode::lwsync, node);\n             }\n          }\n",
    "7a5c47ba219c3dab292b0b464967138f0ef623c9": "diff --git a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\nindex ab06f91bd9c..b62c9cceb4a 100644\n--- a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n+++ b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n@@ -458,6 +458,36 @@\n    sun_misc_Unsafe_allocateInstance,\n    sun_misc_Unsafe_allocateUninitializedArray0,\n \n+   jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z,\n+   jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B,\n+   jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C,\n+   jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S,\n+   jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I,\n+   jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J,\n+   jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F,\n+   jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D,\n+   jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,\n+\n+   jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z,\n+   jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B,\n+   jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C,\n+   jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S,\n+   jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I,\n+   jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J,\n+   jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F,\n+   jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D,\n+   jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject,\n+\n+   jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V,\n+   jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V,\n+   jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V,\n+   jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V,\n+   jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V,\n+   jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V,\n+   jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V,\n+   jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V,\n+   jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V,\n+\n    jdk_internal_misc_Unsafe_compareAndExchangeInt,\n    jdk_internal_misc_Unsafe_compareAndExchangeLong,\n    jdk_internal_misc_Unsafe_compareAndExchangeObject,\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.cpp b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\nindex 35d97d49545..4ae5d287c73 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n@@ -77,8 +77,6 @@ J9::SymbolReferenceTable::SymbolReferenceTable(size_t sizeHint, TR::Compilation\n      _immutableInfo(c->trMemory()),\n      _immutableSymRefNumbers(c->trMemory(), _numImmutableClasses),\n      _dynamicMethodSymrefsByCallSiteIndex(c->trMemory()),\n-     _unsafeJavaStaticSymRefs(NULL),\n-     _unsafeJavaStaticVolatileSymRefs(NULL),\n      _currentThreadDebugEventDataSymbol(0),\n      _currentThreadDebugEventDataSymbolRefs(c->trMemory()),\n      _constantPoolAddressSymbolRefs(c->trMemory()),\n@@ -92,6 +90,9 @@ J9::SymbolReferenceTable::SymbolReferenceTable(size_t sizeHint, TR::Compilation\n    {\n    for (uint32_t i = 0; i < _numImmutableClasses; i++)\n       _immutableSymRefNumbers[i] = new (trHeapMemory()) TR_BitVector(sizeHint, c->trMemory(), heapAlloc, growable);\n+\n+   for (int i = 0; i < TR::Symbol::numberOfMemoryOrderings; i++)\n+      _unsafeJavaStaticSymRefs[i] = NULL;\n    }\n \n \n@@ -2212,24 +2213,15 @@ J9::SymbolReferenceTable::findOrCreateThreadDebugEventData(int32_t index)\n    }\n \n TR::SymbolReference *\n-J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, bool isVolatile)\n+J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering ordering)\n    {\n    TR_Array<TR::SymbolReference *> * unsafeSymRefs = NULL;\n \n-   if (isVolatile)\n-      {\n-      unsafeSymRefs =\n-            javaStaticReference ?\n-                  _unsafeJavaStaticVolatileSymRefs :\n-                  _unsafeVolatileSymRefs;\n-      }\n-   else\n-      {\n-      unsafeSymRefs =\n-            javaStaticReference ?\n-                  _unsafeJavaStaticSymRefs :\n-                  _unsafeSymRefs;\n-      }\n+   unsafeSymRefs =\n+         javaStaticReference ?\n+               _unsafeJavaStaticSymRefs[static_cast<int>(ordering)] :\n+               _unsafeSymRefs[static_cast<int>(ordering)];\n+\n \n    TR::SymbolReference * symRef = NULL;\n \n@@ -2242,39 +2234,21 @@ J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObject\n    }\n \n TR::SymbolReference *\n-J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, bool isVolatile)\n+J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering ordering)\n    {\n    TR_Array<TR::SymbolReference *> * unsafeSymRefs = NULL;\n \n-   if (isVolatile)\n+   if (javaStaticReference)\n       {\n-      if (javaStaticReference)\n-         {\n-         if (_unsafeJavaStaticVolatileSymRefs == NULL)\n-            _unsafeJavaStaticVolatileSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeJavaStaticVolatileSymRefs;\n-         }\n-      else\n-         {\n-         if (_unsafeVolatileSymRefs == NULL)\n-            _unsafeVolatileSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeVolatileSymRefs;\n-         }\n+      if (_unsafeJavaStaticSymRefs[static_cast<int>(ordering)] == NULL)\n+         _unsafeJavaStaticSymRefs[static_cast<int>(ordering)] = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n+      unsafeSymRefs = _unsafeJavaStaticSymRefs[static_cast<int>(ordering)];\n       }\n    else\n       {\n-      if (javaStaticReference)\n-         {\n-         if (_unsafeJavaStaticSymRefs == NULL)\n-            _unsafeJavaStaticSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeJavaStaticSymRefs;\n-         }\n-      else\n-         {\n-         if (_unsafeSymRefs == NULL)\n-            _unsafeSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeSymRefs;\n-         }\n+      if (_unsafeSymRefs[static_cast<int>(ordering)] == NULL)\n+         _unsafeSymRefs[static_cast<int>(ordering)] = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n+      unsafeSymRefs = _unsafeSymRefs[static_cast<int>(ordering)];\n       }\n \n    TR::SymbolReference * symRef = (*unsafeSymRefs)[type];\n@@ -2284,8 +2258,7 @@ J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool ja\n       TR::Symbol * sym = TR::Symbol::createShadow(trHeapMemory(),type);\n       sym->setUnsafeShadowSymbol();\n       sym->setArrayShadowSymbol();\n-      if (isVolatile)\n-         sym->setVolatile();\n+      sym->setMemoryOrdering(ordering);\n       (*unsafeSymRefs)[type] = symRef = new (trHeapMemory()) TR::SymbolReference(self(), sym, comp()->getMethodSymbol()->getResolvedMethodIndex(), -1);\n       aliasBuilder.unsafeSymRefNumbers().set(symRef->getReferenceNumber());\n       }\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.hpp b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\nindex d32af6d9487..7957a4f3ab7 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n@@ -344,13 +344,13 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     *  \\param javaStaticReference\n     *     Determines whether this symbol reference is referencing a Java object static field.\n     *\n-    *  \\param isVolatile\n-    *     Determines whether this symbol should be treated with volatile semantics.\n+    *  \\param mode\n+    *     Determines which access mode memory semantics this symbol should be treated with.\n     *\n     *  \\return\n     *     The unsafe symbol reference with given constraints if it exists; <c>NULL</c> otherwise.\n     */\n-   TR::SymbolReference* findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, bool isVolatile = false);\n+   TR::SymbolReference* findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering mode);\n \n    /** \\brief\n     *     Finds an unsafe symbol reference with given constraints if it exists, or creates one if no such symbol\n@@ -371,7 +371,7 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     *  \\return\n     *     The unsafe symbol reference with given constraints if it exists.\n     */\n-   TR::SymbolReference* findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, bool isVolatile = false);\n+   TR::SymbolReference* findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, TR::Symbol::MemoryOrdering mode = TR::Symbol::MemoryOrdering::Transparent);\n \n    TR::SymbolReference * findOrCreateImmutableGenericIntShadowSymbolReference(intptr_t offset); // \"Immutable\" means no aliasing issues; ie. reads from these shadows can be freely reordered wrt anything else\n \n@@ -613,14 +613,9 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n    TR_Array<TR_BitVector *>            _immutableSymRefNumbers;\n \n    /** \\brief\n-    *     Represents the set of symbol references to static fields of Java objects.\n-    */\n-   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticSymRefs;\n-\n-   /** \\brief\n-    *     Represents the set of symbol references to static volatile fields of Java objects.\n+    *     Represents the set of symbol references to static fields of Java objects for each access mode.\n     */\n-   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticVolatileSymRefs;\n+   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticSymRefs[TR::Symbol::numberOfMemoryOrderings];\n \n    ResolvedFieldShadows _resolvedFieldShadows;\n \ndiff --git a/runtime/compiler/env/j9method.cpp b/runtime/compiler/env/j9method.cpp\nindex a77ccff06f8..d5ba791cac4 100644\n--- a/runtime/compiler/env/j9method.cpp\n+++ b/runtime/compiler/env/j9method.cpp\n@@ -2907,16 +2907,35 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putObjectVolatile\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n       {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putReferenceVolatile\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n \n-      {x(TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V,       \"putBooleanRelease\", \"(Ljava/lang/Object;JZ)V\")},\n-      {x(TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V,          \"putByteRelease\",    \"(Ljava/lang/Object;JB)V\")},\n-      {x(TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V,          \"putCharRelease\",    \"(Ljava/lang/Object;JC)V\")},\n-      {x(TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V,         \"putShortRelease\",   \"(Ljava/lang/Object;JS)V\")},\n-      {x(TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V,           \"putIntRelease\",     \"(Ljava/lang/Object;JI)V\")},\n-      {x(TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V,          \"putLongRelease\",    \"(Ljava/lang/Object;JJ)V\")},\n-      {x(TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V,         \"putFloatRelease\",   \"(Ljava/lang/Object;JF)V\")},\n-      {x(TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V,        \"putDoubleRelease\",  \"(Ljava/lang/Object;JD)V\")},\n-      {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putObjectRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n-      {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putReferenceRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+      {x(TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V,       \"putBooleanRelease\",    \"(Ljava/lang/Object;JZ)V\")},\n+      {x(TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V,          \"putByteRelease\",       \"(Ljava/lang/Object;JB)V\")},\n+      {x(TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V,          \"putCharRelease\",       \"(Ljava/lang/Object;JC)V\")},\n+      {x(TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V,         \"putShortRelease\",      \"(Ljava/lang/Object;JS)V\")},\n+      {x(TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V,           \"putIntRelease\",        \"(Ljava/lang/Object;JI)V\")},\n+      {x(TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V,          \"putLongRelease\",       \"(Ljava/lang/Object;JJ)V\")},\n+      {x(TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V,         \"putFloatRelease\",      \"(Ljava/lang/Object;JF)V\")},\n+      {x(TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V,        \"putDoubleRelease\",     \"(Ljava/lang/Object;JD)V\")},\n+      {x(TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V, \"putReferenceRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+\n+      {x(TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V,          \"putBooleanOpaque\",    \"(Ljava/lang/Object;JZ)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V,             \"putByteOpaque\",       \"(Ljava/lang/Object;JB)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V,             \"putCharOpaque\",       \"(Ljava/lang/Object;JC)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V,            \"putShortOpaque\",      \"(Ljava/lang/Object;JS)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V,              \"putIntOpaque\",        \"(Ljava/lang/Object;JI)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V,             \"putLongOpaque\",       \"(Ljava/lang/Object;JJ)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V,            \"putFloatOpaque\",      \"(Ljava/lang/Object;JF)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V,           \"putDoubleOpaque\",     \"(Ljava/lang/Object;JD)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V, \"putReferenceOpaque\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+\n+      {x(TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z,           \"getBooleanOpaque\",    \"(Ljava/lang/Object;J)Z\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B,              \"getByteOpaque\",       \"(Ljava/lang/Object;J)B\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C,              \"getCharOpaque\",       \"(Ljava/lang/Object;J)C\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S,             \"getShortOpaque\",      \"(Ljava/lang/Object;J)S\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I,               \"getIntOpaque\",        \"(Ljava/lang/Object;J)I\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J,              \"getLongOpaque\",       \"(Ljava/lang/Object;J)J\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F,             \"getFloatOpaque\",      \"(Ljava/lang/Object;J)F\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D,            \"getDoubleOpaque\",     \"(Ljava/lang/Object;J)D\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject,  \"getReferenceOpaque\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n       {x(TR::sun_misc_Unsafe_putInt_jlObjectII_V,           \"putInt\",     \"(Ljava/lang/Object;II)V\")},\n \n@@ -2942,16 +2961,16 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getObjectVolatile\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n       {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getReferenceVolatile\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n-      {x(TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z,        \"getBooleanAcquire\", \"(Ljava/lang/Object;J)Z\")},\n-      {x(TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B,           \"getByteAcquire\",    \"(Ljava/lang/Object;J)B\")},\n-      {x(TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C,           \"getCharAcquire\",    \"(Ljava/lang/Object;J)C\")},\n-      {x(TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S,          \"getShortAcquire\",   \"(Ljava/lang/Object;J)S\")},\n-      {x(TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I,            \"getIntAcquire\",     \"(Ljava/lang/Object;J)I\")},\n-      {x(TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J,           \"getLongAcquire\",    \"(Ljava/lang/Object;J)J\")},\n-      {x(TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F,          \"getFloatAcquire\",   \"(Ljava/lang/Object;J)F\")},\n-      {x(TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D,         \"getDoubleAcquire\",  \"(Ljava/lang/Object;J)D\")},\n-      {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getObjectAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n-      {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getReferenceAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z,           \"getBooleanAcquire\", \"(Ljava/lang/Object;J)Z\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B,              \"getByteAcquire\",    \"(Ljava/lang/Object;J)B\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C,              \"getCharAcquire\",    \"(Ljava/lang/Object;J)C\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S,             \"getShortAcquire\",   \"(Ljava/lang/Object;J)S\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I,               \"getIntAcquire\",     \"(Ljava/lang/Object;J)I\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J,              \"getLongAcquire\",    \"(Ljava/lang/Object;J)J\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F,             \"getFloatAcquire\",   \"(Ljava/lang/Object;J)F\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D,            \"getDoubleAcquire\",  \"(Ljava/lang/Object;J)D\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,  \"getObjectAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,  \"getReferenceAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n       {x(TR::sun_misc_Unsafe_putByte_JB_V,                  \"putByte\",    \"(JB)V\")},\n       {x(TR::sun_misc_Unsafe_putShort_JS_V,                 \"putShort\",   \"(JS)V\")},\n@@ -5002,6 +5021,36 @@ TR_ResolvedJ9Method::setRecognizedMethodInfo(TR::RecognizedMethod rm)\n             case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n             case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n \n+            case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+            case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+            case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+            case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+            case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+            case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+            case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+            case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+            case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+\n+            case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+            case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+            case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+            case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+            case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+            case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+            case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+            case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+            case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+\n+            case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+            case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+            case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+            case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+            case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+            case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+            case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+            case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+            case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+\n             case TR::sun_misc_Unsafe_putByte_JB_V:\n             case TR::org_apache_harmony_luni_platform_OSMemory_putByte_JB_V:\n             case TR::sun_misc_Unsafe_putChar_JC_V:\n@@ -5664,6 +5713,33 @@ TR_J9MethodBase::isUnsafeWithObjectArg()\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n       default:\n          return false;\n@@ -5722,6 +5798,33 @@ TR_J9MethodBase::isUnsafeGetPutWithObjectArg(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n       default:\n          return false;\n@@ -5755,26 +5858,62 @@ TR_J9MethodBase::unsafeDataTypeForObject(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n          return TR::Int32;\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n          return TR::Int64;\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n          return TR::Float;\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n          return TR::Double;\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return TR::Address;\n       default:\n          TR_ASSERT(false, \"Method is not supported\\n\");\n@@ -5795,6 +5934,14 @@ TR_J9MethodBase::unsafeDataTypeForArray(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n          return TR::Int8;\n       case TR::sun_misc_Unsafe_getChar_jlObjectJ_C:\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n@@ -5804,31 +5951,59 @@ TR_J9MethodBase::unsafeDataTypeForArray(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n          return TR::Int16;\n       case TR::sun_misc_Unsafe_getInt_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n          return TR::Int32;\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n          return TR::Int64;\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n          return TR::Float;\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n          return TR::Double;\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return TR::Address;\n       default:\n          TR_ASSERT(false, \"Method is not supported\\n\");\n@@ -5866,6 +6041,66 @@ TR_J9MethodBase::isVolatileUnsafe(TR::RecognizedMethod rm)\n    return false;\n    }\n \n+bool\n+TR_J9MethodBase::isAcquireReleaseUnsafe(TR::RecognizedMethod rm)\n+   {\n+   switch (rm)\n+      {\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+         return true;\n+      default:\n+         return false;\n+      }\n+      return false;\n+   }\n+\n+bool\n+TR_J9MethodBase::isOpaqueUnsafe(TR::RecognizedMethod rm)\n+   {\n+   switch (rm)\n+      {\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+         return true;\n+      default:\n+         return false;\n+      }\n+   return false;\n+   }\n+\n bool\n TR_J9MethodBase::isUnsafeGetPutBoolean(TR::RecognizedMethod rm)\n    {\n@@ -5873,8 +6108,12 @@ TR_J9MethodBase::isUnsafeGetPutBoolean(TR::RecognizedMethod rm)\n       {\n       case TR::sun_misc_Unsafe_getBoolean_jlObjectJ_Z:\n       case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n          return true;\n       default:\n          break;\n@@ -5894,37 +6133,46 @@ TR_J9MethodBase::isUnsafePut(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_getAndSetInt:\n       case TR::sun_misc_Unsafe_getAndSetLong:\n       case TR::sun_misc_Unsafe_putAddress_JJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByte_JB_V:\n       case TR::sun_misc_Unsafe_putByte_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putChar_JC_V:\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDouble_JD_V:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloat_JF_V:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putInt_JI_V:\n       case TR::sun_misc_Unsafe_putInt_jlObjectII_V:\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLong_JJ_V:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShort_JS_V:\ndiff --git a/runtime/compiler/env/j9method.h b/runtime/compiler/env/j9method.h\nindex 134d593db01..a6d351dc20f 100644\n--- a/runtime/compiler/env/j9method.h\n+++ b/runtime/compiler/env/j9method.h\n@@ -120,6 +120,8 @@ class TR_J9MethodBase : public TR::Method\n    static bool                     isUnsafeGetPutBoolean(TR::RecognizedMethod rm);\n    static bool                     isUnsafePut(TR::RecognizedMethod rm);\n    static bool                     isVolatileUnsafe(TR::RecognizedMethod rm);\n+   static bool                     isAcquireReleaseUnsafe(TR::RecognizedMethod rm);\n+   static bool                     isOpaqueUnsafe(TR::RecognizedMethod rm);\n    static TR::DataType             unsafeDataTypeForArray(TR::RecognizedMethod rm);\n    static TR::DataType             unsafeDataTypeForObject(TR::RecognizedMethod rm);\n    static bool                     isVarHandleOperationMethod(TR::RecognizedMethod rm);\ndiff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex e5aab81bc65..a930286a930 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -814,7 +814,7 @@ TR_J9InlinerPolicy::genIndirectAccessCodeForUnsafeGetPut(TR::Node* directAccessO\n       indirectAccessNode = indirectAccessOrTempStoreNode->getFirstChild();\n       }\n \n-   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->isOpaque());\n+   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->getMemoryOrdering());\n \n    indirectAccessNode->setSymbolReference(indirectSymRef);\n \n@@ -1391,12 +1391,11 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n                                               TR::TreeTop * callNodeTreeTop,\n                                               TR::Node * unsafeCall,\n                                               TR::DataType type,\n-                                              bool isVolatile,\n+                                              TR::Symbol::MemoryOrdering ordering,\n                                               bool needNullCheck,\n-                                              bool isOrdered,\n                                               bool isUnaligned)\n    {\n-   if (isVolatile && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n+   if (ordering != TR::Symbol::MemoryOrdering::Transparent && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n       return false;\n \n    if (isUnaligned && comp()->cg()->getSupportsAlignedAccessOnly())\n@@ -1405,7 +1404,7 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n    if (debug(\"traceUnsafe\"))\n       printf(\"createUnsafePutWithOffset %d in %s\\n\", type.getDataType(), comp()->signature());\n \n-   debugTrace(tracer(), \"\\tcreateUnsafePutWithOffset.  call tree %p offset(datatype) %d isvolatile %d needNullCheck %d isOrdered %d\\n\", callNodeTreeTop, type.getDataType(), isVolatile, needNullCheck, isOrdered);\n+   debugTrace(tracer(), \"\\tcreateUnsafePutWithOffset.  call tree %p offset(datatype) %d ordering %s needNullCheck %d\\n\", callNodeTreeTop, type.getDataType(), TR::Symbol::getMemoryOrderingName(ordering), needNullCheck);\n \n    // Truncate the value before inlining the call\n    if (TR_J9MethodBase::isUnsafeGetPutBoolean(calleeSymbol->getRecognizedMethod()))\n@@ -1472,10 +1471,10 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n    TR::Node *offset = unsafeCall->getChild(2);\n    TR::TreeTop *prevTreeTop = callNodeTreeTop->getPrevTreeTop();\n    TR::SymbolReference *newSymbolReferenceForAddress = unsafeCall->getChild(1)->getSymbolReference();\n-   TR::SymbolReference * symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, isVolatile);\n+   TR::SymbolReference * symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, ordering);\n    TR::Node *orderedCallNode = NULL;\n \n-   if (isOrdered)\n+   if (accessMode == TR::Symbol::AcquireReleaseSemantics)\n       {\n       symRef->getSymbol()->setAcquireRelease();\n       orderedCallNode = callNodeTreeTop->getNode()->duplicateTree();\n@@ -1982,11 +1981,11 @@ TR_J9InlinerPolicy::createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *calleeSy\n                                               TR::TreeTop * callNodeTreeTop,\n                                               TR::Node * unsafeCall,\n                                               TR::DataType type,\n-                                              bool isVolatile,\n+                                              TR::Symbol::MemoryOrdering ordering,\n                                               bool needNullCheck,\n                                               bool isUnaligned)\n    {\n-   if (isVolatile && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n+   if (ordering != TR::Symbol::MemoryOrdering::Transparent && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n       return false;\n \n    if (isUnaligned && comp()->cg()->getSupportsAlignedAccessOnly())\n@@ -2065,7 +2064,7 @@ TR_J9InlinerPolicy::createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *calleeSy\n       unsafeCall->getChild(j)->recursivelyDecReferenceCount();\n    unsafeCall->setNumChildren(1);\n \n-   TR::SymbolReference* symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, isVolatile);\n+   TR::SymbolReference* symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, ordering);\n    TR_ASSERT(unsafeCall == callNodeTreeTop->getNode()->getFirstChild(), \"assumption not valid\\n\");\n    TR::Node* unsafeCallWithConversion = NULL;\n    TR::Node* callNodeWithConversion = NULL;\n@@ -2523,61 +2522,80 @@ TR_J9InlinerPolicy::inlineUnsafeCall(TR::ResolvedMethodSymbol *calleeSymbol, TR:\n    switch (callNode->getSymbol()->castToResolvedMethodSymbol()->getRecognizedMethod())\n       {\n       case TR::sun_misc_Unsafe_putByte_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_putShort_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32);\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64);\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float);\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double);\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Transparent, true);\n \n       case TR::sun_misc_Unsafe_getBoolean_jlObjectJ_Z:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_getByte_jlObjectJ_B:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_getChar_jlObjectJ_C:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_getShort_jlObjectJ_S:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_getInt_jlObjectJ_I:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32);\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64);\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float);\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double);\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Transparent, true);\n \n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Volatile, true);\n+\n+      case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Volatile, true);\n \n       case TR::sun_misc_Unsafe_monitorEnter_jlObject_V:\n          return createUnsafeMonitorOp(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, true);\n@@ -2585,60 +2603,98 @@ TR_J9InlinerPolicy::inlineUnsafeCall(TR::ResolvedMethodSymbol *calleeSymbol, TR:\n          return createUnsafeMonitorOp(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, false);\n \n       case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::AcquireRelease, true);\n \n       // FIXME: Update createUnsafePutWithOffset signature to have isVolatile, isOrdered, isUnaligned as enum\n       case TR::jdk_internal_misc_Unsafe_getCharUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getShortUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getIntUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getLongUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putCharUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n-\n-      case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n-      case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n-      case TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n-      case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n-      case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, true);\n-      case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, true);\n-      case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, true);\n-      case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, true);\n-      case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n+\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::AcquireRelease, true);\n+\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Opaque, true);\n+\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Opaque, true);\n \n       case TR::sun_misc_Unsafe_putByte_JB_V:\n       case TR::org_apache_harmony_luni_platform_OSMemory_putByte_JB_V:\n@@ -2789,10 +2845,11 @@ TR_J9InlinerPolicy::isInlineableJNI(TR_ResolvedMethod *method,TR::Node *callNode\n       // In Java9 sun/misc/Unsafe methods are simple Java wrappers to JNI\n       // methods in jdk.internal, and the enum values above match both. Only\n       // return true for the methods that are native.\n-      // In the case of Unsafe_getXUnaligned methods, which are also wrappers to\n-      // native methods that contain some runtime checks, we benefit from directly\n-      // inlining them in inlineUnsafeCall as if they were their underlying native\n-      // methods, if we can determine that it is safe to do so.\n+      // In the case of Unsafe_getX and Unsafe_setX methods, which are also\n+      // wrappers to native methods that contain some runtime checks, we\n+      // benefit from directly inlining them in inlineUnsafeCall as if they\n+      // were their underlying native methods, if we can determine that it is\n+      // safe to do so.\n       if (!TR::Compiler->om.canGenerateArraylets() || (callNode && callNode->isUnsafeGetPutCASCallOnNonArray()))\n          return method->isNative() || isSimpleWrapperForInlineableUnsafeNativeMethod(method);\n       else\n@@ -6148,6 +6205,42 @@ TR_J9InlinerPolicy::isSimpleWrapperForInlineableUnsafeNativeMethod(TR_ResolvedMe\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n \n       default:\ndiff --git a/runtime/compiler/optimizer/J9Inliner.hpp b/runtime/compiler/optimizer/J9Inliner.hpp\nindex c859c925bfb..c29ffc488a5 100644\n--- a/runtime/compiler/optimizer/J9Inliner.hpp\n+++ b/runtime/compiler/optimizer/J9Inliner.hpp\n@@ -249,13 +249,13 @@ class TR_J9InlinerPolicy : public OMR_InlinerPolicy\n        *         after executing either \\c branchTargetTree or \\c fallThroughTree\n        */\n       TR::Block * createUnsafeGetPutCallDiamond(TR::TreeTop* callNodeTreeTop, TR::TreeTop* comparisonTree, TR::TreeTop* branchTargetTree, TR::TreeTop* fallThroughTree);\n-      bool createUnsafePutWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool, bool needNullCheck = false, bool isOrdered = false, bool isUnaligned = false);\n+      bool createUnsafePutWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent, bool needNullCheck = false, bool isUnaligned = false);\n       TR::TreeTop* genDirectAccessCodeForUnsafeGetPut(TR::Node* callNode, bool conversionNeeded, bool isUnsafeGet);\n       void createTempsForUnsafePutGet(TR::Node*& unsafeAddress, TR::Node* unsafeCall, TR::TreeTop* callNodeTreeTop, TR::Node*& offset, TR::SymbolReference*& newSymbolReferenceForAddress, bool isUnsafeGet);\n       bool         createUnsafeGet(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool compress = true);\n       bool         createUnsafePut(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool compress = true);\n       TR::Node *    createUnsafeAddress(TR::Node *);\n-      bool         createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool, bool needNullCheck = false, bool isUnaligned = false);\n+      bool         createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent, bool needNullCheck = false, bool isUnaligned = false);\n       TR::Node *    createUnsafeAddressWithOffset(TR::Node *);\n       bool         createUnsafeFence(TR::TreeTop *, TR::Node *, TR::ILOpCodes);\n \ndiff --git a/runtime/compiler/optimizer/J9TransformUtil.cpp b/runtime/compiler/optimizer/J9TransformUtil.cpp\nindex db51ceb35d0..d43ddee54c4 100644\n--- a/runtime/compiler/optimizer/J9TransformUtil.cpp\n+++ b/runtime/compiler/optimizer/J9TransformUtil.cpp\n@@ -2295,7 +2295,7 @@ J9::TransformUtil::fieldShouldBeCompressed(TR::Node *node, TR::Compilation *comp\n          !symRefTab->isVtableEntrySymbolRef(symRef) &&\n          (symRef != symRefTab->findClassFromJavaLangClassSymbolRef()) &&\n          (symRef != symRefTab->findAddressOfClassOfMethodSymbolRef()) &&\n-         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->isOpaque())) &&\n+         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->getMemoryOrdering())) &&\n          !symbol->isStatic() &&\n          (symbol->isCollectedReference() || symbol->isArrayletShadowSymbol() || symbol == symRefTab->findGenericIntShadowSymbol()) &&\n          !(symbol->isUnsafeShadowSymbol() && symbol->getDataType() != TR::Address))\ndiff --git a/runtime/compiler/optimizer/UnsafeFastPath.cpp b/runtime/compiler/optimizer/UnsafeFastPath.cpp\nindex 2545125b705..0db8aab98a0 100644\n--- a/runtime/compiler/optimizer/UnsafeFastPath.cpp\n+++ b/runtime/compiler/optimizer/UnsafeFastPath.cpp\n@@ -559,7 +559,7 @@ int32_t TR_UnsafeFastPath::perform()\n          TR::Node *object = NULL; // the owning object to be written to or read from in original unsafe call\n          TR::Node *base = NULL; // the base used to calcluate address for the new store / load\n          TR::DataType type = TR::NoType;\n-         bool isVolatile = false;\n+         TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent;\n          bool isArrayOperation = false;\n          bool isByIndex = false;\n          int32_t objectChild = 1;\n@@ -630,7 +630,7 @@ int32_t TR_UnsafeFastPath::perform()\n          switch (symbol->getRecognizedMethod())\n             {\n             case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n                switch (comp()->getMethodSymbol()->getRecognizedMethod())\n                   {\n@@ -649,7 +649,7 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int8;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getByteFromArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getByteFromArray:\n                type = TR::Int8;\n                break;\n@@ -659,12 +659,12 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getCharFromArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getCharFromArray:\n                type = TR::Int16;\n                break;\n             case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n                switch (methodSymbol->getRecognizedMethod())\n                   {\n@@ -694,7 +694,7 @@ int32_t TR_UnsafeFastPath::perform()\n                break;\n             case TR::com_ibm_jit_JITHelpers_getIntFromArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_getIntFromObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getIntFromArray:\n             case TR::com_ibm_jit_JITHelpers_getIntFromObject:\n                type = TR::Int32;\n@@ -703,14 +703,14 @@ int32_t TR_UnsafeFastPath::perform()\n             case TR::com_ibm_jit_JITHelpers_getLongFromObjectVolatile:\n                if (comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n                   break; // if the platform cg does not support volatile longs just generate the call\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getLongFromArray:\n             case TR::com_ibm_jit_JITHelpers_getLongFromObject:\n                type = TR::Int64;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getObjectFromArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_getObjectFromObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getObjectFromArray:\n             case TR::com_ibm_jit_JITHelpers_getObjectFromObject:\n                type = TR::Address;\n@@ -721,7 +721,7 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int8;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putByteInArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putByteInArray:\n                value = node->getChild(3);\n                type = TR::Int8;\n@@ -737,14 +737,14 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putCharInArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putCharInArray:\n                value = node->getChild(3);\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putIntInArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_putIntInObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putIntInArray:\n             case TR::com_ibm_jit_JITHelpers_putIntInObject:\n                value = node->getChild(3);\n@@ -754,7 +754,7 @@ int32_t TR_UnsafeFastPath::perform()\n             case TR::com_ibm_jit_JITHelpers_putLongInObjectVolatile:\n                if (comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n                   break; // if the platform cg does not support volatile longs just generate the call\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putLongInArray:\n             case TR::com_ibm_jit_JITHelpers_putLongInObject:\n                value = node->getChild(3);\n@@ -762,7 +762,7 @@ int32_t TR_UnsafeFastPath::perform()\n                break;\n             case TR::com_ibm_jit_JITHelpers_putObjectInArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_putObjectInObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putObjectInArray:\n             case TR::com_ibm_jit_JITHelpers_putObjectInObject:\n                value = node->getChild(3);\n@@ -796,10 +796,14 @@ int32_t TR_UnsafeFastPath::perform()\n                value = node->getChild(3);\n \n             if (TR_J9MethodBase::isVolatileUnsafe(calleeMethod))\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n+            else if (TR_J9MethodBase::isAcquireReleaseUnsafe(calleeMethod))\n+               ordering = TR::Symbol::MemoryOrdering::AcquireRelease;\n+            else if (TR_J9MethodBase::isOpaqueUnsafe(calleeMethod))\n+               ordering = TR::Symbol::MemoryOrdering::Opaque;\n \n             if (trace())\n-               traceMsg(comp(), \"VarHandle operation: isArrayOperation %d type %s value %p isVolatile %d on node %p\\n\", isArrayOperation, J9::DataType::getName(type), value, isVolatile, node);\n+               traceMsg(comp(), \"VarHandle operation: isArrayOperation %d type %s value %p access mode %s on node %p\\n\", isArrayOperation, J9::DataType::getName(type), value, TR::Symbol::getMemoryOrderingName(ordering), node);\n             }\n \n          bool mightBeArraylets = isArrayOperation && TR::Compiler->om.canGenerateArraylets();\n@@ -821,7 +825,7 @@ int32_t TR_UnsafeFastPath::perform()\n                TR::TransformUtil::truncateBooleanForUnsafeGetPut(comp(), tt);\n                }\n \n-            TR::SymbolReference * unsafeSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, isStatic, isVolatile);\n+            TR::SymbolReference * unsafeSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, isStatic, ordering);\n \n             // some helpers are special - we know they are accessing an array and we know the kind of that array\n             // so use the more helpful symref if we can\n",
    "6254ab0085f26cbcdd08fe0008113669be3fdff1": "diff --git a/runtime/compiler/codegen/J9CodeGenerator.cpp b/runtime/compiler/codegen/J9CodeGenerator.cpp\nindex 15b9d17181f..8375f576886 100644\n--- a/runtime/compiler/codegen/J9CodeGenerator.cpp\n+++ b/runtime/compiler/codegen/J9CodeGenerator.cpp\n@@ -935,18 +935,6 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n          }\n       }\n \n-   // J9\n-   if (node->getOpCode().isCall() &&\n-       node->isUnsafePutOrderedCall() &&\n-       node->isDontInlinePutOrderedCall())\n-      {\n-      // Remove this treetop\n-      tt->getPrevTreeTop()->setNextTreeTop(tt->getNextTreeTop());\n-      tt->getNextTreeTop()->setPrevTreeTop(tt->getPrevTreeTop());\n-      tt->getNode()->recursivelyDecReferenceCount();\n-      return;\n-      }\n-\n    // J9\n    if (!self()->comp()->getOption(TR_DisableUnsafe) &&\n        node->getOpCode().isCall() &&\ndiff --git a/runtime/compiler/il/J9Node.cpp b/runtime/compiler/il/J9Node.cpp\nindex 5b216a8ecb1..e6712cc621b 100644\n--- a/runtime/compiler/il/J9Node.cpp\n+++ b/runtime/compiler/il/J9Node.cpp\n@@ -2078,62 +2078,6 @@ J9::Node::chkSpineCheckWithArrayElementChild()\n    return self()->getOpCode().isSpineCheck() && _flags.testAny(spineCHKWithArrayElementChild);\n    }\n \n-bool\n-J9::Node::isUnsafePutOrderedCall()\n-   {\n-   if (!self()->getOpCode().isCall())\n-      return false;\n-\n-   if (!self()->getSymbol()->isMethod())\n-      return false;\n-\n-   bool isPutOrdered = false;\n-   TR::MethodSymbol *symbol = self()->getSymbol()->getMethodSymbol();\n-   if (!symbol)\n-      return false;\n-\n-   if ((symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V))\n-      isPutOrdered = true;\n-\n-   return isPutOrdered;\n-   }\n-\n-bool\n-J9::Node::isDontInlinePutOrderedCall()\n-   {\n-   TR_ASSERT(self()->getOpCode().isCall(), \" Can only call this routine for a call node \\n\");\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-\n-   TR_ASSERT(isPutOrdered, \"attempt to set dontInlinePutOrderedCall flag and not a putOrdered call\");\n-   if (isPutOrdered)\n-      return _flags.testAny(dontInlineUnsafePutOrderedCall);\n-   else\n-      return false;\n-   }\n-\n-void\n-J9::Node::setDontInlinePutOrderedCall(TR::Compilation *comp)\n-   {\n-   TR_ASSERT(self()->getOpCode().isCall(), \" Can only call this routine for a call node \\n\");\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-\n-   TR_ASSERT(isPutOrdered, \"attempt to set dontInlinePutOrderedCall flag and not a putOrdered call\");\n-   if (isPutOrdered)\n-      {\n-      if (performNodeTransformation1(comp, \"O^O NODE FLAGS: Setting dontInlineUnsafePutOrderedCall flag on node %p\\n\", self()))\n-         _flags.set(dontInlineUnsafePutOrderedCall);\n-      }\n-\n-   }\n-\n bool\n J9::Node::isUnsafeCopyMemoryIntrinsic()\n    {\n@@ -2155,13 +2099,6 @@ J9::Node::isUnsafeCopyMemoryIntrinsic()\n    return false;\n    }\n \n-bool\n-J9::Node::chkDontInlineUnsafePutOrderedCall()\n-   {\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-   return isPutOrdered && _flags.testAny(dontInlineUnsafePutOrderedCall);\n-   }\n-\n bool\n J9::Node::isUnsafeGetPutCASCallOnNonArray()\n    {\ndiff --git a/runtime/compiler/il/J9Node.hpp b/runtime/compiler/il/J9Node.hpp\nindex e259774b8a6..d574af423bf 100644\n--- a/runtime/compiler/il/J9Node.hpp\n+++ b/runtime/compiler/il/J9Node.hpp\n@@ -297,12 +297,6 @@ class OMR_EXTENSIBLE Node : public OMR::NodeConnector\n    void setSpineCheckWithArrayElementChild(bool v, TR::Compilation *comp);\n    bool chkSpineCheckWithArrayElementChild();\n \n-   // Flags used by call nodes\n-   bool isUnsafePutOrderedCall();\n-   bool isDontInlinePutOrderedCall();\n-   void setDontInlinePutOrderedCall(TR::Compilation *comp);\n-   bool chkDontInlineUnsafePutOrderedCall();\n-\n    /**\n     * Checks  and return true if the callNode is JNI Call to Unsafe.copyMemory\n     */\n@@ -457,7 +451,6 @@ class OMR_EXTENSIBLE Node : public OMR::NodeConnector\n       spineCHKWithArrayElementChild         = 0x00004000,\n \n       // Flags used by call nodes\n-      dontInlineUnsafePutOrderedCall        = 0x00000800, ///< unsafe putOrdered calls\n       processedByCallCloneConstrain         = 0x00100000,\n       unsafeGetPutOnNonArray                = 0x00200000,\n       DAAVariableSlowCall                   = 0x00400000, ///< Used to avoid Variable precision DAA optimization\ndiff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex a930286a930..45b76a58bae 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -1474,15 +1474,6 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n    TR::SymbolReference * symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, ordering);\n    TR::Node *orderedCallNode = NULL;\n \n-   if (accessMode == TR::Symbol::AcquireReleaseSemantics)\n-      {\n-      symRef->getSymbol()->setAcquireRelease();\n-      orderedCallNode = callNodeTreeTop->getNode()->duplicateTree();\n-      orderedCallNode->getFirstChild()->setDontInlinePutOrderedCall(comp());\n-\n-      debugTrace(tracer(), \"\\t Duplicate Tree for ordered call, orderedCallNode = %p\\n\", orderedCallNode);\n-      }\n-\n    static char *disableIllegalWriteReport = feGetEnv(\"TR_DisableIllegalWriteReport\");\n    TR::TreeTop* reportFinalFieldModification = NULL;\n    if (!disableIllegalWriteReport && !comp()->getOption(TR_DisableGuardedStaticFinalFieldFolding))\n@@ -2827,14 +2818,6 @@ TR_J9InlinerPolicy::isInlineableJNI(TR_ResolvedMethod *method,TR::Node *callNode\n    if (comp->getOption(TR_DisableUnsafe))\n       return false;\n \n-   // If this put ordered call node has already been inlined, do not inline it again (JTC-JAT 71313)\n-   if (callNode && callNode->isUnsafePutOrderedCall() && callNode->isDontInlinePutOrderedCall())\n-      {\n-      debugTrace(tracer(), \"Unsafe Inlining: Unsafe Call %p already inlined\\n\", callNode);\n-\n-      return false;\n-      }\n-\n    if ((TR::Compiler->vm.canAnyMethodEventsBeHooked(comp) && !comp->fej9()->methodsCanBeInlinedEvenIfEventHooksEnabled(comp)) ||\n        (comp->fej9()->isAnyMethodTracingEnabled(method->getPersistentIdentifier()) &&\n         !comp->fej9()->traceableMethodsCanBeInlined()))\n",
    "7ec2c2d7b8018f030c5b5a87dba6b203079a3ecc": "diff --git a/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml b/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\nindex 930385a64ba..e6a4a7e5543 100644\n--- a/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\n+++ b/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\n@@ -348,7 +348,7 @@\n   <output regex=\"no\" type=\"success\">version</output>\n  </test>\n  <test id=\"-verbose:gc -Xcheck:memory - check for memory corruption\">\n-  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>\n+  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -Xmx512m -version</command>\n   <output regex=\"no\" type=\"required\">&lt;/verbosegc&gt;</output>\n   <output regex=\"no\" type=\"success\">All allocated blocks were freed.</output>\n   <!-- allow memory leaks since the JIT leaks, unfortunately -->\n@@ -357,7 +357,7 @@\n  </test>\n  <test id=\"-verbose:gc -Xcheck:memory -Xverbosegclog:foo.log - check for memory corruption\">\n   <exec command=\"rm foo.*.log\" />\n-  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>\n+  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -Xmx512m -version</command>\n   <output regex=\"no\" type=\"success\">All allocated blocks were freed.</output>\n   <!-- allow memory leaks since the JIT leaks, unfortunately -->\n   <output regex=\"no\" type=\"success\">bytes were not freed before shutdown!</output>\n",
    "d9569dd5784fd6390321eaf641d96f9aaa60ed19": "diff --git a/runtime/vm/JFRChunkWriter.hpp b/runtime/vm/JFRChunkWriter.hpp\nindex f5412f0931e..6ae37259957 100644\n--- a/runtime/vm/JFRChunkWriter.hpp\n+++ b/runtime/vm/JFRChunkWriter.hpp\n@@ -602,13 +602,13 @@ class VM_JFRChunkWriter {\n \t\tVM_BufferWriter *_bufferWriter = (VM_BufferWriter *)userData;\n \n \t\t/* reserve size field */\n-\t\tU_8 *dataStart = _bufferWriter->getAndIncCursor(sizeof(U_32));\n+\t\tU_8 *dataStart = reserveEventSize(_bufferWriter);\n \n \t\t/* write event type */\n \t\t_bufferWriter->writeLEB128(MonitorEnterID);\n \n-\t\t/* write start time - this is when the sleep started not when it ended so we\n-\t\t * need to subtract the duration since the event is emitted when the sleep ends.\n+\t\t/* write start time - this is when the monitor enter started not when it ended so we\n+\t\t * need to subtract the duration since the event is emitted when the monitor enter ends.\n \t\t */\n \t\t_bufferWriter->writeLEB128(entry->ticks - entry->duration);\n \ndiff --git a/runtime/vm/JFRConstantPoolTypes.cpp b/runtime/vm/JFRConstantPoolTypes.cpp\nindex 093bf2b70cc..4196b17d032 100644\n--- a/runtime/vm/JFRConstantPoolTypes.cpp\n+++ b/runtime/vm/JFRConstantPoolTypes.cpp\n@@ -770,12 +770,25 @@ VM_JFRConstantPoolTypes::addThreadEntry(J9VMThread *vmThread)\n \tU_32 index = U_32_MAX;\n \tThreadEntry *entry = NULL;\n \tThreadEntry entryBuffer = {0};\n+\tomrthread_t osThread = NULL;\n+\tj9object_t threadObject = NULL;\n+\n+\tif (NULL == vmThread) {\n+\t\tindex = 0;\n+\t\tgoto done;\n+\t}\n \n \tentry = &entryBuffer;\n \tentry->vmThread = vmThread;\n \t_buildResult = OK;\n-\tomrthread_t osThread = vmThread->osThread;\n-\tj9object_t threadObject = vmThread->threadObject;\n+\tosThread = vmThread->osThread;\n+\tthreadObject = vmThread->threadObject;\n+\n+\tif ((NULL == osThread) || (NULL == threadObject)) {\n+\t\t/* this can happen if a thread dies during a monitor enter */\n+\t\tindex = 0;\n+\t\tgoto done;\n+\t}\n \n \tentry = (ThreadEntry *) hashTableFind(_threadTable, entry);\n \tif (NULL != entry) {\n@@ -1102,6 +1115,9 @@ VM_JFRConstantPoolTypes::addMonitorEnterEntry(J9JFRMonitorEntered *monitorEnterD\n \tentry->threadIndex = addThreadEntry(monitorEnterData->vmThread);\n \tif (isResultNotOKay()) goto done;\n \n+\tentry->previousOwnerThread = addThreadEntry(monitorEnterData->previousOwner);\n+\tif (isResultNotOKay()) goto done;\n+\n \tentry->eventThreadIndex = addThreadEntry(monitorEnterData->vmThread);\n \tif (isResultNotOKay()) goto done;\n \ndiff --git a/runtime/vm/ObjectMonitor.cpp b/runtime/vm/ObjectMonitor.cpp\nindex 520f5140c8e..71ecdc5df37 100644\n--- a/runtime/vm/ObjectMonitor.cpp\n+++ b/runtime/vm/ObjectMonitor.cpp\n@@ -168,6 +168,7 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\tobject = NULL; // for safety, since object may be moved by the GC at various points after this\n \t\t/* Ensure object monitor isn't deflated while we block */\n \t\tomrthread_monitor_t monitor = objectMonitor->monitor;\n+\t\tJ9VMThread *previousOwner = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\tVM_AtomicSupport::add(&monitor->pinCount, 1);\n \t\t/* Initialize our wait time to 1ms. Increase it as we have to wait more and more\n \t\t * using the sequence 1, 4, 16, 64 and then 64 thereafter.\n@@ -291,9 +292,8 @@ objectMonitorEnterBlocking(J9VMThread *currentThread)\n \t\t((J9ThreadMonitor*)monitor)->flags &= ~(UDATA)J9THREAD_MONITOR_SUPPRESS_CONTENDED_EXIT;\n \t\tVM_AtomicSupport::subtract(&monitor->pinCount, 1);\n \t\tif (J9_EVENT_IS_HOOKED(vm->hookInterface, J9HOOK_VM_MONITOR_CONTENDED_ENTERED)) {\n-\t\t\tJ9VMThread *ownerThread = getVMThreadFromOMRThread(vm, ((J9ThreadMonitor *)monitor)->owner);\n \t\t\tbool frameBuilt = saveBlockingEnterObject(currentThread);\n-\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, ownerThread);\n+\t\t\tALWAYS_TRIGGER_J9HOOK_VM_MONITOR_CONTENDED_ENTERED(vm->hookInterface, currentThread, monitor, startTicks, ramClass, previousOwner);\n \t\t\trestoreBlockingEnterObject(currentThread, frameBuilt);\n \t\t}\n \t}\ndiff --git a/runtime/vm/jfr.cpp b/runtime/vm/jfr.cpp\nindex 898dde79772..feb5ec0bc12 100644\n--- a/runtime/vm/jfr.cpp\n+++ b/runtime/vm/jfr.cpp\n@@ -679,6 +679,7 @@ jfrVMMonitorEntered(J9HookInterface **hook, UDATA eventNum, void *eventData, voi\n \t\tjfrEvent->duration = j9time_nano_time() - event->startTicks;\n \t\tjfrEvent->monitorClass = event->monitorClass;\n \t\tjfrEvent->monitorAddress = (UDATA)event->monitor;\n+\t\tjfrEvent->previousOwner = event->previousOwner;\n \t}\n }\n \ndiff --git a/test/functional/cmdLineTests/jfr/jfrevents.xml b/test/functional/cmdLineTests/jfr/jfrevents.xml\nindex d96fbf69769..71aca7e125c 100644\n--- a/test/functional/cmdLineTests/jfr/jfrevents.xml\n+++ b/test/functional/cmdLineTests/jfr/jfrevents.xml\n@@ -64,4 +64,15 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">stackTrace</output>\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">jfr print: could not read recording</output>\n \t</test>\n+\t<test id=\"test jfr monitor enter - approx 30seconds\">\n+\t\t<command>$JFR_EXE$ print --xml --events \"JavaMonitorEnter\" --stack-depth 1 defaultJ9recording.jfr</command>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">http://www.w3.org/2001/XMLSchema-instance</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">jdk.JavaMonitorEnter</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">eventThread</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">osName</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">osThreadId</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"no\">javaName</output>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">stackTrace</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">jfr print: could not read recording</output>\n+\t</test>\n </suite>\ndiff --git a/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java b/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\nindex 135aaf106f3..a38adb1f8fa 100644\n--- a/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\n+++ b/test/functional/cmdLineTests/jfr/src/org/openj9/test/WorkLoad.java\n@@ -35,6 +35,10 @@ public class WorkLoad {\n \tpublic static double average;\n \tpublic static double stdDev;\n \n+\tprivate static long globalCounter = 0;\n+\tstatic interface GlobalLoack {};\n+\tprivate static Object globalLock = new GlobalLoack(){};\n+\n \tpublic WorkLoad(int numberOfThreads, int sizeOfNumberList, int repeats) {\n \t\tthis.numberOfThreads = numberOfThreads;\n \t\tthis.sizeOfNumberList = sizeOfNumberList;\n@@ -93,10 +97,22 @@ private void workload() {\n \t\t\tgenerateTimedSleep();\n \t\t\tgenerateTimedWait();\n \t\t\tthrowThrowables();\n+\t\t\tcontendOnLock();\n \t\t\tburnCPU();\n \t\t}\n \t}\n \n+\tprivate void contendOnLock() {\n+\t\tsynchronized (globalLock) {\n+\t\t\tglobalCounter++;\n+\t\t\ttry {\n+\t\t\t\tThread.sleep(1);\n+\t\t\t} catch (InterruptedException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tprivate void recursiveFucntion(int depth) {\n \t\tif (0 == depth) {\n \t\t\treturn;\n",
    "dc6a6f723cc3d33e86d076f072fb7dd1d88e3872": "diff --git a/test/functional/Java22andUp/playlist.xml b/test/functional/Java22andUp/playlist.xml\nindex 8e80549667b..3c4df414249 100644\n--- a/test/functional/Java22andUp/playlist.xml\n+++ b/test/functional/Java22andUp/playlist.xml\n@@ -51,8 +51,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<testCaseName>Jep454Tests_testLinkerFfi_DownCall_HeapArray</testCaseName>\n \t\t<variations>\n \t\t\t<variation>NoOptions</variation>\n-\t\t\t<variation>Mode501</variation>\n-\t\t\t<variation>Mode551</variation>\n \t\t</variations>\n \t\t<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \\\n \t\t\t-Xmx1G \\\n",
    "e0c99c82ca24c59b8eaf2127bff5a8da5f334432": "diff --git a/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml b/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\nindex 930385a64ba..e6a4a7e5543 100644\n--- a/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\n+++ b/test/functional/cmdLineTests/gcRegressionTests/gcRegressionTests.xml\n@@ -348,7 +348,7 @@\n   <output regex=\"no\" type=\"success\">version</output>\n  </test>\n  <test id=\"-verbose:gc -Xcheck:memory - check for memory corruption\">\n-  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>\n+  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -Xmx512m -version</command>\n   <output regex=\"no\" type=\"required\">&lt;/verbosegc&gt;</output>\n   <output regex=\"no\" type=\"success\">All allocated blocks were freed.</output>\n   <!-- allow memory leaks since the JIT leaks, unfortunately -->\n@@ -357,7 +357,7 @@\n  </test>\n  <test id=\"-verbose:gc -Xcheck:memory -Xverbosegclog:foo.log - check for memory corruption\">\n   <exec command=\"rm foo.*.log\" />\n-  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -version</command>\n+  <command>$EXE$ $XINT$ $ARGS_FOR_ALL_TESTS$ -verbose:gc -Xverbosegclog -Dibm.java9.forceCommonCleanerShutdown=true -Xcheck:memory:quick,ignoreUnfreedCallsite=zip/:dbgwrapper:unknown:wrapper -Xmx512m -version</command>\n   <output regex=\"no\" type=\"success\">All allocated blocks were freed.</output>\n   <!-- allow memory leaks since the JIT leaks, unfortunately -->\n   <output regex=\"no\" type=\"success\">bytes were not freed before shutdown!</output>\n",
    "c06f0f9f558374199624e6d07f7a0665ac5bb9a8": "diff --git a/test/functional/Java22andUp/playlist.xml b/test/functional/Java22andUp/playlist.xml\nindex 8e80549667b..3c4df414249 100644\n--- a/test/functional/Java22andUp/playlist.xml\n+++ b/test/functional/Java22andUp/playlist.xml\n@@ -51,8 +51,6 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t\t<testCaseName>Jep454Tests_testLinkerFfi_DownCall_HeapArray</testCaseName>\n \t\t<variations>\n \t\t\t<variation>NoOptions</variation>\n-\t\t\t<variation>Mode501</variation>\n-\t\t\t<variation>Mode551</variation>\n \t\t</variations>\n \t\t<command>$(ADD_JVM_LIB_DIR_TO_LIBPATH) $(JAVA_COMMAND) $(JVM_OPTIONS) \\\n \t\t\t-Xmx1G \\\n",
    "610778c249b17dcf2922adf656bdea52bfbb1eb7": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 9f9a07dc825..3fc0f7a3c89 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,8 +99,10 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\t/* set off-heap disabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = false;\n+#if defined(J9HAMMER) || defined(PPC64) || defined(AARCH64)\n+\t/* Set off-heap enabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = true;\n+ #endif /* defined(J9HAMMER) || defined(PPC64) || defined(AARCH64) */\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "d95717cbabb390da926b7324a9a7519092318b3d": "diff --git a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\nindex 9f9a07dc825..3fc0f7a3c89 100644\n--- a/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n+++ b/runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp\n@@ -99,8 +99,10 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n #if defined(J9VM_GC_SPARSE_HEAP_ALLOCATION)\n-\t/* set off-heap disabled as default for balanced GC */\n-\textensions->isVirtualLargeObjectHeapEnabled = false;\n+#if defined(J9HAMMER) || defined(PPC64) || defined(AARCH64)\n+\t/* Set off-heap enabled as default for balanced GC */\n+\textensions->isVirtualLargeObjectHeapEnabled = true;\n+ #endif /* defined(J9HAMMER) || defined(PPC64) || defined(AARCH64) */\n \n \tif (extensions->virtualLargeObjectHeap._wasSpecified) {\n \t\textensions->isVirtualLargeObjectHeapEnabled = extensions->virtualLargeObjectHeap._valueSpecified;\n",
    "4e1c9d2835024b9a3369402e234a50f0e0375493": "diff --git a/runtime/gc_base/ReferenceChainWalker.cpp b/runtime/gc_base/ReferenceChainWalker.cpp\nindex 472e68ec911..d186c4d9b5c 100644\n--- a/runtime/gc_base/ReferenceChainWalker.cpp\n+++ b/runtime/gc_base/ReferenceChainWalker.cpp\n@@ -32,6 +32,9 @@\n \n #include \"ClassIteratorClassSlots.hpp\"\n #include \"ClassIteratorDeclarationOrder.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"Forge.hpp\"\n #include \"GCExtensions.hpp\"\n@@ -418,6 +421,16 @@ MM_ReferenceChainWalker::scanContinuationNativeSlots(J9Object *objectPtr)\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForReferenceChainWalker, false, _trackVisibleStackFrameDepth);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \n@@ -651,6 +664,31 @@ MM_ReferenceChainWalker::doVMClassSlot(J9Class *classPtr)\n \tdoClassSlot(classPtr, J9GC_ROOT_TYPE_VM_CLASS_SLOT, -1, NULL);\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @todo Provide function documentation\n+ */\n+void\n+MM_ReferenceChainWalker::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tJ9Object *slotValue = *slotPtr;\n+\t/* Only report heap objects */\n+\tif (isHeapObject(slotValue) && !_heap->objectIsInGap(slotValue)) {\n+\t\tswitch(continuationSlotIterator->getState()) {\n+\t\tcase GC_ContinuationSlotIterator::state_monitor_records:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_CONTINUATION_MONITOR, -1, NULL);\n+\t\t\tbreak;\n+\t\tcase GC_ContinuationSlotIterator::state_vthread:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_CONTINUATION_VTHREAD, -1, NULL);\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tdoSlot(slotPtr, J9GC_ROOT_TYPE_UNKNOWN, -1, NULL);\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /**\n  * @todo Provide function documentation\n  */\ndiff --git a/runtime/gc_base/ReferenceChainWalker.hpp b/runtime/gc_base/ReferenceChainWalker.hpp\nindex dd41009d095..8ad7c3a8c12 100644\n--- a/runtime/gc_base/ReferenceChainWalker.hpp\n+++ b/runtime/gc_base/ReferenceChainWalker.hpp\n@@ -127,6 +127,9 @@ class MM_ReferenceChainWalker : public MM_RootScanner\n \tvirtual void doStringTableSlot(J9Object **slotPtr, GC_StringTableIterator *stringTableIterator);\n \tvirtual void doVMClassSlot(J9Class *classPtr);\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvirtual void doStackSlot(J9Object **slotPtr, void *walkState, const void* stackLocation);\n \tvirtual void doSlot(J9Object **slotPtr);\n \tvirtual void doClassSlot(J9Class *classPtr);\ndiff --git a/runtime/gc_base/RootScanner.cpp b/runtime/gc_base/RootScanner.cpp\nindex f239df0f7d5..d8007f8dd32 100644\n--- a/runtime/gc_base/RootScanner.cpp\n+++ b/runtime/gc_base/RootScanner.cpp\n@@ -356,6 +356,20 @@ MM_RootScanner::doClassSlot(J9Class *classPtr)\n \t/* ignore class slots by default */\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+/**\n+ * @todo Provide function documentation\n+ */\n+void\n+MM_RootScanner::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\t/* ensure that this isn't a slot pointing into the gap (only matters for split heap VMs) */\n+\tif (!_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(slotPtr);\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n /**\n  * @todo Provide function documentation\n  */\n@@ -552,6 +566,14 @@ MM_RootScanner::scanOneThread(MM_EnvironmentBase *env, J9VMThread *walkThread, v\n \t\t/* At this point we know that a virtual thread is mounted. We previously scanned its stack,\n \t\t * and now we will scan carrier's stack, that continuation struct is currently pointing to. */\n \t\tGC_VMThreadStackSlotIterator::scanSlots(currentThread, walkThread, walkThread->currentContinuation, localData, stackSlotIterator, isStackFrameClassWalkNeeded(), _trackVisibleStackFrameDepth);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(walkThread, walkThread->currentContinuation);\n+\n+\t\twhile (J9Object **slot = continuationSlotIterator.nextSlot()) {\n+\t\t\t/* do current continuation slot (mounted vthread case, the slot for saved carrier thread) */\n+\t\t\tdoContinuationSlot(slot, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \treturn false;\ndiff --git a/runtime/gc_base/RootScanner.hpp b/runtime/gc_base/RootScanner.hpp\nindex 6a97be571eb..711654325fb 100644\n--- a/runtime/gc_base/RootScanner.hpp\n+++ b/runtime/gc_base/RootScanner.hpp\n@@ -35,6 +35,9 @@\n \n #include \"BaseVirtual.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"GCExtensions.hpp\"\n #include \"JVMTIObjectTagTableIterator.hpp\"\n@@ -582,6 +585,10 @@ class MM_RootScanner : public MM_BaseVirtual\n \tvirtual void doDoubleMappedObjectSlot(J9Object *objectPtr, struct J9PortVmemIdentifier *identifier);\n #endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/**\n \t * Called for each object stack slot. Subclasses may override.\n \t * \ndiff --git a/runtime/gc_glue_java/CompactSchemeFixupObject.cpp b/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\nindex 613c35c1e4c..70a4c50d9a5 100644\n--- a/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\n+++ b/runtime/gc_glue_java/CompactSchemeFixupObject.cpp\n@@ -26,17 +26,21 @@\n #include \"objectdescription.h\"\n \n #include \"CollectorLanguageInterfaceImpl.hpp\"\n-#include \"EnvironmentStandard.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"Debug.hpp\"\n+#include \"EnvironmentStandard.hpp\"\n+#include \"FlattenedContiguousArrayIterator.hpp\"\n #include \"HeapRegionIteratorStandard.hpp\"\n #include \"MixedObjectIterator.hpp\"\n #include \"ObjectAccessBarrier.hpp\"\n #include \"OwnableSynchronizerObjectBuffer.hpp\"\n-#include \"VMHelpers.hpp\"\n #include \"ParallelDispatcher.hpp\"\n #include \"PointerContiguousArrayIterator.hpp\"\n-#include \"FlattenedContiguousArrayIterator.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"Task.hpp\"\n+#include \"VMHelpers.hpp\"\n \n void\n MM_CompactSchemeFixupObject::fixupMixedObject(omrobjectptr_t objectPtr)\n@@ -50,11 +54,30 @@ MM_CompactSchemeFixupObject::fixupMixedObject(omrobjectptr_t objectPtr)\n }\n \n void\n-MM_CompactSchemeFixupObject::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slot)\n+MM_CompactSchemeFixupObject::doSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr)\n+{\n+\t*slotPtr = _compactScheme->getForwardingPtr(*slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_CompactSchemeFixupObject::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n {\n-\t*slot = _compactScheme->getForwardingPtr(*slot);\n+\tif (isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n }\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n+void\n+MM_CompactSchemeFixupObject::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t}\n+}\n /**\n  * @todo Provide function documentation\n  */\n@@ -62,7 +85,7 @@ void\n stackSlotIteratorForCompactScheme(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4CompactSchemeFixupObject *data = (StackIteratorData4CompactSchemeFixupObject *)localData;\n-\tdata->compactSchemeFixupObject->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->compactSchemeFixupObject->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n \n@@ -85,6 +108,16 @@ MM_CompactSchemeFixupObject::fixupContinuationNativeSlots(MM_EnvironmentStandard\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForCompactScheme, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \ndiff --git a/runtime/gc_glue_java/CompactSchemeFixupObject.hpp b/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\nindex dec8925967b..c48239d2d1e 100644\n--- a/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\n+++ b/runtime/gc_glue_java/CompactSchemeFixupObject.hpp\n@@ -29,6 +29,10 @@\n #include \"CompactScheme.hpp\"\n #include \"GCExtensions.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n class MM_CompactSchemeFixupObject {\n public:\n protected:\n@@ -38,7 +42,11 @@ class MM_CompactSchemeFixupObject {\n \tMM_CompactScheme *_compactScheme;\n public:\n \n-\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slot);\n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t fromObject, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * Perform fixup for a single object\n \t * @param env[in] the current thread\n@@ -82,6 +90,15 @@ class MM_CompactSchemeFixupObject {\n \t * @param object -- The object of type or subclass of java.util.concurrent.locks.AbstractOwnableSynchronizer.\n \t */\n \tMMINLINE void addOwnableSynchronizerObjectInList(MM_EnvironmentBase *env, omrobjectptr_t objectPtr);\n+\n+\t/**\n+\t * Determine whether the object pointer is found within the heap proper.\n+\t * @return Boolean indicating if the object pointer is within the heap boundaries.\n+\t */\n+\tMMINLINE bool isHeapObject(J9Object *objectPtr)\n+\t{\n+\t\treturn (_extensions->heap->getHeapBase() <= (uint8_t *)objectPtr) && (_extensions->heap->getHeapTop() > (uint8_t *)objectPtr);\n+\t}\n };\n \n typedef struct StackIteratorData4CompactSchemeFixupObject {\ndiff --git a/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp b/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\nindex c5b082fbc6f..08b6d68afeb 100644\n--- a/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\n+++ b/runtime/gc_glue_java/ConcurrentMarkingDelegate.cpp\n@@ -25,6 +25,9 @@\n #include \"AsyncCallbackHandler.hpp\"\n #include \"ClassLoaderIterator.hpp\"\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"FinalizeListManager.hpp\"\n #include \"Heap.hpp\"\n #include \"HeapRegionDescriptorStandard.hpp\"\n@@ -35,6 +38,32 @@\n #include \"VMInterface.hpp\"\n #include \"VMThreadListIterator.hpp\"\n \n+void\n+MM_ConcurrentMarkingDelegate::doSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr)\n+{\n+\t_markingScheme->markObject(env, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_ConcurrentMarkingDelegate::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !env->getExtensions()->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_ConcurrentMarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tomrobjectptr_t object = *slotPtr;\n+\tif (_markingScheme->isHeapObject(object) && !env->getExtensions()->heap->objectIsInGap(object)) {\n+\t\tdoSlot(env, slotPtr);\n+\t}\n+}\n /**\n  * Concurrents stack slot iterator.\n  * Called for each slot in a threads active stack frames which contains a object reference.\n@@ -48,19 +77,7 @@ void\n concurrentStackSlotIterator(J9JavaVM *javaVM, omrobjectptr_t *objectIndirect, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tMM_ConcurrentMarkingDelegate::markSchemeStackIteratorData *data = (MM_ConcurrentMarkingDelegate::markSchemeStackIteratorData *)localData;\n-\n-\tomrobjectptr_t object = *objectIndirect;\n-\tif (data->env->getExtensions()->heap->objectIsInGap(object)) {\n-\t\t/* CMVC 136483:  Ensure that the object is not in the gap of a split heap (stack-allocated object) since we can't mark that part of the address space */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(data->env));\n-\t} else if (data->markingScheme->isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(data->env));\n-\t\tdata->markingScheme->markObject(data->env, object);\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(data->env));\n-\t}\n+\tdata->concurrentMarkingDelegate->doStackSlot(data->env, objectIndirect, walkState, stackLocation);\n }\n \n bool\n@@ -150,7 +167,7 @@ MM_ConcurrentMarkingDelegate::scanThreadRoots(MM_EnvironmentBase *env)\n \t}\n \n \tmarkSchemeStackIteratorData localData;\n-\tlocalData.markingScheme = _markingScheme;\n+\tlocalData.concurrentMarkingDelegate = this;\n \tlocalData.env = env;\n \t/* In a case this thread is a carrier thread, and a virtual thread is mounted, we will scan virtual thread's stack. */\n \tGC_VMThreadStackSlotIterator::scanSlots(vmThread, vmThread, (void *)&localData, concurrentStackSlotIterator, true, false);\n@@ -158,6 +175,13 @@ MM_ConcurrentMarkingDelegate::scanThreadRoots(MM_EnvironmentBase *env)\n #if JAVA_SPEC_VERSION >= 19\n \tif (NULL != vmThread->currentContinuation) {\n \t\tGC_VMThreadStackSlotIterator::scanSlots(vmThread, vmThread, vmThread->currentContinuation, (void *)&localData, concurrentStackSlotIterator, true, false);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(vmThread, vmThread->currentContinuation);\n+\n+\t\twhile (J9Object **slot = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slot, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n \ndiff --git a/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp b/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\nindex 436e14849d8..ee599482b7b 100644\n--- a/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\n+++ b/runtime/gc_glue_java/ConcurrentMarkingDelegate.hpp\n@@ -46,6 +46,9 @@\n #include \"ScanClassesMode.hpp\"\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_VMThreadIterator;\n class MM_ConcurrentGC;\n class MM_MarkingScheme;\n@@ -87,7 +90,7 @@ class MM_ConcurrentMarkingDelegate\n \t};\n \n \ttypedef struct markSchemeStackIteratorData {\n-\t\tMM_MarkingScheme *markingScheme;\n+\t\tMM_ConcurrentMarkingDelegate *concurrentMarkingDelegate;\n \t\tMM_EnvironmentBase *env;\n \t} markSchemeStackIteratorData;\n \n@@ -114,6 +117,11 @@ class MM_ConcurrentMarkingDelegate\n \t */\n \tbool initialize(MM_EnvironmentBase *env, MM_ConcurrentGC *collector);\n \n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t *slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * In the case of Weak Consistency platforms we require this method to bring mutator threads to a safe point. A safe\n \t * point is a point at which a GC may occur.\ndiff --git a/runtime/gc_glue_java/HeapWalkerDelegate.cpp b/runtime/gc_glue_java/HeapWalkerDelegate.cpp\nindex 1f9dab4d6ba..b8999144d72 100644\n--- a/runtime/gc_glue_java/HeapWalkerDelegate.cpp\n+++ b/runtime/gc_glue_java/HeapWalkerDelegate.cpp\n@@ -24,6 +24,9 @@\n #include \"HeapWalkerDelegate.hpp\"\n \n #include \"j9.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentBase.hpp\"\n #include \"GCExtensions.hpp\"\n #include \"ObjectModel.hpp\"\n@@ -72,5 +75,15 @@ MM_HeapWalkerDelegate::doContinuationNativeSlots(MM_EnvironmentBase *env, omrobj\n \t\tlocalData.userData = userData;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForHeapWalker, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\t_heapWalker->heapWalkerSlotCallback(env, slotPtr, function, userData);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\ndiff --git a/runtime/gc_glue_java/MarkingDelegate.cpp b/runtime/gc_glue_java/MarkingDelegate.cpp\nindex ef1a8b44245..41f4577f629 100644\n--- a/runtime/gc_glue_java/MarkingDelegate.cpp\n+++ b/runtime/gc_glue_java/MarkingDelegate.cpp\n@@ -39,6 +39,9 @@\n #include \"CollectorLanguageInterfaceImpl.hpp\"\n #endif /* defined(J9VM_GC_FINALIZATION) */\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentDelegate.hpp\"\n #include \"FinalizableReferenceBuffer.hpp\"\n #include \"GlobalCollector.hpp\"\n@@ -239,14 +242,31 @@ MM_MarkingDelegate::startRootListProcessing(MM_EnvironmentBase *env)\n }\n \n void\n-MM_MarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr)\n+MM_MarkingDelegate::doSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr)\n {\n-\tomrobjectptr_t object = *slotPtr;\n-\tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n-\t\tif (_extensions->isConcurrentScavengerEnabled() && _extensions->isScavengerBackOutFlagRaised()) {\n-\t\t\t_markingScheme->fixupForwardedSlot(slotPtr);\n-\t\t}\n-\t\t_markingScheme->inlineMarkObject(env, *slotPtr);\n+\tif (_extensions->isConcurrentScavengerEnabled() && _extensions->isScavengerBackOutFlagRaised()) {\n+\t\t_markingScheme->fixupForwardedSlot(slotPtr);\n+\t}\n+\t_markingScheme->inlineMarkObject(env, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MarkingDelegate::doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, objectPtr, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_MarkingDelegate::doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, objectPtr, slotPtr);\n \t}\n }\n \n@@ -257,7 +277,7 @@ void\n stackSlotIteratorForMarkingDelegate(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4MarkingDelegate *data = (StackIteratorData4MarkingDelegate *)localData;\n-\tdata->markingDelegate->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->markingDelegate->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n \n@@ -281,6 +301,16 @@ MM_MarkingDelegate::scanContinuationNativeSlots(MM_EnvironmentBase *env, omrobje\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForMarkingDelegate, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/MarkingDelegate.hpp b/runtime/gc_glue_java/MarkingDelegate.hpp\nindex db8f0419bf1..b098c7a551d 100644\n--- a/runtime/gc_glue_java/MarkingDelegate.hpp\n+++ b/runtime/gc_glue_java/MarkingDelegate.hpp\n@@ -36,6 +36,9 @@\n #include \"ReferenceObjectScanner.hpp\"\n #include \"PointerArrayObjectScanner.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_ObjectScanner;\n class MM_EnvironmentBase;\n class MM_HeapRegionDescriptorStandard;\n@@ -128,7 +131,11 @@ class MM_MarkingDelegate\n \t\treturn 0;\n \t}\n \n-\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr);\n+\tMMINLINE void doSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentBase *env, omrobjectptr_t objectPtr, omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation);\n \tvoid scanContinuationNativeSlots(MM_EnvironmentBase *env, omrobjectptr_t objectPtr);\n \n \tMMINLINE GC_ObjectScanner *\ndiff --git a/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp b/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\nindex d807f5d85a9..1930b870cb0 100644\n--- a/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\n+++ b/runtime/gc_glue_java/MarkingSchemeRootMarker.cpp\n@@ -46,20 +46,32 @@ MM_MarkingSchemeRootMarker::doStackSlot(omrobjectptr_t *slotPtr, void *walkState\n \tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n \t\t/* heap object - validate and mark */\n \t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(_env));\n-\t\t_markingScheme->inlineMarkObject(_env, object);\n-\n+\t\tdoSlot(slotPtr);\n \t} else if (NULL != object) {\n \t\t/* stack object - just validate */\n \t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(_env));\n \t}\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MarkingSchemeRootMarker::doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tomrobjectptr_t object = *slotPtr;\n+\tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n+\t\tdoSlot(slotPtr);\n+\t} else if (NULL != object) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n void\n MM_MarkingSchemeRootMarker::doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator)\n {\n \tomrobjectptr_t object = *slotPtr;\n \tif (_markingScheme->isHeapObject(object) && !_extensions->heap->objectIsInGap(object)) {\n-\t\t_markingScheme->inlineMarkObject(_env, object);\n+\t\tdoSlot(slotPtr);\n \t} else if (NULL != object) {\n \t\tAssert_MM_true(vmthreaditerator_state_monitor_records == vmThreadIterator->getState());\n \t}\ndiff --git a/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp b/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\nindex 366d853c035..9ee98d4ac6f 100644\n--- a/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\n+++ b/runtime/gc_glue_java/MarkingSchemeRootMarker.hpp\n@@ -52,6 +52,9 @@ class MM_MarkingSchemeRootMarker : public MM_RootScanner\n \n \tvirtual void doSlot(omrobjectptr_t *slotPtr);\n \tvirtual void doStackSlot(omrobjectptr_t *slotPtr, void *walkState, const void* stackLocation);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvirtual void doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator);\n \tvirtual void doClass(J9Class *clazz);\n \tvirtual void doClassLoader(J9ClassLoader *classLoader);\ndiff --git a/runtime/gc_glue_java/MetronomeDelegate.cpp b/runtime/gc_glue_java/MetronomeDelegate.cpp\nindex b9cbe0f858b..a793cb26f76 100644\n--- a/runtime/gc_glue_java/MetronomeDelegate.cpp\n+++ b/runtime/gc_glue_java/MetronomeDelegate.cpp\n@@ -31,6 +31,9 @@\n #include \"ClassLoaderLinkedListIterator.hpp\"\n #include \"ClassLoaderManager.hpp\"\n #include \"ClassLoaderSegmentIterator.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"EnvironmentRealtime.hpp\"\n #include \"FinalizableClassLoaderBuffer.hpp\"\n #include \"FinalizableObjectBuffer.hpp\"\n@@ -1633,30 +1636,46 @@ MM_MetronomeDelegate::unsetUnmarkedImpliesCleared()\n }\n \n void\n-stackSlotIteratorForRealtimeGC(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n+MM_MetronomeDelegate::doSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr)\n {\n-\tStackIteratorData4RealtimeMarkingScheme *data = (StackIteratorData4RealtimeMarkingScheme *)localData;\n-\tMM_RealtimeMarkingScheme *realtimeMarkingScheme = data->realtimeMarkingScheme;\n-\tMM_EnvironmentRealtime *env = data->env;\n-\n \tJ9Object *object = *slotPtr;\n-\tif (realtimeMarkingScheme->isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(env));\n-\t\tif (MUTATOR_THREAD == env->getThreadType()) {\n-\t\t\t/* special handle by mutator thread for preMountContinuation case */\n-\t\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n-\t\t\t((MM_RealtimeAccessBarrier *)extensions->accessBarrier)->rememberObject(env, object);\n-\t\t} else {\n-\t\t\t/* scan object by the GC Thread */\n-\t\t\trealtimeMarkingScheme->markObject(env, object);\n-\t\t}\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(env));\n+\tif (MUTATOR_THREAD == env->getThreadType()) {\n+\t\t/* special handle by mutator thread for preMountContinuation case */\n+\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n+\t\t((MM_RealtimeAccessBarrier *)extensions->accessBarrier)->rememberObject(env, object);\n+\t} else {\n+\t\t/* scan object by the GC Thread */\n+\t\t_markingScheme->markObject(env, object);\n \t}\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_MetronomeDelegate::doContinuationSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_MetronomeDelegate::doStackSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (_markingScheme->isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr);\n+\t}\n+}\n+\n+void\n+stackSlotIteratorForRealtimeGC(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tStackIteratorData4RealtimeMarkingScheme *data = (StackIteratorData4RealtimeMarkingScheme *)localData;\n+\tdata->metronomeDelegate->doStackSlot(data->env, slotPtr, walkState, stackLocation);\n+}\n+\n void\n MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J9Object *objectPtr, bool beingMounted)\n {\n@@ -1665,7 +1684,7 @@ MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J\n \tconst bool isGlobalGC = true;\n \tif (MM_GCExtensions::needScanStacksForContinuationObject(currentThread, objectPtr, isConcurrentGC, isGlobalGC, beingMounted)) {\n \t\tStackIteratorData4RealtimeMarkingScheme localData;\n-\t\tlocalData.realtimeMarkingScheme = _markingScheme;\n+\t\tlocalData.metronomeDelegate = this;\n \t\tlocalData.env = env;\n \t\tlocalData.fromObject = objectPtr;\n \n@@ -1676,6 +1695,16 @@ MM_MetronomeDelegate::scanContinuationNativeSlots(MM_EnvironmentRealtime *env, J\n \t\t/* In STW GC there are no racing carrier threads doing mount and no need for the synchronization. */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForRealtimeGC, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/MetronomeDelegate.hpp b/runtime/gc_glue_java/MetronomeDelegate.hpp\nindex bb651dedfad..54b55162f96 100644\n--- a/runtime/gc_glue_java/MetronomeDelegate.hpp\n+++ b/runtime/gc_glue_java/MetronomeDelegate.hpp\n@@ -37,6 +37,9 @@\n #include \"Scheduler.hpp\"\n #include \"StackSlotValidator.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_HeapRegionDescriptorRealtime;\n class MM_RealtimeMarkingSchemeRootMarker;\n class MM_RealtimeRootScanner;\n@@ -58,6 +61,12 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n \tstatic int J9THREAD_PROC metronomeAlarmThreadWrapper(void *userData);\n \tstatic uintptr_t signalProtectedFunction(J9PortLibrary *privatePortLibrary, void *userData);\n \n+\tMMINLINE void doSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentRealtime *env, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n+\n \tMM_MetronomeDelegate(MM_EnvironmentBase *env) :\n \t\t_extensions(MM_GCExtensions::getExtensions(env)),\n \t\t_realtimeGC(NULL),\n@@ -580,7 +589,7 @@ class MM_MetronomeDelegate : public MM_BaseNonVirtual\n };\n \n typedef struct StackIteratorData4RealtimeMarkingScheme {\n-\tMM_RealtimeMarkingScheme *realtimeMarkingScheme;\n+\tMM_MetronomeDelegate *metronomeDelegate;\n \tMM_EnvironmentRealtime *env;\n \tJ9Object *fromObject;\n } StackIteratorData4RealtimeMarkingScheme;\ndiff --git a/runtime/gc_glue_java/ScavengerDelegate.cpp b/runtime/gc_glue_java/ScavengerDelegate.cpp\nindex 14edc04f5f8..bd2737ddc70 100644\n--- a/runtime/gc_glue_java/ScavengerDelegate.cpp\n+++ b/runtime/gc_glue_java/ScavengerDelegate.cpp\n@@ -53,6 +53,9 @@\n #include \"ConcurrentSweepScheme.hpp\"\n #endif /* J9VM_GC_CONCURRENT_SWEEP */\n #include \"ConfigurationDelegate.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"ContinuationStats.hpp\"\n #include \"EnvironmentStandard.hpp\"\n #include \"ExcessiveGCStats.hpp\"\n@@ -105,6 +108,7 @@\n #include \"ScavengerStats.hpp\"\n #include \"ScavengerBackOutScanner.hpp\"\n #include \"SlotObject.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"StandardAccessBarrier.hpp\"\n #include \"SublistFragment.hpp\"\n #include \"StringTable.hpp\"\n@@ -305,33 +309,53 @@ MM_ScavengerDelegate::internalGarbageCollect_shouldPercolateGarbageCollect(MM_En\n }\n \n void\n-MM_ScavengerDelegate::doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember)\n+MM_ScavengerDelegate::doSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember)\n {\n \tMM_Scavenger *scavenger = _extensions->scavenger;\n-\tif (scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n-\t\tswitch (reason) {\n-\t\tcase SCAN_REASON_SCAVENGE:\n-\t\t\t*shouldRemember |= scavenger->copyObjectSlot(env, slotPtr);\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_FIXUP:\n+\n+\tswitch (reason) {\n+\tcase SCAN_REASON_SCAVENGE:\n+\t\t*shouldRemember |= scavenger->copyObjectSlot(env, slotPtr);\n+\t\tbreak;\n+\tcase SCAN_REASON_FIXUP:\n #if defined(OMR_GC_CONCURRENT_SCAVENGER)\n \t\t\tscavenger->fixupSlot(slotPtr);\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_BACKOUT:\n+\t\tbreak;\n+\tcase SCAN_REASON_BACKOUT:\n #if defined(OMR_GC_CONCURRENT_SCAVENGER)\n-\t\t\tif (_extensions->concurrentScavenger) {\n-\t\t\t\tscavenger->fixupSlotWithoutCompression(slotPtr);\n-\t\t\t} else\n+\t\tif (_extensions->concurrentScavenger) {\n+\t\t\tscavenger->fixupSlotWithoutCompression(slotPtr);\n+\t\t} else\n #endif /* OMR_GC_CONCURRENT_SCAVENGER */\n-\t\t\t{\n-\t\t\t\tscavenger->backOutFixSlotWithoutCompression(slotPtr);\n-\t\t\t}\n-\t\t\tbreak;\n-\t\tcase SCAN_REASON_SHOULDREMEMBER:\n-\t\t\t*shouldRemember |= scavenger->shouldRememberSlot(slotPtr);\n-\t\t\tbreak;\n+\t\t{\n+\t\t\tscavenger->backOutFixSlotWithoutCompression(slotPtr);\n \t\t}\n+\t\tbreak;\n+\tcase SCAN_REASON_SHOULDREMEMBER:\n+\t\t*shouldRemember |= scavenger->shouldRememberSlot(slotPtr);\n+\t\tbreak;\n+\t}\n+}\n+\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_ScavengerDelegate::doContinuationSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (_extensions->scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr, reason, shouldRemember);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_ScavengerDelegate::doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, void *walkState, const void* stackLocation)\n+{\n+\tif (_extensions->scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\tdoSlot(env, slotPtr, reason, shouldRemember);\n \t}\n }\n \n@@ -342,7 +366,7 @@ void\n stackSlotIteratorForScavenge(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4Scavenge *data = (StackIteratorData4Scavenge *)localData;\n-\tdata->scavengerDelegate->doStackSlot(data->env, slotPtr, data->reason, data->shouldRemember);\n+\tdata->scavengerDelegate->doStackSlot(data->env, slotPtr, data->reason, data->shouldRemember, walkState, stackLocation);\n }\n \n bool\n@@ -369,6 +393,16 @@ MM_ScavengerDelegate::scanContinuationNativeSlots(MM_EnvironmentStandard *env, o\n \t\tlocalData.shouldRemember = &shouldRemember;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForScavenge, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, slotPtr,reason, &shouldRemember, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\ndiff --git a/runtime/gc_glue_java/ScavengerDelegate.hpp b/runtime/gc_glue_java/ScavengerDelegate.hpp\nindex 708045ee703..028ae3e83bc 100644\n--- a/runtime/gc_glue_java/ScavengerDelegate.hpp\n+++ b/runtime/gc_glue_java/ScavengerDelegate.hpp\n@@ -43,6 +43,9 @@\n #include \"MarkingScheme.hpp\"\n #include \"ScanClassesMode.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_ObjectScanner;\n class GC_VMThreadIterator;\n class MM_CompactScheme;\n@@ -177,7 +180,11 @@ class MM_ScavengerDelegate : public MM_BaseNonVirtual {\n \tvoid poisonSlots(MM_EnvironmentBase *env);\n \tvoid healSlots(MM_EnvironmentBase *env);\n #endif /* defined(OMR_ENV_DATA64) && defined(OMR_GC_FULL_POINTERS) */\n-\tvoid doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember);\n+\tMMINLINE void doSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentStandard *env, omrobjectptr_t *slotPtr, MM_ScavengeScanReason reason, bool *shouldRemember, void *walkState, const void* stackLocation);\n \n \tbool initialize(MM_EnvironmentBase *env);\n \tvoid tearDown(MM_EnvironmentBase *env);\ndiff --git a/runtime/gc_glue_java/ScavengerRootScanner.hpp b/runtime/gc_glue_java/ScavengerRootScanner.hpp\nindex 8035184b13a..eba17f59964 100644\n--- a/runtime/gc_glue_java/ScavengerRootScanner.hpp\n+++ b/runtime/gc_glue_java/ScavengerRootScanner.hpp\n@@ -110,6 +110,22 @@ class MM_ScavengerRootScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t/*\n+\t * Handle continuation slots specially so that we can auto-remember referenced objects\n+\t */\n+\tvirtual void\n+\tdoContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+\t{\n+\t\tMM_EnvironmentStandard *envStandard = MM_EnvironmentStandard::getEnvironment(_env);\n+\t\tif (_scavenger->isHeapObject(*slotPtr) && !_extensions->heap->objectIsInGap(*slotPtr)) {\n+\t\t\t_scavenger->copyAndForwardThreadSlot(envStandard, slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/*\n \t * Handle stack and thread slots specially so that we can auto-remember stack-referenced objects\n \t */\ndiff --git a/runtime/gc_glue_java/ScavengerThreadRescanner.hpp b/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\nindex 51678d19fc7..3d014033266 100644\n--- a/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\n+++ b/runtime/gc_glue_java/ScavengerThreadRescanner.hpp\n@@ -54,6 +54,12 @@ class MM_ScavengerThreadRescanner : public MM_RootScanner\n \t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(omrobjectptr_t *slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\t_scavenger->rescanThreadSlot(MM_EnvironmentStandard::getEnvironment(_env), slotPtr);\n \t}\ndiff --git a/runtime/gc_include/j9modron.h b/runtime/gc_include/j9modron.h\nindex 59884c72f9d..02e6489be73 100644\n--- a/runtime/gc_include/j9modron.h\n+++ b/runtime/gc_include/j9modron.h\n@@ -131,6 +131,8 @@ typedef jvmtiIterationControl J9MODRON_REFERENCE_CHAIN_WALKER_CALLBACK(J9Object\n #define J9GC_ROOT_TYPE_JVMTI_TAG_REF 21\n #define J9GC_ROOT_TYPE_OWNABLE_SYNCHRONIZER_OBJECT 22\n #define J9GC_ROOT_TYPE_CONTINUATION_OBJECT 23\n+#define J9GC_ROOT_TYPE_CONTINUATION_MONITOR 24\n+#define J9GC_ROOT_TYPE_CONTINUATION_VTHREAD 25\n \n #define J9GC_REFERENCE_TYPE_UNKNOWN -1 /**< reference to an object that fell through a default state in an iterator */\n #define J9GC_REFERENCE_TYPE_FIELD -2\t/**< field reference to an object */\ndiff --git a/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp b/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\nindex a0d4cfa3c27..eca3d9f42a9 100644\n--- a/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\n+++ b/runtime/gc_realtime/RealtimeMarkingSchemeRootMarker.hpp\n@@ -105,9 +105,9 @@ class MM_RealtimeMarkingSchemeRootMarker : public MM_RealtimeRootScanner\n \t * @see MM_Metronome::markObject()\n \t */\n \tvirtual void\n-\tdoSlot(J9Object** slot)\n+\tdoSlot(J9Object **slotPtr)\n \t{\n-\t\t_markingScheme->markObject(_env, *slot);\n+\t\t_markingScheme->markObject(_env, *slotPtr);\n \t}\n \t\n \tvirtual void\n@@ -117,18 +117,29 @@ class MM_RealtimeMarkingSchemeRootMarker : public MM_RealtimeRootScanner\n \t\tif (_markingScheme->isHeapObject(object)) {\n \t\t\t/* heap object - validate and mark */\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, object, stackLocation, walkState).validate(_env));\n-\t\t\t_markingScheme->markObject(_env, object);\n+\t\t\tdoSlot(slotPtr);\n \t\t} else if (NULL != object) {\n \t\t\t/* stack object - just validate */\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, object, stackLocation, walkState).validate(_env));\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tJ9Object *object = *slotPtr;\n+\t\tif (_markingScheme->isHeapObject(object)) {\n+\t\t\tdoSlot(slotPtr);\n+\t\t} else if (NULL != object) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void\n \tdoVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tJ9Object *object = *slotPtr;\n \t\tif (_markingScheme->isHeapObject(object)) {\n-\t\t\t_markingScheme->markObject(_env, object);\n+\t\t\tdoSlot(slotPtr);\n \t\t} else if (NULL != object) {\n \t\t\tAssert_MM_true(vmthreaditerator_state_monitor_records == vmThreadIterator->getState());\n \t\t}\ndiff --git a/runtime/gc_structs/CMakeLists.txt b/runtime/gc_structs/CMakeLists.txt\nindex 9fdebffe041..db59bdf533c 100644\n--- a/runtime/gc_structs/CMakeLists.txt\n+++ b/runtime/gc_structs/CMakeLists.txt\n@@ -38,6 +38,7 @@ set(gc_structs_sources\n \tConstantDynamicSlotIterator.cpp\n \tConstantPoolClassSlotIterator.cpp\n \tConstantPoolObjectSlotIterator.cpp\n+\tContinuationSlotIterator.cpp\n \tJVMTIObjectTagTableIterator.cpp\n \tMethodTypesIterator.cpp\n \tMixedObjectDeclarationOrderIterator.cpp\ndiff --git a/runtime/gc_structs/ContinuationSlotIterator.cpp b/runtime/gc_structs/ContinuationSlotIterator.cpp\nnew file mode 100644\nindex 00000000000..5cacc43e4a5\n--- /dev/null\n+++ b/runtime/gc_structs/ContinuationSlotIterator.cpp\n@@ -0,0 +1,61 @@\n+\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup GC_Structs\n+ */\n+\n+#include \"j9.h\"\n+#include \"j9cfg.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+\n+/**\n+ * @return the next slot in the J9VMContinuation\n+ * @return NULL if there are no more such slots\n+ */\n+j9object_t *\n+GC_ContinuationSlotIterator::nextSlot()\n+{\n+\tj9object_t *ret = NULL;\n+\tif (NULL != _monitorRecord) {\n+\t\tJ9MonitorEnterRecord *currentMonitorRecord = _monitorRecord;\n+\t\t_monitorRecord = currentMonitorRecord->next;\n+\t\t_state = state_monitor_records;\n+\t\tret = &currentMonitorRecord->object;\n+\t} else if (NULL != _jniMonitorRecord) {\n+\t\tJ9MonitorEnterRecord *currentMonitorRecord = _jniMonitorRecord;\n+\t\t_jniMonitorRecord = currentMonitorRecord->next;\n+\t\t_state = state_monitor_records;\n+\t\tret = &currentMonitorRecord->object;\n+\t} else if (NULL != _vthread) {\n+\t\t_state = state_vthread;\n+\t\tret = _vthread;\n+\t\t_vthread = NULL;\n+\t} else {\n+\t\t_state = state_end;\n+\t}\n+\treturn ret;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\ndiff --git a/runtime/gc_structs/ContinuationSlotIterator.hpp b/runtime/gc_structs/ContinuationSlotIterator.hpp\nnew file mode 100644\nindex 00000000000..4eb84640f1a\n--- /dev/null\n+++ b/runtime/gc_structs/ContinuationSlotIterator.hpp\n@@ -0,0 +1,96 @@\n+\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup GC_Structs\n+ */\n+\n+#if !defined(CONTINUATIONSLOTITERATOR_HPP_)\n+#define CONTINUATIONSLOTITERATOR_HPP_\n+#if JAVA_SPEC_VERSION >= 24\n+\n+#include \"j9.h\"\n+#include \"j9cfg.h\"\n+#include \"modron.h\"\n+\n+/**\n+ * Iterate over monitor records slots and vthread slot in a J9VMContinuation.\n+ * Used by ScanContinuationNativeSlots() (JAVA_SPEC_VERSION >= 24 only).\n+ * @ingroup GC_Structs\n+ */\n+class GC_ContinuationSlotIterator\n+{\n+public:\n+\t/**\n+\t * State constants representing the current stage of the iteration process\n+\t */\n+\tenum State {\n+\t\tstate_start = 0,\n+\t\tstate_monitor_records,\n+\t\tstate_vthread,\n+\t\tstate_end\n+\t};\n+\n+protected:\n+\tJ9VMThread *_vmThread;\n+\tState _state;\n+\n+\tj9object_t *_vthread;\n+\tJ9MonitorEnterRecord *_monitorRecord;\n+\tJ9MonitorEnterRecord *_jniMonitorRecord;\n+\n+public:\n+\tGC_ContinuationSlotIterator(J9VMThread *vmThread, J9VMContinuation *continuation)\n+\t\t: _vmThread(vmThread)\n+\t\t, _state(state_start)\n+\t\t, _vthread(&continuation->vthread)\n+\t\t, _monitorRecord(continuation->monitorEnterRecords)\n+\t\t, _jniMonitorRecord(continuation->jniMonitorEnterRecords)\n+\t{};\n+\n+\t/**\n+\t * @return @ref ContinuationSlotIteratorState representing the current state (stage\n+\t * of the iteration process)\n+\t */\n+\tMMINLINE int\n+\tgetState()\n+\t{\n+\t\treturn _state;\n+\t}\n+\n+\t/**\n+\t * Get the J9VMThread * for the thread being iterated\n+\t * @return _vmThread - the J9VMThread being iterated.\n+\t */\n+\tMMINLINE J9VMThread *\n+\tgetVMThread()\n+\t{\n+\t\treturn _vmThread;\n+\t}\n+\n+\tj9object_t *nextSlot();\n+};\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+#endif /* CONTINUATIONSLOTITERATOR_HPP_ */\ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.cpp b/runtime/gc_vlhgc/CopyForwardScheme.cpp\nindex 8e2afee8344..a6fa81fe80e 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.cpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.cpp\n@@ -51,6 +51,9 @@\n #include \"CompactGroupManager.hpp\"\n #include \"CompactGroupPersistentStats.hpp\"\n #include \"CompressedCardTable.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CopyForwardCompactGroup.hpp\"\n #include \"CopyForwardGMPCardCleaner.hpp\"\n #include \"CopyForwardNoGMPCardCleaner.hpp\"\n@@ -2310,17 +2313,30 @@ MM_CopyForwardScheme::scanOwnableSynchronizerObjectSlots(MM_EnvironmentVLHGC *en\n }\n \n void\n-MM_CopyForwardScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+MM_CopyForwardScheme::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n+{\n+\t/* the reservingContext is base on related Continuation object */\n+\tMM_AllocationContextTarok *reservingContext = getContextForHeapAddress(fromObject);\n+\tcopyAndForward(env, reservingContext, fromObject, slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_CopyForwardScheme::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n {\n \tif (isHeapObject(*slotPtr)) {\n-\t\t/* heap object - validate and copyforward */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::COULD_BE_FORWARDED, *slotPtr, stackLocation, walkState).validate(env));\n-\t\tJ9VMThread *thread = ((J9StackWalkState *)walkState)->currentThread;\n-\t\tMM_AllocationContextTarok *reservingContext = (MM_AllocationContextTarok *)MM_EnvironmentVLHGC::getEnvironment(thread)->getAllocationContext();\n-\t\tcopyAndForward(MM_EnvironmentVLHGC::getEnvironment(env), reservingContext, fromObject, slotPtr);\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t} else if (NULL != *slotPtr) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(env));\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_CopyForwardScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -2355,6 +2371,15 @@ MM_CopyForwardScheme::scanContinuationNativeSlots(MM_EnvironmentVLHGC *env, MM_A\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForCopyForwardScheme, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t}\n }\n \n@@ -3830,6 +3855,18 @@ class MM_CopyForwardSchemeRootScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n+\t\t\tJ9VMThread *thread = continuationSlotIterator->getVMThread();\n+\t\t\tMM_AllocationContextTarok *reservingContext = (MM_AllocationContextTarok *)MM_EnvironmentVLHGC::getEnvironment(thread)->getAllocationContext();\n+\t\t\t_copyForwardScheme->copyAndForward(MM_EnvironmentVLHGC::getEnvironment(_env), reservingContext, slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tif (_copyForwardScheme->isHeapObject(* slotPtr)) {\n \t\t\t/* we know that threads are bound to nodes so relocalize this object into the node of the thread which directly references it */\n@@ -4572,6 +4609,16 @@ class MM_CopyForwardVerifyScanner : public MM_RootScanner\n \t\t}\n \t}\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n+\t\t\tverifyObject(slotPtr);\n+\t\t} else if (NULL != *slotPtr) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tif (_copyForwardScheme->isHeapObject(*slotPtr)) {\n \t\t\tverifyObject(slotPtr);\ndiff --git a/runtime/gc_vlhgc/CopyForwardScheme.hpp b/runtime/gc_vlhgc/CopyForwardScheme.hpp\nindex 0606bf0532e..0d060c8a89b 100644\n--- a/runtime/gc_vlhgc/CopyForwardScheme.hpp\n+++ b/runtime/gc_vlhgc/CopyForwardScheme.hpp\n@@ -39,6 +39,9 @@\n #include \"GCExtensions.hpp\"\n #include \"ModronTypes.hpp\"\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class GC_SlotObject;\n class MM_AllocationContextTarok;\n class MM_CardCleaner;\n@@ -1129,6 +1132,11 @@ class MM_CopyForwardScheme : public MM_BaseNonVirtual\n \t}\n \n \tvoid abandonTLHRemainders(MM_EnvironmentVLHGC *env);\n+\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \n \tfriend class MM_CopyForwardGMPCardCleaner;\ndiff --git a/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp b/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\nindex 012456ab8f0..2bdeb91a46c 100644\n--- a/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\n+++ b/runtime/gc_vlhgc/GlobalMarkCardScrubber.cpp\n@@ -30,6 +30,9 @@\n #include \"CardTable.hpp\"\n #include \"ClassLoaderClassesIterator.hpp\"\n #include \"ClassIterator.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CycleState.hpp\"\n #include \"EnvironmentVLHGC.hpp\"\n #include \"HeapMapWordIterator.hpp\"\n@@ -182,7 +185,9 @@ void\n stackSlotIteratorForGlobalMarkCardScrubber(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4GlobalMarkCardScrubber *data = (StackIteratorData4GlobalMarkCardScrubber *)localData;\n-\tif (*data->doScrub) {\n+\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(javaVM);\n+\tif (*data->doScrub && (extensions->heap->getHeapBase() <= *slotPtr) && (extensions->heap->getHeapTop() > *slotPtr)) {\n+\t\t/* *slotPtr is heap object */\n \t\t*data->doScrub = data->globalMarkCardScrubber->mayScrubReference(data->env, data->fromObject, *slotPtr);\n \t}\n \t/* It's unfortunate, but we probably cannot terminate iteration of slots once we do see for one slot that we cannot scurb */\n@@ -203,6 +208,21 @@ bool MM_GlobalMarkCardScrubber::scrubContinuationNativeSlots(MM_EnvironmentVLHGC\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForGlobalMarkCardScrubber, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\t\tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(env);\n+\n+\t\tJ9Object **slotPtr = NULL;\n+\t\twhile (doScrub && (NULL != (slotPtr = continuationSlotIterator.nextSlot()))) {\n+\t\t\tif ((extensions->heap->getHeapBase() <= *slotPtr) && (extensions->heap->getHeapTop() > *slotPtr)) {\n+\t\t\t\t/* *slotPtr is heap object */\n+\t\t\t\tdoScrub = mayScrubReference(env, objectPtr, *slotPtr);\n+\t\t\t}\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n \treturn doScrub;\n }\ndiff --git a/runtime/gc_vlhgc/GlobalMarkingScheme.cpp b/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\nindex 9e75f9019ec..d6e7d2b1c51 100644\n--- a/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\n+++ b/runtime/gc_vlhgc/GlobalMarkingScheme.cpp\n@@ -40,6 +40,9 @@\n #include \"ClassLoaderRememberedSet.hpp\"\n #include \"ClassLoaderSegmentIterator.hpp\"\n #include \"ClassModel.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"CycleState.hpp\"\n #include \"Debug.hpp\"\n #include \"EnvironmentVLHGC.hpp\"\n@@ -775,17 +778,29 @@ MM_GlobalMarkingScheme::scanPointerArrayObject(MM_EnvironmentVLHGC *env, J9Index\n }\n \n void\n-MM_GlobalMarkingScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n-{\n-\tJ9Object *object = *slotPtr;\n-\tif (isHeapObject(object)) {\n-\t\t/* heap object - validate and mark */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(0, *slotPtr, stackLocation, walkState).validate(env));\n-\t\tmarkObject(env, object);\n-\t\trememberReferenceIfRequired(env, fromObject, object);\n-\t} else if (NULL != object) {\n-\t\t/* stack object - just validate */\n-\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(env));\n+MM_GlobalMarkingScheme::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n+{\n+\tmarkObject(env, *slotPtr);\n+\trememberReferenceIfRequired(env, fromObject, *slotPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_GlobalMarkingScheme::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_GlobalMarkingScheme::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -815,6 +830,16 @@ MM_GlobalMarkingScheme::scanContinuationNativeSlots(MM_EnvironmentVLHGC *env, J9\n #endif /* J9VM_GC_DYNAMIC_CLASS_UNLOADING */\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForGlobalMarkingScheme, stackFrameClassWalkNeeded, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t\tif (isConcurrentGC) {\n \t\t\tMM_GCExtensions::exitContinuationConcurrentGCScan(currentThread, objectPtr, isGlobalGC);\n \t\t}\n@@ -1163,7 +1188,18 @@ class MM_GlobalMarkingSchemeRootMarker : public MM_RootScanner\n \t\t\tAssert_MM_validStackSlot(MM_StackSlotValidator(MM_StackSlotValidator::NOT_ON_HEAP, *slotPtr, stackLocation, walkState).validate(_env));\n \t\t}\n \t}\n-\t\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\tvirtual void doContinuationSlot(J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator) {\n+\t\tJ9Object *object = *slotPtr;\n+\t\tif (_markingScheme->isHeapObject(object)) {\n+\t\t\t_markingScheme->markObject((MM_EnvironmentVLHGC *)_env, object);\n+\t\t} else if (NULL != object) {\n+\t\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tvirtual void doVMThreadSlot(J9Object **slotPtr, GC_VMThreadIterator *vmThreadIterator) {\n \t\tJ9Object *object = *slotPtr;\n \t\tif (_markingScheme->isHeapObject(object)) {\ndiff --git a/runtime/gc_vlhgc/GlobalMarkingScheme.hpp b/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\nindex 3f2dbfba7fe..d8624890aa2 100644\n--- a/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\n+++ b/runtime/gc_vlhgc/GlobalMarkingScheme.hpp\n@@ -44,6 +44,9 @@\n /**\n  * @}\n  */\n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_CardCleaner;\n class MM_Collector;\n class MM_CycleState;\n@@ -513,6 +516,10 @@ class MM_GlobalMarkingScheme : public MM_BaseVirtual\n \t */\n \tvoid flushBuffers(MM_EnvironmentVLHGC *env);\n \t\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \t/**\n \t * Create a GlobalMarkingScheme object.\ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.cpp b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\nindex f9dd418d449..36c0763faea 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.cpp\n@@ -45,6 +45,9 @@\n #include \"CompactGroupManager.hpp\"\n #include \"ContinuationObjectBuffer.hpp\"\n #include \"ContinuationObjectList.hpp\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationSlotIterator.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #include \"VMHelpers.hpp\"\n #include \"WriteOnceCompactor.hpp\"\n #include \"Debug.hpp\"\n@@ -81,6 +84,7 @@\n #include \"SparseVirtualMemory.hpp\"\n #endif /* defined(J9VM_GC_SPARSE_HEAP_ALLOCATION) */\n #include \"SlotObject.hpp\"\n+#include \"StackSlotValidator.hpp\"\n #include \"SublistPool.hpp\"\n #include \"SublistPuddle.hpp\"\n #include \"ParallelTask.hpp\"\n@@ -1213,15 +1217,33 @@ MM_WriteOnceCompactor::fixupMixedObject(MM_EnvironmentVLHGC* env, J9Object *obje\n }\n \n void\n-MM_WriteOnceCompactor::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slot)\n+MM_WriteOnceCompactor::doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr)\n {\n-\tJ9Object *pointer = *slot;\n-\tif (isHeapObject(pointer)) {\n-\t\tJ9Object *forwardedPtr = getForwardingPtr(pointer);\n-\t\tif (pointer != forwardedPtr) {\n-\t\t\t*slot = forwardedPtr;\n-\t\t}\n-\t\t_interRegionRememberedSet->rememberReferenceForCompact(env, fromObject, forwardedPtr);\n+\tJ9Object *pointer = *slotPtr;\n+\tJ9Object *forwardedPtr = getForwardingPtr(pointer);\n+\tif (pointer != forwardedPtr) {\n+\t\t*slotPtr = forwardedPtr;\n+\t}\n+\t_interRegionRememberedSet->rememberReferenceForCompact(env, fromObject, forwardedPtr);\n+}\n+\n+#if JAVA_SPEC_VERSION >= 24\n+void\n+MM_WriteOnceCompactor::doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n+\t} else if (NULL != *slotPtr) {\n+\t\tAssert_MM_true(GC_ContinuationSlotIterator::state_monitor_records == continuationSlotIterator->getState());\n+\t}\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n+void\n+MM_WriteOnceCompactor::doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object **slotPtr, J9StackWalkState *walkState, const void *stackLocation)\n+{\n+\tif (isHeapObject(*slotPtr)) {\n+\t\tdoSlot(env, fromObject, slotPtr);\n \t}\n }\n \n@@ -1232,7 +1254,7 @@ void\n stackSlotIteratorForWriteOnceCompactor(J9JavaVM *javaVM, J9Object **slotPtr, void *localData, J9StackWalkState *walkState, const void *stackLocation)\n {\n \tStackIteratorData4WriteOnceCompactor *data = (StackIteratorData4WriteOnceCompactor *)localData;\n-\tdata->writeOnceCompactor->doStackSlot(data->env, data->fromObject, slotPtr);\n+\tdata->writeOnceCompactor->doStackSlot(data->env, data->fromObject, slotPtr, walkState, stackLocation);\n }\n \n void\n@@ -1253,6 +1275,16 @@ MM_WriteOnceCompactor::fixupContinuationNativeSlots(MM_EnvironmentVLHGC* env, J9\n \t\tlocalData.fromObject = objectPtr;\n \n \t\tGC_VMThreadStackSlotIterator::scanContinuationSlots(currentThread, objectPtr, (void *)&localData, stackSlotIteratorForWriteOnceCompactor, false, false);\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, objectPtr);\n+\t\tGC_ContinuationSlotIterator continuationSlotIterator(currentThread, continuation);\n+\n+\t\twhile (J9Object **slotPtr = continuationSlotIterator.nextSlot()) {\n+\t\t\tdoContinuationSlot(env, objectPtr, slotPtr, &continuationSlotIterator);\n+\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t}\n }\n \n@@ -1664,7 +1696,7 @@ class MM_WriteOnceCompactFixupRoots : public MM_RootScanner {\n \n \t}\n \t\n-\tvirtual void doSlot(J9Object** slot)\n+\tvirtual void doSlot(J9Object **slot)\n \t{\n \t\tJ9Object *pointer = *slot;\n \t\tif ((pointer >= _heapBase) && (pointer < _heapTop)) {\n@@ -1837,7 +1869,7 @@ class MM_WriteOnceCompactorCheckMarkRoots : public MM_RootScanner {\n \t\t_typeId = __FUNCTION__;\n \t}\n \n-\tvirtual void doSlot(J9Object** slot)\n+\tvirtual void doSlot(J9Object **slot)\n \t{\n \t}\n \ndiff --git a/runtime/gc_vlhgc/WriteOnceCompactor.hpp b/runtime/gc_vlhgc/WriteOnceCompactor.hpp\nindex 1743ad7a7f2..180e9870e0d 100644\n--- a/runtime/gc_vlhgc/WriteOnceCompactor.hpp\n+++ b/runtime/gc_vlhgc/WriteOnceCompactor.hpp\n@@ -47,6 +47,9 @@\n \n #if defined(J9VM_GC_MODRON_COMPACTION)\n \n+#if JAVA_SPEC_VERSION >= 24\n+class GC_ContinuationSlotIterator;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n class MM_AllocateDescription;\n class MM_WriteOnceCompactor;\n class MM_ParallelDispatcher;\n@@ -608,7 +611,11 @@ class MM_WriteOnceCompactor : public MM_BaseVirtual\n \t * @param workStackBaseHighPriority[in/out] The \"high priority\" work stack base.  This reference parameter will be updated before the function returns is region is high priority\n \t */\n \tvoid pushRegionOntoWorkStack(MM_HeapRegionDescriptorVLHGC **workStackBase, MM_HeapRegionDescriptorVLHGC **workStackBaseHighPriority, MM_HeapRegionDescriptorVLHGC *region);\n-\tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slot);\n+\tMMINLINE void doSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr);\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid doContinuationSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, GC_ContinuationSlotIterator *continuationSlotIterator);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\tvoid doStackSlot(MM_EnvironmentVLHGC *env, J9Object *fromObject, J9Object** slotPtr, J9StackWalkState *walkState, const void *stackLocation);\n \n \tfriend class MM_WriteOnceCompactFixupRoots;\n \tfriend class MM_ParallelWriteOnceCompactTask;\n",
    "eac2531c1e0e699eb1086d704be762f8159027b1": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex ad3304e1210..4b74769d7ac 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -2943,7 +2943,7 @@ class INTERPRETER_CLASS\n \t\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n \t\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n \t\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n-\t\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tif ((NULL != head) && (NULL != head->vthread)) {\n \t\t\t\t\t\t\tif (omrthread_monitor_notify == notifyFunction) {\n \t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n \t\t\t\t\t\t\t\thead->nextWaitingContinuation = _vm->blockedContinuations;\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 6aa706ee69b..eb251a92c43 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -845,6 +845,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n \t\t\t\t\t\tgoto done;\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t}\n \n \t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n@@ -877,6 +879,8 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n \t\t\t\t\t\tgoto done;\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n \t\t\t\t}\n \n \t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n",
    "d2811ca2ca2463508c521ed2848b0eee27f7c770": "diff --git a/runtime/oti/ContinuationHelpers.hpp b/runtime/oti/ContinuationHelpers.hpp\nindex 7c274a98b89..e48e717a1c2 100644\n--- a/runtime/oti/ContinuationHelpers.hpp\n+++ b/runtime/oti/ContinuationHelpers.hpp\n@@ -290,6 +290,39 @@ class VM_ContinuationHelpers {\n \t\t\t\t&& (0 == vmThread->continuationPinCount)\n \t\t\t\t&& (0 == vmThread->callOutCount));\n \t}\n+\n+\t/**\n+\t * Remove a continuation from the provided list.\n+\t *\n+\t * @param[in] list the list from which the continuation should be removed\n+\t * @param[in] continuation the continuation to be removed\n+\t *\n+\t * @return true if the continuation is found and removed from the list, otherwise false\n+\t */\n+\tstatic bool\n+\tremoveContinuationFromList(J9VMContinuation **list, J9VMContinuation *continuation)\n+\t{\n+\t\tbool foundInList = false;\n+\t\tJ9VMContinuation *previous = NULL;\n+\t\tJ9VMContinuation *current = *list;\n+\n+\t\twhile (NULL != current) {\n+\t\t\tif (continuation == current) {\n+\t\t\t\tfoundInList = true;\n+\t\t\t\tif (NULL == previous) {\n+\t\t\t\t\t*list = current->nextWaitingContinuation;\n+\t\t\t\t} else {\n+\t\t\t\t\tprevious->nextWaitingContinuation = current->nextWaitingContinuation;\n+\t\t\t\t}\n+\t\t\t\tcurrent->nextWaitingContinuation = NULL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tprevious = current;\n+\t\t\tcurrent = current->nextWaitingContinuation;\n+\t\t}\n+\n+\t\treturn foundInList;\n+\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n };\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 0dd1b5dd065..1e18cef4d7d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5462,6 +5462,7 @@ typedef struct J9VMContinuation {\n \tstruct J9MonitorEnterRecord* jniMonitorEnterRecords;\n \tj9object_t vthread;\n \tstruct J9VMContinuation* nextWaitingContinuation;\n+\tstruct J9ObjectMonitor* objectWaitMonitor;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 4b74769d7ac..744b384ea80 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -2952,14 +2952,14 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\tJ9VMContinuation *prev = NULL;\n+\t\t\t\t\t\t\t\twhile (NULL != next) {\n \t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n \t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tprev = next;\n \t\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\tprev->nextWaitingContinuation = _vm->blockedContinuations;\n \t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n \t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n \t\t\t\t\t\t\t}\n@@ -5174,7 +5174,7 @@ class INTERPRETER_CLASS\n \t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n \t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n-\t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\t/* Handle the virtual thread Object.wait call. */\n \t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n \t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t} else {\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex eb251a92c43..ade4cafb0c7 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -220,6 +220,7 @@ synchronizeWithConcurrentGCScan(J9VMThread *currentThread, j9object_t continuati\n BOOLEAN\n enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n {\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \tBOOLEAN result = TRUE;\n \tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n \tContinuationState volatile *continuationStatePtr = VM_ContinuationHelpers::getContinuationStateAddress(currentThread, continuationObject);\n@@ -232,7 +233,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\t\t/* Directly return result if the create code failed, exception is already set. */\n \t\t\treturn result;\n \t\t}\n-\t\tcurrentThread->javaVM->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n+\t\tvm->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n \n \t\tcontinuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n #if JAVA_SPEC_VERSION >= 24\n@@ -241,6 +242,33 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t}\n \tAssert_VM_notNull(continuation);\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tif (NULL != continuation->nextWaitingContinuation) {\n+\t\t/* Continuation is still in a blocked list. This can happen with TIMED_WAIT.\n+\t\t * It must be removed from the waiting list.\n+\t\t */\n+\t\tbool foundInBlockedContinuationList = false;\n+\t\tbool foundInMonitorList = false;\n+\n+\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\n+\t\tfoundInBlockedContinuationList = VM_ContinuationHelpers::removeContinuationFromList(\n+\t\t\t\t&vm->blockedContinuations, continuation);\n+\n+\t\tfoundInMonitorList = VM_ContinuationHelpers::removeContinuationFromList(\n+\t\t\t\t&continuation->objectWaitMonitor->waitingContinuations, continuation);\n+\n+\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\n+\t\tAssert_VM_true(foundInMonitorList || foundInMonitorList);\n+\n+\t\t/* Virtual can only be in one list at a time. */\n+\t\tAssert_VM_false(foundInBlockedContinuationList && foundInMonitorList);\n+\n+\t\tcontinuation->objectWaitMonitor = NULL;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/* let GC know we are mounting, so they don't need to scan us, or if there is already ongoing scan wait till it's complete. */\n \tcontinuationObject = synchronizeWithConcurrentGCScan(currentThread, continuationObject, continuationStatePtr);\n \n@@ -816,6 +844,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \tj9objectmonitor_t lock = 0;\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \n \tif (NULL != syncObj) {\n \t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n@@ -829,7 +858,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\tif (syncObj != object) {\n \t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n \t\t\t\t\tif (NULL != objectMonitor) {\n \t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n \t\t\t\t\t} else {\n@@ -863,7 +892,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\tif (syncObj != object) {\n \t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n \t\t\t\t\tif (NULL != objectMonitor) {\n \t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n \t\t\t\t\t} else {\n@@ -892,7 +921,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \tif (NULL != syncObj) {\n \t\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n-\t\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\t\tsyncObjectMonitor = monitorTablePeek(vm, syncObj);\n \t\t\tif (NULL != syncObjectMonitor) {\n \t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n \t\t\t} else {\n@@ -930,10 +959,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\t/* Add Continuation struct to the monitor's waiting list. */\n \t\t\tomrthread_monitor_exit(monitor);\n-\t\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n \t\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n \t\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n-\t\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tcurrentThread->currentContinuation->objectWaitMonitor = syncObjectMonitor;\n+\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n \t\t} else {\n \t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n \t\t}\n@@ -971,33 +1001,32 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \twhile (NULL == unblockedList) {\n \t\tif (NULL != vm->blockedContinuations) {\n restart:\n-\t\t\tJ9VMContinuation *listHead = vm->blockedContinuations;\n+\t\t\tJ9VMContinuation *previous = NULL;\n+\t\t\tJ9VMContinuation *current = vm->blockedContinuations;\n \t\t\tJ9VMContinuation *next = NULL;\n-\t\t\tvm->blockedContinuations = NULL;\n-\t\t\twhile (NULL != listHead) {\n+\t\t\twhile (NULL != current) {\n \t\t\t\tbool unblocked = false;\n-\t\t\t\tnext = listHead->nextWaitingContinuation;\n-\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, listHead->vthread);\n+\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, current->vthread);\n+\t\t\t\tnext = current->nextWaitingContinuation;\n \t\t\t\t/* Skip vthreads that are still in transition. */\n \t\t\t\tswitch (state) {\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_BLOCKING:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAITING:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING:\n-\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n-\t\t\t\t\tvm->blockedContinuations = listHead;\n-\t\t\t\t\tlistHead = next;\n+\t\t\t\t\tprevious = current;\n+\t\t\t\t\tcurrent = next;\n \t\t\t\t\tcontinue;\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAIT:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT:\n-\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, listHead->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, current->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n \t\t\t\t\t/* FALLTHROUGH */\n \t\t\t\tdefault:\n \t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n+\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, current->vthread)) {\n \t\t\t\t\tunblocked = true;\n \t\t\t\t} else {\n-\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, listHead->vthread);\n+\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, current->vthread);\n \t\t\t\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObj);\n \t\t\t\t\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n \t\t\t\t\tj9objectmonitor_t lock = 0;\n@@ -1016,18 +1045,29 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n \t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, listHead->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tif (unblocked) {\n-\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, listHead->vthread, unblockedList);\n-\t\t\t\t\tunblockedList = listHead->vthread;\n+\t\t\t\t\t/* Add to Java unblock list. */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, current->vthread, unblockedList);\n+\t\t\t\t\tunblockedList = current->vthread;\n+\n+\t\t\t\t\t/* Remove from native blocking list. */\n+\t\t\t\t\tcurrent->nextWaitingContinuation = NULL;\n+\n+\t\t\t\t\tif (NULL == previous) {\n+\t\t\t\t\t\tvm->blockedContinuations = next;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tprevious->nextWaitingContinuation = next;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n-\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t\t/* Keep in native blocking list. */\n+\t\t\t\t\tprevious = current;\n \t\t\t\t}\n-\t\t\t\tlistHead = next;\n+\n+\t\t\t\tcurrent = next;\n \t\t\t}\n \t\t\tif (NULL == unblockedList) {\n \t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n",
    "9bb3c2db5b41a7db5c26e15a2d7963277102527f": "diff --git a/runtime/oti/ContinuationHelpers.hpp b/runtime/oti/ContinuationHelpers.hpp\nindex 7c274a98b89..e48e717a1c2 100644\n--- a/runtime/oti/ContinuationHelpers.hpp\n+++ b/runtime/oti/ContinuationHelpers.hpp\n@@ -290,6 +290,39 @@ class VM_ContinuationHelpers {\n \t\t\t\t&& (0 == vmThread->continuationPinCount)\n \t\t\t\t&& (0 == vmThread->callOutCount));\n \t}\n+\n+\t/**\n+\t * Remove a continuation from the provided list.\n+\t *\n+\t * @param[in] list the list from which the continuation should be removed\n+\t * @param[in] continuation the continuation to be removed\n+\t *\n+\t * @return true if the continuation is found and removed from the list, otherwise false\n+\t */\n+\tstatic bool\n+\tremoveContinuationFromList(J9VMContinuation **list, J9VMContinuation *continuation)\n+\t{\n+\t\tbool foundInList = false;\n+\t\tJ9VMContinuation *previous = NULL;\n+\t\tJ9VMContinuation *current = *list;\n+\n+\t\twhile (NULL != current) {\n+\t\t\tif (continuation == current) {\n+\t\t\t\tfoundInList = true;\n+\t\t\t\tif (NULL == previous) {\n+\t\t\t\t\t*list = current->nextWaitingContinuation;\n+\t\t\t\t} else {\n+\t\t\t\t\tprevious->nextWaitingContinuation = current->nextWaitingContinuation;\n+\t\t\t\t}\n+\t\t\t\tcurrent->nextWaitingContinuation = NULL;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tprevious = current;\n+\t\t\tcurrent = current->nextWaitingContinuation;\n+\t\t}\n+\n+\t\treturn foundInList;\n+\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n };\n \ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 0dd1b5dd065..1e18cef4d7d 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -5462,6 +5462,7 @@ typedef struct J9VMContinuation {\n \tstruct J9MonitorEnterRecord* jniMonitorEnterRecords;\n \tj9object_t vthread;\n \tstruct J9VMContinuation* nextWaitingContinuation;\n+\tstruct J9ObjectMonitor* objectWaitMonitor;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 4b74769d7ac..744b384ea80 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -2952,14 +2952,14 @@ class INTERPRETER_CLASS\n \t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n \t\t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t\tJ9VMContinuation *next = head;\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, head->vthread, JNI_TRUE);\n-\t\t\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\t\tJ9VMContinuation *prev = NULL;\n+\t\t\t\t\t\t\t\twhile (NULL != next) {\n \t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(_currentThread, next->vthread, JNI_TRUE);\n \t\t\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\t\t\tprev = next;\n \t\t\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n \t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tnext->nextWaitingContinuation = _vm->blockedContinuations;\n+\t\t\t\t\t\t\t\tprev->nextWaitingContinuation = _vm->blockedContinuations;\n \t\t\t\t\t\t\t\t_vm->blockedContinuations = head;\n \t\t\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n \t\t\t\t\t\t\t}\n@@ -5174,7 +5174,7 @@ class INTERPRETER_CLASS\n \t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n \t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n \t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n-\t\t\t\t/* Handle the virutal thread Object.wait call. */\n+\t\t\t\t/* Handle the virtual thread Object.wait call. */\n \t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n \t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t} else {\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex eb251a92c43..ade4cafb0c7 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -220,6 +220,7 @@ synchronizeWithConcurrentGCScan(J9VMThread *currentThread, j9object_t continuati\n BOOLEAN\n enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n {\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \tBOOLEAN result = TRUE;\n \tJ9VMContinuation *continuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n \tContinuationState volatile *continuationStatePtr = VM_ContinuationHelpers::getContinuationStateAddress(currentThread, continuationObject);\n@@ -232,7 +233,7 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\t\t/* Directly return result if the create code failed, exception is already set. */\n \t\t\treturn result;\n \t\t}\n-\t\tcurrentThread->javaVM->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n+\t\tvm->memoryManagerFunctions->continuationObjectStarted(currentThread, continuationObject);\n \n \t\tcontinuation = J9VMJDKINTERNALVMCONTINUATION_VMREF(currentThread, continuationObject);\n #if JAVA_SPEC_VERSION >= 24\n@@ -241,6 +242,33 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t}\n \tAssert_VM_notNull(continuation);\n \n+#if JAVA_SPEC_VERSION >= 24\n+\tif (NULL != continuation->nextWaitingContinuation) {\n+\t\t/* Continuation is still in a blocked list. This can happen with TIMED_WAIT.\n+\t\t * It must be removed from the waiting list.\n+\t\t */\n+\t\tbool foundInBlockedContinuationList = false;\n+\t\tbool foundInMonitorList = false;\n+\n+\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\n+\t\tfoundInBlockedContinuationList = VM_ContinuationHelpers::removeContinuationFromList(\n+\t\t\t\t&vm->blockedContinuations, continuation);\n+\n+\t\tfoundInMonitorList = VM_ContinuationHelpers::removeContinuationFromList(\n+\t\t\t\t&continuation->objectWaitMonitor->waitingContinuations, continuation);\n+\n+\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\n+\t\tAssert_VM_true(foundInMonitorList || foundInMonitorList);\n+\n+\t\t/* Virtual can only be in one list at a time. */\n+\t\tAssert_VM_false(foundInBlockedContinuationList && foundInMonitorList);\n+\n+\t\tcontinuation->objectWaitMonitor = NULL;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \t/* let GC know we are mounting, so they don't need to scan us, or if there is already ongoing scan wait till it's complete. */\n \tcontinuationObject = synchronizeWithConcurrentGCScan(currentThread, continuationObject, continuationStatePtr);\n \n@@ -816,6 +844,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \tj9objectmonitor_t lock = 0;\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n \n \tif (NULL != syncObj) {\n \t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n@@ -829,7 +858,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\tif (syncObj != object) {\n \t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n \t\t\t\t\tif (NULL != objectMonitor) {\n \t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n \t\t\t\t\t} else {\n@@ -863,7 +892,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\tif (syncObj != object) {\n \t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n \t\t\t\t\tif (NULL != objectMonitor) {\n \t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n \t\t\t\t\t} else {\n@@ -892,7 +921,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \tif (NULL != syncObj) {\n \t\tif (!LN_HAS_LOCKWORD(currentThread, syncObj)) {\n-\t\t\tsyncObjectMonitor = monitorTablePeek(currentThread->javaVM, syncObj);\n+\t\t\tsyncObjectMonitor = monitorTablePeek(vm, syncObj);\n \t\t\tif (NULL != syncObjectMonitor) {\n \t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &syncObjectMonitor->alternateLockword);\n \t\t\t} else {\n@@ -930,10 +959,11 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \n \t\t\t/* Add Continuation struct to the monitor's waiting list. */\n \t\t\tomrthread_monitor_exit(monitor);\n-\t\t\tomrthread_monitor_enter(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n \t\t\tcurrentThread->currentContinuation->nextWaitingContinuation = syncObjectMonitor->waitingContinuations;\n \t\t\tsyncObjectMonitor->waitingContinuations = currentThread->currentContinuation;\n-\t\t\tomrthread_monitor_exit(currentThread->javaVM->blockedVirtualThreadsMutex);\n+\t\t\tcurrentThread->currentContinuation->objectWaitMonitor = syncObjectMonitor;\n+\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n \t\t} else {\n \t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n \t\t}\n@@ -971,33 +1001,32 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \twhile (NULL == unblockedList) {\n \t\tif (NULL != vm->blockedContinuations) {\n restart:\n-\t\t\tJ9VMContinuation *listHead = vm->blockedContinuations;\n+\t\t\tJ9VMContinuation *previous = NULL;\n+\t\t\tJ9VMContinuation *current = vm->blockedContinuations;\n \t\t\tJ9VMContinuation *next = NULL;\n-\t\t\tvm->blockedContinuations = NULL;\n-\t\t\twhile (NULL != listHead) {\n+\t\t\twhile (NULL != current) {\n \t\t\t\tbool unblocked = false;\n-\t\t\t\tnext = listHead->nextWaitingContinuation;\n-\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, listHead->vthread);\n+\t\t\t\tU_32 state = J9VMJAVALANGVIRTUALTHREAD_STATE(currentThread, current->vthread);\n+\t\t\t\tnext = current->nextWaitingContinuation;\n \t\t\t\t/* Skip vthreads that are still in transition. */\n \t\t\t\tswitch (state) {\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_BLOCKING:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAITING:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING:\n-\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n-\t\t\t\t\tvm->blockedContinuations = listHead;\n-\t\t\t\t\tlistHead = next;\n+\t\t\t\t\tprevious = current;\n+\t\t\t\t\tcurrent = next;\n \t\t\t\t\tcontinue;\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_WAIT:\n \t\t\t\tcase JAVA_LANG_VIRTUALTHREAD_TIMED_WAIT:\n-\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, listHead->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(currentThread, current->vthread, JAVA_LANG_VIRTUALTHREAD_BLOCKED);\n \t\t\t\t\t/* FALLTHROUGH */\n \t\t\t\tdefault:\n \t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, listHead->vthread)) {\n+\t\t\t\tif (J9VMJAVALANGVIRTUALTHREAD_ONWAITINGLIST(currentThread, current->vthread)) {\n \t\t\t\t\tunblocked = true;\n \t\t\t\t} else {\n-\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, listHead->vthread);\n+\t\t\t\t\tj9object_t continuationObj = J9VMJAVALANGVIRTUALTHREAD_CONT(currentThread, current->vthread);\n \t\t\t\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObj);\n \t\t\t\t\tJ9ObjectMonitor *syncObjectMonitor = NULL;\n \t\t\t\t\tj9objectmonitor_t lock = 0;\n@@ -1016,18 +1045,29 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n \t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, listHead->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tif (unblocked) {\n-\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, listHead->vthread, unblockedList);\n-\t\t\t\t\tunblockedList = listHead->vthread;\n+\t\t\t\t\t/* Add to Java unblock list. */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NEXT(currentThread, current->vthread, unblockedList);\n+\t\t\t\t\tunblockedList = current->vthread;\n+\n+\t\t\t\t\t/* Remove from native blocking list. */\n+\t\t\t\t\tcurrent->nextWaitingContinuation = NULL;\n+\n+\t\t\t\t\tif (NULL == previous) {\n+\t\t\t\t\t\tvm->blockedContinuations = next;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tprevious->nextWaitingContinuation = next;\n+\t\t\t\t\t}\n \t\t\t\t} else {\n-\t\t\t\t\tlistHead->nextWaitingContinuation = vm->blockedContinuations;\n-\t\t\t\t\tvm->blockedContinuations = listHead;\n+\t\t\t\t\t/* Keep in native blocking list. */\n+\t\t\t\t\tprevious = current;\n \t\t\t\t}\n-\t\t\t\tlistHead = next;\n+\n+\t\t\t\tcurrent = next;\n \t\t\t}\n \t\t\tif (NULL == unblockedList) {\n \t\t\t\tvmFuncs->internalExitVMToJNI(currentThread);\n",
    "f9751980ab28d26e8fc96b51046dc63645e81e95": "diff --git a/runtime/codert_vm/CodertVMHelpers.cpp b/runtime/codert_vm/CodertVMHelpers.cpp\nindex 6ad17c3e1d7..aadff4e7a52 100644\n--- a/runtime/codert_vm/CodertVMHelpers.cpp\n+++ b/runtime/codert_vm/CodertVMHelpers.cpp\n@@ -71,6 +71,9 @@ J9_EXTERN_BUILDER_SYMBOL(returnFromJITD);\n J9_EXTERN_BUILDER_SYMBOL(returnFromJITL);\n #endif /* J9VM_ENV_DATA64 */\n J9_EXTERN_BUILDER_SYMBOL(returnFromJITConstructor0);\n+#if JAVA_SPEC_VERSION >= 24\n+J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter0RestoreAll);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter0);\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter1);\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreterJ);\n@@ -124,6 +127,9 @@ initializeCodertFunctionTable(J9JavaVM *javaVM)\n #endif /* J9SW_NEEDS_JIT_2_INTERP_THUNKS */\n \tjitConfig->j2iInvokeWithArguments = (void*)-1;\n \tjitConfig->jitFillOSRBufferReturn = J9_BUILDER_SYMBOL(jitFillOSRBufferReturn);\n+#if JAVA_SPEC_VERSION >= 24\n+\tjitConfig->jitExitInterpreter0RestoreAll = J9_BUILDER_SYMBOL(jitExitInterpreter0RestoreAll);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tjitConfig->jitExitInterpreter0 = J9_BUILDER_SYMBOL(jitExitInterpreter0);\n \tjitConfig->jitExitInterpreter1 = J9_BUILDER_SYMBOL(jitExitInterpreter1);\n \tjitConfig->jitExitInterpreterJ = J9_BUILDER_SYMBOL(jitExitInterpreterJ);\ndiff --git a/runtime/codert_vm/arm64nathelp.m4 b/runtime/codert_vm/arm64nathelp.m4\nindex f9e62899380..e1d434632b5 100644\n--- a/runtime/codert_vm/arm64nathelp.m4\n+++ b/runtime/codert_vm/arm64nathelp.m4\n@@ -447,6 +447,12 @@ START_PROC(cInterpreterFromJIT)\n \tbr x0\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -790,6 +796,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tBRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/armnathelp.m4 b/runtime/codert_vm/armnathelp.m4\nindex 05e533e5eca..e2f4a244615 100644\n--- a/runtime/codert_vm/armnathelp.m4\n+++ b/runtime/codert_vm/armnathelp.m4\n@@ -434,6 +434,12 @@ START_PROC(cInterpreterFromJIT)\n \tldr r15,[r3,{#}J9TR_JavaVM_cInterpreter]\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -792,6 +798,12 @@ START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(handlePopFramesFromJIT)\n \tCINTERP(J9TR_bcloop_handle_pop_frames, 0)\n END_PROC(handlePopFramesFromJIT)\ndiff --git a/runtime/codert_vm/cnathelp.cpp b/runtime/codert_vm/cnathelp.cpp\nindex 44cf7b26b41..3accafca1f8 100644\n--- a/runtime/codert_vm/cnathelp.cpp\n+++ b/runtime/codert_vm/cnathelp.cpp\n@@ -34,6 +34,9 @@\n #include \"ObjectAccessBarrierAPI.hpp\"\n #include \"MethodMetaData.h\"\n #include \"ut_j9codertvm.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationHelpers.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n #undef DEBUG\n \n@@ -44,8 +47,14 @@ old_slow_jitThrowNullPointerException(J9VMThread *currentThread);\n \n J9_EXTERN_BUILDER_SYMBOL(throwCurrentExceptionFromJIT);\n J9_EXTERN_BUILDER_SYMBOL(handlePopFramesFromJIT);\n+#if JAVA_SPEC_VERSION >= 24\n+J9_EXTERN_BUILDER_SYMBOL(yieldAtMonitorEnter);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #define J9_JITHELPER_ACTION_THROW\t\tJ9_BUILDER_SYMBOL(throwCurrentExceptionFromJIT)\n #define J9_JITHELPER_ACTION_POP_FRAMES\tJ9_BUILDER_SYMBOL(handlePopFramesFromJIT)\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9_JITHELPER_ACTION_YIELD_AT_MONENT\tJ9_BUILDER_SYMBOL(yieldAtMonitorEnter)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n J9_EXTERN_BUILDER_SYMBOL(jitRunOnJavaStack);\n #define JIT_RUN_ON_JAVA_STACK(x) (currentThread->tempSlot = (UDATA)(x), J9_BUILDER_SYMBOL(jitRunOnJavaStack))\n@@ -1703,6 +1712,12 @@ slow_jitMonitorEnterImpl(J9VMThread *currentThread, bool forMethod)\n \tUDATA flags = J9_STACK_FLAGS_JIT_RESOLVE_FRAME | (forMethod ? J9_STACK_FLAGS_JIT_METHOD_MONITOR_ENTER_RESOLVE : J9_STACK_FLAGS_JIT_MONITOR_ENTER_RESOLVE);\n \tIDATA monstatus = (IDATA)(UDATA)currentThread->floatTemp1;\n \tvoid *oldPC = buildJITResolveFrame(currentThread, flags, parmCount);\n+#if JAVA_SPEC_VERSION >= 24\n+\tif ((J9_OBJECT_MONITOR_BLOCKING == monstatus) && VM_ContinuationHelpers::isYieldableVirtualThread(currentThread)) {\n+\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\tmonstatus = currentThread->javaVM->internalVMFunctions->preparePinnedVirtualThreadForUnmount(currentThread, (j9object_t)currentThread->floatTemp2, false);\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tif (monstatus < J9_OBJECT_MONITOR_BLOCKING) {\n \t\tif (forMethod) {\n \t\t\t/* Only mark the outer frame for failed method monitor enter - inline frames have correct maps */\n@@ -1748,6 +1763,11 @@ slow_jitMonitorEnterImpl(J9VMThread *currentThread, bool forMethod)\n \t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\taddr = setNativeOutOfMemoryErrorFromJIT(currentThread, J9NLS_VM_FAILED_TO_ALLOCATE_MONITOR);\n \t\t\tbreak;\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL:\n+\t\t\taddr = J9_JITHELPER_ACTION_YIELD_AT_MONENT;\n+\t\t\tbreak;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tdefault:\n \t\t\tAssert_CodertVM_unreachable();\n \t\t}\ndiff --git a/runtime/codert_vm/jswalk.c b/runtime/codert_vm/jswalk.c\nindex 3f66a753693..0af7d2a09f1 100644\n--- a/runtime/codert_vm/jswalk.c\n+++ b/runtime/codert_vm/jswalk.c\n@@ -136,6 +136,10 @@ static jvmtiIterationControl stackAllocatedObjectSlotWalkFunction(J9JavaVM *java\n static UDATA countOwnedObjectMonitors(J9StackWalkState *walkState);\n static UDATA walkLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n \t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+static UDATA walkLiveMonitorSlotsForYield(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n+\t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n static void countLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n static j9object_t *getSlotAddress(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_16 slot);\n static void jitWalkOSRBuffer(J9StackWalkState *walkState, J9OSRBuffer *osrBuffer);\n@@ -1665,8 +1669,17 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t/* If -XX:+ShowHiddenFrames option has not been set, skip hidden method frames */\n \tUDATA skipHiddenFrames = J9_ARE_NO_BITS_SET(walkState->javaVM->runtimeFlags, J9_RUNTIME_SHOW_HIDDEN_FRAMES);\n \n-\tif (NULL == walkState->userData1) {\n-\t\treturn countOwnedObjectMonitors(walkState);\n+#if JAVA_SPEC_VERSION >= 24\n+\tBOOLEAN prepareForYield = FALSE;\n+\tif (J9_ARE_ANY_BITS_SET(walkState->flags, J9_STACKWALK_PREPARE_FOR_YIELD)) {\n+\t\tskipHiddenFrames = FALSE;\n+\t\tprepareForYield = TRUE;\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t{\n+\t\tif (NULL == walkState->userData1) {\n+\t\t\treturn countOwnedObjectMonitors(walkState);\n+\t\t}\n \t}\n \n \t/* get the stackmap and inline map for the given pc (this is a single walk of jit metadata) */\n@@ -1696,14 +1709,26 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t\t\t\tif (liveMonitorMap) {\n \t\t\t\t\tU_8 *inlineMonitorMask = getMonitorMask(gcStackAtlas, inlinedCallSite);\n \t\t\t\t\tif (NULL != inlineMonitorMask) {\n-\t\t\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\t\tif (prepareForYield) {\n+\t\t\t\t\t\t\trc = walkLiveMonitorSlotsForYield(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+\t\t\t\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+\t\t\t\t\t\t}\n \t\t\t\t\t\tif (J9_STACKWALK_STOP_ITERATING == rc) {\n \t\t\t\t\t\t\treturn rc;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t/* increment stack depth */\n-\t\t\t\twalkState->userData4 = (void *)(((UDATA)walkState->userData4) + 1);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (!prepareForYield)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t{\n+\t\t\t\t\t/* increment stack depth */\n+\t\t\t\t\twalkState->userData4 = (void *)(((UDATA)walkState->userData4) + 1);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n@@ -1715,7 +1740,14 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t} else {\n \t\t/* Get the live monitors for the outer frame */\n \t\tif (liveMonitorMap) {\n-\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tif (prepareForYield) {\n+\t\t\t\trc = walkLiveMonitorSlotsForYield(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t{\n+\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -1823,6 +1855,49 @@ walkLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n \treturn J9_STACKWALK_KEEP_ITERATING;\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+static UDATA\n+walkLiveMonitorSlotsForYield(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n+\t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits)\n+{\n+\tJ9ObjectMonitor *objMonitorHead = (J9ObjectMonitor*)walkState->userData1;\n+\tj9object_t targetSyncObject = (j9object_t)walkState->userData2;\n+\tUDATA monitorCount = (UDATA)walkState->userData4;\n+\tj9object_t *objAddress;\n+\tU_16 i;\n+\tU_8 bit;\n+\tJ9VMThread *currentThread = walkState->currentThread;\n+\tJ9InternalVMFunctions const * const vmFuncs = walkState->javaVM->internalVMFunctions;\n+\n+\tfor (i = 0; i < numberOfMapBits; ++i) {\n+\t\tbit = liveMonitorMap[i >> 3] & monitorMask[i >> 3] & (1 << (i & 7));\n+\t\tif (bit) {\n+\t\t\tobjAddress = getSlotAddress(walkState, gcStackAtlas, i);\n+\n+\t\t\t/* CMVC 188386 : if the object is stack allocates and the object is discontiguous on stack,\n+\t\t\t * the jit just stores a null in the slot. Skip this slot.\n+\t\t\t */\n+\t\t\tif (NULL != objAddress) {\n+\t\t\t\tj9object_t obj = *objAddress;\n+\n+\t\t\t\tif ((NULL != obj) && (targetSyncObject != obj)) {\n+\t\t\t\t\tJ9ObjectMonitor *mon = vmFuncs->detachMonitorInfo(currentThread, obj);\n+\t\t\t\t\tif (NULL == mon) {\n+\t\t\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n+\t\t\t\t\t}\n+\t\t\t\t\tmon->next = objMonitorHead;\n+\t\t\t\t\tobjMonitorHead = mon;\n+\t\t\t\t\tmonitorCount++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\twalkState->userData1 = objMonitorHead;\n+\twalkState->userData4 = (void*)monitorCount;\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n static void\n countLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits)\n {\ndiff --git a/runtime/codert_vm/pnathelp.m4 b/runtime/codert_vm/pnathelp.m4\nindex ed567a8f1a3..b7b9fbc1a70 100644\n--- a/runtime/codert_vm/pnathelp.m4\n+++ b/runtime/codert_vm/pnathelp.m4\n@@ -500,6 +500,12 @@ START_PROC(cInterpreterFromJIT)\n \tbctr\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -858,6 +864,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tBRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/riscvnathelp.m4 b/runtime/codert_vm/riscvnathelp.m4\nindex 4c3d3f594be..6a6a257fa84 100644\n--- a/runtime/codert_vm/riscvnathelp.m4\n+++ b/runtime/codert_vm/riscvnathelp.m4\n@@ -429,6 +429,12 @@ START_PROC(cInterpreterFromJIT)\n     jr a0                                            # jump to intepreter\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -772,6 +778,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n     BRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n     CINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/xnathelp.m4 b/runtime/codert_vm/xnathelp.m4\nindex f78289fff83..c2b31464422 100644\n--- a/runtime/codert_vm/xnathelp.m4\n+++ b/runtime/codert_vm/xnathelp.m4\n@@ -598,6 +598,15 @@ BEGIN_HELPER(jitTranslateNewInstanceMethod)\n \tjmp uword ptr J9TR_VMThread_tempSlot[_rbp]\n END_HELPER(jitTranslateNewInstanceMethod,0)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+dnl java stack is active on entry\n+\tSWITCH_TO_C_STACK\n+\tRESTORE_ALL_REGS\n+\tSWITCH_TO_JAVA_STACK\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -909,6 +918,13 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tjmp uword ptr J9TR_VMThread_tempSlot[_rbp]\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tmov uword ptr J9TR_VMThread_returnValue[_rbp],J9TR_bcloop_yield_monent\n+\tCINTERP\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tmov uword ptr J9TR_VMThread_returnValue[_rbp],J9TR_bcloop_execute_bytecode\n \tCINTERP\ndiff --git a/runtime/codert_vm/znathelp.m4 b/runtime/codert_vm/znathelp.m4\nindex 3687dd828e4..977ccd61faa 100644\n--- a/runtime/codert_vm/znathelp.m4\n+++ b/runtime/codert_vm/znathelp.m4\n@@ -525,6 +525,12 @@ PLACE_LABEL(L_CINTERP)\n     br r14\n END_CURRENT\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT\n \n@@ -851,6 +857,12 @@ BEGIN_FUNC(throwCurrentExceptionFromJIT)\n     CINTERP(J9TR_bcloop_throw_current_exception, 0)\n END_CURRENT\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_FUNC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_CURRENT(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n BEGIN_FUNC(executeCurrentBytecodeFromJIT)\n     CINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_CURRENT\ndiff --git a/runtime/jilgen/jilconsts.c b/runtime/jilgen/jilconsts.c\nindex df685e30be4..248c89c7618 100644\n--- a/runtime/jilgen/jilconsts.c\n+++ b/runtime/jilgen/jilconsts.c\n@@ -764,6 +764,9 @@ writeConstants(OMRPortLibrary *OMRPORTLIB, IDATA fd)\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_report_method_enter\", J9_BCLOOP_REPORT_METHOD_ENTER) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_exit_interpreter\", J9_BCLOOP_EXIT_INTERPRETER) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_reenter_interpreter\", J9_BCLOOP_REENTER_INTERPRETER) |\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_yield_monent\", J9_BCLOOP_YIELD_FOR_JIT_MONENT) |\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_MethodNotCompiledBit\", J9_STARTPC_NOT_TRANSLATED) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_InterpVTableOffset\", J9JIT_INTERP_VTABLE_OFFSET) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_RequiredClassAlignment\", J9_REQUIRED_CLASS_ALIGNMENT) |\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 070db280bcb..ae6bcc0b017 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -413,7 +413,7 @@ extern \"C\" {\n #define J9_STACKWALK_CACHE_METHODS 0x400\n #define J9_STACKWALK_CACHE_MASK 0x700\n #define J9_STACKWALK_SKIP_HIDDEN_FRAMES 0x800\n-#define J9_STACKWALK_UNUSED_0x10000 0x10000\n+#define J9_STACKWALK_PREPARE_FOR_YIELD 0x10000\n #define J9_STACKWALK_LINEAR 0x20000\n #define J9_STACKWALK_VISIBLE_ONLY 0x40000\n #define J9_STACKWALK_INCLUDE_NATIVES 0x80000\n@@ -748,6 +748,7 @@ extern \"C\" {\n #define J9_BCLOOP_N2I_TRANSITION 0x18\n #endif /* JAVA_SPEC_VERSION >= 16 */\n #define J9_BCLOOP_REENTER_INTERPRETER 0x19\n+#define J9_BCLOOP_YIELD_FOR_JIT_MONENT 0x1A\n \n #define J9_RAS_METHOD_UNSEEN 0x0\n #define J9_RAS_METHOD_SEEN 0x1\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 1e18cef4d7d..f73cfce1975 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -1732,6 +1732,7 @@ typedef struct J9ObjectMonitor {\n \tU_32 virtualThreadWaitCount;\n \tstruct J9VMContinuation* ownerContinuation;\n \tstruct J9VMContinuation* waitingContinuations;\n+\tstruct J9ObjectMonitor* next;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9ObjectMonitor;\n \n@@ -4358,6 +4359,9 @@ typedef struct J9JITConfig {\n \tUDATA osrStackFrameMaximumSize;\n \tvoid* jitFillOSRBufferReturn;\n \tIDATA  ( *launchGPU)(struct J9VMThread *vmThread, jobject invokeObject, J9Method *method, int deviceId, I_32 gridDimX, I_32 gridDimY, I_32 gridDimZ, I_32 blockDimX, I_32 blockDimY, I_32 blockDimZ, void **args) ;\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid* jitExitInterpreter0RestoreAll;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid* jitExitInterpreter0;\n \tvoid* jitExitInterpreter1;\n \tvoid* jitExitInterpreterF;\n@@ -5351,6 +5355,8 @@ typedef struct J9InternalVMFunctions {\n #if JAVA_SPEC_VERSION >= 24\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n+\tUDATA (*preparePinnedVirtualThreadForUnmount)(struct J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait);\n+\tJ9ObjectMonitor * (*detachMonitorInfo)(struct J9VMThread *currentThread, j9object_t lockObject);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \tjobjectArray (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n@@ -5436,6 +5442,7 @@ typedef uintptr_t ContinuationState;\n #define J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER 0\n #define J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT   2\n #define J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD   3\n+#define J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER 4\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n typedef struct J9VMContinuation {\n@@ -5463,6 +5470,7 @@ typedef struct J9VMContinuation {\n \tj9object_t vthread;\n \tstruct J9VMContinuation* nextWaitingContinuation;\n \tstruct J9ObjectMonitor* objectWaitMonitor;\n+\tstruct J9ObjectMonitor* enteredMonitors;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex a9f574f77d2..bfb8c4068e2 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4750,6 +4750,17 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n  */\n jobject\n takeVirtualThreadListToUnblock(J9VMThread *currentThread);\n+\n+/**\n+ * @brief Inflate and detach the monitor for current vthread.\n+ *\n+ * @param currentThread the current thread\n+ * @param lockObject the object with monitor to detach\n+ *\n+ * @return the inflated J9ObjectMonitor pointer\n+ */\n+J9ObjectMonitor *\n+detachMonitorInfo(J9VMThread *currentThread, j9object_t lockObject);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \ndiff --git a/runtime/oti/zhelpers.m4 b/runtime/oti/zhelpers.m4\nindex a9be574fc00..f695d3048e9 100644\n--- a/runtime/oti/zhelpers.m4\n+++ b/runtime/oti/zhelpers.m4\n@@ -725,6 +725,13 @@ define({SAVE_ALL_REGS},{\n     SAVE_C_NONVOLATILE_REGS\n })\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+define({RESTORE_ALL_REGS},{\n+    RESTORE_C_VOLATILE_REGS($1)\n+    RESTORE_C_NONVOLATILE_REGS\n+})\n+}) dnl RESTORE_ALL_REGS is only used on JAVA 24+\n+\n define({SWITCH_TO_C_STACK_AND_SAVE_PRESERVED_REGS},{\n     RELOAD_SSP\n     STM_GPR r6,r12,JIT_GPR_SAVE_SLOT(6)\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 744b384ea80..ad4ce903e76 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -503,6 +503,16 @@ class INTERPRETER_CLASS\n \t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, ((UDATA*)(nativeMethodFrame + 1)) - 1);\n \t}\n \n+\tVMINLINE void*\n+\trestoreJITResolveFrame(REGISTER_ARGS_LIST)\n+\t{\n+\t\tJ9SFJITResolveFrame *resolveFrame = (J9SFJITResolveFrame*)_currentThread->sp;\n+\t\tvoid* addr = resolveFrame->returnAddress;\n+\t\t_currentThread->jitException = resolveFrame->savedJITException;\n+\t\t_currentThread->sp = (UDATA*)(resolveFrame + 1);\n+\t\treturn addr;\n+\t}\n+\n \tVMINLINE J9SFJNINativeMethodFrame*\n \trecordJNIReturn(REGISTER_ARGS_LIST, UDATA *bp)\n \t{\n@@ -1511,7 +1521,10 @@ class INTERPRETER_CLASS\n \tVMINLINE VM_BytecodeAction\n \tyieldPinnedContinuation(REGISTER_ARGS_LIST, U_32 newThreadState, UDATA returnState)\n \t{\n-\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t/* InternalNative frame only build for non-jit calls. */\n+\t\tif (J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER != returnState) {\n+\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t}\n \t\tupdateVMStruct(REGISTER_ARGS);\n \t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(_currentThread, _currentThread->threadObject, newThreadState);\n \n@@ -1535,6 +1548,44 @@ class INTERPRETER_CLASS\n \n \t\treturn EXECUTE_BYTECODE;\n \t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\ttryEnterBlockingMonitor(REGISTER_ARGS_LIST, j9object_t syncObject, UDATA returnState)\n+\t{\n+\t\tVM_BytecodeAction rc = EXECUTE_BYTECODE;\n+\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, syncObject);\n+\n+\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n+\t\t * release VM access. So, the immediate async and failed enter cases are\n+\t\t * mutually exclusive.\n+\t\t */\n+\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n+\t\t\tswitch (monitorRC) {\n+\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n+\t\t\t\t_currentThread->tempSlot = (UDATA)syncObject;\n+\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n+\t\t\t\tbreak;\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n+\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n+\t\t\t\tbreak;\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, returnState);\n+\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase J9_OBJECT_MONITOR_OOM:\n+\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tAssert_VM_unreachable();\n+\t\t\t}\n+\t\t}\n+\t\treturn rc;\n+\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n \tVMINLINE VM_BytecodeAction\n@@ -5705,6 +5756,9 @@ class INTERPRETER_CLASS\n \t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n \t\t}\n #if JAVA_SPEC_VERSION >= 24\n+\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(_currentThread, continuationObject);\n+\t\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(_currentThread, continuationObject, NULL);\n+\n \t\tswitch (_currentThread->currentContinuation->returnState) {\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_YIELD:\n \t\t\treturnSingleFromINL(REGISTER_ARGS, JNI_TRUE, 1);\n@@ -5713,37 +5767,8 @@ class INTERPRETER_CLASS\n \t\t\tbreak;\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n \t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n-\t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n-\n-\t\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n-\t\t\t * release VM access. So, the immediate async and failed enter cases are\n-\t\t\t * mutually exclusive.\n-\t\t\t */\n-\t\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n-\t\t\t\tswitch (monitorRC) {\n-\t\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n-\t\t\t\t\t_currentThread->tempSlot = (UDATA)waitObject;\n-\t\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n-\t\t\t\t\tbreak;\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n-\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n-\t\t\t\t\tbreak;\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n-\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n-\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n-\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tAssert_VM_unreachable();\n-\t\t\t\t}\n-\t\t\t} else {\n+\t\t\trc = tryEnterBlockingMonitor(REGISTER_ARGS, waitObject, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\tif ((NULL != _currentThread->currentContinuation) && (EXECUTE_BYTECODE == rc)) {\n \t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n \t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n \t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n@@ -5751,12 +5776,21 @@ class INTERPRETER_CLASS\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n-\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD:\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD: {\n \t\t\tUDATA *bp = ((UDATA *)(((J9SFMethodFrame *)_sp) + 1)) - 1;\n \t\t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, bp);\n \t\t\trc = inlineSendTarget(REGISTER_ARGS, VM_MAYBE, VM_MAYBE, VM_MAYBE, VM_MAYBE);\n \t\t\tbreak;\n \t\t}\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER: {\n+\t\t\trc = tryEnterBlockingMonitor(REGISTER_ARGS, syncObject, J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER);\n+\t\t\tif ((NULL != _currentThread->currentContinuation) && (EXECUTE_BYTECODE == rc)) {\n+\t\t\t\tvoid *returnAddress = restoreJITResolveFrame(REGISTER_ARGS);\n+\t\t\t\trc = promotedMethodOnTransitionFromJIT(REGISTER_ARGS, returnAddress, _vm->jitConfig->jitExitInterpreter0RestoreAll);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\treturn rc;\n \t}\n@@ -10739,6 +10773,10 @@ class INTERPRETER_CLASS\n \tcase J9_BCLOOP_N2I_TRANSITION:\n \t\tPERFORM_ACTION(native2InterpreterTransition(REGISTER_ARGS));\n #endif /* JAVA_SPEC_VERSION >= 16 */\n+#if JAVA_SPEC_VERSION >= 24\n+\tcase J9_BCLOOP_YIELD_FOR_JIT_MONENT:\n+\t\tPERFORM_ACTION(yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER));\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tdefault:\n #if defined(TRACE_TRANSITIONS)\n \t\tj9tty_printf(PORTLIB, \"<%p> enter: UNKNOWN %d\\n\", vmThread, vmThread->returnValue);\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex ade4cafb0c7..85d226b0652 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -292,7 +292,10 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n \t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject, (J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT == continuation->returnState));\n \t\t}\n-\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\t/* InternalNative frame only build for non-jit calls. */\n+\t\tif (J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER != continuation->returnState) {\n+\t\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\t}\n \t\tresult = FALSE;\n #else /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* resuming Continuation from yieldImpl */\n@@ -758,12 +761,37 @@ exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n }\n \n #if JAVA_SPEC_VERSION >= 24\n-void\n-detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+J9ObjectMonitor *\n+detachMonitorInfo(J9VMThread *currentThread, j9object_t lockObject)\n {\n+\tJ9ObjectMonitor *objectMonitor = NULL;\n+\tj9objectmonitor_t lock = 0;\n+\n+\tif (!LN_HAS_LOCKWORD(currentThread, lockObject)) {\n+\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, lockObject);\n+\t\tif (NULL != objectMonitor) {\n+\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t} else {\n+\t\t\tlock = 0;\n+\t\t}\n+\t} else {\n+\t\tlock = J9OBJECT_MONITOR(currentThread, lockObject);\n+\t}\n+\n+\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\tobjectMonitor = objectMonitorInflate(currentThread, lockObject, lock);\n+\t\tif (NULL == objectMonitor) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t} else {\n+\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t}\n+\n \tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n \tmonitor->owner = (J9Thread*)1;\n \tobjectMonitor->ownerContinuation = currentThread->currentContinuation;\n+\n+\treturn objectMonitor;\n }\n \n void\n@@ -774,59 +802,112 @@ updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n \tobjectMonitor->ownerContinuation = NULL;\n }\n \n-void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n+UDATA\n+walkFrameMonitorEnterRecords(J9VMThread *currentThread, J9StackWalkState *walkState)\n {\n-\tUDATA monitorCount = 0;\n-\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObject);\n-\n-\tif (currentThread->ownedMonitorCount > 0) {\n-\t\t/* Inflate all owned monitors. */\n-\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tj9objectmonitor_t lock = 0;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n-\n-\t\t\tif (syncObject != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n+\tJ9MonitorEnterRecord *monitorEnterRecords = (J9MonitorEnterRecord*)walkState->userData3;\n+\tJ9ObjectMonitor *objMonitorHead = (J9ObjectMonitor*)walkState->userData1;\n+\tj9object_t targetSyncObject = (j9object_t)walkState->userData2;\n+\tUDATA monitorCount = (UDATA)walkState->userData4;\n+\tU_32 modifiers;\n+\tUDATA *frameID;\n+\n+\tframeID = walkState->arg0EA;\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\tif (walkState->jitInfo != NULL) {\n+\t\tframeID = walkState->unwindSP;\n+\t}\n+#endif\n \n-\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n+\twhile (monitorEnterRecords &&\n+\t\t\t(frameID == CONVERT_FROM_RELATIVE_STACK_OFFSET(walkState->walkThread, monitorEnterRecords->arg0EA))\n+\t\t) {\n+\t\tj9object_t obj = monitorEnterRecords->object;\n+\t\tif (obj != targetSyncObject) {\n+\t\t\tJ9ObjectMonitor *mon = detachMonitorInfo(currentThread, obj);\n+\t\t\tif (NULL == mon) {\n+\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n \t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t\tmon->next = objMonitorHead;\n+\t\t\tobjMonitorHead = mon;\n+\t\t\tmonitorCount++;\n \t\t}\n+\t\tmonitorEnterRecords = monitorEnterRecords->next;\n+\t}\n \n-\t\t/* Repeat for JNI monitor records. */\n-\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tj9objectmonitor_t lock = 0;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\t/* If the current method is synchronized, add the syncObject to the array. */\n+\tmodifiers = J9_ROM_METHOD_FROM_RAM_METHOD(walkState->method)->modifiers;\n+\tif (modifiers & J9AccSynchronized) {\n+\t\tj9object_t syncObject;\n \n-\t\t\tif (syncObject != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n+\t\tif ((modifiers & J9AccNative)\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\t\t\t|| (walkState->jitInfo != NULL)\n+#endif\n+\t\t) {\n+\t\t\tif (modifiers & J9AccStatic) {\n+\t\t\t\tsyncObject = J9VM_J9CLASS_TO_HEAPCLASS(walkState->constantPool->ramClass);\n+\t\t\t} else {\n+\t\t\t\tsyncObject = *((j9object_t *) walkState->arg0EA);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tsyncObject = (j9object_t) (walkState->bp[1]);\n+\t\t}\n \n-\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n+\t\tif (syncObject != targetSyncObject) {\n+\t\t\tJ9ObjectMonitor *mon = detachMonitorInfo(currentThread, syncObject);\n+\t\t\tif (NULL == mon) {\n+\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n \t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t\tmon->next = objMonitorHead;\n+\t\t\tobjMonitorHead = mon;\n+\t\t\tmonitorCount++;\n \t\t}\n \t}\n \n-\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n-\tif (isObjectWait) {\n-\t\tcurrentThread->ownedMonitorCount -= 1;\n+\twalkState->userData1 = objMonitorHead;\n+\twalkState->userData3 = monitorEnterRecords;\n+\twalkState->userData4 = (void*)monitorCount;\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+\n+UDATA\n+ownedMonitorsIterator(J9VMThread *currentThread, J9StackWalkState *walkState)\n+{\n+\tUDATA rc = J9_STACKWALK_KEEP_ITERATING;\n+\n+\t/* Take the J9JavaVM from the targetThread as currentThread may be null. */\n+\tJ9JavaVM* javaVM = walkState->walkThread->javaVM;\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\tif (walkState->jitInfo) {\n+\t\t/* The jit walk may increment/decrement the stack depth */\n+\t\trc = javaVM->jitGetOwnedObjectMonitors(walkState);\n+\t} else\n+#endif\n+\t{\n+\t\t/* The walk function may decrement the stack depth if a hidden frame is skipped */\n+\t\trc = walkFrameMonitorEnterRecords(currentThread, walkState);\n+\t}\n+\n+\treturn rc;\n+}\n+\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n+{\n+\tUDATA monitorCount = 0;\n+\n+\tif (currentThread->ownedMonitorCount > 0) {\n+\t\t/* Update all owned monitors. */\n+\t\tJ9ObjectMonitor *head = currentThread->currentContinuation->enteredMonitors;\n+\t\twhile (NULL != head) {\n+\t\t\tupdateMonitorInfo(currentThread, head);\n+\t\t\tmonitorCount++;\n+\t\t\tJ9ObjectMonitor *next = head->next;\n+\t\t\thead->next = NULL;\n+\t\t\thead = next;\n+\t\t}\n+\t\tcurrentThread->currentContinuation->enteredMonitors = NULL;\n \t}\n \n \t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n@@ -841,6 +922,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n {\n \tUDATA result = J9_OBJECT_MONITOR_YIELD_VIRTUAL;\n \tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\tJ9ObjectMonitor *enteredMonitorsList = NULL;\n \tj9objectmonitor_t lock = 0;\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n@@ -850,73 +932,50 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \tif (currentThread->ownedMonitorCount > 0) {\n-\t\t/* Inflate all owned monitors. */\n-\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n-\n-\t\t\tif (syncObj != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n-\t\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlock = 0;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t}\n-\n-\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\t\tgoto done;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n-\n-\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n-\t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\tJ9StackWalkState walkState;\n+\n+\t\twalkState.userData1 = NULL;\n+\t\twalkState.userData2 = syncObj;\n+\n+\t\twalkState.userData3 = currentThread->monitorEnterRecords;\n+\t\twalkState.userData4 = (void *)1;\n+\t\twalkState.walkThread = currentThread;\n+\t\twalkState.skipCount = 0;\n+\t\twalkState.flags = J9_STACKWALK_VISIBLE_ONLY\n+\t\t\t| J9_STACKWALK_SKIP_INLINES\n+\t\t\t| J9_STACKWALK_ITERATE_FRAMES\n+\t\t\t| J9_STACKWALK_NO_ERROR_REPORT\n+\t\t\t| J9_STACKWALK_PREPARE_FOR_YIELD;\n+\n+\t\twalkState.frameWalkFunction = ownedMonitorsIterator;\n+\n+\t\tif (vm->walkStackFrames(currentThread, &walkState) != J9_STACKWALK_RC_NONE) {\n+\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\tgoto done;\n \t\t}\n \n+\t\tenteredMonitorsList = (J9ObjectMonitor*)walkState.userData1;\n+\t\tmonitorCount = (UDATA)walkState.userData4;\n+\n+\t\t/* Inflate all owned monitors. */\n \t\t/* Repeat for JNI monitor records. */\n-\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->jniMonitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n \t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n \t\t\tif (syncObj != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n-\t\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlock = 0;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = detachMonitorInfo(currentThread, object);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n-\n-\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\t\tgoto done;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n-\n-\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tobjectMonitor->next = enteredMonitorsList;\n+\t\t\t\tenteredMonitorsList = objectMonitor;\n \t\t\t\tmonitorCount++;\n \t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n+\t\tcurrentThread->currentContinuation->enteredMonitors = enteredMonitorsList;\n \t}\n \n \tif (NULL != syncObj) {\ndiff --git a/runtime/vm/FastJNI_java_lang_Object.cpp b/runtime/vm/FastJNI_java_lang_Object.cpp\nindex d528f41ed77..45fb3bd233a 100644\n--- a/runtime/vm/FastJNI_java_lang_Object.cpp\n+++ b/runtime/vm/FastJNI_java_lang_Object.cpp\n@@ -57,6 +57,47 @@ Fast_java_lang_Object_notifyAll(J9VMThread *currentThread, j9object_t receiverOb\n \t\tomrthread_monitor_t monitorPtr = NULL;\n \n \t\tif (VM_ObjectMonitor::getMonitorForNotify(currentThread, receiverObject, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tJ9JavaVM *vm = currentThread->javaVM;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, receiverObject)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, receiverObject);\n+\t\t\t\t} else {\n+\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(currentThread, receiverObject);\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, lockEA);\n+\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnext->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\t\tvm->blockedContinuations = head;\n+\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n+\n+\t\t\t\t\t\tomrthread_monitor_notify(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif (0 != omrthread_monitor_notify_all(monitorPtr)) {\n \t\t\t\tsetCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALMONITORSTATEEXCEPTION, NULL);\n \t\t\t}\n@@ -80,6 +121,41 @@ Fast_java_lang_Object_notify(J9VMThread *currentThread, j9object_t receiverObjec\n \t\tomrthread_monitor_t monitorPtr = NULL;\n \n \t\tif (VM_ObjectMonitor::getMonitorForNotify(currentThread, receiverObject, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tJ9JavaVM *vm = currentThread->javaVM;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, receiverObject)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, receiverObject);\n+\t\t\t\t} else {\n+\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(currentThread, receiverObject);\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, lockEA);\n+\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\thead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\t\tvm->blockedContinuations = head;\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, head->vthread, JNI_TRUE);\n+\n+\t\t\t\t\t\tomrthread_monitor_notify(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif (0 != omrthread_monitor_notify(monitorPtr)) {\n \t\t\t\tsetCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALMONITORSTATEEXCEPTION, NULL);\n \t\t\t}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5fe0a7e6a9c..eefb66f3f55 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -485,6 +485,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n #if JAVA_SPEC_VERSION >= 24\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n+\tpreparePinnedVirtualThreadForUnmount,\n+\tdetachMonitorInfo,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/montable.c b/runtime/vm/montable.c\nindex bcc4ce8700c..96493418be2 100644\n--- a/runtime/vm/montable.c\n+++ b/runtime/vm/montable.c\n@@ -326,6 +326,7 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object)\n \t\t\t\tkey_objectMonitor.virtualThreadWaitCount = 0;\n \t\t\t\tkey_objectMonitor.ownerContinuation = NULL;\n \t\t\t\tkey_objectMonitor.waitingContinuations = NULL;\n+\t\t\t\tkey_objectMonitor.next = NULL;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n \t\t\t\tobjectMonitor = hashTableAdd(monitorTable, &key_objectMonitor);\n",
    "fee3ee504f5ec5e76d767e87a459e8e10e0a5205": "diff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex ff1014a8e53..3491afb5e39 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -258,7 +258,7 @@ MM_VLHGCAccessBarrier::indexableDataDisplacement(J9StackWalkState *walkState, J9\n \tIDATA displacement = 0;\n \n #if defined(J9VM_ENV_DATA64)\n-\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->walkThread->omrVMThread);\n+\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->currentThread->omrVMThread);\n \tAssert_MM_true(_extensions->isVirtualLargeObjectHeapEnabled);\n \t/* Potential danger in future of this not being called by a GC Stack Walker - hence this assert */\n \tAssert_MM_true(walkState->objectSlotWalkFunction == gc_vmThreadStackDoOSlotIterator);\n",
    "50e68fa79072a7d48f2f1181a3e2c5ae002882bb": "diff --git a/runtime/codert_vm/CodertVMHelpers.cpp b/runtime/codert_vm/CodertVMHelpers.cpp\nindex 6ad17c3e1d7..aadff4e7a52 100644\n--- a/runtime/codert_vm/CodertVMHelpers.cpp\n+++ b/runtime/codert_vm/CodertVMHelpers.cpp\n@@ -71,6 +71,9 @@ J9_EXTERN_BUILDER_SYMBOL(returnFromJITD);\n J9_EXTERN_BUILDER_SYMBOL(returnFromJITL);\n #endif /* J9VM_ENV_DATA64 */\n J9_EXTERN_BUILDER_SYMBOL(returnFromJITConstructor0);\n+#if JAVA_SPEC_VERSION >= 24\n+J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter0RestoreAll);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter0);\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreter1);\n J9_EXTERN_BUILDER_SYMBOL(jitExitInterpreterJ);\n@@ -124,6 +127,9 @@ initializeCodertFunctionTable(J9JavaVM *javaVM)\n #endif /* J9SW_NEEDS_JIT_2_INTERP_THUNKS */\n \tjitConfig->j2iInvokeWithArguments = (void*)-1;\n \tjitConfig->jitFillOSRBufferReturn = J9_BUILDER_SYMBOL(jitFillOSRBufferReturn);\n+#if JAVA_SPEC_VERSION >= 24\n+\tjitConfig->jitExitInterpreter0RestoreAll = J9_BUILDER_SYMBOL(jitExitInterpreter0RestoreAll);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tjitConfig->jitExitInterpreter0 = J9_BUILDER_SYMBOL(jitExitInterpreter0);\n \tjitConfig->jitExitInterpreter1 = J9_BUILDER_SYMBOL(jitExitInterpreter1);\n \tjitConfig->jitExitInterpreterJ = J9_BUILDER_SYMBOL(jitExitInterpreterJ);\ndiff --git a/runtime/codert_vm/arm64nathelp.m4 b/runtime/codert_vm/arm64nathelp.m4\nindex f9e62899380..e1d434632b5 100644\n--- a/runtime/codert_vm/arm64nathelp.m4\n+++ b/runtime/codert_vm/arm64nathelp.m4\n@@ -447,6 +447,12 @@ START_PROC(cInterpreterFromJIT)\n \tbr x0\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -790,6 +796,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tBRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/armnathelp.m4 b/runtime/codert_vm/armnathelp.m4\nindex 05e533e5eca..e2f4a244615 100644\n--- a/runtime/codert_vm/armnathelp.m4\n+++ b/runtime/codert_vm/armnathelp.m4\n@@ -434,6 +434,12 @@ START_PROC(cInterpreterFromJIT)\n \tldr r15,[r3,{#}J9TR_JavaVM_cInterpreter]\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -792,6 +798,12 @@ START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(handlePopFramesFromJIT)\n \tCINTERP(J9TR_bcloop_handle_pop_frames, 0)\n END_PROC(handlePopFramesFromJIT)\ndiff --git a/runtime/codert_vm/cnathelp.cpp b/runtime/codert_vm/cnathelp.cpp\nindex 44cf7b26b41..3accafca1f8 100644\n--- a/runtime/codert_vm/cnathelp.cpp\n+++ b/runtime/codert_vm/cnathelp.cpp\n@@ -34,6 +34,9 @@\n #include \"ObjectAccessBarrierAPI.hpp\"\n #include \"MethodMetaData.h\"\n #include \"ut_j9codertvm.h\"\n+#if JAVA_SPEC_VERSION >= 24\n+#include \"ContinuationHelpers.hpp\"\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n #undef DEBUG\n \n@@ -44,8 +47,14 @@ old_slow_jitThrowNullPointerException(J9VMThread *currentThread);\n \n J9_EXTERN_BUILDER_SYMBOL(throwCurrentExceptionFromJIT);\n J9_EXTERN_BUILDER_SYMBOL(handlePopFramesFromJIT);\n+#if JAVA_SPEC_VERSION >= 24\n+J9_EXTERN_BUILDER_SYMBOL(yieldAtMonitorEnter);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n #define J9_JITHELPER_ACTION_THROW\t\tJ9_BUILDER_SYMBOL(throwCurrentExceptionFromJIT)\n #define J9_JITHELPER_ACTION_POP_FRAMES\tJ9_BUILDER_SYMBOL(handlePopFramesFromJIT)\n+#if JAVA_SPEC_VERSION >= 24\n+#define J9_JITHELPER_ACTION_YIELD_AT_MONENT\tJ9_BUILDER_SYMBOL(yieldAtMonitorEnter)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \n J9_EXTERN_BUILDER_SYMBOL(jitRunOnJavaStack);\n #define JIT_RUN_ON_JAVA_STACK(x) (currentThread->tempSlot = (UDATA)(x), J9_BUILDER_SYMBOL(jitRunOnJavaStack))\n@@ -1703,6 +1712,12 @@ slow_jitMonitorEnterImpl(J9VMThread *currentThread, bool forMethod)\n \tUDATA flags = J9_STACK_FLAGS_JIT_RESOLVE_FRAME | (forMethod ? J9_STACK_FLAGS_JIT_METHOD_MONITOR_ENTER_RESOLVE : J9_STACK_FLAGS_JIT_MONITOR_ENTER_RESOLVE);\n \tIDATA monstatus = (IDATA)(UDATA)currentThread->floatTemp1;\n \tvoid *oldPC = buildJITResolveFrame(currentThread, flags, parmCount);\n+#if JAVA_SPEC_VERSION >= 24\n+\tif ((J9_OBJECT_MONITOR_BLOCKING == monstatus) && VM_ContinuationHelpers::isYieldableVirtualThread(currentThread)) {\n+\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\tmonstatus = currentThread->javaVM->internalVMFunctions->preparePinnedVirtualThreadForUnmount(currentThread, (j9object_t)currentThread->floatTemp2, false);\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tif (monstatus < J9_OBJECT_MONITOR_BLOCKING) {\n \t\tif (forMethod) {\n \t\t\t/* Only mark the outer frame for failed method monitor enter - inline frames have correct maps */\n@@ -1748,6 +1763,11 @@ slow_jitMonitorEnterImpl(J9VMThread *currentThread, bool forMethod)\n \t\tcase J9_OBJECT_MONITOR_OOM:\n \t\t\taddr = setNativeOutOfMemoryErrorFromJIT(currentThread, J9NLS_VM_FAILED_TO_ALLOCATE_MONITOR);\n \t\t\tbreak;\n+#if JAVA_SPEC_VERSION >= 24\n+\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL:\n+\t\t\taddr = J9_JITHELPER_ACTION_YIELD_AT_MONENT;\n+\t\t\tbreak;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\tdefault:\n \t\t\tAssert_CodertVM_unreachable();\n \t\t}\ndiff --git a/runtime/codert_vm/jswalk.c b/runtime/codert_vm/jswalk.c\nindex 3f66a753693..0af7d2a09f1 100644\n--- a/runtime/codert_vm/jswalk.c\n+++ b/runtime/codert_vm/jswalk.c\n@@ -136,6 +136,10 @@ static jvmtiIterationControl stackAllocatedObjectSlotWalkFunction(J9JavaVM *java\n static UDATA countOwnedObjectMonitors(J9StackWalkState *walkState);\n static UDATA walkLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n \t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+static UDATA walkLiveMonitorSlotsForYield(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n+\t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n static void countLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits);\n static j9object_t *getSlotAddress(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_16 slot);\n static void jitWalkOSRBuffer(J9StackWalkState *walkState, J9OSRBuffer *osrBuffer);\n@@ -1665,8 +1669,17 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t/* If -XX:+ShowHiddenFrames option has not been set, skip hidden method frames */\n \tUDATA skipHiddenFrames = J9_ARE_NO_BITS_SET(walkState->javaVM->runtimeFlags, J9_RUNTIME_SHOW_HIDDEN_FRAMES);\n \n-\tif (NULL == walkState->userData1) {\n-\t\treturn countOwnedObjectMonitors(walkState);\n+#if JAVA_SPEC_VERSION >= 24\n+\tBOOLEAN prepareForYield = FALSE;\n+\tif (J9_ARE_ANY_BITS_SET(walkState->flags, J9_STACKWALK_PREPARE_FOR_YIELD)) {\n+\t\tskipHiddenFrames = FALSE;\n+\t\tprepareForYield = TRUE;\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t{\n+\t\tif (NULL == walkState->userData1) {\n+\t\t\treturn countOwnedObjectMonitors(walkState);\n+\t\t}\n \t}\n \n \t/* get the stackmap and inline map for the given pc (this is a single walk of jit metadata) */\n@@ -1696,14 +1709,26 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t\t\t\tif (liveMonitorMap) {\n \t\t\t\t\tU_8 *inlineMonitorMask = getMonitorMask(gcStackAtlas, inlinedCallSite);\n \t\t\t\t\tif (NULL != inlineMonitorMask) {\n-\t\t\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\t\t\tif (prepareForYield) {\n+\t\t\t\t\t\t\trc = walkLiveMonitorSlotsForYield(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+\t\t\t\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, inlineMonitorMask, numberOfMapBits);\n+\t\t\t\t\t\t}\n \t\t\t\t\t\tif (J9_STACKWALK_STOP_ITERATING == rc) {\n \t\t\t\t\t\t\treturn rc;\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\t/* increment stack depth */\n-\t\t\t\twalkState->userData4 = (void *)(((UDATA)walkState->userData4) + 1);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\t\tif (!prepareForYield)\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t\t{\n+\t\t\t\t\t/* increment stack depth */\n+\t\t\t\t\twalkState->userData4 = (void *)(((UDATA)walkState->userData4) + 1);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n@@ -1715,7 +1740,14 @@ jitGetOwnedObjectMonitors(J9StackWalkState *walkState)\n \t} else {\n \t\t/* Get the live monitors for the outer frame */\n \t\tif (liveMonitorMap) {\n-\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tif (prepareForYield) {\n+\t\t\t\trc = walkLiveMonitorSlotsForYield(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+\t\t\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t\t\t{\n+\t\t\t\trc = walkLiveMonitorSlots(walkState, gcStackAtlas, liveMonitorMap, getMonitorMask(gcStackAtlas, NULL), numberOfMapBits);\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -1823,6 +1855,49 @@ walkLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n \treturn J9_STACKWALK_KEEP_ITERATING;\n }\n \n+#if JAVA_SPEC_VERSION >= 24\n+static UDATA\n+walkLiveMonitorSlotsForYield(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas,\n+\t\tU_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits)\n+{\n+\tJ9ObjectMonitor *objMonitorHead = (J9ObjectMonitor*)walkState->userData1;\n+\tj9object_t targetSyncObject = (j9object_t)walkState->userData2;\n+\tUDATA monitorCount = (UDATA)walkState->userData4;\n+\tj9object_t *objAddress;\n+\tU_16 i;\n+\tU_8 bit;\n+\tJ9VMThread *currentThread = walkState->currentThread;\n+\tJ9InternalVMFunctions const * const vmFuncs = walkState->javaVM->internalVMFunctions;\n+\n+\tfor (i = 0; i < numberOfMapBits; ++i) {\n+\t\tbit = liveMonitorMap[i >> 3] & monitorMask[i >> 3] & (1 << (i & 7));\n+\t\tif (bit) {\n+\t\t\tobjAddress = getSlotAddress(walkState, gcStackAtlas, i);\n+\n+\t\t\t/* CMVC 188386 : if the object is stack allocates and the object is discontiguous on stack,\n+\t\t\t * the jit just stores a null in the slot. Skip this slot.\n+\t\t\t */\n+\t\t\tif (NULL != objAddress) {\n+\t\t\t\tj9object_t obj = *objAddress;\n+\n+\t\t\t\tif ((NULL != obj) && (targetSyncObject != obj)) {\n+\t\t\t\t\tJ9ObjectMonitor *mon = vmFuncs->detachMonitorInfo(currentThread, obj);\n+\t\t\t\t\tif (NULL == mon) {\n+\t\t\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n+\t\t\t\t\t}\n+\t\t\t\t\tmon->next = objMonitorHead;\n+\t\t\t\t\tobjMonitorHead = mon;\n+\t\t\t\t\tmonitorCount++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\twalkState->userData1 = objMonitorHead;\n+\twalkState->userData4 = (void*)monitorCount;\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n static void\n countLiveMonitorSlots(J9StackWalkState *walkState, J9JITStackAtlas *gcStackAtlas, U_8 *liveMonitorMap, U_8 *monitorMask, U_16 numberOfMapBits)\n {\ndiff --git a/runtime/codert_vm/pnathelp.m4 b/runtime/codert_vm/pnathelp.m4\nindex ed567a8f1a3..b7b9fbc1a70 100644\n--- a/runtime/codert_vm/pnathelp.m4\n+++ b/runtime/codert_vm/pnathelp.m4\n@@ -500,6 +500,12 @@ START_PROC(cInterpreterFromJIT)\n \tbctr\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -858,6 +864,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tBRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tCINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/riscvnathelp.m4 b/runtime/codert_vm/riscvnathelp.m4\nindex 4c3d3f594be..6a6a257fa84 100644\n--- a/runtime/codert_vm/riscvnathelp.m4\n+++ b/runtime/codert_vm/riscvnathelp.m4\n@@ -429,6 +429,12 @@ START_PROC(cInterpreterFromJIT)\n     jr a0                                            # jump to intepreter\n END_PROC(cInterpreterFromJIT)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -772,6 +778,12 @@ START_PROC(jitDecompileAfterMonitorEnter)\n     BRANCH_VIA_VMTHREAD(J9TR_VMThread_tempSlot)\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n     CINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_PROC(executeCurrentBytecodeFromJIT)\ndiff --git a/runtime/codert_vm/xnathelp.m4 b/runtime/codert_vm/xnathelp.m4\nindex f78289fff83..c2b31464422 100644\n--- a/runtime/codert_vm/xnathelp.m4\n+++ b/runtime/codert_vm/xnathelp.m4\n@@ -598,6 +598,15 @@ BEGIN_HELPER(jitTranslateNewInstanceMethod)\n \tjmp uword ptr J9TR_VMThread_tempSlot[_rbp]\n END_HELPER(jitTranslateNewInstanceMethod,0)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+dnl java stack is active on entry\n+\tSWITCH_TO_C_STACK\n+\tRESTORE_ALL_REGS\n+\tSWITCH_TO_JAVA_STACK\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT(jitExitInterpreter0)\n \n@@ -909,6 +918,13 @@ START_PROC(jitDecompileAfterMonitorEnter)\n \tjmp uword ptr J9TR_VMThread_tempSlot[_rbp]\n END_PROC(jitDecompileAfterMonitorEnter)\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+START_PROC(yieldAtMonitorEnter)\n+\tmov uword ptr J9TR_VMThread_returnValue[_rbp],J9TR_bcloop_yield_monent\n+\tCINTERP\n+END_PROC(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n START_PROC(executeCurrentBytecodeFromJIT)\n \tmov uword ptr J9TR_VMThread_returnValue[_rbp],J9TR_bcloop_execute_bytecode\n \tCINTERP\ndiff --git a/runtime/codert_vm/znathelp.m4 b/runtime/codert_vm/znathelp.m4\nindex 3687dd828e4..977ccd61faa 100644\n--- a/runtime/codert_vm/znathelp.m4\n+++ b/runtime/codert_vm/znathelp.m4\n@@ -525,6 +525,12 @@ PLACE_LABEL(L_CINTERP)\n     br r14\n END_CURRENT\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+\tRESTORE_ALL_REGS\n+END_RETURN_POINT(jitExitInterpreter0RestoreAll)\n+}) dnl jitExitInterpreter0RestoreAll is only supported on JAVA 24+\n+\n BEGIN_RETURN_POINT(jitExitInterpreter0)\n END_RETURN_POINT\n \n@@ -851,6 +857,12 @@ BEGIN_FUNC(throwCurrentExceptionFromJIT)\n     CINTERP(J9TR_bcloop_throw_current_exception, 0)\n END_CURRENT\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+BEGIN_FUNC(yieldAtMonitorEnter)\n+\tCINTERP(J9TR_bcloop_yield_monent, 0)\n+END_CURRENT(yieldAtMonitorEnter)\n+}) dnl yieldAtMonitorEnter is only supported on JAVA 24+\n+\n BEGIN_FUNC(executeCurrentBytecodeFromJIT)\n     CINTERP(J9TR_bcloop_execute_bytecode, 0)\n END_CURRENT\ndiff --git a/runtime/jilgen/jilconsts.c b/runtime/jilgen/jilconsts.c\nindex df685e30be4..248c89c7618 100644\n--- a/runtime/jilgen/jilconsts.c\n+++ b/runtime/jilgen/jilconsts.c\n@@ -764,6 +764,9 @@ writeConstants(OMRPortLibrary *OMRPORTLIB, IDATA fd)\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_report_method_enter\", J9_BCLOOP_REPORT_METHOD_ENTER) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_exit_interpreter\", J9_BCLOOP_EXIT_INTERPRETER) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_reenter_interpreter\", J9_BCLOOP_REENTER_INTERPRETER) |\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_bcloop_yield_monent\", J9_BCLOOP_YIELD_FOR_JIT_MONENT) |\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_MethodNotCompiledBit\", J9_STARTPC_NOT_TRANSLATED) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_InterpVTableOffset\", J9JIT_INTERP_VTABLE_OFFSET) |\n \t\t\twriteConstant(OMRPORTLIB, fd, \"J9TR_RequiredClassAlignment\", J9_REQUIRED_CLASS_ALIGNMENT) |\ndiff --git a/runtime/oti/j9consts.h b/runtime/oti/j9consts.h\nindex 070db280bcb..ae6bcc0b017 100644\n--- a/runtime/oti/j9consts.h\n+++ b/runtime/oti/j9consts.h\n@@ -413,7 +413,7 @@ extern \"C\" {\n #define J9_STACKWALK_CACHE_METHODS 0x400\n #define J9_STACKWALK_CACHE_MASK 0x700\n #define J9_STACKWALK_SKIP_HIDDEN_FRAMES 0x800\n-#define J9_STACKWALK_UNUSED_0x10000 0x10000\n+#define J9_STACKWALK_PREPARE_FOR_YIELD 0x10000\n #define J9_STACKWALK_LINEAR 0x20000\n #define J9_STACKWALK_VISIBLE_ONLY 0x40000\n #define J9_STACKWALK_INCLUDE_NATIVES 0x80000\n@@ -748,6 +748,7 @@ extern \"C\" {\n #define J9_BCLOOP_N2I_TRANSITION 0x18\n #endif /* JAVA_SPEC_VERSION >= 16 */\n #define J9_BCLOOP_REENTER_INTERPRETER 0x19\n+#define J9_BCLOOP_YIELD_FOR_JIT_MONENT 0x1A\n \n #define J9_RAS_METHOD_UNSEEN 0x0\n #define J9_RAS_METHOD_SEEN 0x1\ndiff --git a/runtime/oti/j9nonbuilder.h b/runtime/oti/j9nonbuilder.h\nindex 1e18cef4d7d..f73cfce1975 100644\n--- a/runtime/oti/j9nonbuilder.h\n+++ b/runtime/oti/j9nonbuilder.h\n@@ -1732,6 +1732,7 @@ typedef struct J9ObjectMonitor {\n \tU_32 virtualThreadWaitCount;\n \tstruct J9VMContinuation* ownerContinuation;\n \tstruct J9VMContinuation* waitingContinuations;\n+\tstruct J9ObjectMonitor* next;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9ObjectMonitor;\n \n@@ -4358,6 +4359,9 @@ typedef struct J9JITConfig {\n \tUDATA osrStackFrameMaximumSize;\n \tvoid* jitFillOSRBufferReturn;\n \tIDATA  ( *launchGPU)(struct J9VMThread *vmThread, jobject invokeObject, J9Method *method, int deviceId, I_32 gridDimX, I_32 gridDimY, I_32 gridDimZ, I_32 blockDimX, I_32 blockDimY, I_32 blockDimZ, void **args) ;\n+#if JAVA_SPEC_VERSION >= 24\n+\tvoid* jitExitInterpreter0RestoreAll;\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tvoid* jitExitInterpreter0;\n \tvoid* jitExitInterpreter1;\n \tvoid* jitExitInterpreterF;\n@@ -5351,6 +5355,8 @@ typedef struct J9InternalVMFunctions {\n #if JAVA_SPEC_VERSION >= 24\n \tstruct J9ObjectMonitor * (*monitorTablePeek)(struct J9JavaVM *vm, j9object_t object);\n \tjobject (*takeVirtualThreadListToUnblock)(struct J9VMThread *currentThread);\n+\tUDATA (*preparePinnedVirtualThreadForUnmount)(struct J9VMThread *currentThread, j9object_t syncObj, BOOLEAN isObjectWait);\n+\tJ9ObjectMonitor * (*detachMonitorInfo)(struct J9VMThread *currentThread, j9object_t lockObject);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \tjobjectArray (*getSystemPropertyList)(JNIEnv *env);\n } J9InternalVMFunctions;\n@@ -5436,6 +5442,7 @@ typedef uintptr_t ContinuationState;\n #define J9VM_CONTINUATION_RETURN_FROM_MONITOR_ENTER 0\n #define J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT   2\n #define J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD   3\n+#define J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER 4\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n typedef struct J9VMContinuation {\n@@ -5463,6 +5470,7 @@ typedef struct J9VMContinuation {\n \tj9object_t vthread;\n \tstruct J9VMContinuation* nextWaitingContinuation;\n \tstruct J9ObjectMonitor* objectWaitMonitor;\n+\tstruct J9ObjectMonitor* enteredMonitors;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n } J9VMContinuation;\n #endif /* JAVA_SPEC_VERSION >= 19 */\ndiff --git a/runtime/oti/vm_api.h b/runtime/oti/vm_api.h\nindex a9f574f77d2..bfb8c4068e2 100644\n--- a/runtime/oti/vm_api.h\n+++ b/runtime/oti/vm_api.h\n@@ -4750,6 +4750,17 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n  */\n jobject\n takeVirtualThreadListToUnblock(J9VMThread *currentThread);\n+\n+/**\n+ * @brief Inflate and detach the monitor for current vthread.\n+ *\n+ * @param currentThread the current thread\n+ * @param lockObject the object with monitor to detach\n+ *\n+ * @return the inflated J9ObjectMonitor pointer\n+ */\n+J9ObjectMonitor *\n+detachMonitorInfo(J9VMThread *currentThread, j9object_t lockObject);\n #endif /* JAVA_SPEC_VERSION >= 24 */\n /* ---------------- hookableAsync.c ---------------- */\n \ndiff --git a/runtime/oti/zhelpers.m4 b/runtime/oti/zhelpers.m4\nindex a9be574fc00..f695d3048e9 100644\n--- a/runtime/oti/zhelpers.m4\n+++ b/runtime/oti/zhelpers.m4\n@@ -725,6 +725,13 @@ define({SAVE_ALL_REGS},{\n     SAVE_C_NONVOLATILE_REGS\n })\n \n+ifelse(eval(ASM_JAVA_SPEC_VERSION >= 24), 1, {\n+define({RESTORE_ALL_REGS},{\n+    RESTORE_C_VOLATILE_REGS($1)\n+    RESTORE_C_NONVOLATILE_REGS\n+})\n+}) dnl RESTORE_ALL_REGS is only used on JAVA 24+\n+\n define({SWITCH_TO_C_STACK_AND_SAVE_PRESERVED_REGS},{\n     RELOAD_SSP\n     STM_GPR r6,r12,JIT_GPR_SAVE_SLOT(6)\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 744b384ea80..ad4ce903e76 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -503,6 +503,16 @@ class INTERPRETER_CLASS\n \t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, ((UDATA*)(nativeMethodFrame + 1)) - 1);\n \t}\n \n+\tVMINLINE void*\n+\trestoreJITResolveFrame(REGISTER_ARGS_LIST)\n+\t{\n+\t\tJ9SFJITResolveFrame *resolveFrame = (J9SFJITResolveFrame*)_currentThread->sp;\n+\t\tvoid* addr = resolveFrame->returnAddress;\n+\t\t_currentThread->jitException = resolveFrame->savedJITException;\n+\t\t_currentThread->sp = (UDATA*)(resolveFrame + 1);\n+\t\treturn addr;\n+\t}\n+\n \tVMINLINE J9SFJNINativeMethodFrame*\n \trecordJNIReturn(REGISTER_ARGS_LIST, UDATA *bp)\n \t{\n@@ -1511,7 +1521,10 @@ class INTERPRETER_CLASS\n \tVMINLINE VM_BytecodeAction\n \tyieldPinnedContinuation(REGISTER_ARGS_LIST, U_32 newThreadState, UDATA returnState)\n \t{\n-\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t/* InternalNative frame only build for non-jit calls. */\n+\t\tif (J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER != returnState) {\n+\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t}\n \t\tupdateVMStruct(REGISTER_ARGS);\n \t\tJ9VMJAVALANGVIRTUALTHREAD_SET_STATE(_currentThread, _currentThread->threadObject, newThreadState);\n \n@@ -1535,6 +1548,44 @@ class INTERPRETER_CLASS\n \n \t\treturn EXECUTE_BYTECODE;\n \t}\n+\n+\tVMINLINE VM_BytecodeAction\n+\ttryEnterBlockingMonitor(REGISTER_ARGS_LIST, j9object_t syncObject, UDATA returnState)\n+\t{\n+\t\tVM_BytecodeAction rc = EXECUTE_BYTECODE;\n+\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, syncObject);\n+\n+\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n+\t\t * release VM access. So, the immediate async and failed enter cases are\n+\t\t * mutually exclusive.\n+\t\t */\n+\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n+\t\t\tswitch (monitorRC) {\n+\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n+\t\t\t\t_currentThread->tempSlot = (UDATA)syncObject;\n+\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n+\t\t\t\tbreak;\n+#if defined(J9VM_OPT_CRIU_SUPPORT)\n+\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n+\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n+\t\t\t\tbreak;\n+#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n+\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n+\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, returnState);\n+\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tcase J9_OBJECT_MONITOR_OOM:\n+\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tAssert_VM_unreachable();\n+\t\t\t}\n+\t\t}\n+\t\treturn rc;\n+\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n \tVMINLINE VM_BytecodeAction\n@@ -5705,6 +5756,9 @@ class INTERPRETER_CLASS\n \t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n \t\t}\n #if JAVA_SPEC_VERSION >= 24\n+\t\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(_currentThread, continuationObject);\n+\t\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(_currentThread, continuationObject, NULL);\n+\n \t\tswitch (_currentThread->currentContinuation->returnState) {\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_YIELD:\n \t\t\treturnSingleFromINL(REGISTER_ARGS, JNI_TRUE, 1);\n@@ -5713,37 +5767,8 @@ class INTERPRETER_CLASS\n \t\t\tbreak;\n \t\tcase J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT: {\n \t\t\tj9object_t waitObject = *(j9object_t *)(_sp + 3);\n-\t\t\tUDATA monitorRC = enterObjectMonitor(REGISTER_ARGS, waitObject);\n-\n-\t\t\t/* Monitor enter can only fail in the non-blocking case, which does not\n-\t\t\t * release VM access. So, the immediate async and failed enter cases are\n-\t\t\t * mutually exclusive.\n-\t\t\t */\n-\t\t\tif (J9_OBJECT_MONITOR_ENTER_FAILED(monitorRC)) {\n-\t\t\t\tswitch (monitorRC) {\n-\t\t\t\tcase J9_OBJECT_MONITOR_VALUE_TYPE_IMSE:\n-\t\t\t\t\t_currentThread->tempSlot = (UDATA)waitObject;\n-\t\t\t\t\trc = THROW_VALUE_TYPE_ILLEGAL_MONITOR_STATE;\n-\t\t\t\t\tbreak;\n-#if defined(J9VM_OPT_CRIU_SUPPORT)\n-\t\t\t\tcase J9_OBJECT_MONITOR_CRIU_SINGLE_THREAD_MODE_THROW:\n-\t\t\t\t\trc = THROW_CRIU_SINGLE_THREAD_MODE;\n-\t\t\t\t\tbreak;\n-#endif /* defined(J9VM_OPT_CRIU_SUPPORT) */\n-\t\t\t\tcase J9_OBJECT_MONITOR_YIELD_VIRTUAL: {\n-\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n-\t\t\t\t\tomrthread_monitor_enter(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tomrthread_monitor_notify(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tomrthread_monitor_exit(_vm->blockedVirtualThreadsMutex);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\tcase J9_OBJECT_MONITOR_OOM:\n-\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tAssert_VM_unreachable();\n-\t\t\t\t}\n-\t\t\t} else {\n+\t\t\trc = tryEnterBlockingMonitor(REGISTER_ARGS, waitObject, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\tif ((NULL != _currentThread->currentContinuation) && (EXECUTE_BYTECODE == rc)) {\n \t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n \t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n \t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n@@ -5751,12 +5776,21 @@ class INTERPRETER_CLASS\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n-\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD:\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_SYNC_METHOD: {\n \t\t\tUDATA *bp = ((UDATA *)(((J9SFMethodFrame *)_sp) + 1)) - 1;\n \t\t\trestoreSpecialStackFrameLeavingArgs(REGISTER_ARGS, bp);\n \t\t\trc = inlineSendTarget(REGISTER_ARGS, VM_MAYBE, VM_MAYBE, VM_MAYBE, VM_MAYBE);\n \t\t\tbreak;\n \t\t}\n+\t\tcase J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER: {\n+\t\t\trc = tryEnterBlockingMonitor(REGISTER_ARGS, syncObject, J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER);\n+\t\t\tif ((NULL != _currentThread->currentContinuation) && (EXECUTE_BYTECODE == rc)) {\n+\t\t\t\tvoid *returnAddress = restoreJITResolveFrame(REGISTER_ARGS);\n+\t\t\t\trc = promotedMethodOnTransitionFromJIT(REGISTER_ARGS, returnAddress, _vm->jitConfig->jitExitInterpreter0RestoreAll);\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\treturn rc;\n \t}\n@@ -10739,6 +10773,10 @@ class INTERPRETER_CLASS\n \tcase J9_BCLOOP_N2I_TRANSITION:\n \t\tPERFORM_ACTION(native2InterpreterTransition(REGISTER_ARGS));\n #endif /* JAVA_SPEC_VERSION >= 16 */\n+#if JAVA_SPEC_VERSION >= 24\n+\tcase J9_BCLOOP_YIELD_FOR_JIT_MONENT:\n+\t\tPERFORM_ACTION(yieldPinnedContinuation(REGISTER_ARGS, JAVA_LANG_VIRTUALTHREAD_BLOCKING, J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER));\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \tdefault:\n #if defined(TRACE_TRANSITIONS)\n \t\tj9tty_printf(PORTLIB, \"<%p> enter: UNKNOWN %d\\n\", vmThread, vmThread->returnValue);\ndiff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex ade4cafb0c7..85d226b0652 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -292,7 +292,10 @@ enterContinuation(J9VMThread *currentThread, j9object_t continuationObject)\n \t\tif (J9_ARE_ANY_BITS_SET(currentThread->javaVM->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n \t\t\tpreparePinnedVirtualThreadForMount(currentThread, continuationObject, (J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT == continuation->returnState));\n \t\t}\n-\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\t/* InternalNative frame only build for non-jit calls. */\n+\t\tif (J9VM_CONTINUATION_RETURN_FROM_JIT_MONITOR_ENTER != continuation->returnState) {\n+\t\t\tVM_OutOfLineINL_Helpers::restoreInternalNativeStackFrame(currentThread);\n+\t\t}\n \t\tresult = FALSE;\n #else /* JAVA_SPEC_VERSION >= 24 */\n \t\t/* resuming Continuation from yieldImpl */\n@@ -758,12 +761,37 @@ exitVThreadTransitionCritical(J9VMThread *currentThread, jobject thread)\n }\n \n #if JAVA_SPEC_VERSION >= 24\n-void\n-detachMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n+J9ObjectMonitor *\n+detachMonitorInfo(J9VMThread *currentThread, j9object_t lockObject)\n {\n+\tJ9ObjectMonitor *objectMonitor = NULL;\n+\tj9objectmonitor_t lock = 0;\n+\n+\tif (!LN_HAS_LOCKWORD(currentThread, lockObject)) {\n+\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, lockObject);\n+\t\tif (NULL != objectMonitor) {\n+\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n+\t\t} else {\n+\t\t\tlock = 0;\n+\t\t}\n+\t} else {\n+\t\tlock = J9OBJECT_MONITOR(currentThread, lockObject);\n+\t}\n+\n+\tif (!J9_LOCK_IS_INFLATED(lock)) {\n+\t\tobjectMonitor = objectMonitorInflate(currentThread, lockObject, lock);\n+\t\tif (NULL == objectMonitor) {\n+\t\t\treturn NULL;\n+\t\t}\n+\t} else {\n+\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t}\n+\n \tJ9ThreadAbstractMonitor *monitor = (J9ThreadAbstractMonitor *)objectMonitor->monitor;\n \tmonitor->owner = (J9Thread*)1;\n \tobjectMonitor->ownerContinuation = currentThread->currentContinuation;\n+\n+\treturn objectMonitor;\n }\n \n void\n@@ -774,59 +802,112 @@ updateMonitorInfo(J9VMThread *currentThread, J9ObjectMonitor *objectMonitor)\n \tobjectMonitor->ownerContinuation = NULL;\n }\n \n-void\n-preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n+UDATA\n+walkFrameMonitorEnterRecords(J9VMThread *currentThread, J9StackWalkState *walkState)\n {\n-\tUDATA monitorCount = 0;\n-\tj9object_t syncObject = J9VMJDKINTERNALVMCONTINUATION_BLOCKER(currentThread, continuationObject);\n-\n-\tif (currentThread->ownedMonitorCount > 0) {\n-\t\t/* Inflate all owned monitors. */\n-\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tj9objectmonitor_t lock = 0;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n-\n-\t\t\tif (syncObject != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n+\tJ9MonitorEnterRecord *monitorEnterRecords = (J9MonitorEnterRecord*)walkState->userData3;\n+\tJ9ObjectMonitor *objMonitorHead = (J9ObjectMonitor*)walkState->userData1;\n+\tj9object_t targetSyncObject = (j9object_t)walkState->userData2;\n+\tUDATA monitorCount = (UDATA)walkState->userData4;\n+\tU_32 modifiers;\n+\tUDATA *frameID;\n+\n+\tframeID = walkState->arg0EA;\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\tif (walkState->jitInfo != NULL) {\n+\t\tframeID = walkState->unwindSP;\n+\t}\n+#endif\n \n-\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n+\twhile (monitorEnterRecords &&\n+\t\t\t(frameID == CONVERT_FROM_RELATIVE_STACK_OFFSET(walkState->walkThread, monitorEnterRecords->arg0EA))\n+\t\t) {\n+\t\tj9object_t obj = monitorEnterRecords->object;\n+\t\tif (obj != targetSyncObject) {\n+\t\t\tJ9ObjectMonitor *mon = detachMonitorInfo(currentThread, obj);\n+\t\t\tif (NULL == mon) {\n+\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n \t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t\tmon->next = objMonitorHead;\n+\t\t\tobjMonitorHead = mon;\n+\t\t\tmonitorCount++;\n \t\t}\n+\t\tmonitorEnterRecords = monitorEnterRecords->next;\n+\t}\n \n-\t\t/* Repeat for JNI monitor records. */\n-\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tj9objectmonitor_t lock = 0;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\t/* If the current method is synchronized, add the syncObject to the array. */\n+\tmodifiers = J9_ROM_METHOD_FROM_RAM_METHOD(walkState->method)->modifiers;\n+\tif (modifiers & J9AccSynchronized) {\n+\t\tj9object_t syncObject;\n \n-\t\t\tif (syncObject != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(currentThread->javaVM, object);\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n+\t\tif ((modifiers & J9AccNative)\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\t\t\t|| (walkState->jitInfo != NULL)\n+#endif\n+\t\t) {\n+\t\t\tif (modifiers & J9AccStatic) {\n+\t\t\t\tsyncObject = J9VM_J9CLASS_TO_HEAPCLASS(walkState->constantPool->ramClass);\n+\t\t\t} else {\n+\t\t\t\tsyncObject = *((j9object_t *) walkState->arg0EA);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tsyncObject = (j9object_t) (walkState->bp[1]);\n+\t\t}\n \n-\t\t\t\tupdateMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n+\t\tif (syncObject != targetSyncObject) {\n+\t\t\tJ9ObjectMonitor *mon = detachMonitorInfo(currentThread, syncObject);\n+\t\t\tif (NULL == mon) {\n+\t\t\t\treturn J9_STACKWALK_RC_NO_MEMORY;\n \t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\t\tmon->next = objMonitorHead;\n+\t\t\tobjMonitorHead = mon;\n+\t\t\tmonitorCount++;\n \t\t}\n \t}\n \n-\tJ9VMJDKINTERNALVMCONTINUATION_SET_BLOCKER(currentThread, continuationObject, NULL);\n-\tif (isObjectWait) {\n-\t\tcurrentThread->ownedMonitorCount -= 1;\n+\twalkState->userData1 = objMonitorHead;\n+\twalkState->userData3 = monitorEnterRecords;\n+\twalkState->userData4 = (void*)monitorCount;\n+\treturn J9_STACKWALK_KEEP_ITERATING;\n+}\n+\n+UDATA\n+ownedMonitorsIterator(J9VMThread *currentThread, J9StackWalkState *walkState)\n+{\n+\tUDATA rc = J9_STACKWALK_KEEP_ITERATING;\n+\n+\t/* Take the J9JavaVM from the targetThread as currentThread may be null. */\n+\tJ9JavaVM* javaVM = walkState->walkThread->javaVM;\n+#ifdef J9VM_INTERP_NATIVE_SUPPORT\n+\tif (walkState->jitInfo) {\n+\t\t/* The jit walk may increment/decrement the stack depth */\n+\t\trc = javaVM->jitGetOwnedObjectMonitors(walkState);\n+\t} else\n+#endif\n+\t{\n+\t\t/* The walk function may decrement the stack depth if a hidden frame is skipped */\n+\t\trc = walkFrameMonitorEnterRecords(currentThread, walkState);\n+\t}\n+\n+\treturn rc;\n+}\n+\n+void\n+preparePinnedVirtualThreadForMount(J9VMThread *currentThread, j9object_t continuationObject, BOOLEAN isObjectWait)\n+{\n+\tUDATA monitorCount = 0;\n+\n+\tif (currentThread->ownedMonitorCount > 0) {\n+\t\t/* Update all owned monitors. */\n+\t\tJ9ObjectMonitor *head = currentThread->currentContinuation->enteredMonitors;\n+\t\twhile (NULL != head) {\n+\t\t\tupdateMonitorInfo(currentThread, head);\n+\t\t\tmonitorCount++;\n+\t\t\tJ9ObjectMonitor *next = head->next;\n+\t\t\thead->next = NULL;\n+\t\t\thead = next;\n+\t\t}\n+\t\tcurrentThread->currentContinuation->enteredMonitors = NULL;\n \t}\n \n \t/* Add the attached monitor to the carrier thread's lockedmonitorcount. */\n@@ -841,6 +922,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n {\n \tUDATA result = J9_OBJECT_MONITOR_YIELD_VIRTUAL;\n \tJ9ObjectMonitor *syncObjectMonitor = NULL;\n+\tJ9ObjectMonitor *enteredMonitorsList = NULL;\n \tj9objectmonitor_t lock = 0;\n \tj9object_t continuationObj = NULL;\n \tUDATA monitorCount = 0;\n@@ -850,73 +932,50 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\tenterVThreadTransitionCritical(currentThread, (jobject)&currentThread->threadObject);\n \t}\n \tif (currentThread->ownedMonitorCount > 0) {\n-\t\t/* Inflate all owned monitors. */\n-\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->monitorEnterRecords;\n-\t\twhile (NULL != monitorRecords) {\n-\t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n-\n-\t\t\tif (syncObj != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n-\t\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlock = 0;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n-\t\t\t\t}\n-\n-\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\t\tgoto done;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n-\n-\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n-\t\t\t\tmonitorCount++;\n-\t\t\t}\n-\t\t\tmonitorRecords = monitorRecords->next;\n+\t\tJ9StackWalkState walkState;\n+\n+\t\twalkState.userData1 = NULL;\n+\t\twalkState.userData2 = syncObj;\n+\n+\t\twalkState.userData3 = currentThread->monitorEnterRecords;\n+\t\twalkState.userData4 = (void *)1;\n+\t\twalkState.walkThread = currentThread;\n+\t\twalkState.skipCount = 0;\n+\t\twalkState.flags = J9_STACKWALK_VISIBLE_ONLY\n+\t\t\t| J9_STACKWALK_SKIP_INLINES\n+\t\t\t| J9_STACKWALK_ITERATE_FRAMES\n+\t\t\t| J9_STACKWALK_NO_ERROR_REPORT\n+\t\t\t| J9_STACKWALK_PREPARE_FOR_YIELD;\n+\n+\t\twalkState.frameWalkFunction = ownedMonitorsIterator;\n+\n+\t\tif (vm->walkStackFrames(currentThread, &walkState) != J9_STACKWALK_RC_NONE) {\n+\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\tgoto done;\n \t\t}\n \n+\t\tenteredMonitorsList = (J9ObjectMonitor*)walkState.userData1;\n+\t\tmonitorCount = (UDATA)walkState.userData4;\n+\n+\t\t/* Inflate all owned monitors. */\n \t\t/* Repeat for JNI monitor records. */\n-\t\tmonitorRecords = currentThread->jniMonitorEnterRecords;\n+\t\tJ9MonitorEnterRecord *monitorRecords = currentThread->jniMonitorEnterRecords;\n \t\twhile (NULL != monitorRecords) {\n \t\t\tj9object_t object = monitorRecords->object;\n-\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n \n \t\t\tif (syncObj != object) {\n-\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, object)) {\n-\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, object);\n-\t\t\t\t\tif (NULL != objectMonitor) {\n-\t\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, &objectMonitor->alternateLockword);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlock = 0;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, object);\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = detachMonitorInfo(currentThread, object);\n+\t\t\t\tif (NULL == objectMonitor) {\n+\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n+\t\t\t\t\tgoto done;\n \t\t\t\t}\n-\n-\t\t\t\tif (!J9_LOCK_IS_INFLATED(lock)) {\n-\t\t\t\t\tobjectMonitor = objectMonitorInflate(currentThread, object, lock);\n-\t\t\t\t\tif (NULL == objectMonitor) {\n-\t\t\t\t\t\tresult = J9_OBJECT_MONITOR_OOM;\n-\t\t\t\t\t\tgoto done;\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n-\t\t\t\t}\n-\n-\t\t\t\tdetachMonitorInfo(currentThread, objectMonitor);\n+\t\t\t\tobjectMonitor->next = enteredMonitorsList;\n+\t\t\t\tenteredMonitorsList = objectMonitor;\n \t\t\t\tmonitorCount++;\n \t\t\t}\n \t\t\tmonitorRecords = monitorRecords->next;\n \t\t}\n+\t\tcurrentThread->currentContinuation->enteredMonitors = enteredMonitorsList;\n \t}\n \n \tif (NULL != syncObj) {\ndiff --git a/runtime/vm/FastJNI_java_lang_Object.cpp b/runtime/vm/FastJNI_java_lang_Object.cpp\nindex d528f41ed77..45fb3bd233a 100644\n--- a/runtime/vm/FastJNI_java_lang_Object.cpp\n+++ b/runtime/vm/FastJNI_java_lang_Object.cpp\n@@ -57,6 +57,47 @@ Fast_java_lang_Object_notifyAll(J9VMThread *currentThread, j9object_t receiverOb\n \t\tomrthread_monitor_t monitorPtr = NULL;\n \n \t\tif (VM_ObjectMonitor::getMonitorForNotify(currentThread, receiverObject, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tJ9JavaVM *vm = currentThread->javaVM;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, receiverObject)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, receiverObject);\n+\t\t\t\t} else {\n+\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(currentThread, receiverObject);\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, lockEA);\n+\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tJ9VMContinuation *next = head;\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\twhile (NULL != next->nextWaitingContinuation) {\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, next->vthread, JNI_TRUE);\n+\t\t\t\t\t\t\tnext = next->nextWaitingContinuation;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tnext->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\t\tvm->blockedContinuations = head;\n+\t\t\t\t\t\tobjectMonitor->waitingContinuations = NULL;\n+\n+\t\t\t\t\t\tomrthread_monitor_notify(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif (0 != omrthread_monitor_notify_all(monitorPtr)) {\n \t\t\t\tsetCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALMONITORSTATEEXCEPTION, NULL);\n \t\t\t}\n@@ -80,6 +121,41 @@ Fast_java_lang_Object_notify(J9VMThread *currentThread, j9object_t receiverObjec\n \t\tomrthread_monitor_t monitorPtr = NULL;\n \n \t\tif (VM_ObjectMonitor::getMonitorForNotify(currentThread, receiverObject, &monitorPtr, true)) {\n+#if JAVA_SPEC_VERSION >= 24\n+\t\t\tJ9JavaVM *vm = currentThread->javaVM;\n+\t\t\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\t\t\tj9objectmonitor_t lock = 0;\n+\t\t\t\tj9objectmonitor_t *lockEA = NULL;\n+\t\t\t\tJ9ObjectMonitor *objectMonitor = NULL;\n+\n+\t\t\t\tif (!LN_HAS_LOCKWORD(currentThread, receiverObject)) {\n+\t\t\t\t\tobjectMonitor = monitorTablePeek(vm, receiverObject);\n+\t\t\t\t} else {\n+\t\t\t\t\tlockEA = J9OBJECT_MONITOR_EA(currentThread, receiverObject);\n+\t\t\t\t\tlock = J9_LOAD_LOCKWORD(currentThread, lockEA);\n+\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\tobjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif ((NULL != objectMonitor) && (NULL != objectMonitor->waitingContinuations)) {\n+\t\t\t\t\tomrthread_monitor_enter(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\tJ9VMContinuation *head = objectMonitor->waitingContinuations;\n+\t\t\t\t\tif (NULL != head) {\n+\t\t\t\t\t\tobjectMonitor->waitingContinuations = head->nextWaitingContinuation;\n+\t\t\t\t\t\thead->nextWaitingContinuation = vm->blockedContinuations;\n+\t\t\t\t\t\tvm->blockedContinuations = head;\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, head->vthread, JNI_TRUE);\n+\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(currentThread, head->vthread, JNI_TRUE);\n+\n+\t\t\t\t\t\tomrthread_monitor_notify(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif (0 != omrthread_monitor_notify(monitorPtr)) {\n \t\t\t\tsetCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGILLEGALMONITORSTATEEXCEPTION, NULL);\n \t\t\t}\ndiff --git a/runtime/vm/intfunc.c b/runtime/vm/intfunc.c\nindex 5fe0a7e6a9c..eefb66f3f55 100644\n--- a/runtime/vm/intfunc.c\n+++ b/runtime/vm/intfunc.c\n@@ -485,6 +485,8 @@ J9InternalVMFunctions J9InternalFunctions = {\n #if JAVA_SPEC_VERSION >= 24\n \tmonitorTablePeek,\n \ttakeVirtualThreadListToUnblock,\n+\tpreparePinnedVirtualThreadForUnmount,\n+\tdetachMonitorInfo,\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \tgetSystemPropertyList,\n };\ndiff --git a/runtime/vm/montable.c b/runtime/vm/montable.c\nindex bcc4ce8700c..96493418be2 100644\n--- a/runtime/vm/montable.c\n+++ b/runtime/vm/montable.c\n@@ -326,6 +326,7 @@ monitorTableAt(J9VMThread* vmStruct, j9object_t object)\n \t\t\t\tkey_objectMonitor.virtualThreadWaitCount = 0;\n \t\t\t\tkey_objectMonitor.ownerContinuation = NULL;\n \t\t\t\tkey_objectMonitor.waitingContinuations = NULL;\n+\t\t\t\tkey_objectMonitor.next = NULL;\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \n \t\t\t\tobjectMonitor = hashTableAdd(monitorTable, &key_objectMonitor);\n",
    "61c2582de30bc5c7719a22cd6991287a8f0bf87b": "diff --git a/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp b/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\nindex d015963624c..1182808e766 100644\n--- a/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/aarch64/codegen/J9TreeEvaluator.cpp\n@@ -607,10 +607,10 @@ generateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg, bool isArdbar\n \n    generateLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n-   bool needSync = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && comp->target().isSMP());\n-   if (needSync)\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       comp->target().isSMP())\n       {\n-      // Issue an Acquire barrier after volatile load\n+      // Issue an Acquire barrier after acquire load\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishld);\n       }\n \n@@ -1218,8 +1218,6 @@ J9::ARM64::TreeEvaluator::awrtbarEvaluator(TR::Node *node, TR::CodeGenerator *cg\n \n    TR::Register *sourceRegister;\n    bool killSource = false;\n-   bool isVolatileMode = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && cg->comp()->target().isSMP());\n-   bool isOrderedMode = (node->getSymbolReference()->getSymbol()->isShadow() && node->getSymbolReference()->getSymbol()->isOrdered() && cg->comp()->target().isSMP());\n \n    if (firstChild->getReferenceCount() > 1 && firstChild->getRegister() != NULL)\n       {\n@@ -1239,14 +1237,15 @@ J9::ARM64::TreeEvaluator::awrtbarEvaluator(TR::Node *node, TR::CodeGenerator *cg\n \n    TR::MemoryReference *tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, node);\n \n-   // Issue a StoreStore barrier before each volatile store.\n-   if (isVolatileMode || isOrderedMode)\n+   // Issue a StoreStore barrier before each release store.\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\n \n    generateMemSrc1Instruction(cg, TR::InstOpCode::strimmx, node, tempMR, sourceRegister, NULL);\n \n    // Issue a StoreLoad barrier after each volatile store.\n-   if (isVolatileMode)\n+   if (node->getSymbolReference()->getSymbol()->isVolatile() && cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ish);\n \n    wrtbarEvaluator(node, sourceRegister, destinationRegister, firstChild->isNonNull(), cg);\n@@ -1271,8 +1270,6 @@ J9::ARM64::TreeEvaluator::awrtbariEvaluator(TR::Node *node, TR::CodeGenerator *c\n    TR::Register *sourceRegister;\n    bool killSource = false;\n    bool usingCompressedPointers = TR::TreeEvaluator::getIndirectWrtbarValueNode(cg, node, secondChild, true);\n-   bool isVolatileMode = (node->getSymbolReference()->getSymbol()->isSyncVolatile() && cg->comp()->target().isSMP());\n-   bool isOrderedMode = (node->getSymbolReference()->getSymbol()->isShadow() && node->getSymbolReference()->getSymbol()->isOrdered() && cg->comp()->target().isSMP());\n \n    if (secondChild->getReferenceCount() > 1 && secondChild->getRegister() != NULL)\n       {\n@@ -1306,14 +1303,15 @@ J9::ARM64::TreeEvaluator::awrtbariEvaluator(TR::Node *node, TR::CodeGenerator *c\n \n    TR::MemoryReference *tempMR = TR::MemoryReference::createWithRootLoadOrStore(cg, node);\n \n-   // Issue a StoreStore barrier before each volatile store.\n-   if (isVolatileMode || isOrderedMode)\n+   // Issue a StoreStore barrier before each release store.\n+   if (node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+       cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\n \n    generateMemSrc1Instruction(cg, storeOp, node, tempMR, translatedSrcReg);\n \n    // Issue a StoreLoad barrier after each volatile store.\n-   if (isVolatileMode)\n+   if (node->getSymbolReference()->getSymbol()->isVolatile() && cg->comp()->target().isSMP())\n       generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ish);\n \n    wrtbarEvaluator(node, sourceRegister, destinationRegister, secondChild->isNonNull(), cg);\n@@ -2641,20 +2639,25 @@ J9::ARM64::TreeEvaluator::flushEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n          TR::Node *child = (node->getNumChildren() >= 1) ? node->getFirstChild() : NULL;\n          if (!child || (node->getOpCodeValue() != TR::monexit && child->getOpCodeValue() != TR::monexit))\n             {\n-            // Iterate the next tree to see if there is a resolved volatile load/store node that has yet to be evaluated\n-            // An unresolved volatile might not actually be a volatile access, and therefore can not replace the AllocationFence\n-            // An node that is already evaluated will not actually emit a 'dmb' so it can not replace the AllocationFence\n-            bool volatileAccessFound = false;\n+            // Iterate the next tree to see if there is a resolved acquire/release load/store node that has yet to be evaluated\n+            // An unresolved acquire/release might not actually be an acquire/release access, and therefore can not replace the AllocationFence\n+            // A node that is already evaluated will not actually emit a 'dmb' so it can not replace the AllocationFence\n+            // NOTE: As things currently stand, we won't ever encounter an unresolved symref that is strictly acquire/release,\n+            // but the following code will handle unresolved volatile symrefs as well\n+            bool fencedAccessFound = false;\n             for (TR::PreorderNodeIterator it(tt, cg->comp()); it.currentTree() == tt; ++it)\n                {\n                node = it.currentNode();\n-               if (node->getOpCode().hasSymbolReference() && !node->hasUnresolvedSymbolReference() && node->getSymbolReference()->getSymbol()->isVolatile() && !node->getRegister())\n+               if (node->getOpCode().hasSymbolReference() &&\n+                   !node->hasUnresolvedSymbolReference() &&\n+                   node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease()\n+                   && !node->getRegister())\n                   {\n-                  volatileAccessFound = true;\n+                  fencedAccessFound = true;\n                   break;\n                   }\n                }\n-            if (!volatileAccessFound)\n+            if (!fencedAccessFound)\n                {\n                // StoreStore barrier is required after publishing new object reference to other threads.\n                generateSynchronizationInstruction(cg, TR::InstOpCode::dmb, node, TR::InstOpCode::ishst);\ndiff --git a/runtime/compiler/codegen/J9CodeGenerator.cpp b/runtime/compiler/codegen/J9CodeGenerator.cpp\nindex 8a86d55aab8..8375f576886 100644\n--- a/runtime/compiler/codegen/J9CodeGenerator.cpp\n+++ b/runtime/compiler/codegen/J9CodeGenerator.cpp\n@@ -935,18 +935,6 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n          }\n       }\n \n-   // J9\n-   if (node->getOpCode().isCall() &&\n-       node->isUnsafePutOrderedCall() &&\n-       node->isDontInlinePutOrderedCall())\n-      {\n-      // Remove this treetop\n-      tt->getPrevTreeTop()->setNextTreeTop(tt->getNextTreeTop());\n-      tt->getNextTreeTop()->setPrevTreeTop(tt->getPrevTreeTop());\n-      tt->getNode()->recursivelyDecReferenceCount();\n-      return;\n-      }\n-\n    // J9\n    if (!self()->comp()->getOption(TR_DisableUnsafe) &&\n        node->getOpCode().isCall() &&\n@@ -1052,7 +1040,8 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       {\n       TR::SymbolReference *symRef = node->getSymbolReference();\n       TR::Symbol *symbol = symRef->getSymbol();\n-      if (symbol->isVolatile() && node->getDataType() == TR::Int64 && !symRef->isUnresolved() && self()->comp()->target().is32Bit() &&\n+      // bitwise atomicity is required for opaque or stronger memory semantics\n+      if (symbol->isAtLeastOrStrongerThanOpaque() && node->getDataType() == TR::Int64 && !symRef->isUnresolved() && self()->comp()->target().is32Bit() &&\n           !self()->getSupportsInlinedAtomicLongVolatiles())\n          {\n          bool isLoad = false;\n@@ -1384,7 +1373,7 @@ J9::CodeGenerator::lowerTreeIfNeeded(\n       {\n       if ((node->getFirstChild()->getReferenceCount() == 1) &&\n           node->getFirstChild()->getOpCode().isLoadVar() &&\n-          !node->getFirstChild()->getSymbolReference()->getSymbol()->isVolatile())\n+          node->getFirstChild()->getSymbolReference()->getSymbol()->isTransparent())\n          {\n          TR::Node::recreate(node->getFirstChild(), TR::PassThrough);\n          }\ndiff --git a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\nindex ab06f91bd9c..b62c9cceb4a 100644\n--- a/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n+++ b/runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp\n@@ -458,6 +458,36 @@\n    sun_misc_Unsafe_allocateInstance,\n    sun_misc_Unsafe_allocateUninitializedArray0,\n \n+   jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z,\n+   jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B,\n+   jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C,\n+   jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S,\n+   jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I,\n+   jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J,\n+   jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F,\n+   jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D,\n+   jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,\n+\n+   jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z,\n+   jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B,\n+   jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C,\n+   jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S,\n+   jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I,\n+   jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J,\n+   jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F,\n+   jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D,\n+   jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject,\n+\n+   jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V,\n+   jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V,\n+   jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V,\n+   jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V,\n+   jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V,\n+   jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V,\n+   jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V,\n+   jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V,\n+   jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V,\n+\n    jdk_internal_misc_Unsafe_compareAndExchangeInt,\n    jdk_internal_misc_Unsafe_compareAndExchangeLong,\n    jdk_internal_misc_Unsafe_compareAndExchangeObject,\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.cpp b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\nindex 35d97d49545..4ae5d287c73 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.cpp\n@@ -77,8 +77,6 @@ J9::SymbolReferenceTable::SymbolReferenceTable(size_t sizeHint, TR::Compilation\n      _immutableInfo(c->trMemory()),\n      _immutableSymRefNumbers(c->trMemory(), _numImmutableClasses),\n      _dynamicMethodSymrefsByCallSiteIndex(c->trMemory()),\n-     _unsafeJavaStaticSymRefs(NULL),\n-     _unsafeJavaStaticVolatileSymRefs(NULL),\n      _currentThreadDebugEventDataSymbol(0),\n      _currentThreadDebugEventDataSymbolRefs(c->trMemory()),\n      _constantPoolAddressSymbolRefs(c->trMemory()),\n@@ -92,6 +90,9 @@ J9::SymbolReferenceTable::SymbolReferenceTable(size_t sizeHint, TR::Compilation\n    {\n    for (uint32_t i = 0; i < _numImmutableClasses; i++)\n       _immutableSymRefNumbers[i] = new (trHeapMemory()) TR_BitVector(sizeHint, c->trMemory(), heapAlloc, growable);\n+\n+   for (int i = 0; i < TR::Symbol::numberOfMemoryOrderings; i++)\n+      _unsafeJavaStaticSymRefs[i] = NULL;\n    }\n \n \n@@ -2212,24 +2213,15 @@ J9::SymbolReferenceTable::findOrCreateThreadDebugEventData(int32_t index)\n    }\n \n TR::SymbolReference *\n-J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, bool isVolatile)\n+J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering ordering)\n    {\n    TR_Array<TR::SymbolReference *> * unsafeSymRefs = NULL;\n \n-   if (isVolatile)\n-      {\n-      unsafeSymRefs =\n-            javaStaticReference ?\n-                  _unsafeJavaStaticVolatileSymRefs :\n-                  _unsafeVolatileSymRefs;\n-      }\n-   else\n-      {\n-      unsafeSymRefs =\n-            javaStaticReference ?\n-                  _unsafeJavaStaticSymRefs :\n-                  _unsafeSymRefs;\n-      }\n+   unsafeSymRefs =\n+         javaStaticReference ?\n+               _unsafeJavaStaticSymRefs[static_cast<int>(ordering)] :\n+               _unsafeSymRefs[static_cast<int>(ordering)];\n+\n \n    TR::SymbolReference * symRef = NULL;\n \n@@ -2242,39 +2234,21 @@ J9::SymbolReferenceTable::findUnsafeSymbolRef(TR::DataType type, bool javaObject\n    }\n \n TR::SymbolReference *\n-J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, bool isVolatile)\n+J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering ordering)\n    {\n    TR_Array<TR::SymbolReference *> * unsafeSymRefs = NULL;\n \n-   if (isVolatile)\n+   if (javaStaticReference)\n       {\n-      if (javaStaticReference)\n-         {\n-         if (_unsafeJavaStaticVolatileSymRefs == NULL)\n-            _unsafeJavaStaticVolatileSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeJavaStaticVolatileSymRefs;\n-         }\n-      else\n-         {\n-         if (_unsafeVolatileSymRefs == NULL)\n-            _unsafeVolatileSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeVolatileSymRefs;\n-         }\n+      if (_unsafeJavaStaticSymRefs[static_cast<int>(ordering)] == NULL)\n+         _unsafeJavaStaticSymRefs[static_cast<int>(ordering)] = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n+      unsafeSymRefs = _unsafeJavaStaticSymRefs[static_cast<int>(ordering)];\n       }\n    else\n       {\n-      if (javaStaticReference)\n-         {\n-         if (_unsafeJavaStaticSymRefs == NULL)\n-            _unsafeJavaStaticSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeJavaStaticSymRefs;\n-         }\n-      else\n-         {\n-         if (_unsafeSymRefs == NULL)\n-            _unsafeSymRefs = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n-         unsafeSymRefs = _unsafeSymRefs;\n-         }\n+      if (_unsafeSymRefs[static_cast<int>(ordering)] == NULL)\n+         _unsafeSymRefs[static_cast<int>(ordering)] = new (trHeapMemory()) TR_Array<TR::SymbolReference *>(comp()->trMemory(), TR::NumAllTypes);\n+      unsafeSymRefs = _unsafeSymRefs[static_cast<int>(ordering)];\n       }\n \n    TR::SymbolReference * symRef = (*unsafeSymRefs)[type];\n@@ -2284,8 +2258,7 @@ J9::SymbolReferenceTable::findOrCreateUnsafeSymbolRef(TR::DataType type, bool ja\n       TR::Symbol * sym = TR::Symbol::createShadow(trHeapMemory(),type);\n       sym->setUnsafeShadowSymbol();\n       sym->setArrayShadowSymbol();\n-      if (isVolatile)\n-         sym->setVolatile();\n+      sym->setMemoryOrdering(ordering);\n       (*unsafeSymRefs)[type] = symRef = new (trHeapMemory()) TR::SymbolReference(self(), sym, comp()->getMethodSymbol()->getResolvedMethodIndex(), -1);\n       aliasBuilder.unsafeSymRefNumbers().set(symRef->getReferenceNumber());\n       }\ndiff --git a/runtime/compiler/compile/J9SymbolReferenceTable.hpp b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\nindex d32af6d9487..7957a4f3ab7 100644\n--- a/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n+++ b/runtime/compiler/compile/J9SymbolReferenceTable.hpp\n@@ -344,13 +344,13 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     *  \\param javaStaticReference\n     *     Determines whether this symbol reference is referencing a Java object static field.\n     *\n-    *  \\param isVolatile\n-    *     Determines whether this symbol should be treated with volatile semantics.\n+    *  \\param mode\n+    *     Determines which access mode memory semantics this symbol should be treated with.\n     *\n     *  \\return\n     *     The unsafe symbol reference with given constraints if it exists; <c>NULL</c> otherwise.\n     */\n-   TR::SymbolReference* findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, bool isVolatile = false);\n+   TR::SymbolReference* findUnsafeSymbolRef(TR::DataType type, bool javaObjectReference, bool javaStaticReference, TR::Symbol::MemoryOrdering mode);\n \n    /** \\brief\n     *     Finds an unsafe symbol reference with given constraints if it exists, or creates one if no such symbol\n@@ -371,7 +371,7 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n     *  \\return\n     *     The unsafe symbol reference with given constraints if it exists.\n     */\n-   TR::SymbolReference* findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, bool isVolatile = false);\n+   TR::SymbolReference* findOrCreateUnsafeSymbolRef(TR::DataType type, bool javaObjectReference = false, bool javaStaticReference = false, TR::Symbol::MemoryOrdering mode = TR::Symbol::MemoryOrdering::Transparent);\n \n    TR::SymbolReference * findOrCreateImmutableGenericIntShadowSymbolReference(intptr_t offset); // \"Immutable\" means no aliasing issues; ie. reads from these shadows can be freely reordered wrt anything else\n \n@@ -613,14 +613,9 @@ class SymbolReferenceTable : public OMR::SymbolReferenceTableConnector\n    TR_Array<TR_BitVector *>            _immutableSymRefNumbers;\n \n    /** \\brief\n-    *     Represents the set of symbol references to static fields of Java objects.\n-    */\n-   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticSymRefs;\n-\n-   /** \\brief\n-    *     Represents the set of symbol references to static volatile fields of Java objects.\n+    *     Represents the set of symbol references to static fields of Java objects for each access mode.\n     */\n-   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticVolatileSymRefs;\n+   TR_Array<TR::SymbolReference *> * _unsafeJavaStaticSymRefs[TR::Symbol::numberOfMemoryOrderings];\n \n    ResolvedFieldShadows _resolvedFieldShadows;\n \ndiff --git a/runtime/compiler/env/j9method.cpp b/runtime/compiler/env/j9method.cpp\nindex a77ccff06f8..d5ba791cac4 100644\n--- a/runtime/compiler/env/j9method.cpp\n+++ b/runtime/compiler/env/j9method.cpp\n@@ -2907,16 +2907,35 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putObjectVolatile\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n       {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putReferenceVolatile\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n \n-      {x(TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V,       \"putBooleanRelease\", \"(Ljava/lang/Object;JZ)V\")},\n-      {x(TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V,          \"putByteRelease\",    \"(Ljava/lang/Object;JB)V\")},\n-      {x(TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V,          \"putCharRelease\",    \"(Ljava/lang/Object;JC)V\")},\n-      {x(TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V,         \"putShortRelease\",   \"(Ljava/lang/Object;JS)V\")},\n-      {x(TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V,           \"putIntRelease\",     \"(Ljava/lang/Object;JI)V\")},\n-      {x(TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V,          \"putLongRelease\",    \"(Ljava/lang/Object;JJ)V\")},\n-      {x(TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V,         \"putFloatRelease\",   \"(Ljava/lang/Object;JF)V\")},\n-      {x(TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V,        \"putDoubleRelease\",  \"(Ljava/lang/Object;JD)V\")},\n-      {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putObjectRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n-      {x(TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V, \"putReferenceRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+      {x(TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V,       \"putBooleanRelease\",    \"(Ljava/lang/Object;JZ)V\")},\n+      {x(TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V,          \"putByteRelease\",       \"(Ljava/lang/Object;JB)V\")},\n+      {x(TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V,          \"putCharRelease\",       \"(Ljava/lang/Object;JC)V\")},\n+      {x(TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V,         \"putShortRelease\",      \"(Ljava/lang/Object;JS)V\")},\n+      {x(TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V,           \"putIntRelease\",        \"(Ljava/lang/Object;JI)V\")},\n+      {x(TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V,          \"putLongRelease\",       \"(Ljava/lang/Object;JJ)V\")},\n+      {x(TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V,         \"putFloatRelease\",      \"(Ljava/lang/Object;JF)V\")},\n+      {x(TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V,        \"putDoubleRelease\",     \"(Ljava/lang/Object;JD)V\")},\n+      {x(TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V, \"putReferenceRelease\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+\n+      {x(TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V,          \"putBooleanOpaque\",    \"(Ljava/lang/Object;JZ)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V,             \"putByteOpaque\",       \"(Ljava/lang/Object;JB)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V,             \"putCharOpaque\",       \"(Ljava/lang/Object;JC)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V,            \"putShortOpaque\",      \"(Ljava/lang/Object;JS)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V,              \"putIntOpaque\",        \"(Ljava/lang/Object;JI)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V,             \"putLongOpaque\",       \"(Ljava/lang/Object;JJ)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V,            \"putFloatOpaque\",      \"(Ljava/lang/Object;JF)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V,           \"putDoubleOpaque\",     \"(Ljava/lang/Object;JD)V\")},\n+      {x(TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V, \"putReferenceOpaque\",  \"(Ljava/lang/Object;JLjava/lang/Object;)V\")},\n+\n+      {x(TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z,           \"getBooleanOpaque\",    \"(Ljava/lang/Object;J)Z\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B,              \"getByteOpaque\",       \"(Ljava/lang/Object;J)B\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C,              \"getCharOpaque\",       \"(Ljava/lang/Object;J)C\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S,             \"getShortOpaque\",      \"(Ljava/lang/Object;J)S\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I,               \"getIntOpaque\",        \"(Ljava/lang/Object;J)I\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J,              \"getLongOpaque\",       \"(Ljava/lang/Object;J)J\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F,             \"getFloatOpaque\",      \"(Ljava/lang/Object;J)F\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D,            \"getDoubleOpaque\",     \"(Ljava/lang/Object;J)D\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject,  \"getReferenceOpaque\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n       {x(TR::sun_misc_Unsafe_putInt_jlObjectII_V,           \"putInt\",     \"(Ljava/lang/Object;II)V\")},\n \n@@ -2942,16 +2961,16 @@ void TR_ResolvedJ9Method::construct()\n       {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getObjectVolatile\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n       {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getReferenceVolatile\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n-      {x(TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z,        \"getBooleanAcquire\", \"(Ljava/lang/Object;J)Z\")},\n-      {x(TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B,           \"getByteAcquire\",    \"(Ljava/lang/Object;J)B\")},\n-      {x(TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C,           \"getCharAcquire\",    \"(Ljava/lang/Object;J)C\")},\n-      {x(TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S,          \"getShortAcquire\",   \"(Ljava/lang/Object;J)S\")},\n-      {x(TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I,            \"getIntAcquire\",     \"(Ljava/lang/Object;J)I\")},\n-      {x(TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J,           \"getLongAcquire\",    \"(Ljava/lang/Object;J)J\")},\n-      {x(TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F,          \"getFloatAcquire\",   \"(Ljava/lang/Object;J)F\")},\n-      {x(TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D,         \"getDoubleAcquire\",  \"(Ljava/lang/Object;J)D\")},\n-      {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getObjectAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n-      {x(TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject,  \"getReferenceAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z,           \"getBooleanAcquire\", \"(Ljava/lang/Object;J)Z\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B,              \"getByteAcquire\",    \"(Ljava/lang/Object;J)B\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C,              \"getCharAcquire\",    \"(Ljava/lang/Object;J)C\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S,             \"getShortAcquire\",   \"(Ljava/lang/Object;J)S\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I,               \"getIntAcquire\",     \"(Ljava/lang/Object;J)I\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J,              \"getLongAcquire\",    \"(Ljava/lang/Object;J)J\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F,             \"getFloatAcquire\",   \"(Ljava/lang/Object;J)F\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D,            \"getDoubleAcquire\",  \"(Ljava/lang/Object;J)D\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,  \"getObjectAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n+      {x(TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject,  \"getReferenceAcquire\",  \"(Ljava/lang/Object;J)Ljava/lang/Object;\")},\n \n       {x(TR::sun_misc_Unsafe_putByte_JB_V,                  \"putByte\",    \"(JB)V\")},\n       {x(TR::sun_misc_Unsafe_putShort_JS_V,                 \"putShort\",   \"(JS)V\")},\n@@ -5002,6 +5021,36 @@ TR_ResolvedJ9Method::setRecognizedMethodInfo(TR::RecognizedMethod rm)\n             case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n             case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n \n+            case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+            case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+            case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+            case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+            case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+            case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+            case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+            case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+            case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+\n+            case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+            case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+            case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+            case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+            case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+            case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+            case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+            case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+            case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+\n+            case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+            case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+            case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+            case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+            case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+            case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+            case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+            case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+            case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+\n             case TR::sun_misc_Unsafe_putByte_JB_V:\n             case TR::org_apache_harmony_luni_platform_OSMemory_putByte_JB_V:\n             case TR::sun_misc_Unsafe_putChar_JC_V:\n@@ -5664,6 +5713,33 @@ TR_J9MethodBase::isUnsafeWithObjectArg()\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n       default:\n          return false;\n@@ -5722,6 +5798,33 @@ TR_J9MethodBase::isUnsafeGetPutWithObjectArg(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n       default:\n          return false;\n@@ -5755,26 +5858,62 @@ TR_J9MethodBase::unsafeDataTypeForObject(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n          return TR::Int32;\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n          return TR::Int64;\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n          return TR::Float;\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n          return TR::Double;\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return TR::Address;\n       default:\n          TR_ASSERT(false, \"Method is not supported\\n\");\n@@ -5795,6 +5934,14 @@ TR_J9MethodBase::unsafeDataTypeForArray(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n          return TR::Int8;\n       case TR::sun_misc_Unsafe_getChar_jlObjectJ_C:\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n@@ -5804,31 +5951,59 @@ TR_J9MethodBase::unsafeDataTypeForArray(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n          return TR::Int16;\n       case TR::sun_misc_Unsafe_getInt_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n          return TR::Int32;\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n          return TR::Int64;\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n          return TR::Float;\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n          return TR::Double;\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return TR::Address;\n       default:\n          TR_ASSERT(false, \"Method is not supported\\n\");\n@@ -5866,6 +6041,66 @@ TR_J9MethodBase::isVolatileUnsafe(TR::RecognizedMethod rm)\n    return false;\n    }\n \n+bool\n+TR_J9MethodBase::isAcquireReleaseUnsafe(TR::RecognizedMethod rm)\n+   {\n+   switch (rm)\n+      {\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+         return true;\n+      default:\n+         return false;\n+      }\n+      return false;\n+   }\n+\n+bool\n+TR_J9MethodBase::isOpaqueUnsafe(TR::RecognizedMethod rm)\n+   {\n+   switch (rm)\n+      {\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+         return true;\n+      default:\n+         return false;\n+      }\n+   return false;\n+   }\n+\n bool\n TR_J9MethodBase::isUnsafeGetPutBoolean(TR::RecognizedMethod rm)\n    {\n@@ -5873,8 +6108,12 @@ TR_J9MethodBase::isUnsafeGetPutBoolean(TR::RecognizedMethod rm)\n       {\n       case TR::sun_misc_Unsafe_getBoolean_jlObjectJ_Z:\n       case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n          return true;\n       default:\n          break;\n@@ -5894,37 +6133,46 @@ TR_J9MethodBase::isUnsafePut(TR::RecognizedMethod rm)\n       case TR::sun_misc_Unsafe_getAndSetInt:\n       case TR::sun_misc_Unsafe_getAndSetLong:\n       case TR::sun_misc_Unsafe_putAddress_JJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n       case TR::sun_misc_Unsafe_putByte_JB_V:\n       case TR::sun_misc_Unsafe_putByte_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n       case TR::sun_misc_Unsafe_putChar_JC_V:\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n       case TR::sun_misc_Unsafe_putDouble_JD_V:\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n       case TR::sun_misc_Unsafe_putFloat_JF_V:\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n       case TR::sun_misc_Unsafe_putInt_JI_V:\n       case TR::sun_misc_Unsafe_putInt_jlObjectII_V:\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n       case TR::sun_misc_Unsafe_putLong_JJ_V:\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n       case TR::sun_misc_Unsafe_putShort_JS_V:\ndiff --git a/runtime/compiler/env/j9method.h b/runtime/compiler/env/j9method.h\nindex 134d593db01..a6d351dc20f 100644\n--- a/runtime/compiler/env/j9method.h\n+++ b/runtime/compiler/env/j9method.h\n@@ -120,6 +120,8 @@ class TR_J9MethodBase : public TR::Method\n    static bool                     isUnsafeGetPutBoolean(TR::RecognizedMethod rm);\n    static bool                     isUnsafePut(TR::RecognizedMethod rm);\n    static bool                     isVolatileUnsafe(TR::RecognizedMethod rm);\n+   static bool                     isAcquireReleaseUnsafe(TR::RecognizedMethod rm);\n+   static bool                     isOpaqueUnsafe(TR::RecognizedMethod rm);\n    static TR::DataType             unsafeDataTypeForArray(TR::RecognizedMethod rm);\n    static TR::DataType             unsafeDataTypeForObject(TR::RecognizedMethod rm);\n    static bool                     isVarHandleOperationMethod(TR::RecognizedMethod rm);\ndiff --git a/runtime/compiler/il/J9Node.cpp b/runtime/compiler/il/J9Node.cpp\nindex 5b216a8ecb1..e6712cc621b 100644\n--- a/runtime/compiler/il/J9Node.cpp\n+++ b/runtime/compiler/il/J9Node.cpp\n@@ -2078,62 +2078,6 @@ J9::Node::chkSpineCheckWithArrayElementChild()\n    return self()->getOpCode().isSpineCheck() && _flags.testAny(spineCHKWithArrayElementChild);\n    }\n \n-bool\n-J9::Node::isUnsafePutOrderedCall()\n-   {\n-   if (!self()->getOpCode().isCall())\n-      return false;\n-\n-   if (!self()->getSymbol()->isMethod())\n-      return false;\n-\n-   bool isPutOrdered = false;\n-   TR::MethodSymbol *symbol = self()->getSymbol()->getMethodSymbol();\n-   if (!symbol)\n-      return false;\n-\n-   if ((symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V) ||\n-       (symbol->getRecognizedMethod() == TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V))\n-      isPutOrdered = true;\n-\n-   return isPutOrdered;\n-   }\n-\n-bool\n-J9::Node::isDontInlinePutOrderedCall()\n-   {\n-   TR_ASSERT(self()->getOpCode().isCall(), \" Can only call this routine for a call node \\n\");\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-\n-   TR_ASSERT(isPutOrdered, \"attempt to set dontInlinePutOrderedCall flag and not a putOrdered call\");\n-   if (isPutOrdered)\n-      return _flags.testAny(dontInlineUnsafePutOrderedCall);\n-   else\n-      return false;\n-   }\n-\n-void\n-J9::Node::setDontInlinePutOrderedCall(TR::Compilation *comp)\n-   {\n-   TR_ASSERT(self()->getOpCode().isCall(), \" Can only call this routine for a call node \\n\");\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-\n-   TR_ASSERT(isPutOrdered, \"attempt to set dontInlinePutOrderedCall flag and not a putOrdered call\");\n-   if (isPutOrdered)\n-      {\n-      if (performNodeTransformation1(comp, \"O^O NODE FLAGS: Setting dontInlineUnsafePutOrderedCall flag on node %p\\n\", self()))\n-         _flags.set(dontInlineUnsafePutOrderedCall);\n-      }\n-\n-   }\n-\n bool\n J9::Node::isUnsafeCopyMemoryIntrinsic()\n    {\n@@ -2155,13 +2099,6 @@ J9::Node::isUnsafeCopyMemoryIntrinsic()\n    return false;\n    }\n \n-bool\n-J9::Node::chkDontInlineUnsafePutOrderedCall()\n-   {\n-   bool isPutOrdered = self()->isUnsafePutOrderedCall();\n-   return isPutOrdered && _flags.testAny(dontInlineUnsafePutOrderedCall);\n-   }\n-\n bool\n J9::Node::isUnsafeGetPutCASCallOnNonArray()\n    {\ndiff --git a/runtime/compiler/il/J9Node.hpp b/runtime/compiler/il/J9Node.hpp\nindex e259774b8a6..d574af423bf 100644\n--- a/runtime/compiler/il/J9Node.hpp\n+++ b/runtime/compiler/il/J9Node.hpp\n@@ -297,12 +297,6 @@ class OMR_EXTENSIBLE Node : public OMR::NodeConnector\n    void setSpineCheckWithArrayElementChild(bool v, TR::Compilation *comp);\n    bool chkSpineCheckWithArrayElementChild();\n \n-   // Flags used by call nodes\n-   bool isUnsafePutOrderedCall();\n-   bool isDontInlinePutOrderedCall();\n-   void setDontInlinePutOrderedCall(TR::Compilation *comp);\n-   bool chkDontInlineUnsafePutOrderedCall();\n-\n    /**\n     * Checks  and return true if the callNode is JNI Call to Unsafe.copyMemory\n     */\n@@ -457,7 +451,6 @@ class OMR_EXTENSIBLE Node : public OMR::NodeConnector\n       spineCHKWithArrayElementChild         = 0x00004000,\n \n       // Flags used by call nodes\n-      dontInlineUnsafePutOrderedCall        = 0x00000800, ///< unsafe putOrdered calls\n       processedByCallCloneConstrain         = 0x00100000,\n       unsafeGetPutOnNonArray                = 0x00200000,\n       DAAVariableSlowCall                   = 0x00400000, ///< Used to avoid Variable precision DAA optimization\ndiff --git a/runtime/compiler/ilgen/Walker.cpp b/runtime/compiler/ilgen/Walker.cpp\nindex fc22a0da33d..2c0473a6870 100644\n--- a/runtime/compiler/ilgen/Walker.cpp\n+++ b/runtime/compiler/ilgen/Walker.cpp\n@@ -5462,7 +5462,7 @@ TR_J9ByteCodeIlGenerator::loadStatic(int32_t cpIndex)\n    TR::Node * treeTopNode = 0;\n    if (symRef->isUnresolved())\n       treeTopNode = genResolveCheck(load);\n-   else if (symbol->isVolatile() || _generateReadBarriersForFieldWatch)\n+   else if (!symbol->isTransparent() || _generateReadBarriersForFieldWatch)\n       treeTopNode = load;\n \n    if (treeTopNode)\ndiff --git a/runtime/compiler/optimizer/EscapeAnalysis.cpp b/runtime/compiler/optimizer/EscapeAnalysis.cpp\nindex 8bdd4c72d88..fd219b515b3 100644\n--- a/runtime/compiler/optimizer/EscapeAnalysis.cpp\n+++ b/runtime/compiler/optimizer/EscapeAnalysis.cpp\n@@ -9362,7 +9362,7 @@ void TR_FlowSensitiveEscapeAnalysis::analyzeNode(TR::Node *node, TR::TreeTop *tr\n    if (opCode.hasSymbolReference())\n       {\n       TR::SymbolReference *symReference = node->getSymbolReference();\n-      if (symReference->getSymbol()->isVolatile())\n+      if (!symReference->getSymbol()->isTransparent())\n          {\n          _blocksWithSyncs->set(blockNum);\n          // Keep track of this volatile load/store node tt, prefer volatile load/store over monexits since monexits can skip sync in some cases\n@@ -9690,11 +9690,8 @@ bool TR_LocalFlushElimination::examineNode(TR::Node *node, TR::TreeTop *tt, TR::\n          if (opCode.hasSymbolReference())\n             {\n             TR::SymbolReference *symReference = node->getSymbolReference();\n-            if (symReference->getSymbol()->isVolatile())\n-               {\n-               nodeHasSync = true;\n-               nodeHasVolatile = true;\n-               }\n+            nodeHasSync = symReference->getSymbol()->isAtLeastOrStrongerThanAcquireRelease();\n+            nodeHasVolatile = symReference->getSymbol()->isVolatile();\n             }\n          // Due to lock-reservation and lock reentry it's not guaranteed that a synchronised method will issue a flush\n          //if (opCode.isCall() &&\ndiff --git a/runtime/compiler/optimizer/InlinerTempForJ9.cpp b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\nindex fddae7d956c..45b76a58bae 100644\n--- a/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n+++ b/runtime/compiler/optimizer/InlinerTempForJ9.cpp\n@@ -814,7 +814,7 @@ TR_J9InlinerPolicy::genIndirectAccessCodeForUnsafeGetPut(TR::Node* directAccessO\n       indirectAccessNode = indirectAccessOrTempStoreNode->getFirstChild();\n       }\n \n-   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->isVolatile());\n+   TR::SymbolReference* indirectSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(directSymbol->getDataType(), true, true, directSymbol->getMemoryOrdering());\n \n    indirectAccessNode->setSymbolReference(indirectSymRef);\n \n@@ -1391,12 +1391,11 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n                                               TR::TreeTop * callNodeTreeTop,\n                                               TR::Node * unsafeCall,\n                                               TR::DataType type,\n-                                              bool isVolatile,\n+                                              TR::Symbol::MemoryOrdering ordering,\n                                               bool needNullCheck,\n-                                              bool isOrdered,\n                                               bool isUnaligned)\n    {\n-   if (isVolatile && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n+   if (ordering != TR::Symbol::MemoryOrdering::Transparent && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n       return false;\n \n    if (isUnaligned && comp()->cg()->getSupportsAlignedAccessOnly())\n@@ -1405,7 +1404,7 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n    if (debug(\"traceUnsafe\"))\n       printf(\"createUnsafePutWithOffset %d in %s\\n\", type.getDataType(), comp()->signature());\n \n-   debugTrace(tracer(), \"\\tcreateUnsafePutWithOffset.  call tree %p offset(datatype) %d isvolatile %d needNullCheck %d isOrdered %d\\n\", callNodeTreeTop, type.getDataType(), isVolatile, needNullCheck, isOrdered);\n+   debugTrace(tracer(), \"\\tcreateUnsafePutWithOffset.  call tree %p offset(datatype) %d ordering %s needNullCheck %d\\n\", callNodeTreeTop, type.getDataType(), TR::Symbol::getMemoryOrderingName(ordering), needNullCheck);\n \n    // Truncate the value before inlining the call\n    if (TR_J9MethodBase::isUnsafeGetPutBoolean(calleeSymbol->getRecognizedMethod()))\n@@ -1472,18 +1471,9 @@ TR_J9InlinerPolicy::createUnsafePutWithOffset(TR::ResolvedMethodSymbol *calleeSy\n    TR::Node *offset = unsafeCall->getChild(2);\n    TR::TreeTop *prevTreeTop = callNodeTreeTop->getPrevTreeTop();\n    TR::SymbolReference *newSymbolReferenceForAddress = unsafeCall->getChild(1)->getSymbolReference();\n-   TR::SymbolReference * symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, isVolatile);\n+   TR::SymbolReference * symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, ordering);\n    TR::Node *orderedCallNode = NULL;\n \n-   if (isOrdered)\n-      {\n-      symRef->getSymbol()->setOrdered();\n-      orderedCallNode = callNodeTreeTop->getNode()->duplicateTree();\n-      orderedCallNode->getFirstChild()->setDontInlinePutOrderedCall(comp());\n-\n-      debugTrace(tracer(), \"\\t Duplicate Tree for ordered call, orderedCallNode = %p\\n\", orderedCallNode);\n-      }\n-\n    static char *disableIllegalWriteReport = feGetEnv(\"TR_DisableIllegalWriteReport\");\n    TR::TreeTop* reportFinalFieldModification = NULL;\n    if (!disableIllegalWriteReport && !comp()->getOption(TR_DisableGuardedStaticFinalFieldFolding))\n@@ -1982,11 +1972,11 @@ TR_J9InlinerPolicy::createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *calleeSy\n                                               TR::TreeTop * callNodeTreeTop,\n                                               TR::Node * unsafeCall,\n                                               TR::DataType type,\n-                                              bool isVolatile,\n+                                              TR::Symbol::MemoryOrdering ordering,\n                                               bool needNullCheck,\n                                               bool isUnaligned)\n    {\n-   if (isVolatile && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n+   if (ordering != TR::Symbol::MemoryOrdering::Transparent && type == TR::Int64 && comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n       return false;\n \n    if (isUnaligned && comp()->cg()->getSupportsAlignedAccessOnly())\n@@ -2065,7 +2055,7 @@ TR_J9InlinerPolicy::createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *calleeSy\n       unsafeCall->getChild(j)->recursivelyDecReferenceCount();\n    unsafeCall->setNumChildren(1);\n \n-   TR::SymbolReference* symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, isVolatile);\n+   TR::SymbolReference* symRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, false, ordering);\n    TR_ASSERT(unsafeCall == callNodeTreeTop->getNode()->getFirstChild(), \"assumption not valid\\n\");\n    TR::Node* unsafeCallWithConversion = NULL;\n    TR::Node* callNodeWithConversion = NULL;\n@@ -2523,61 +2513,80 @@ TR_J9InlinerPolicy::inlineUnsafeCall(TR::ResolvedMethodSymbol *calleeSymbol, TR:\n    switch (callNode->getSymbol()->castToResolvedMethodSymbol()->getRecognizedMethod())\n       {\n       case TR::sun_misc_Unsafe_putByte_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_putBoolean_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_putChar_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_putShort_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_putInt_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32);\n       case TR::sun_misc_Unsafe_putLong_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64);\n       case TR::sun_misc_Unsafe_putFloat_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float);\n       case TR::sun_misc_Unsafe_putDouble_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double);\n       case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Transparent, true);\n \n       case TR::sun_misc_Unsafe_getBoolean_jlObjectJ_Z:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_getByte_jlObjectJ_B:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8);\n       case TR::sun_misc_Unsafe_getChar_jlObjectJ_C:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_getShort_jlObjectJ_S:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16);\n       case TR::sun_misc_Unsafe_getInt_jlObjectJ_I:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32);\n       case TR::sun_misc_Unsafe_getLong_jlObjectJ_J:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64);\n       case TR::sun_misc_Unsafe_getFloat_jlObjectJ_F:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float);\n       case TR::sun_misc_Unsafe_getDouble_jlObjectJ_D:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double);\n       case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Transparent, true);\n \n       case TR::sun_misc_Unsafe_putByteVolatile_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putBooleanVolatile_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putCharVolatile_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putShortVolatile_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putIntVolatile_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putLongVolatile_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putFloatVolatile_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putDoubleVolatile_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Volatile);\n       case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Volatile, true);\n+\n+      case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Volatile);\n+      case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Volatile, true);\n \n       case TR::sun_misc_Unsafe_monitorEnter_jlObject_V:\n          return createUnsafeMonitorOp(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, true);\n@@ -2585,60 +2594,98 @@ TR_J9InlinerPolicy::inlineUnsafeCall(TR::ResolvedMethodSymbol *calleeSymbol, TR:\n          return createUnsafeMonitorOp(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, false);\n \n       case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, false, false, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::AcquireRelease);\n       case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, false, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::AcquireRelease, true);\n \n       // FIXME: Update createUnsafePutWithOffset signature to have isVolatile, isOrdered, isUnaligned as enum\n       case TR::jdk_internal_misc_Unsafe_getCharUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getShortUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getIntUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_getLongUnaligned:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, /*isVolatile*/false, /*needsNullCheck*/false, /*isUnaligned*/true);\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putCharUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n-         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, /*isVolatile*/false, /*needsNullCheck*/false, /*isOrdered*/false, /*isUnaligned*/true);\n-\n-      case TR::sun_misc_Unsafe_getBooleanVolatile_jlObjectJ_Z:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n-      case TR::sun_misc_Unsafe_getByteVolatile_jlObjectJ_B:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, true);\n-      case TR::sun_misc_Unsafe_getCharVolatile_jlObjectJ_C:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n-      case TR::sun_misc_Unsafe_getShortVolatile_jlObjectJ_S:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, true);\n-      case TR::sun_misc_Unsafe_getIntVolatile_jlObjectJ_I:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, true);\n-      case TR::sun_misc_Unsafe_getLongVolatile_jlObjectJ_J:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, true);\n-      case TR::sun_misc_Unsafe_getFloatVolatile_jlObjectJ_F:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, true);\n-      case TR::sun_misc_Unsafe_getDoubleVolatile_jlObjectJ_D:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, true);\n-      case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n-         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, true, true);\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Transparent, /*needsNullCheck*/false, /*isUnaligned*/true);\n+\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::AcquireRelease);\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::AcquireRelease, true);\n+\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+         return createUnsafeGetWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Opaque, true);\n+\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int8, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int16, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int32, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Int64, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Float, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Double, TR::Symbol::MemoryOrdering::Opaque);\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n+         return createUnsafePutWithOffset(calleeSymbol, callerSymbol, callNodeTreeTop, callNode, TR::Address, TR::Symbol::MemoryOrdering::Opaque, true);\n \n       case TR::sun_misc_Unsafe_putByte_JB_V:\n       case TR::org_apache_harmony_luni_platform_OSMemory_putByte_JB_V:\n@@ -2771,14 +2818,6 @@ TR_J9InlinerPolicy::isInlineableJNI(TR_ResolvedMethod *method,TR::Node *callNode\n    if (comp->getOption(TR_DisableUnsafe))\n       return false;\n \n-   // If this put ordered call node has already been inlined, do not inline it again (JTC-JAT 71313)\n-   if (callNode && callNode->isUnsafePutOrderedCall() && callNode->isDontInlinePutOrderedCall())\n-      {\n-      debugTrace(tracer(), \"Unsafe Inlining: Unsafe Call %p already inlined\\n\", callNode);\n-\n-      return false;\n-      }\n-\n    if ((TR::Compiler->vm.canAnyMethodEventsBeHooked(comp) && !comp->fej9()->methodsCanBeInlinedEvenIfEventHooksEnabled(comp)) ||\n        (comp->fej9()->isAnyMethodTracingEnabled(method->getPersistentIdentifier()) &&\n         !comp->fej9()->traceableMethodsCanBeInlined()))\n@@ -2789,10 +2828,11 @@ TR_J9InlinerPolicy::isInlineableJNI(TR_ResolvedMethod *method,TR::Node *callNode\n       // In Java9 sun/misc/Unsafe methods are simple Java wrappers to JNI\n       // methods in jdk.internal, and the enum values above match both. Only\n       // return true for the methods that are native.\n-      // In the case of Unsafe_getXUnaligned methods, which are also wrappers to\n-      // native methods that contain some runtime checks, we benefit from directly\n-      // inlining them in inlineUnsafeCall as if they were their underlying native\n-      // methods, if we can determine that it is safe to do so.\n+      // In the case of Unsafe_getX and Unsafe_setX methods, which are also\n+      // wrappers to native methods that contain some runtime checks, we\n+      // benefit from directly inlining them in inlineUnsafeCall as if they\n+      // were their underlying native methods, if we can determine that it is\n+      // safe to do so.\n       if (!TR::Compiler->om.canGenerateArraylets() || (callNode && callNode->isUnsafeGetPutCASCallOnNonArray()))\n          return method->isNative() || isSimpleWrapperForInlineableUnsafeNativeMethod(method);\n       else\n@@ -6148,6 +6188,42 @@ TR_J9InlinerPolicy::isSimpleWrapperForInlineableUnsafeNativeMethod(TR_ResolvedMe\n       case TR::jdk_internal_misc_Unsafe_putShortUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putIntUnaligned:\n       case TR::jdk_internal_misc_Unsafe_putLongUnaligned:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanAcquire_jlObjectJ_Z:\n+      case TR::sun_misc_Unsafe_putBooleanOrdered_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteAcquire_jlObjectJ_B:\n+      case TR::sun_misc_Unsafe_putByteOrdered_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharAcquire_jlObjectJ_C:\n+      case TR::sun_misc_Unsafe_putCharOrdered_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortAcquire_jlObjectJ_S:\n+      case TR::sun_misc_Unsafe_putShortOrdered_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntAcquire_jlObjectJ_I:\n+      case TR::sun_misc_Unsafe_putIntOrdered_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongAcquire_jlObjectJ_J:\n+      case TR::sun_misc_Unsafe_putLongOrdered_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatAcquire_jlObjectJ_F:\n+      case TR::sun_misc_Unsafe_putFloatOrdered_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleAcquire_jlObjectJ_D:\n+      case TR::sun_misc_Unsafe_putDoubleOrdered_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceAcquire_jlObjectJ_jlObject:\n+      case TR::sun_misc_Unsafe_putObjectOrdered_jlObjectJjlObject_V:\n+      case TR::jdk_internal_misc_Unsafe_getBooleanOpaque_jlObjectJ_Z:\n+      case TR::jdk_internal_misc_Unsafe_putBooleanOpaque_jlObjectJZ_V:\n+      case TR::jdk_internal_misc_Unsafe_getByteOpaque_jlObjectJ_B:\n+      case TR::jdk_internal_misc_Unsafe_putByteOpaque_jlObjectJB_V:\n+      case TR::jdk_internal_misc_Unsafe_getCharOpaque_jlObjectJ_C:\n+      case TR::jdk_internal_misc_Unsafe_putCharOpaque_jlObjectJC_V:\n+      case TR::jdk_internal_misc_Unsafe_getShortOpaque_jlObjectJ_S:\n+      case TR::jdk_internal_misc_Unsafe_putShortOpaque_jlObjectJS_V:\n+      case TR::jdk_internal_misc_Unsafe_getIntOpaque_jlObjectJ_I:\n+      case TR::jdk_internal_misc_Unsafe_putIntOpaque_jlObjectJI_V:\n+      case TR::jdk_internal_misc_Unsafe_getLongOpaque_jlObjectJ_J:\n+      case TR::jdk_internal_misc_Unsafe_putLongOpaque_jlObjectJJ_V:\n+      case TR::jdk_internal_misc_Unsafe_getFloatOpaque_jlObjectJ_F:\n+      case TR::jdk_internal_misc_Unsafe_putFloatOpaque_jlObjectJF_V:\n+      case TR::jdk_internal_misc_Unsafe_getDoubleOpaque_jlObjectJ_D:\n+      case TR::jdk_internal_misc_Unsafe_putDoubleOpaque_jlObjectJD_V:\n+      case TR::jdk_internal_misc_Unsafe_getReferenceOpaque_jlObjectJ_jlObject:\n+      case TR::jdk_internal_misc_Unsafe_putReferenceOpaque_jlObjectJjlObject_V:\n          return true;\n \n       default:\ndiff --git a/runtime/compiler/optimizer/J9Inliner.hpp b/runtime/compiler/optimizer/J9Inliner.hpp\nindex c859c925bfb..c29ffc488a5 100644\n--- a/runtime/compiler/optimizer/J9Inliner.hpp\n+++ b/runtime/compiler/optimizer/J9Inliner.hpp\n@@ -249,13 +249,13 @@ class TR_J9InlinerPolicy : public OMR_InlinerPolicy\n        *         after executing either \\c branchTargetTree or \\c fallThroughTree\n        */\n       TR::Block * createUnsafeGetPutCallDiamond(TR::TreeTop* callNodeTreeTop, TR::TreeTop* comparisonTree, TR::TreeTop* branchTargetTree, TR::TreeTop* fallThroughTree);\n-      bool createUnsafePutWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool, bool needNullCheck = false, bool isOrdered = false, bool isUnaligned = false);\n+      bool createUnsafePutWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent, bool needNullCheck = false, bool isUnaligned = false);\n       TR::TreeTop* genDirectAccessCodeForUnsafeGetPut(TR::Node* callNode, bool conversionNeeded, bool isUnsafeGet);\n       void createTempsForUnsafePutGet(TR::Node*& unsafeAddress, TR::Node* unsafeCall, TR::TreeTop* callNodeTreeTop, TR::Node*& offset, TR::SymbolReference*& newSymbolReferenceForAddress, bool isUnsafeGet);\n       bool         createUnsafeGet(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool compress = true);\n       bool         createUnsafePut(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool compress = true);\n       TR::Node *    createUnsafeAddress(TR::Node *);\n-      bool         createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, bool, bool needNullCheck = false, bool isUnaligned = false);\n+      bool         createUnsafeGetWithOffset(TR::ResolvedMethodSymbol *, TR::ResolvedMethodSymbol *, TR::TreeTop *, TR::Node *, TR::DataType, TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent, bool needNullCheck = false, bool isUnaligned = false);\n       TR::Node *    createUnsafeAddressWithOffset(TR::Node *);\n       bool         createUnsafeFence(TR::TreeTop *, TR::Node *, TR::ILOpCodes);\n \ndiff --git a/runtime/compiler/optimizer/J9TransformUtil.cpp b/runtime/compiler/optimizer/J9TransformUtil.cpp\nindex 1c3f5407776..d43ddee54c4 100644\n--- a/runtime/compiler/optimizer/J9TransformUtil.cpp\n+++ b/runtime/compiler/optimizer/J9TransformUtil.cpp\n@@ -2295,7 +2295,7 @@ J9::TransformUtil::fieldShouldBeCompressed(TR::Node *node, TR::Compilation *comp\n          !symRefTab->isVtableEntrySymbolRef(symRef) &&\n          (symRef != symRefTab->findClassFromJavaLangClassSymbolRef()) &&\n          (symRef != symRefTab->findAddressOfClassOfMethodSymbolRef()) &&\n-         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->isVolatile())) &&\n+         (symRef != symRefTab->findUnsafeSymbolRef(TR::Address, true, true, symbol->getMemoryOrdering())) &&\n          !symbol->isStatic() &&\n          (symbol->isCollectedReference() || symbol->isArrayletShadowSymbol() || symbol == symRefTab->findGenericIntShadowSymbol()) &&\n          !(symbol->isUnsafeShadowSymbol() && symbol->getDataType() != TR::Address))\ndiff --git a/runtime/compiler/optimizer/MonitorElimination.cpp b/runtime/compiler/optimizer/MonitorElimination.cpp\nindex cbc1fd8be6d..3066141b0b3 100644\n--- a/runtime/compiler/optimizer/MonitorElimination.cpp\n+++ b/runtime/compiler/optimizer/MonitorElimination.cpp\n@@ -2608,7 +2608,7 @@ void TR::MonitorElimination::coarsenMonitorRanges()\n       if (node->getOpCode().hasSymbolReference())\n          symRef = node->getSymbolReference();\n       if (node->getOpCode().isStore() ||\n-          node->mightHaveVolatileSymbolReference())\n+          node->mightHaveNonTransparentSymbolReference())\n          {\n          if (symRef->sharesSymbol())\n             {\n@@ -2661,10 +2661,10 @@ void TR::MonitorElimination::coarsenMonitorRanges()\n             }\n          }\n \n-      bool performsVolatileAccess=node->performsVolatileAccess(volatileVisitCount);\n+      bool performsNonTransparentAccess=node->performsNonTransparentAccess(volatileVisitCount);\n       if (virtCall)\n          _guardedVirtualCallBlocks->set(blockNum);\n-      else if (performsVolatileAccess || exceptionInThisTree)\n+      else if (performsNonTransparentAccess || exceptionInThisTree)\n          {\n            //dumpOptDetails(comp(), \"Contains calls set for block_%d because of node %p\\n\", blockNum, treetopNode);\n          _containsCalls->set(blockNum);\n@@ -5207,7 +5207,7 @@ bool TR::MonitorElimination::symbolsAreNotWrittenInTrees(TR::TreeTop *startTree,\n          cursorNode = cursorNode->getFirstChild();\n \n       if (cursorNode->getOpCode().isStore() ||\n-          cursorNode->mightHaveVolatileSymbolReference())\n+          cursorNode->mightHaveNonTransparentSymbolReference())\n          {\n          TR::SymbolReference *symReference = cursorNode->getSymbolReference();\n          if (_symRefsInSimpleLockedRegion->get(symReference->getReferenceNumber()))\ndiff --git a/runtime/compiler/optimizer/UnsafeFastPath.cpp b/runtime/compiler/optimizer/UnsafeFastPath.cpp\nindex 2545125b705..0db8aab98a0 100644\n--- a/runtime/compiler/optimizer/UnsafeFastPath.cpp\n+++ b/runtime/compiler/optimizer/UnsafeFastPath.cpp\n@@ -559,7 +559,7 @@ int32_t TR_UnsafeFastPath::perform()\n          TR::Node *object = NULL; // the owning object to be written to or read from in original unsafe call\n          TR::Node *base = NULL; // the base used to calcluate address for the new store / load\n          TR::DataType type = TR::NoType;\n-         bool isVolatile = false;\n+         TR::Symbol::MemoryOrdering ordering = TR::Symbol::MemoryOrdering::Transparent;\n          bool isArrayOperation = false;\n          bool isByIndex = false;\n          int32_t objectChild = 1;\n@@ -630,7 +630,7 @@ int32_t TR_UnsafeFastPath::perform()\n          switch (symbol->getRecognizedMethod())\n             {\n             case TR::sun_misc_Unsafe_putObjectVolatile_jlObjectJjlObject_V:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::sun_misc_Unsafe_putObject_jlObjectJjlObject_V:\n                switch (comp()->getMethodSymbol()->getRecognizedMethod())\n                   {\n@@ -649,7 +649,7 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int8;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getByteFromArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getByteFromArray:\n                type = TR::Int8;\n                break;\n@@ -659,12 +659,12 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getCharFromArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getCharFromArray:\n                type = TR::Int16;\n                break;\n             case TR::sun_misc_Unsafe_getObjectVolatile_jlObjectJ_jlObject:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::sun_misc_Unsafe_getObject_jlObjectJ_jlObject:\n                switch (methodSymbol->getRecognizedMethod())\n                   {\n@@ -694,7 +694,7 @@ int32_t TR_UnsafeFastPath::perform()\n                break;\n             case TR::com_ibm_jit_JITHelpers_getIntFromArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_getIntFromObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getIntFromArray:\n             case TR::com_ibm_jit_JITHelpers_getIntFromObject:\n                type = TR::Int32;\n@@ -703,14 +703,14 @@ int32_t TR_UnsafeFastPath::perform()\n             case TR::com_ibm_jit_JITHelpers_getLongFromObjectVolatile:\n                if (comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n                   break; // if the platform cg does not support volatile longs just generate the call\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getLongFromArray:\n             case TR::com_ibm_jit_JITHelpers_getLongFromObject:\n                type = TR::Int64;\n                break;\n             case TR::com_ibm_jit_JITHelpers_getObjectFromArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_getObjectFromObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_getObjectFromArray:\n             case TR::com_ibm_jit_JITHelpers_getObjectFromObject:\n                type = TR::Address;\n@@ -721,7 +721,7 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int8;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putByteInArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putByteInArray:\n                value = node->getChild(3);\n                type = TR::Int8;\n@@ -737,14 +737,14 @@ int32_t TR_UnsafeFastPath::perform()\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putCharInArrayVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putCharInArray:\n                value = node->getChild(3);\n                type = TR::Int16;\n                break;\n             case TR::com_ibm_jit_JITHelpers_putIntInArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_putIntInObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putIntInArray:\n             case TR::com_ibm_jit_JITHelpers_putIntInObject:\n                value = node->getChild(3);\n@@ -754,7 +754,7 @@ int32_t TR_UnsafeFastPath::perform()\n             case TR::com_ibm_jit_JITHelpers_putLongInObjectVolatile:\n                if (comp()->target().is32Bit() && !comp()->cg()->getSupportsInlinedAtomicLongVolatiles())\n                   break; // if the platform cg does not support volatile longs just generate the call\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putLongInArray:\n             case TR::com_ibm_jit_JITHelpers_putLongInObject:\n                value = node->getChild(3);\n@@ -762,7 +762,7 @@ int32_t TR_UnsafeFastPath::perform()\n                break;\n             case TR::com_ibm_jit_JITHelpers_putObjectInArrayVolatile:\n             case TR::com_ibm_jit_JITHelpers_putObjectInObjectVolatile:\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n             case TR::com_ibm_jit_JITHelpers_putObjectInArray:\n             case TR::com_ibm_jit_JITHelpers_putObjectInObject:\n                value = node->getChild(3);\n@@ -796,10 +796,14 @@ int32_t TR_UnsafeFastPath::perform()\n                value = node->getChild(3);\n \n             if (TR_J9MethodBase::isVolatileUnsafe(calleeMethod))\n-               isVolatile = true;\n+               ordering = TR::Symbol::MemoryOrdering::Volatile;\n+            else if (TR_J9MethodBase::isAcquireReleaseUnsafe(calleeMethod))\n+               ordering = TR::Symbol::MemoryOrdering::AcquireRelease;\n+            else if (TR_J9MethodBase::isOpaqueUnsafe(calleeMethod))\n+               ordering = TR::Symbol::MemoryOrdering::Opaque;\n \n             if (trace())\n-               traceMsg(comp(), \"VarHandle operation: isArrayOperation %d type %s value %p isVolatile %d on node %p\\n\", isArrayOperation, J9::DataType::getName(type), value, isVolatile, node);\n+               traceMsg(comp(), \"VarHandle operation: isArrayOperation %d type %s value %p access mode %s on node %p\\n\", isArrayOperation, J9::DataType::getName(type), value, TR::Symbol::getMemoryOrderingName(ordering), node);\n             }\n \n          bool mightBeArraylets = isArrayOperation && TR::Compiler->om.canGenerateArraylets();\n@@ -821,7 +825,7 @@ int32_t TR_UnsafeFastPath::perform()\n                TR::TransformUtil::truncateBooleanForUnsafeGetPut(comp(), tt);\n                }\n \n-            TR::SymbolReference * unsafeSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, isStatic, isVolatile);\n+            TR::SymbolReference * unsafeSymRef = comp()->getSymRefTab()->findOrCreateUnsafeSymbolRef(type, true, isStatic, ordering);\n \n             // some helpers are special - we know they are accessing an array and we know the kind of that array\n             // so use the more helpful symref if we can\ndiff --git a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp b/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\nindex e4d9d4a94d8..04f5a9b5531 100644\n--- a/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/p/codegen/J9TreeEvaluator.cpp\n@@ -436,11 +436,6 @@ TR::Register *outlinedHelperWrtbarEvaluator(TR::Node *node, TR::CodeGenerator *c\n    TR::Register *dstObjectReg = cg->gprClobberEvaluate(node->getSecondChild());\n    TR::Compilation* comp = cg->comp();\n \n-   TR::Symbol *storeSym = node->getSymbolReference()->getSymbol();\n-   const bool isOrderedShadowStore = storeSym->isShadow() && storeSym->isOrdered();\n-   const bool needSync = comp->target().isSMP() && (storeSym->isSyncVolatile() || isOrderedShadowStore);\n-   const bool lazyVolatile = comp->target().isSMP() && isOrderedShadowStore;\n-\n    // Under real-time, store happens after the wrtbar\n    // For other GC modes, store happens before the wrtbar\n    if (comp->getOptions()->realTimeGC())\n@@ -1536,7 +1531,7 @@ TR::Register *iGenerateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg\n    generateDepLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n    // TODO: Allow this to be patched or skipped at runtime for unresolved symrefs\n-   if (node->getSymbol()->isSyncVolatile() && comp->target().isSMP())\n+   if (node->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() && comp->target().isSMP())\n       {\n       generateInstruction(cg, comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P7) ? TR::InstOpCode::lwsync : TR::InstOpCode::isync, node);\n       }\n@@ -1633,7 +1628,7 @@ TR::Register *aGenerateSoftwareReadBarrier(TR::Node *node, TR::CodeGenerator *cg\n    generateDepLabelInstruction(cg, TR::InstOpCode::label, node, endLabel, deps);\n \n    // TODO: Allow this to be patched or skipped at runtime for unresolved symrefs\n-   if (node->getSymbol()->isSyncVolatile() && comp->target().isSMP())\n+   if (node->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() && comp->target().isSMP())\n       {\n       generateInstruction(cg, comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P7) ? TR::InstOpCode::lwsync : TR::InstOpCode::isync, node);\n       }\n@@ -3352,20 +3347,25 @@ TR::Register *J9::Power::TreeEvaluator::flushEvaluator(TR::Node *node, TR::CodeG\n          TR::Node *child = (node->getNumChildren() >= 1) ? node->getFirstChild() : NULL;\n          if (!child || (node->getOpCodeValue() != TR::monexit && child->getOpCodeValue() != TR::monexit))\n             {\n-            // Iterate the next tree to see if there is a resolved volatile load/store node that has yet to be evaluated\n-            // An unresolved volatile might not actually be a volatile access, and therefore can not replace the AllocationFence\n-            // An node that is already evaluated will not actually emit an 'lwsync' so it can not replace the AllocationFence\n-            bool volatileAccessFound = false;\n+            // Iterate the next tree to see if there is a resolved acquire/release load/store node that has yet to be evaluated\n+            // An unresolved acquire/release might not actually be an acquire/release access, and therefore can not replace the AllocationFence\n+            // A node that is already evaluated will not actually emit an 'lwsync' so it can not replace the AllocationFence\n+            // NOTE: As things currently stand, we won't ever encounter an unresolved symref that is strictly acquire/release,\n+            // but the following code will handle unresolved volatile symrefs as well\n+            bool fencedAccessFound = false;\n             for (TR::PreorderNodeIterator it(tt, cg->comp()); it.currentTree() == tt; ++it)\n                {\n                node = it.currentNode();\n-               if (node->getOpCode().hasSymbolReference() && !node->hasUnresolvedSymbolReference() && node->getSymbolReference()->getSymbol()->isVolatile() && !node->getRegister())\n+               if (node->getOpCode().hasSymbolReference() &&\n+                   !node->hasUnresolvedSymbolReference() &&\n+                   node->getSymbolReference()->getSymbol()->isAtLeastOrStrongerThanAcquireRelease() &&\n+                   !node->getRegister())\n                   {\n-                  volatileAccessFound = true;\n+                  fencedAccessFound = true;\n                   break;\n                   }\n                }\n-            if (!volatileAccessFound)\n+            if (!fencedAccessFound)\n                generateInstruction(cg, TR::InstOpCode::lwsync, node);\n             }\n          }\n",
    "78878f2f277c3cb4a40cdb82475fc1caa1ec605e": "diff --git a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\nindex ff1014a8e53..3491afb5e39 100644\n--- a/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n+++ b/runtime/gc_vlhgc/VLHGCAccessBarrier.cpp\n@@ -258,7 +258,7 @@ MM_VLHGCAccessBarrier::indexableDataDisplacement(J9StackWalkState *walkState, J9\n \tIDATA displacement = 0;\n \n #if defined(J9VM_ENV_DATA64)\n-\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->walkThread->omrVMThread);\n+\tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(walkState->currentThread->omrVMThread);\n \tAssert_MM_true(_extensions->isVirtualLargeObjectHeapEnabled);\n \t/* Potential danger in future of this not being called by a GC Stack Walker - hence this assert */\n \tAssert_MM_true(walkState->objectSlotWalkFunction == gc_vmThreadStackDoOSlotIterator);\n",
    "abda4707011bbffee55da23641fc5d2c8e9c4542": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex ad4ce903e76..e17e4477e5c 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5216,21 +5216,26 @@ class INTERPRETER_CLASS\n \t\tupdateVMStruct(REGISTER_ARGS);\n #if JAVA_SPEC_VERSION >= 24\n \t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n-\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n-\t\t\tif ((millis > 0) || (nanos > 0)) {\n-\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n-\t\t\t}\n-\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n-\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n-\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n-\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n-\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n-\t\t\t\t/* Handle the virtual thread Object.wait call. */\n-\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n-\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\tif (getObjectMonitorOwner(_vm, object, NULL) == _currentThread) {\n+\t\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n+\t\t\t\tif ((millis > 0) || (nanos > 0)) {\n+\t\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n+\t\t\t\t}\n+\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\t/* Handle the virtual thread Object.wait call. */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t\t} else {\n+\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\t}\n \t\t\t} else {\n-\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\trc = THROW_ILLEGAL_MONITOR_STATE;\n \t\t\t}\n+\n \t\t\treturn rc;\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n",
    "2b33c84059f2463ecd1416e2c44a9b8f555e58db": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex ad4ce903e76..e17e4477e5c 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5216,21 +5216,26 @@ class INTERPRETER_CLASS\n \t\tupdateVMStruct(REGISTER_ARGS);\n #if JAVA_SPEC_VERSION >= 24\n \t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n-\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n-\t\t\tif ((millis > 0) || (nanos > 0)) {\n-\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n-\t\t\t}\n-\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n-\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n-\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n-\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n-\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n-\t\t\t\t/* Handle the virtual thread Object.wait call. */\n-\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n-\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\tif (getObjectMonitorOwner(_vm, object, NULL) == _currentThread) {\n+\t\t\t\tUDATA newState = JAVA_LANG_VIRTUALTHREAD_WAITING;\n+\t\t\t\tif ((millis > 0) || (nanos > 0)) {\n+\t\t\t\t\tnewState = JAVA_LANG_VIRTUALTHREAD_TIMED_WAITING;\n+\t\t\t\t}\n+\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\tUDATA result = preparePinnedVirtualThreadForUnmount(_currentThread, object, true);\n+\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\tif (J9_OBJECT_MONITOR_OOM != result) {\n+\t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\t/* Handle the virtual thread Object.wait call. */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n+\t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n+\t\t\t\t} else {\n+\t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\t}\n \t\t\t} else {\n-\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n+\t\t\t\trc = THROW_ILLEGAL_MONITOR_STATE;\n \t\t\t}\n+\n \t\t\treturn rc;\n \t\t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n",
    "b5849ba02cd74948641a19e48b4ef56c06d2439c": "diff --git a/runtime/port/sysvipc/j9shmem.c b/runtime/port/sysvipc/j9shmem.c\nindex e215ac681b3..d214daa834f 100644\n--- a/runtime/port/sysvipc/j9shmem.c\n+++ b/runtime/port/sysvipc/j9shmem.c\n@@ -47,6 +47,7 @@\n #include \"portpriv.h\"\n #include \"j9sharedhelper.h\"\n #include \"j9shmem.h\"\n+#include \"omrutil.h\"\n #include \"protect_helpers.h\"\n #include \"j9SysvIPCWrappers.h\"\n #include \"shchelp.h\"\n@@ -1726,7 +1727,7 @@ openSharedMemory (J9PortLibrary *portLibrary, intptr_t fd, const char *baseFile,\n \t\t\t\tgoto failDontUnlink;\n \t\t\t}\n \t\t} else {\n-#if defined(__GNUC__) || defined(AIXPPC)\n+#if (defined(__GNUC__) && !defined(J9ZOS390)) || defined(AIXPPC)\n #if defined(OSX)\n \t\t\t/*Use ._key for OSX*/\n \t\t\tif (buf.shm_perm._key != controlinfo->common.ftok_key)\ndiff --git a/runtime/port/sysvipc/j9shsem_deprecated.c b/runtime/port/sysvipc/j9shsem_deprecated.c\nindex 808f356a953..421a70169d1 100644\n--- a/runtime/port/sysvipc/j9shsem_deprecated.c\n+++ b/runtime/port/sysvipc/j9shsem_deprecated.c\n@@ -1077,7 +1077,7 @@ openSemaphore(struct J9PortLibrary *portLibrary, intptr_t fd, char *baseFile, j9\n \t\t\t\tgoto failDontUnlink;\n \t\t\t}\n \t\t} else {\n-#if defined(__GNUC__) || defined(AIXPPC) || defined(J9ZTPF)\n+#if (defined(__GNUC__) && !defined(J9ZOS390)) || defined(AIXPPC) || defined(J9ZTPF)\n #if defined(OSX)\n \t\t\t/*Use _key for OSX*/\n \t\t\tif (buf.sem_perm._key != controlinfo->ftok_key)\ndiff --git a/runtime/port/zos390/j9hypervisor_systemz.h b/runtime/port/zos390/j9hypervisor_systemz.h\nnew file mode 100644\nindex 00000000000..54863c8983d\n--- /dev/null\n+++ b/runtime/port/zos390/j9hypervisor_systemz.h\n@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup Port\n+ * @brief  Hypervisor Detection helper functions common to z/VM & and PR/SM Hypervisor\n+ */\n+\n+#ifndef J9HYPERVISOR_SYSTEMZ_H_\n+#define J9HYPERVISOR_SYSTEMZ_H_\n+\n+intptr_t\n+systemz_startup(struct J9PortLibrary *portLibrary);\n+\n+#endif\ndiff --git a/runtime/port/zos390/j9sysinfo_helpers.h b/runtime/port/zos390/j9sysinfo_helpers.h\nindex 5357676ef9f..75b82f45cbe 100644\n--- a/runtime/port/zos390/j9sysinfo_helpers.h\n+++ b/runtime/port/zos390/j9sysinfo_helpers.h\n@@ -43,7 +43,7 @@ extern \"C\" {\n  */\n extern int getstfle(int lastDoubleWord, uint64_t *bits);\n \n-typedef __packed struct J9LPDat {\n+typedef __attribute__((packed)) struct J9LPDat {\n \tint32_t length; \t\t\t\t\t/**< 0:4 length of area */\n \tuint8_t version; \t\t\t\t\t/**< 4:1 version */\n \tuint8_t flags; \t\t\t\t\t\t/**< 5:1 flags */\n@@ -76,7 +76,7 @@ typedef __packed struct J9LPDat {\n \tuint8_t reserved2[8]; /* 96:8 reserved for future use */\n } J9LPDat;\n \n-typedef __packed struct J9LPDatServiceTableEntry {\n+typedef __attribute__((packed)) struct J9LPDatServiceTableEntry {\n \tint32_t serviceUncapped;\t\t\t/**< 0:4 basic-mode service units accumulated while the partition\n \t\t\t\t\t\t\t\t\t * was uncapped\n \t\t\t\t\t\t\t\t\t */\n",
    "c08b414c692a45c12b96fe170f8a97cbd8d1d4c0": "diff --git a/runtime/port/sysvipc/j9shmem.c b/runtime/port/sysvipc/j9shmem.c\nindex e215ac681b3..d214daa834f 100644\n--- a/runtime/port/sysvipc/j9shmem.c\n+++ b/runtime/port/sysvipc/j9shmem.c\n@@ -47,6 +47,7 @@\n #include \"portpriv.h\"\n #include \"j9sharedhelper.h\"\n #include \"j9shmem.h\"\n+#include \"omrutil.h\"\n #include \"protect_helpers.h\"\n #include \"j9SysvIPCWrappers.h\"\n #include \"shchelp.h\"\n@@ -1726,7 +1727,7 @@ openSharedMemory (J9PortLibrary *portLibrary, intptr_t fd, const char *baseFile,\n \t\t\t\tgoto failDontUnlink;\n \t\t\t}\n \t\t} else {\n-#if defined(__GNUC__) || defined(AIXPPC)\n+#if (defined(__GNUC__) && !defined(J9ZOS390)) || defined(AIXPPC)\n #if defined(OSX)\n \t\t\t/*Use ._key for OSX*/\n \t\t\tif (buf.shm_perm._key != controlinfo->common.ftok_key)\ndiff --git a/runtime/port/sysvipc/j9shsem_deprecated.c b/runtime/port/sysvipc/j9shsem_deprecated.c\nindex 808f356a953..421a70169d1 100644\n--- a/runtime/port/sysvipc/j9shsem_deprecated.c\n+++ b/runtime/port/sysvipc/j9shsem_deprecated.c\n@@ -1077,7 +1077,7 @@ openSemaphore(struct J9PortLibrary *portLibrary, intptr_t fd, char *baseFile, j9\n \t\t\t\tgoto failDontUnlink;\n \t\t\t}\n \t\t} else {\n-#if defined(__GNUC__) || defined(AIXPPC) || defined(J9ZTPF)\n+#if (defined(__GNUC__) && !defined(J9ZOS390)) || defined(AIXPPC) || defined(J9ZTPF)\n #if defined(OSX)\n \t\t\t/*Use _key for OSX*/\n \t\t\tif (buf.sem_perm._key != controlinfo->ftok_key)\ndiff --git a/runtime/port/zos390/j9hypervisor_systemz.h b/runtime/port/zos390/j9hypervisor_systemz.h\nnew file mode 100644\nindex 00000000000..54863c8983d\n--- /dev/null\n+++ b/runtime/port/zos390/j9hypervisor_systemz.h\n@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright IBM Corp. and others 2025\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] https://openjdk.org/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0 OR GPL-2.0-only WITH OpenJDK-assembly-exception-1.0\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup Port\n+ * @brief  Hypervisor Detection helper functions common to z/VM & and PR/SM Hypervisor\n+ */\n+\n+#ifndef J9HYPERVISOR_SYSTEMZ_H_\n+#define J9HYPERVISOR_SYSTEMZ_H_\n+\n+intptr_t\n+systemz_startup(struct J9PortLibrary *portLibrary);\n+\n+#endif\ndiff --git a/runtime/port/zos390/j9sysinfo_helpers.h b/runtime/port/zos390/j9sysinfo_helpers.h\nindex 5357676ef9f..75b82f45cbe 100644\n--- a/runtime/port/zos390/j9sysinfo_helpers.h\n+++ b/runtime/port/zos390/j9sysinfo_helpers.h\n@@ -43,7 +43,7 @@ extern \"C\" {\n  */\n extern int getstfle(int lastDoubleWord, uint64_t *bits);\n \n-typedef __packed struct J9LPDat {\n+typedef __attribute__((packed)) struct J9LPDat {\n \tint32_t length; \t\t\t\t\t/**< 0:4 length of area */\n \tuint8_t version; \t\t\t\t\t/**< 4:1 version */\n \tuint8_t flags; \t\t\t\t\t\t/**< 5:1 flags */\n@@ -76,7 +76,7 @@ typedef __packed struct J9LPDat {\n \tuint8_t reserved2[8]; /* 96:8 reserved for future use */\n } J9LPDat;\n \n-typedef __packed struct J9LPDatServiceTableEntry {\n+typedef __attribute__((packed)) struct J9LPDatServiceTableEntry {\n \tint32_t serviceUncapped;\t\t\t/**< 0:4 basic-mode service units accumulated while the partition\n \t\t\t\t\t\t\t\t\t * was uncapped\n \t\t\t\t\t\t\t\t\t */\n",
    "4a16811ab3ada0e1c66c1c9aeaa62779d49d58d4": "diff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex 7c0bc986ce4..7c9260110dd 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -1754,6 +1754,7 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n \n                int32_t origAnalyzedSize = _analyzedSize;\n                int32_t origRealSize = _realSize;\n+               int32_t origBigCalleesSize = _bigCalleesSize;\n                bool prevNonColdCalls = _hasNonColdCalls;\n                bool estimateSuccess = estimateCodeSize(targetCallee, &callStack); //recurseDown = true\n                bool calltargetSetTooBig = false;\n@@ -1799,10 +1800,12 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n                      }\n \n \n-                  if (_analyzedSize - origAnalyzedSize > bigCalleeThreshold)\n+                  int32_t bigCalleesSizeBelowMe = _bigCalleesSize - origBigCalleesSize;\n+                  if ((_analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe) > bigCalleeThreshold)\n                      {\n                      ///printf(\"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo._byteCodeIndex);fflush(stdout);\n                      calltarget->_calleeMethod->setWarmCallGraphTooBig( newBCInfo.getByteCodeIndex(), comp());\n+                     _bigCalleesSize = _bigCalleesSize + _analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe;\n                      heuristicTrace(tracer(), \"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo.getByteCodeIndex());\n                      //_analyzedSize = origAnalyzedSize;\n                      //_realSize = origRealSize;\ndiff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\nindex 8e7c97cc869..dfa9603eb99 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n@@ -43,7 +43,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n    {\n    public:\n \n-      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _lastCallBlockFrequency(-1) { }\n+      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _bigCalleesSize(0), _lastCallBlockFrequency(-1) { }\n \n       int32_t getOptimisticSize()       { return _analyzedSize; }\n \n@@ -165,6 +165,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n \n       int32_t _lastCallBlockFrequency;\n       int32_t _analyzedSize;          // size if we assume we are doing a partial inline\n+      int32_t _bigCalleesSize;\n    };\n \n #define NUM_PREV_BC 5\n",
    "f613aae5c80251889209b54c9a6004212020ce8c": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex ffba4ccdeb3..e72ef73cabe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -363,10 +363,6 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n-\t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n-\n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n \t\t\tjava.lang.reflect.Field f1 = J9VMInternals.class.getDeclaredField(\"jitHelpers\"); //$NON-NLS-1$\n@@ -681,15 +677,9 @@ private static void arraycopy(Object[] A1, int offset1, Object[] A2, int offset2\n  */\n public static native long currentTimeMillis();\n \n-/*[IF OpenJ9-RawBuild]*/\n-\t/* This is a JCL native required only by OpenJ9 raw build.\n-\t * OpenJ9 raw build is a combination of OpenJ9 and OpenJDK binaries without JCL patches within extension repo.\n-\t * Currently OpenJ9 depends on a JCL patch to initialize platform encoding which is not available to raw build.\n-\t * A workaround for raw build is to invoke this JCL native which initializes platform encoding.\n-\t * This workaround can be removed if that JCL patch is not required.\n-\t */\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n private static native Properties initProperties(Properties props);\n-/*[ENDIF] OpenJ9-RawBuild */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * If systemProperties is unset, then create a new one based on the values\n@@ -697,16 +687,16 @@ private static void arraycopy(Object[] A1, int offset1, Object[] A2, int offset2\n  */\n @SuppressWarnings(\"nls\")\n private static void ensureProperties(boolean isInitialization) {\n-/*[IF OpenJ9-RawBuild]*/\n-\t// invoke JCL native to initialize platform encoding\n-\tinitProperties(new Properties());\n-/*[ENDIF] OpenJ9-RawBuild */\n+\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\tProperties jclProps = new Properties();\n+\tinitProperties(jclProps);\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n-/*[IF JAVA_SPEC_VERSION > 11]*/\n+\t/*[IF JAVA_SPEC_VERSION > 11]*/\n \tMap<String, String> initializedProperties = new HashMap<>();\n-/*[ELSE] JAVA_SPEC_VERSION > 11\n+\t/*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n-/*[ENDIF] JAVA_SPEC_VERSION > 11 */\n+\t/*[ENDIF] JAVA_SPEC_VERSION > 11 */\n \n \t/*[IF JAVA_SPEC_VERSION >= 17]*/\n \tinitializedProperties.put(\"os.version\", sysPropOSVersion); //$NON-NLS-1$\n@@ -716,17 +706,13 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n-\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n-\t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n-\t/*[IF JAVA_SPEC_VERSION < 12]*/\n \t/* System property java.specification.vendor is set via VersionProps.init(systemProperties) since JDK12 */\n \tinitializedProperties.put(\"java.specification.vendor\", \"Oracle Corporation\"); //$NON-NLS-1$ //$NON-NLS-2$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 12 */\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 8 */\n \tinitializedProperties.put(\"java.specification.name\", \"Java Platform API Specification\"); //$NON-NLS-1$ //$NON-NLS-2$\n \tinitializedProperties.put(\"com.ibm.oti.configuration\", \"scar\"); //$NON-NLS-1$\n \n@@ -757,7 +743,13 @@ private static void ensureProperties(boolean isInitialization) {\n \t\t}\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n+\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\tfor (Map.Entry<?, ?> entry : jclProps.entrySet()) {\n+\t\tinitializedProperties.putIfAbsent(entry.getKey(), entry.getValue());\n+\t}\n+\t/*[ELSE] JAVA_SPEC_VERSION == 11 */\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n@@ -1047,13 +1039,6 @@ public static String setProperty(String prop, String value) {\n private static native String [] getPropertyList();\n /*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION == 11]*/\n-/**\n- * Invoke JCL native to initialize platform encoding explicitly.\n- */\n-private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n-\n /**\n  * Before propertiesInitialized is set to true,\n  * this returns the requested system property according to sysPropID:\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 3f04bbb521c..f82c218de7e 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -43,38 +43,6 @@\n #include <_Ccsid.h>\n #endif\n \n-\n-#if JAVA_SPEC_VERSION == 11\n-void JNICALL\n-Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n-{\n-\tUDATA handle = 0;\n-\tJ9JavaVM * const vm = ((J9VMThread*)env)->javaVM;\n-\tchar dllPath[EsMaxPath] = {0};\n-\tUDATA written = 0;\n-\tconst char *encoding = NULL;\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-#if defined(OSX)\n-\tencoding = \"UTF-8\";\n-#else\n-\tchar property[128] = {0};\n-\tencoding = getPlatformFileEncoding(env, property, sizeof(property), 1); /* platform encoding */\n-#endif /* defined(OSX) */\n-\t/* libjava.[so|dylib] is in the jdk/lib/ directory, one level up from the default/ & compressedrefs/ directories */\n-\twritten = j9str_printf(dllPath, sizeof(dllPath), \"%s/../java\", vm->j2seRootDirectory);\n-\t/* Assert the number of characters written (not including the null) fit within the dllPath buffer */\n-\tAssert_JCL_true(written < (sizeof(dllPath) - 1));\n-\tif (0 == j9sl_open_shared_library(dllPath, &handle, J9PORT_SLOPEN_DECORATE)) {\n-\t\tvoid (JNICALL *nativeFuncAddrJNU)(JNIEnv *env, const char *str) = NULL;\n-\t\tif (0 == j9sl_lookup_name(handle, \"InitializeEncoding\", (UDATA*) &nativeFuncAddrJNU, \"VLL\")) {\n-\t\t\t/* invoke JCL native to initialize platform encoding explicitly */\n-\t\t\tnativeFuncAddrJNU(env, encoding);\n-\t\t}\n-\t}\n-}\n-#endif /* JAVA_SPEC_VERSION == 11 */\n-\n /**\n  * sysPropID\n  *    0 - os.version\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex 14a9c80a9a0..a6fd1b12644 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -599,12 +599,6 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n-if(JAVA_SPEC_VERSION EQUAL 11)\n-\tomr_add_exports(jclse\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n-\t)\n-endif()\n-\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex d844c63d9ba..a08f4b56186 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,7 +23,4 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n-\t\t<exclude-if condition=\"spec.java12\"/>\n-\t</export>\n </exports>\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex 03527a43384..aa7fadcb18c 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,9 +190,6 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION == 11\n-void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n #if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 5e4db9c54c3..521005a91f2 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -1609,7 +1609,7 @@ convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *ut\n \treturn 0;\n }\n \n-jobject\n+static jobject\n getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n@@ -1623,9 +1623,9 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \tchar userhome[EsMaxPath];\n \twchar_t unicodeTemp[EsMaxPath];\n \tint i = 0;\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar userdir[EsMaxPath];\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \twchar_t unicodeHome[EsMaxPath];\n \tHANDLE process = 0;\n \tHANDLE token = 0;\n@@ -1634,7 +1634,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \n \t/* Hard coded file/path separators and other values */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"file.separator\";\n \tstrings[propIndex++] = \"\\\\\";\n \n@@ -1644,7 +1644,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t/* Get the Temp Dir name */\n \tstrings[propIndex++] = \"java.io.tmpdir\";\n \tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tstrings[propIndex++] = \"user.home\";\n \ti = propIndex;\n@@ -1711,7 +1711,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\t}\n \t}\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \t/* Get the directory where the executable was started */\n \tstrings[propIndex++] = \"user.dir\";\n \tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n@@ -1720,13 +1720,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n \t\tstrings[propIndex++] = userdir;\n \t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tresult = createSystemPropertyList(env, strings, propIndex);\n \tj9mem_free_memory(tempdir);\n@@ -1736,16 +1730,16 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \n #else /* defined(WIN32) */\n \n-jobject\n+static jobject\n getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n \tchar *charResult = NULL;\n \tchar *envSpace = NULL;\n \tjobject plist = NULL;\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar userdir[EsMaxPath] = {0};\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \tchar home[EsMaxPath] = {0};\n \tchar *homeAlloc = NULL;\n \tJ9VMThread *currentThread = (J9VMThread*)env;\n@@ -1764,7 +1758,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t}\n #endif /* defined(J9ZOS390) */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"file.separator\";\n \tstrings[propIndex++] = \"/\";\n \n@@ -1779,7 +1773,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t} else {\n \t\tstrings[propIndex++] = charResult;\n \t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tstrings[propIndex++] = \"user.home\";\n \tcharResult = NULL;\n@@ -1850,17 +1844,11 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\tpropIndex += 1;\n \t}\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \t/* Get the Temp Dir name */\n \tstrings[propIndex++] = \"java.io.tmpdir\";\n \tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tplist = createSystemPropertyList(env, strings, propIndex);\n \tif (NULL != envSpace) {\n@@ -1888,12 +1876,12 @@ getSystemPropertyList(JNIEnv *env)\n \tint propIndex = 0;\n \tjobject propertyList = NULL;\n #define PROPERTY_COUNT 137\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar *propertyKey = NULL;\n \tconst char *language = NULL;\n \tconst char *region = NULL;\n \tconst char *variant = NULL;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \tconst char *strings[PROPERTY_COUNT] = {0};\n #define USERNAME_LENGTH 128\n \tchar username[USERNAME_LENGTH] = {0};\n@@ -1967,7 +1955,7 @@ getSystemPropertyList(JNIEnv *env)\n \tstrings[propIndex++] = \"big\";\n #endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"sun.cpu.endian\";\n #if defined(J9VM_ENV_LITTLE_ENDIAN)\n \tstrings[propIndex++] = \"little\";\n@@ -1998,7 +1986,11 @@ getSystemPropertyList(JNIEnv *env)\n \t/* Get the variant */\n \tstrings[propIndex++] = \"user.variant\";\n \tstrings[propIndex++] = variant;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the timezone */\n+\tstrings[propIndex++] = \"user.timezone\";\n+\tstrings[propIndex++] = \"\";\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \t/* Get the User name */\n \tstrings[propIndex++] = \"user.name\";\n",
    "47e95704f006efdc8b5c7e9873381e2174714136": "diff --git a/jcl/src/java.base/share/classes/java/lang/Access.java b/jcl/src/java.base/share/classes/java/lang/Access.java\nindex 58a4f960709..4180fe93548 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Access.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Access.java\n@@ -594,10 +594,12 @@ public long findNative(ClassLoader loader, String entryName) {\n \t\treturn ClassLoader.findNative0(loader, entryName);\n \t}\n \n+\t/*[IF (JAVA_SPEC_VERSION < 25) | INLINE-TYPES]*/\n \t@Override\n \tpublic void exit(int status) {\n \t\tShutdown.exit(status);\n \t}\n+\t/*[ENDIF] (JAVA_SPEC_VERSION < 25) | INLINE-TYPES */\n \n \tpublic int encodeASCII(char[] sa, int sp, byte[] da, int dp, int len) {\n \t\treturn StringCoding.implEncodeAsciiArray(sa, sp, da, dp, len);\n",
    "08387a2d53578c6b79f9ab8761367062269af49d": "diff --git a/jcl/src/java.base/share/classes/java/lang/System.java b/jcl/src/java.base/share/classes/java/lang/System.java\nindex ffba4ccdeb3..e72ef73cabe 100644\n--- a/jcl/src/java.base/share/classes/java/lang/System.java\n+++ b/jcl/src/java.base/share/classes/java/lang/System.java\n@@ -363,10 +363,6 @@ static void afterClinitInitialization() {\n \t\t// Fill in the properties from the VM information.\n \t\tensureProperties(true);\n \n-\t\t/*[IF JAVA_SPEC_VERSION == 11]*/\n-\t\tinitJCLPlatformEncoding();\n-\t\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n-\n \t\t/*[REM] Initialize the JITHelpers needed in J9VMInternals since the class can't do it itself */\n \t\ttry {\n \t\t\tjava.lang.reflect.Field f1 = J9VMInternals.class.getDeclaredField(\"jitHelpers\"); //$NON-NLS-1$\n@@ -681,15 +677,9 @@ private static void arraycopy(Object[] A1, int offset1, Object[] A2, int offset2\n  */\n public static native long currentTimeMillis();\n \n-/*[IF OpenJ9-RawBuild]*/\n-\t/* This is a JCL native required only by OpenJ9 raw build.\n-\t * OpenJ9 raw build is a combination of OpenJ9 and OpenJDK binaries without JCL patches within extension repo.\n-\t * Currently OpenJ9 depends on a JCL patch to initialize platform encoding which is not available to raw build.\n-\t * A workaround for raw build is to invoke this JCL native which initializes platform encoding.\n-\t * This workaround can be removed if that JCL patch is not required.\n-\t */\n+/*[IF JAVA_SPEC_VERSION == 11]*/\n private static native Properties initProperties(Properties props);\n-/*[ENDIF] OpenJ9-RawBuild */\n+/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n /**\n  * If systemProperties is unset, then create a new one based on the values\n@@ -697,16 +687,16 @@ private static void arraycopy(Object[] A1, int offset1, Object[] A2, int offset2\n  */\n @SuppressWarnings(\"nls\")\n private static void ensureProperties(boolean isInitialization) {\n-/*[IF OpenJ9-RawBuild]*/\n-\t// invoke JCL native to initialize platform encoding\n-\tinitProperties(new Properties());\n-/*[ENDIF] OpenJ9-RawBuild */\n+\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\tProperties jclProps = new Properties();\n+\tinitProperties(jclProps);\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \n-/*[IF JAVA_SPEC_VERSION > 11]*/\n+\t/*[IF JAVA_SPEC_VERSION > 11]*/\n \tMap<String, String> initializedProperties = new HashMap<>();\n-/*[ELSE] JAVA_SPEC_VERSION > 11\n+\t/*[ELSE] JAVA_SPEC_VERSION > 11\n \tProperties initializedProperties = new Properties();\n-/*[ENDIF] JAVA_SPEC_VERSION > 11 */\n+\t/*[ENDIF] JAVA_SPEC_VERSION > 11 */\n \n \t/*[IF JAVA_SPEC_VERSION >= 17]*/\n \tinitializedProperties.put(\"os.version\", sysPropOSVersion); //$NON-NLS-1$\n@@ -716,17 +706,13 @@ private static void ensureProperties(boolean isInitialization) {\n \t\tinitializedProperties.put(\"os.encoding\", osEncoding); //$NON-NLS-1$\n \t}\n \tinitializedProperties.put(\"ibm.system.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[IF JAVA_SPEC_VERSION < 17]*/\n+\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \t/*[PR The launcher apparently needs sun.jnu.encoding property or it does not work]*/\n \tinitializedProperties.put(\"sun.jnu.encoding\", platformEncoding); //$NON-NLS-1$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 17 */\n-\t/*[IF JAVA_SPEC_VERSION == 8]*/\n \tinitializedProperties.put(\"file.encoding.pkg\", \"sun.io\"); //$NON-NLS-1$ //$NON-NLS-2$\n-\t/*[ENDIF] JJAVA_SPEC_VERSION == 8 */\n-\t/*[IF JAVA_SPEC_VERSION < 12]*/\n \t/* System property java.specification.vendor is set via VersionProps.init(systemProperties) since JDK12 */\n \tinitializedProperties.put(\"java.specification.vendor\", \"Oracle Corporation\"); //$NON-NLS-1$ //$NON-NLS-2$\n-\t/*[ENDIF] JAVA_SPEC_VERSION < 12 */\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 8 */\n \tinitializedProperties.put(\"java.specification.name\", \"Java Platform API Specification\"); //$NON-NLS-1$ //$NON-NLS-2$\n \tinitializedProperties.put(\"com.ibm.oti.configuration\", \"scar\"); //$NON-NLS-1$\n \n@@ -757,7 +743,13 @@ private static void ensureProperties(boolean isInitialization) {\n \t\t}\n \t\tinitializedProperties.put(key, list[i+1]);\n \t}\n+\t/*[IF JAVA_SPEC_VERSION == 11]*/\n+\tfor (Map.Entry<?, ?> entry : jclProps.entrySet()) {\n+\t\tinitializedProperties.putIfAbsent(entry.getKey(), entry.getValue());\n+\t}\n+\t/*[ELSE] JAVA_SPEC_VERSION == 11 */\n \tinitializedProperties.put(\"file.encoding\", fileEncoding); //$NON-NLS-1$\n+\t/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n \t/*[ENDIF] JAVA_SPEC_VERSION >= 17 */\n \n \t/*[IF (JAVA_SPEC_VERSION >= 21) & (PLATFORM-mz31 | PLATFORM-mz64)]*/\n@@ -1047,13 +1039,6 @@ public static String setProperty(String prop, String value) {\n private static native String [] getPropertyList();\n /*[ENDIF] JAVA_SPEC_VERSION < 17 */\n \n-/*[IF JAVA_SPEC_VERSION == 11]*/\n-/**\n- * Invoke JCL native to initialize platform encoding explicitly.\n- */\n-private static native void initJCLPlatformEncoding();\n-/*[ENDIF] JAVA_SPEC_VERSION == 11 */\n-\n /**\n  * Before propertiesInitialized is set to true,\n  * this returns the requested system property according to sysPropID:\ndiff --git a/runtime/jcl/common/system.c b/runtime/jcl/common/system.c\nindex 3f04bbb521c..f82c218de7e 100644\n--- a/runtime/jcl/common/system.c\n+++ b/runtime/jcl/common/system.c\n@@ -43,38 +43,6 @@\n #include <_Ccsid.h>\n #endif\n \n-\n-#if JAVA_SPEC_VERSION == 11\n-void JNICALL\n-Java_java_lang_System_initJCLPlatformEncoding(JNIEnv *env, jclass clazz)\n-{\n-\tUDATA handle = 0;\n-\tJ9JavaVM * const vm = ((J9VMThread*)env)->javaVM;\n-\tchar dllPath[EsMaxPath] = {0};\n-\tUDATA written = 0;\n-\tconst char *encoding = NULL;\n-\tPORT_ACCESS_FROM_ENV(env);\n-\n-#if defined(OSX)\n-\tencoding = \"UTF-8\";\n-#else\n-\tchar property[128] = {0};\n-\tencoding = getPlatformFileEncoding(env, property, sizeof(property), 1); /* platform encoding */\n-#endif /* defined(OSX) */\n-\t/* libjava.[so|dylib] is in the jdk/lib/ directory, one level up from the default/ & compressedrefs/ directories */\n-\twritten = j9str_printf(dllPath, sizeof(dllPath), \"%s/../java\", vm->j2seRootDirectory);\n-\t/* Assert the number of characters written (not including the null) fit within the dllPath buffer */\n-\tAssert_JCL_true(written < (sizeof(dllPath) - 1));\n-\tif (0 == j9sl_open_shared_library(dllPath, &handle, J9PORT_SLOPEN_DECORATE)) {\n-\t\tvoid (JNICALL *nativeFuncAddrJNU)(JNIEnv *env, const char *str) = NULL;\n-\t\tif (0 == j9sl_lookup_name(handle, \"InitializeEncoding\", (UDATA*) &nativeFuncAddrJNU, \"VLL\")) {\n-\t\t\t/* invoke JCL native to initialize platform encoding explicitly */\n-\t\t\tnativeFuncAddrJNU(env, encoding);\n-\t\t}\n-\t}\n-}\n-#endif /* JAVA_SPEC_VERSION == 11 */\n-\n /**\n  * sysPropID\n  *    0 - os.version\ndiff --git a/runtime/jcl/exports.cmake b/runtime/jcl/exports.cmake\nindex 14a9c80a9a0..a6fd1b12644 100644\n--- a/runtime/jcl/exports.cmake\n+++ b/runtime/jcl/exports.cmake\n@@ -599,12 +599,6 @@ if(NOT JAVA_SPEC_VERSION LESS 9)\n \t)\n endif()\n \n-if(JAVA_SPEC_VERSION EQUAL 11)\n-\tomr_add_exports(jclse\n-\t\tJava_java_lang_System_initJCLPlatformEncoding\n-\t)\n-endif()\n-\n # java 11+\n if(NOT JAVA_SPEC_VERSION LESS 11)\n \tomr_add_exports(jclse\ndiff --git a/runtime/jcl/uma/se11_exports.xml b/runtime/jcl/uma/se11_exports.xml\nindex d844c63d9ba..a08f4b56186 100644\n--- a/runtime/jcl/uma/se11_exports.xml\n+++ b/runtime/jcl/uma/se11_exports.xml\n@@ -23,7 +23,4 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<export name=\"Java_java_lang_Class_getNestHostImpl\"/>\n \t<export name=\"Java_java_lang_Class_getNestMembersImpl\"/>\n \t<export name=\"Java_java_lang_invoke_MethodHandleResolver_getCPConstantDynamicAt\"/>\n-\t<export name=\"Java_java_lang_System_initJCLPlatformEncoding\">\n-\t\t<exclude-if condition=\"spec.java12\"/>\n-\t</export>\n </exports>\ndiff --git a/runtime/oti/jclprots.h b/runtime/oti/jclprots.h\nindex 03527a43384..aa7fadcb18c 100644\n--- a/runtime/oti/jclprots.h\n+++ b/runtime/oti/jclprots.h\n@@ -190,9 +190,6 @@ Java_com_ibm_java_lang_management_internal_MemoryManagerMXBeanImpl_isManagedPool\n /* BBjclNativesCommonSystem*/\n void JNICALL Java_java_lang_System_setFieldImpl (JNIEnv * env, jclass cls, jstring name, jobject stream);\n jobject createSystemPropertyList (JNIEnv *env, const char *defaultValues[], int defaultCount);\n-#if JAVA_SPEC_VERSION == 11\n-void JNICALL Java_java_lang_System_initJCLPlatformEncoding (JNIEnv *env, jclass clazz);\n-#endif /* JAVA_SPEC_VERSION == 11 */\n jstring JNICALL Java_java_lang_System_getSysPropBeforePropertiesInitialized(JNIEnv *env, jclass clazz, jint sysPropID);\n #if JAVA_SPEC_VERSION < 17\n jobject JNICALL Java_java_lang_System_getPropertyList (JNIEnv *env, jclass clazz);\ndiff --git a/runtime/vm/vmprops.c b/runtime/vm/vmprops.c\nindex 5e4db9c54c3..521005a91f2 100644\n--- a/runtime/vm/vmprops.c\n+++ b/runtime/vm/vmprops.c\n@@ -1609,7 +1609,7 @@ convertToUTF8(J9PortLibrary *portLibrary, const wchar_t *unicodeString, char *ut\n \treturn 0;\n }\n \n-jobject\n+static jobject\n getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n@@ -1623,9 +1623,9 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \tchar userhome[EsMaxPath];\n \twchar_t unicodeTemp[EsMaxPath];\n \tint i = 0;\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar userdir[EsMaxPath];\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \twchar_t unicodeHome[EsMaxPath];\n \tHANDLE process = 0;\n \tHANDLE token = 0;\n@@ -1634,7 +1634,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \n \t/* Hard coded file/path separators and other values */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"file.separator\";\n \tstrings[propIndex++] = \"\\\\\";\n \n@@ -1644,7 +1644,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t/* Get the Temp Dir name */\n \tstrings[propIndex++] = \"java.io.tmpdir\";\n \tstrings[propIndex++] = getTmpDir(env, &tempdir);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tstrings[propIndex++] = \"user.home\";\n \ti = propIndex;\n@@ -1711,7 +1711,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\t}\n \t}\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \t/* Get the directory where the executable was started */\n \tstrings[propIndex++] = \"user.dir\";\n \tif (0 == GetCurrentDirectoryW(EsMaxPath, unicodeTemp)) {\n@@ -1720,13 +1720,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\tconvertToUTF8(PORTLIB, unicodeTemp, userdir, EsMaxPath);\n \t\tstrings[propIndex++] = userdir;\n \t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tresult = createSystemPropertyList(env, strings, propIndex);\n \tj9mem_free_memory(tempdir);\n@@ -1736,16 +1730,16 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \n #else /* defined(WIN32) */\n \n-jobject\n+static jobject\n getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n {\n \tPORT_ACCESS_FROM_ENV(env);\n \tchar *charResult = NULL;\n \tchar *envSpace = NULL;\n \tjobject plist = NULL;\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar userdir[EsMaxPath] = {0};\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \tchar home[EsMaxPath] = {0};\n \tchar *homeAlloc = NULL;\n \tJ9VMThread *currentThread = (J9VMThread*)env;\n@@ -1764,7 +1758,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t}\n #endif /* defined(J9ZOS390) */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"file.separator\";\n \tstrings[propIndex++] = \"/\";\n \n@@ -1779,7 +1773,7 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t} else {\n \t\tstrings[propIndex++] = charResult;\n \t}\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tstrings[propIndex++] = \"user.home\";\n \tcharResult = NULL;\n@@ -1850,17 +1844,11 @@ getPlatformPropertyList(JNIEnv *env, const char *strings[], int propIndex)\n \t\tpropIndex += 1;\n \t}\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \t/* Get the Temp Dir name */\n \tstrings[propIndex++] = \"java.io.tmpdir\";\n \tstrings[propIndex++] = getTmpDir(env, &envSpace);\n-#endif /* JAVA_SPEC_VERSION < 17 */\n-\n-\tif (JAVA_SPEC_VERSION < 12) {\n-\t\t/* Get the timezone */\n-\t\tstrings[propIndex++] = \"user.timezone\";\n-\t\tstrings[propIndex++] = \"\";\n-\t}\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \tplist = createSystemPropertyList(env, strings, propIndex);\n \tif (NULL != envSpace) {\n@@ -1888,12 +1876,12 @@ getSystemPropertyList(JNIEnv *env)\n \tint propIndex = 0;\n \tjobject propertyList = NULL;\n #define PROPERTY_COUNT 137\n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tchar *propertyKey = NULL;\n \tconst char *language = NULL;\n \tconst char *region = NULL;\n \tconst char *variant = NULL;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \tconst char *strings[PROPERTY_COUNT] = {0};\n #define USERNAME_LENGTH 128\n \tchar username[USERNAME_LENGTH] = {0};\n@@ -1967,7 +1955,7 @@ getSystemPropertyList(JNIEnv *env)\n \tstrings[propIndex++] = \"big\";\n #endif /* defined(J9VM_ENV_LITTLE_ENDIAN) */\n \n-#if JAVA_SPEC_VERSION < 17\n+#if JAVA_SPEC_VERSION < 11\n \tstrings[propIndex++] = \"sun.cpu.endian\";\n #if defined(J9VM_ENV_LITTLE_ENDIAN)\n \tstrings[propIndex++] = \"little\";\n@@ -1998,7 +1986,11 @@ getSystemPropertyList(JNIEnv *env)\n \t/* Get the variant */\n \tstrings[propIndex++] = \"user.variant\";\n \tstrings[propIndex++] = variant;\n-#endif /* JAVA_SPEC_VERSION < 17 */\n+\n+\t/* Get the timezone */\n+\tstrings[propIndex++] = \"user.timezone\";\n+\tstrings[propIndex++] = \"\";\n+#endif /* JAVA_SPEC_VERSION < 11 */\n \n \t/* Get the User name */\n \tstrings[propIndex++] = \"user.name\";\n",
    "de7f64c6b180cdbd83b9c97bfcb468ddf5cb5c06": "diff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex 7c0bc986ce4..7c9260110dd 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -1754,6 +1754,7 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n \n                int32_t origAnalyzedSize = _analyzedSize;\n                int32_t origRealSize = _realSize;\n+               int32_t origBigCalleesSize = _bigCalleesSize;\n                bool prevNonColdCalls = _hasNonColdCalls;\n                bool estimateSuccess = estimateCodeSize(targetCallee, &callStack); //recurseDown = true\n                bool calltargetSetTooBig = false;\n@@ -1799,10 +1800,12 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n                      }\n \n \n-                  if (_analyzedSize - origAnalyzedSize > bigCalleeThreshold)\n+                  int32_t bigCalleesSizeBelowMe = _bigCalleesSize - origBigCalleesSize;\n+                  if ((_analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe) > bigCalleeThreshold)\n                      {\n                      ///printf(\"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo._byteCodeIndex);fflush(stdout);\n                      calltarget->_calleeMethod->setWarmCallGraphTooBig( newBCInfo.getByteCodeIndex(), comp());\n+                     _bigCalleesSize = _bigCalleesSize + _analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe;\n                      heuristicTrace(tracer(), \"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo.getByteCodeIndex());\n                      //_analyzedSize = origAnalyzedSize;\n                      //_realSize = origRealSize;\ndiff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\nindex 8e7c97cc869..dfa9603eb99 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n@@ -43,7 +43,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n    {\n    public:\n \n-      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _lastCallBlockFrequency(-1) { }\n+      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _bigCalleesSize(0), _lastCallBlockFrequency(-1) { }\n \n       int32_t getOptimisticSize()       { return _analyzedSize; }\n \n@@ -165,6 +165,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n \n       int32_t _lastCallBlockFrequency;\n       int32_t _analyzedSize;          // size if we assume we are doing a partial inline\n+      int32_t _bigCalleesSize;\n    };\n \n #define NUM_PREV_BC 5\n",
    "c2816e45d4cb491761a68f30bbadb5232a39b8b7": "diff --git a/jcl/src/java.base/share/classes/java/lang/Access.java b/jcl/src/java.base/share/classes/java/lang/Access.java\nindex 58a4f960709..4180fe93548 100644\n--- a/jcl/src/java.base/share/classes/java/lang/Access.java\n+++ b/jcl/src/java.base/share/classes/java/lang/Access.java\n@@ -594,10 +594,12 @@ public long findNative(ClassLoader loader, String entryName) {\n \t\treturn ClassLoader.findNative0(loader, entryName);\n \t}\n \n+\t/*[IF (JAVA_SPEC_VERSION < 25) | INLINE-TYPES]*/\n \t@Override\n \tpublic void exit(int status) {\n \t\tShutdown.exit(status);\n \t}\n+\t/*[ENDIF] (JAVA_SPEC_VERSION < 25) | INLINE-TYPES */\n \n \tpublic int encodeASCII(char[] sa, int sp, byte[] da, int dp, int len) {\n \t\treturn StringCoding.implEncodeAsciiArray(sa, sp, da, dp, len);\n",
    "9b385eb9c2466e0e5e042b0771f4137d80d2eaaa": "diff --git a/runtime/rasdump/javadump.cpp b/runtime/rasdump/javadump.cpp\nindex 655de871553..6cb49da710d 100644\n--- a/runtime/rasdump/javadump.cpp\n+++ b/runtime/rasdump/javadump.cpp\n@@ -4544,6 +4544,8 @@ JavaCoreDumpWriter::writeThread(J9VMThread* vmThread, J9PlatformThread *nativeTh\n \t\t/* Replace vmstate with java state in the \"3XMTHREADINFO\" entry */\n \t\t_OutputStream.writeCharacters(\", state:\");\n \t\twriteThreadState(javaState);\n+\t\t_OutputStream.writeCharacters(\", raw state:\");\n+\t\t_OutputStream.writeInteger(javaState);\n \n \t\t_OutputStream.writeCharacters(\", prio=\");\n \t\t_OutputStream.writeInteger(javaPriority, \"%zu\");\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex c11d962f4c6..d0e417a1cd1 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -1104,13 +1104,14 @@ writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWrit\n \t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n \t}\n \tbufferWriter->writeFormattedString(\n-\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s\",\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s raw state: 0x%zX\",\n \t\t\tthreadName,\n \t\t\twalkThread,\n \t\t\tjavaTID,\n \t\t\tosTID,\n \t\t\tjavaPriority,\n-\t\t\tstateStr);\n+\t\t\tstateStr,\n+\t\t\tstate);\n \n \tif (J9VMTHREAD_STATE_BLOCKED == state) {\n \t\tbufferWriter->writeFormattedString(\" blocked on: \");\n",
    "dd7725afce409daf6284b9a8f43e6282629f1484": "diff --git a/runtime/rasdump/javadump.cpp b/runtime/rasdump/javadump.cpp\nindex 655de871553..6cb49da710d 100644\n--- a/runtime/rasdump/javadump.cpp\n+++ b/runtime/rasdump/javadump.cpp\n@@ -4544,6 +4544,8 @@ JavaCoreDumpWriter::writeThread(J9VMThread* vmThread, J9PlatformThread *nativeTh\n \t\t/* Replace vmstate with java state in the \"3XMTHREADINFO\" entry */\n \t\t_OutputStream.writeCharacters(\", state:\");\n \t\twriteThreadState(javaState);\n+\t\t_OutputStream.writeCharacters(\", raw state:\");\n+\t\t_OutputStream.writeInteger(javaState);\n \n \t\t_OutputStream.writeCharacters(\", prio=\");\n \t\t_OutputStream.writeInteger(javaPriority, \"%zu\");\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex c11d962f4c6..d0e417a1cd1 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -1104,13 +1104,14 @@ writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWrit\n \t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n \t}\n \tbufferWriter->writeFormattedString(\n-\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s\",\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s raw state: 0x%zX\",\n \t\t\tthreadName,\n \t\t\twalkThread,\n \t\t\tjavaTID,\n \t\t\tosTID,\n \t\t\tjavaPriority,\n-\t\t\tstateStr);\n+\t\t\tstateStr,\n+\t\t\tstate);\n \n \tif (J9VMTHREAD_STATE_BLOCKED == state) {\n \t\tbufferWriter->writeFormattedString(\" blocked on: \");\n",
    "d79ddbfcb54a0e2e743435524d3928a3a820c764": "diff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex 710a6591725..54447527b6d 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -270,6 +270,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"notified\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"timeout\" signature=\"J\" versions=\"24-\"/>\n \n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"detailMessage\" signature=\"Ljava/lang/String;\"/>\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex e17e4477e5c..2067532748b 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5228,6 +5228,10 @@ class INTERPRETER_CLASS\n \t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t\t/* Handle the virtual thread Object.wait call. */\n \t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n+\t\t\t\t\t/* VirtualThread.timeout is a private field used by both VM and JCL to temporarily hold\n+\t\t\t\t\t * the value of expected wait/park time before a wake up task is scheduled using the value.\n+\t\t\t\t\t */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_TIMEOUT(_currentThread, _currentThread->threadObject, millis + (nanos / 1000000));\n \t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t\t} else {\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n@@ -5777,7 +5781,18 @@ class INTERPRETER_CLASS\n \t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n \t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n \t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n-\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t\t_currentThread->ownedMonitorCount -= 1;\n+\t\t\t\tif (J9VMJAVALANGTHREAD_DEADINTERRUPT(_currentThread, _currentThread->threadObject)) {\n+\t\t\t\t\t/* Build a native frame on vthread stack before throwing exception. */\n+\t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\t\tsetCurrentException(_currentThread, J9VMCONSTANTPOOL_JAVALANGINTERRUPTEDEXCEPTION, NULL);\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n+\t\t\t\t} else {\n+\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n",
    "305e12b1e67b30b096306daee935978e439e97a2": "diff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 85d226b0652..ed78be73247 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -1024,7 +1024,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tcurrentThread->currentContinuation->objectWaitMonitor = syncObjectMonitor;\n \t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n \t\t} else {\n-\t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\t\tVM_AtomicSupport::addU32(&syncObjectMonitor->virtualThreadWaitCount, 1);\n \t\t}\n \n \t\t/* Clear the blocking object on the carrier thread. */\n@@ -1096,15 +1096,20 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n-\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n-\t\t\t\t\tif (0 == monitor->count) {\n-\t\t\t\t\t\tunblocked = true;\n-\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n-\t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n+\t\t\t\t\t/* Only perform the below operations for inflated monitors. */\n+\t\t\t\t\tif (NULL != syncObjectMonitor) {\n+\t\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\t\t\t\t\t\tif (0 == monitor->count) {\n+\t\t\t\t\t\t\tunblocked = true;\n+\t\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n+\t\t\t\t\t\t\t\tVM_AtomicSupport::subtractU32(&syncObjectMonitor->virtualThreadWaitCount, 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t}\n \t\t\t\t}\n \ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex e95f5e60d13..e8677cfa025 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -178,12 +178,7 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t *   iff the deflation policy in effect decides it's ok.\n \t\t */\n \t\tif (monitor->count == 1) {\n-\t\t\tif ((0 == monitor->pinCount)\n-#if JAVA_SPEC_VERSION >= 24\n-\t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n-\t\t\t&& (NULL == objectMonitor->waitingContinuations)\n-#endif /* JAVA_SPEC_VERSION >= 24 */\n-\t\t\t) {\n+\t\t\tif (0 == monitor->pinCount) {\n \t\t\t\tif (deflate) {\n \t\t\t\t\tdeflate = 0;\n \t\t\t\t\tswitch (vmStruct->javaVM->thrDeflationPolicy) {\ndiff --git a/runtime/vm/vmthread.cpp b/runtime/vm/vmthread.cpp\nindex 83e6505ad01..8f9f131204e 100644\n--- a/runtime/vm/vmthread.cpp\n+++ b/runtime/vm/vmthread.cpp\n@@ -574,7 +574,23 @@ threadParseArguments(J9JavaVM *vm, char *optArg)\n \tvm->thrMaxTryEnterYieldsBeforeBlocking = 45;\n \tvm->thrNestedSpinning = 1;\n \tvm->thrTryEnterNestedSpinning = 1;\n-\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_ASAP;\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t/* Currently, there are timing holes between JVM_TakeVirtualThreadListToUnblock and monitor deflation.\n+\t * A monitor can be deflated while it is being accessed in JVM_TakeVirtualThreadListToUnblock. This\n+\t * leads to a NULL dereference causing a segfault. Adding more synchronization will cause a significant\n+\t * overhead in the object monitor exit path. Until an efficient solution is developed, the policy to never\n+\t * deflate will be employed in order to support Synchronize Virtual Threads without Pinning (JEP491).\n+\t * Since the current JEP491 implementation always inflates monitors before usage, deflating will be\n+\t * counter-productive.\n+\t */\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_NEVER;\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t{\n+\t\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_ASAP;\n+\t}\n \n \tif (cpus > 1) {\n #if (defined(LINUXPPC)) && !defined(J9VM_ENV_LITTLE_ENDIAN)\n",
    "946e97f94c80fd4983b3882863a4be38531ee461": "diff --git a/runtime/oti/vmconstantpool.xml b/runtime/oti/vmconstantpool.xml\nindex 710a6591725..54447527b6d 100644\n--- a/runtime/oti/vmconstantpool.xml\n+++ b/runtime/oti/vmconstantpool.xml\n@@ -270,6 +270,7 @@ SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0-only WITH Classpath-ex\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"next\" signature=\"Ljava/lang/VirtualThread;\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"notified\" signature=\"Z\" versions=\"24-\"/>\n \t<fieldref class=\"java/lang/VirtualThread\" name=\"onWaitingList\" signature=\"Z\" versions=\"24-\"/>\n+\t<fieldref class=\"java/lang/VirtualThread\" name=\"timeout\" signature=\"J\" versions=\"24-\"/>\n \n \t<fieldref class=\"java/lang/Throwable\" name=\"cause\" signature=\"Ljava/lang/Throwable;\"/>\n \t<fieldref class=\"java/lang/Throwable\" name=\"detailMessage\" signature=\"Ljava/lang/String;\"/>\ndiff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex e17e4477e5c..2067532748b 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -5228,6 +5228,10 @@ class INTERPRETER_CLASS\n \t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t\t/* Handle the virtual thread Object.wait call. */\n \t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_NOTIFIED(_currentThread, _currentThread->threadObject, JNI_FALSE);\n+\t\t\t\t\t/* VirtualThread.timeout is a private field used by both VM and JCL to temporarily hold\n+\t\t\t\t\t * the value of expected wait/park time before a wake up task is scheduled using the value.\n+\t\t\t\t\t */\n+\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_TIMEOUT(_currentThread, _currentThread->threadObject, millis + (nanos / 1000000));\n \t\t\t\t\trc = yieldPinnedContinuation(REGISTER_ARGS, newState, J9VM_CONTINUATION_RETURN_FROM_OBJECT_WAIT);\n \t\t\t\t} else {\n \t\t\t\t\trc = THROW_MONITOR_ALLOC_FAIL;\n@@ -5777,7 +5781,18 @@ class INTERPRETER_CLASS\n \t\t\t\tomrthread_monitor_t monitor = getMonitorForWait(_currentThread, waitObject);\n \t\t\t\tmonitor->count = _currentThread->currentContinuation->waitingMonitorEnterCount;\n \t\t\t\t_currentThread->currentContinuation->waitingMonitorEnterCount = 0;\n-\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t\t_currentThread->ownedMonitorCount -= 1;\n+\t\t\t\tif (J9VMJAVALANGTHREAD_DEADINTERRUPT(_currentThread, _currentThread->threadObject)) {\n+\t\t\t\t\t/* Build a native frame on vthread stack before throwing exception. */\n+\t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\t\t\t\t\tprepareForExceptionThrow(_currentThread);\n+\t\t\t\t\tsetCurrentException(_currentThread, J9VMCONSTANTPOOL_JAVALANGINTERRUPTEDEXCEPTION, NULL);\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n+\t\t\t\t} else {\n+\t\t\t\t\treturnVoidFromINL(REGISTER_ARGS, 4);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tbreak;\n \t\t}\n",
    "87e3b7a968cc1a66df17e8c9b7fd2c4dfc7224fe": "diff --git a/runtime/vm/ContinuationHelpers.cpp b/runtime/vm/ContinuationHelpers.cpp\nindex 85d226b0652..ed78be73247 100644\n--- a/runtime/vm/ContinuationHelpers.cpp\n+++ b/runtime/vm/ContinuationHelpers.cpp\n@@ -1024,7 +1024,7 @@ preparePinnedVirtualThreadForUnmount(J9VMThread *currentThread, j9object_t syncO\n \t\t\tcurrentThread->currentContinuation->objectWaitMonitor = syncObjectMonitor;\n \t\t\tomrthread_monitor_exit(vm->blockedVirtualThreadsMutex);\n \t\t} else {\n-\t\t\tsyncObjectMonitor->virtualThreadWaitCount += 1;\n+\t\t\tVM_AtomicSupport::addU32(&syncObjectMonitor->virtualThreadWaitCount, 1);\n \t\t}\n \n \t\t/* Clear the blocking object on the carrier thread. */\n@@ -1096,15 +1096,20 @@ takeVirtualThreadListToUnblock(J9VMThread *currentThread)\n \t\t\t\t\t\t}\n \t\t\t\t\t} else {\n \t\t\t\t\t\tlock = J9OBJECT_MONITOR(currentThread, syncObject);\n-\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\tif (J9_LOCK_IS_INFLATED(lock)) {\n+\t\t\t\t\t\t\tsyncObjectMonitor = J9_INFLLOCK_OBJECT_MONITOR(lock);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n-\t\t\t\t\tif (0 == monitor->count) {\n-\t\t\t\t\t\tunblocked = true;\n-\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n-\t\t\t\t\t\t\tsyncObjectMonitor->virtualThreadWaitCount -= 1;\n+\t\t\t\t\t/* Only perform the below operations for inflated monitors. */\n+\t\t\t\t\tif (NULL != syncObjectMonitor) {\n+\t\t\t\t\t\tomrthread_monitor_t monitor = syncObjectMonitor->monitor;\n+\t\t\t\t\t\tif (0 == monitor->count) {\n+\t\t\t\t\t\t\tunblocked = true;\n+\t\t\t\t\t\t\tif (syncObjectMonitor->virtualThreadWaitCount >= 1) {\n+\t\t\t\t\t\t\t\tVM_AtomicSupport::subtractU32(&syncObjectMonitor->virtualThreadWaitCount, 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tJ9VMJAVALANGVIRTUALTHREAD_SET_ONWAITINGLIST(currentThread, current->vthread, JNI_TRUE);\n \t\t\t\t\t}\n \t\t\t\t}\n \ndiff --git a/runtime/vm/monhelpers.c b/runtime/vm/monhelpers.c\nindex e95f5e60d13..e8677cfa025 100644\n--- a/runtime/vm/monhelpers.c\n+++ b/runtime/vm/monhelpers.c\n@@ -178,12 +178,7 @@ objectMonitorExit(J9VMThread* vmStruct, j9object_t object)\n \t\t *   iff the deflation policy in effect decides it's ok.\n \t\t */\n \t\tif (monitor->count == 1) {\n-\t\t\tif ((0 == monitor->pinCount)\n-#if JAVA_SPEC_VERSION >= 24\n-\t\t\t&& (0 == objectMonitor->virtualThreadWaitCount)\n-\t\t\t&& (NULL == objectMonitor->waitingContinuations)\n-#endif /* JAVA_SPEC_VERSION >= 24 */\n-\t\t\t) {\n+\t\t\tif (0 == monitor->pinCount) {\n \t\t\t\tif (deflate) {\n \t\t\t\t\tdeflate = 0;\n \t\t\t\t\tswitch (vmStruct->javaVM->thrDeflationPolicy) {\ndiff --git a/runtime/vm/vmthread.cpp b/runtime/vm/vmthread.cpp\nindex 83e6505ad01..8f9f131204e 100644\n--- a/runtime/vm/vmthread.cpp\n+++ b/runtime/vm/vmthread.cpp\n@@ -574,7 +574,23 @@ threadParseArguments(J9JavaVM *vm, char *optArg)\n \tvm->thrMaxTryEnterYieldsBeforeBlocking = 45;\n \tvm->thrNestedSpinning = 1;\n \tvm->thrTryEnterNestedSpinning = 1;\n-\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_ASAP;\n+\n+#if JAVA_SPEC_VERSION >= 24\n+\t/* Currently, there are timing holes between JVM_TakeVirtualThreadListToUnblock and monitor deflation.\n+\t * A monitor can be deflated while it is being accessed in JVM_TakeVirtualThreadListToUnblock. This\n+\t * leads to a NULL dereference causing a segfault. Adding more synchronization will cause a significant\n+\t * overhead in the object monitor exit path. Until an efficient solution is developed, the policy to never\n+\t * deflate will be employed in order to support Synchronize Virtual Threads without Pinning (JEP491).\n+\t * Since the current JEP491 implementation always inflates monitors before usage, deflating will be\n+\t * counter-productive.\n+\t */\n+\tif (J9_ARE_ANY_BITS_SET(vm->extendedRuntimeFlags3, J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION)) {\n+\t\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_NEVER;\n+\t} else\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\t{\n+\t\tvm->thrDeflationPolicy = J9VM_DEFLATION_POLICY_ASAP;\n+\t}\n \n \tif (cpus > 1) {\n #if (defined(LINUXPPC)) && !defined(J9VM_ENV_LITTLE_ENDIAN)\n",
    "a9076368adb27a46ad3e67844296d9401991f080": "diff --git a/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml b/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\nindex 72f3303ad89..62ff6b2a8ff 100644\n--- a/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\n+++ b/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\n@@ -1043,6 +1043,40 @@\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n \t</test>\n \n+\t<test id=\"Test 208-i: Test with mptotect=all that the header page is correctly unprotected when adjusting extraStartupHints\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,mprotect=all,extraStartupHints=42</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">JVMSHRC864I The number of additional startup hints that can be stored into the shared cache is set to 42</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n+\t<!-- Since running Hanoi with -Xjit option does not store the startup hint to the shared chache, we use -Xint here -->\n+\t<test id=\"Test 208-j: Run the test again with mprotect=all\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,mprotect=all -Xint $CP_HANOI$ $PROGRAM_HANOI_2$</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">Puzzle solved!</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n+\t<test id=\"Test 208-k: Make sure new startup hints are stored into the cache\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,printStats=startuphint</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\">STARTUP HINTS KEY:</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 3</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Additional startup hints allowed[\\s]*= 41</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\">Startup hint bytes[\\s]*= 0</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 0</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 1</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 1</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n \t<test id=\"Test 208 cleanup\" timeout=\"600\" runPath=\".\">\n \t\t<command>$JAVA_EXE$ $currentMode$,destroy</command>\n \t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">has been destroyed</output>\n",
    "f90fff3965b758ae340f3859033ccd26100b5bd7": "diff --git a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\nindex 559f54cada8..b4f18b5ffa1 100644\n--- a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n+++ b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n@@ -113,6 +113,7 @@ public static CRIUSupport getCRIUSupport() {\n \t@Deprecated(forRemoval=true)\n \tpublic CRIUSupport(Path imageDir) {\n \t\tSystem.err.println(\"WARNING: CRIUSupport(imageDir) constructor is deprecated, please use CRIUSupport.getCRIUSupport() and setImageDir(imageDir)\"); //$NON-NLS-1$\n+\t\tsingletonInternalCRIUSupport.setImageDir(imageDir);\n \t}\n \n \t/**\n",
    "41d0f861d1ae7b420e967970c7fb8b979d4381ce": "diff --git a/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml b/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\nindex 72f3303ad89..62ff6b2a8ff 100644\n--- a/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\n+++ b/test/functional/cmdLineTests/shareClassTests/SCCMLTests/ShareClassesCMLTests-6.xml\n@@ -1043,6 +1043,40 @@\n \t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n \t</test>\n \n+\t<test id=\"Test 208-i: Test with mptotect=all that the header page is correctly unprotected when adjusting extraStartupHints\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,mprotect=all,extraStartupHints=42</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">JVMSHRC864I The number of additional startup hints that can be stored into the shared cache is set to 42</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n+\t<!-- Since running Hanoi with -Xjit option does not store the startup hint to the shared chache, we use -Xint here -->\n+\t<test id=\"Test 208-j: Run the test again with mprotect=all\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,mprotect=all -Xint $CP_HANOI$ $PROGRAM_HANOI_2$</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">Puzzle solved!</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n+\t<test id=\"Test 208-k: Make sure new startup hints are stored into the cache\" timeout=\"600\" runPath=\".\">\n+\t\t<command>$JAVA_EXE$ $currentMode$,printStats=startuphint</command>\n+\t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\">STARTUP HINTS KEY:</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 3</output>\n+\t\t<output type=\"required\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Additional startup hints allowed[\\s]*= 41</output>\n+\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\">Startup hint bytes[\\s]*= 0</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 0</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 1</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"yes\" javaUtilPattern=\"yes\"># Startup hints[\\s]*= 1</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">Unhandled Exception</output>\n+\t\t<output type=\"failure\" caseSensitive=\"no\" regex=\"no\">corrupt</output>\n+\t\t<output type=\"failure\" caseSensitive=\"yes\" regex=\"no\">Processing dump event</output>\n+\t</test>\n+\n \t<test id=\"Test 208 cleanup\" timeout=\"600\" runPath=\".\">\n \t\t<command>$JAVA_EXE$ $currentMode$,destroy</command>\n \t\t<output type=\"success\" caseSensitive=\"yes\" regex=\"no\">has been destroyed</output>\n",
    "4e2a33ba932bb8dd854dd57a9a8bed0b822a9439": "diff --git a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\nindex 559f54cada8..b4f18b5ffa1 100644\n--- a/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n+++ b/jcl/src/openj9.criu/share/classes/org/eclipse/openj9/criu/CRIUSupport.java\n@@ -113,6 +113,7 @@ public static CRIUSupport getCRIUSupport() {\n \t@Deprecated(forRemoval=true)\n \tpublic CRIUSupport(Path imageDir) {\n \t\tSystem.err.println(\"WARNING: CRIUSupport(imageDir) constructor is deprecated, please use CRIUSupport.getCRIUSupport() and setImageDir(imageDir)\"); //$NON-NLS-1$\n+\t\tsingletonInternalCRIUSupport.setImageDir(imageDir);\n \t}\n \n \t/**\n",
    "7039ea1e468b582500bfa82b1e488a1c0e0fd407": "diff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex faed688d00a..9b0b3281898 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -2822,16 +2822,6 @@ VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved)\n \t\t\t\tgoto _memParseError;\n \t\t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n-#if JAVA_SPEC_VERSION >= 24\n-\t\t\t{\n-\t\t\t\targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\t\t\targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\t\t\tif (argIndex > argIndex2) {\n-\t\t\t\t\t/* Enable yielding of pinned continuation. */\n-\t\t\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n-\t\t\t\t}\n-\t\t\t}\n-#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif ((argIndex = FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, VMOPT_XXDUMPLOADEDCLASSLIST, NULL)) >= 0) {\n \t\t\t\tJ9HookInterface **vmHooks = vm->internalVMFunctions->getVMHookInterface(vm);\n \t\t\t\tGET_OPTION_VALUE(argIndex, '=', &optionValue);\n@@ -4389,9 +4379,19 @@ processVMArgsFromFirstToLast(J9JavaVM * vm)\n \t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_START_FLIGHT_RECORDING;\n \t\t}\n \t}\n-\n #endif /* defined(J9VM_OPT_JFR) */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t{\n+\t\tIDATA enableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\tIDATA disableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\tif (enableYieldPinning > disableYieldPinning) {\n+\t\t\t/* Enable yielding of pinned continuation. */\n+\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tif (FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXKEEPJNIIDS, NULL) != -1) {\n \t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ALWAYS_KEEP_JNI_IDS;\n \t}\n",
    "26699e323485b64b4165d89a77c2d84272917844": "diff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex faed688d00a..9b0b3281898 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -2822,16 +2822,6 @@ VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved)\n \t\t\t\tgoto _memParseError;\n \t\t\t}\n #endif /* JAVA_SPEC_VERSION >= 19 */\n-#if JAVA_SPEC_VERSION >= 24\n-\t\t\t{\n-\t\t\t\targIndex = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\t\t\targIndex2 = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\t\t\tif (argIndex > argIndex2) {\n-\t\t\t\t\t/* Enable yielding of pinned continuation. */\n-\t\t\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n-\t\t\t\t}\n-\t\t\t}\n-#endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\tif ((argIndex = FIND_AND_CONSUME_VMARG(STARTSWITH_MATCH, VMOPT_XXDUMPLOADEDCLASSLIST, NULL)) >= 0) {\n \t\t\t\tJ9HookInterface **vmHooks = vm->internalVMFunctions->getVMHookInterface(vm);\n \t\t\t\tGET_OPTION_VALUE(argIndex, '=', &optionValue);\n@@ -4389,9 +4379,19 @@ processVMArgsFromFirstToLast(J9JavaVM * vm)\n \t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_START_FLIGHT_RECORDING;\n \t\t}\n \t}\n-\n #endif /* defined(J9VM_OPT_JFR) */\n \n+#if JAVA_SPEC_VERSION >= 24\n+\t{\n+\t\tIDATA enableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\tIDATA disableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n+\t\tif (enableYieldPinning > disableYieldPinning) {\n+\t\t\t/* Enable yielding of pinned continuation. */\n+\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\t\t}\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 24 */\n+\n \tif (FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXKEEPJNIIDS, NULL) != -1) {\n \t\tvm->extendedRuntimeFlags2 |= J9_EXTENDED_RUNTIME2_ALWAYS_KEEP_JNI_IDS;\n \t}\n",
    "fe33768f441bd89005f2d94e1ed27f893d5fc1a6": "diff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 9b0b3281898..36498084479 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -4385,9 +4385,13 @@ processVMArgsFromFirstToLast(J9JavaVM * vm)\n \t{\n \t\tIDATA enableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n \t\tIDATA disableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\tif (enableYieldPinning > disableYieldPinning) {\n-\t\t\t/* Enable yielding of pinned continuation. */\n-\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\n+\t\t/* Enable yielding of pinned continuations by default. */\n+\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\n+\t\tif (enableYieldPinning < disableYieldPinning) {\n+\t\t\t/* Disable yielding of pinned continuations. */\n+\t\t\tvm->extendedRuntimeFlags3 &= ~J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n \t\t}\n \t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n",
    "e5890581be629926f6d928c1648415fae6d071d3": "diff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex 7c9260110dd..7c0bc986ce4 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -1754,7 +1754,6 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n \n                int32_t origAnalyzedSize = _analyzedSize;\n                int32_t origRealSize = _realSize;\n-               int32_t origBigCalleesSize = _bigCalleesSize;\n                bool prevNonColdCalls = _hasNonColdCalls;\n                bool estimateSuccess = estimateCodeSize(targetCallee, &callStack); //recurseDown = true\n                bool calltargetSetTooBig = false;\n@@ -1800,12 +1799,10 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n                      }\n \n \n-                  int32_t bigCalleesSizeBelowMe = _bigCalleesSize - origBigCalleesSize;\n-                  if ((_analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe) > bigCalleeThreshold)\n+                  if (_analyzedSize - origAnalyzedSize > bigCalleeThreshold)\n                      {\n                      ///printf(\"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo._byteCodeIndex);fflush(stdout);\n                      calltarget->_calleeMethod->setWarmCallGraphTooBig( newBCInfo.getByteCodeIndex(), comp());\n-                     _bigCalleesSize = _bigCalleesSize + _analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe;\n                      heuristicTrace(tracer(), \"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo.getByteCodeIndex());\n                      //_analyzedSize = origAnalyzedSize;\n                      //_realSize = origRealSize;\ndiff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\nindex dfa9603eb99..8e7c97cc869 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n@@ -43,7 +43,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n    {\n    public:\n \n-      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _bigCalleesSize(0), _lastCallBlockFrequency(-1) { }\n+      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _lastCallBlockFrequency(-1) { }\n \n       int32_t getOptimisticSize()       { return _analyzedSize; }\n \n@@ -165,7 +165,6 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n \n       int32_t _lastCallBlockFrequency;\n       int32_t _analyzedSize;          // size if we assume we are doing a partial inline\n-      int32_t _bigCalleesSize;\n    };\n \n #define NUM_PREV_BC 5\n",
    "8e6f5dbc40df86b88e2e0498b3b633011046802b": "diff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\nindex 7c9260110dd..7c0bc986ce4 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.cpp\n@@ -1754,7 +1754,6 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n \n                int32_t origAnalyzedSize = _analyzedSize;\n                int32_t origRealSize = _realSize;\n-               int32_t origBigCalleesSize = _bigCalleesSize;\n                bool prevNonColdCalls = _hasNonColdCalls;\n                bool estimateSuccess = estimateCodeSize(targetCallee, &callStack); //recurseDown = true\n                bool calltargetSetTooBig = false;\n@@ -1800,12 +1799,10 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n                      }\n \n \n-                  int32_t bigCalleesSizeBelowMe = _bigCalleesSize - origBigCalleesSize;\n-                  if ((_analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe) > bigCalleeThreshold)\n+                  if (_analyzedSize - origAnalyzedSize > bigCalleeThreshold)\n                      {\n                      ///printf(\"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo._byteCodeIndex);fflush(stdout);\n                      calltarget->_calleeMethod->setWarmCallGraphTooBig( newBCInfo.getByteCodeIndex(), comp());\n-                     _bigCalleesSize = _bigCalleesSize + _analyzedSize - origAnalyzedSize - bigCalleesSizeBelowMe;\n                      heuristicTrace(tracer(), \"set warmcallgraphtoobig for method %s at index %d\\n\", calleeName, newBCInfo.getByteCodeIndex());\n                      //_analyzedSize = origAnalyzedSize;\n                      //_realSize = origRealSize;\ndiff --git a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\nindex dfa9603eb99..8e7c97cc869 100644\n--- a/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n+++ b/runtime/compiler/optimizer/J9EstimateCodeSize.hpp\n@@ -43,7 +43,7 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n    {\n    public:\n \n-      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _bigCalleesSize(0), _lastCallBlockFrequency(-1) { }\n+      TR_J9EstimateCodeSize() : TR_EstimateCodeSize(), _analyzedSize(0), _lastCallBlockFrequency(-1) { }\n \n       int32_t getOptimisticSize()       { return _analyzedSize; }\n \n@@ -165,7 +165,6 @@ class TR_J9EstimateCodeSize : public TR_EstimateCodeSize\n \n       int32_t _lastCallBlockFrequency;\n       int32_t _analyzedSize;          // size if we assume we are doing a partial inline\n-      int32_t _bigCalleesSize;\n    };\n \n #define NUM_PREV_BC 5\n",
    "caa6ebfaa863f0c5f13dd13ce62960ab3b32744f": "diff --git a/runtime/vm/jvminit.c b/runtime/vm/jvminit.c\nindex 9b0b3281898..36498084479 100644\n--- a/runtime/vm/jvminit.c\n+++ b/runtime/vm/jvminit.c\n@@ -4385,9 +4385,13 @@ processVMArgsFromFirstToLast(J9JavaVM * vm)\n \t{\n \t\tIDATA enableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXYIELDPINNEDVIRTUALTHREADS, NULL);\n \t\tIDATA disableYieldPinning = FIND_AND_CONSUME_VMARG(EXACT_MATCH, VMOPT_XXNOYIELDPINNEDVIRTUALTHREADS, NULL);\n-\t\tif (enableYieldPinning > disableYieldPinning) {\n-\t\t\t/* Enable yielding of pinned continuation. */\n-\t\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\n+\t\t/* Enable yielding of pinned continuations by default. */\n+\t\tvm->extendedRuntimeFlags3 |= J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n+\n+\t\tif (enableYieldPinning < disableYieldPinning) {\n+\t\t\t/* Disable yielding of pinned continuations. */\n+\t\t\tvm->extendedRuntimeFlags3 &= ~J9_EXTENDED_RUNTIME3_YIELD_PINNED_CONTINUATION;\n \t\t}\n \t}\n #endif /* JAVA_SPEC_VERSION >= 24 */\n",
    "d71acdcb2b1f8d720ec1c79c642309f206a8596e": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 2067532748b..3c04dd5974e 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -1201,7 +1201,13 @@ class INTERPRETER_CLASS\n #if JAVA_SPEC_VERSION >= 24\n \t\t\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n \t\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\n \t\t\t\t\trc = preparePinnedVirtualThreadForUnmount(_currentThread, obj, false);\n+\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t} else\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t{\n",
    "7bf5f1a439c47b7a0042710b7f9906ff8bc0b61e": "diff --git a/runtime/vm/BytecodeInterpreter.hpp b/runtime/vm/BytecodeInterpreter.hpp\nindex 2067532748b..3c04dd5974e 100644\n--- a/runtime/vm/BytecodeInterpreter.hpp\n+++ b/runtime/vm/BytecodeInterpreter.hpp\n@@ -1201,7 +1201,13 @@ class INTERPRETER_CLASS\n #if JAVA_SPEC_VERSION >= 24\n \t\t\t\tif (VM_ContinuationHelpers::isYieldableVirtualThread(_currentThread)) {\n \t\t\t\t\t/* Try to yield the virtual thread if it will be blocked. */\n+\t\t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n+\t\t\t\t\tupdateVMStruct(REGISTER_ARGS);\n+\n \t\t\t\t\trc = preparePinnedVirtualThreadForUnmount(_currentThread, obj, false);\n+\n+\t\t\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n+\t\t\t\t\trestoreInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\t\t} else\n #endif /* JAVA_SPEC_VERSION >= 24 */\n \t\t\t\t{\n",
    "0af7de5527a1f7f09f3e52859fc57f3d06e2aa45": "diff --git a/runtime/rasdump/javadump.cpp b/runtime/rasdump/javadump.cpp\nindex 6cb49da710d..cd2e3ae858f 100644\n--- a/runtime/rasdump/javadump.cpp\n+++ b/runtime/rasdump/javadump.cpp\n@@ -4544,7 +4544,7 @@ JavaCoreDumpWriter::writeThread(J9VMThread* vmThread, J9PlatformThread *nativeTh\n \t\t/* Replace vmstate with java state in the \"3XMTHREADINFO\" entry */\n \t\t_OutputStream.writeCharacters(\", state:\");\n \t\twriteThreadState(javaState);\n-\t\t_OutputStream.writeCharacters(\", raw state:\");\n+\t\t_OutputStream.writeCharacters(\", rawStateValue:\");\n \t\t_OutputStream.writeInteger(javaState);\n \n \t\t_OutputStream.writeCharacters(\", prio=\");\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex d0e417a1cd1..5ac5328fc17 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -1104,7 +1104,7 @@ writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWrit\n \t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n \t}\n \tbufferWriter->writeFormattedString(\n-\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s raw state: 0x%zX\",\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s rawStateValue: 0x%zX\",\n \t\t\tthreadName,\n \t\t\twalkThread,\n \t\t\tjavaTID,\n",
    "dea4d163f15f411db38ec5f0269c3b5009609921": "diff --git a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\nindex 397e3e3b92e..5b72a214581 100644\n--- a/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/x/codegen/J9TreeEvaluator.cpp\n@@ -3006,10 +3006,50 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n    // -------------------------------------------------------------------------\n \n    TR::MemoryReference *tempMR = NULL;\n+   TR::Node *dstArrayNode, *offsetNode = NULL;\n \n-   if (generateWriteBarrier && !deferDestinationEvaluation)\n+   if (generateWriteBarrier)\n       {\n-      tempMR = generateX86MemoryReference(firstChild, cg);\n+      if (!deferDestinationEvaluation)\n+         {\n+         tempMR = generateX86MemoryReference(firstChild, cg);\n+         }\n+      else\n+         {\n+         /* Evaluate destination subtrees\n+         * ArrayStoreCHK\n+         *    awrtbari  // firstChild\n+         *      aloadi  <contiguousArrayDataAddrField>\n+         *        aload     // dstArrayNode\n+         *      ...\n+         * OR\n+         * ArrayStoreCHK\n+         *    awrtbari  // firstChild\n+         *      aladd (internalPtr )\n+         *        aloadi  <contiguousArrayDataAddrField>\n+         *          aload     // dstArrayNode\n+         *        <offset>  // offsetNode\n+         *      ...\n+         */\n+         if (firstChild->getFirstChild()->isDataAddrPointer())\n+            dstArrayNode = firstChild->getFirstChild()->getFirstChild();\n+         else if (firstChild->getFirstChild()->getOpCodeValue() == TR::aladd && firstChild->getFirstChild()->getFirstChild()->isDataAddrPointer())\n+            {\n+            dstArrayNode = firstChild->getFirstChild()->getFirstChild()->getFirstChild();\n+            offsetNode = firstChild->getFirstChild()->getSecondChild();\n+            }\n+         else\n+            {\n+            TR_ASSERT_FATAL(false, \"Unexpected array access tree shape for OffHeap in ArrayStoreCHKEvaluator\");\n+            }\n+\n+         cg->evaluate(dstArrayNode);\n+         if (offsetNode &&\n+               !(offsetNode->getOpCode().isLoadConst() &&\n+               offsetNode->getLongInt() >= TR::getMinSigned<TR::Int32>() &&\n+               offsetNode->getLongInt() <= TR::getMaxSigned<TR::Int32>()))\n+            cg->evaluate(offsetNode);\n+         }\n       }\n \n    TR::Node *destinationChild = firstChild->getChild(2);\n@@ -3232,7 +3272,7 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n    //\n    // -------------------------------------------------------------------------\n \n-   TR::RegisterDependencyConditions *deps = generateRegisterDependencyConditions(12, 12, cg);\n+   TR::RegisterDependencyConditions *deps = generateRegisterDependencyConditions(13, 13, cg);\n    deps->unionPostCondition(destinationRegister, TR::RealRegister::NoReg, cg);\n    deps->unionPostCondition(sourceRegister, TR::RealRegister::NoReg, cg);\n \n@@ -3257,6 +3297,12 @@ TR::Register *J9::X86::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node *node, TR:\n          deps->unionPostCondition(tempMR->getIndexRegister(), TR::RealRegister::NoReg, cg);\n          }\n \n+      if (deferDestinationEvaluation && dstArrayNode->getRegister() != destinationRegister)\n+         {\n+         // For OffHeap tempMR->getBaseRegister() would be the dataAddrPtr not the baseArray.\n+         deps->unionPostCondition(dstArrayNode->getRegister(), TR::RealRegister::NoReg, cg);\n+         }\n+\n       if (comp->target().is64Bit())\n          {\n          TR::Register *addressRegister =tempMR->getAddressRegister();\n",
    "ee64e344f2d4e90e06bafedcfb98ff6537f91063": "diff --git a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\nindex 907eaec7daf..58a3f7a2873 100644\n--- a/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n+++ b/runtime/compiler/z/codegen/J9TreeEvaluator.cpp\n@@ -7228,11 +7228,15 @@ J9::Z::TreeEvaluator::ArrayStoreCHKEvaluator(TR::Node * node, TR::CodeGenerator\n       */\n       if (firstChild->getFirstChild()->isDataAddrPointer())\n          dstArrayNode = firstChild->getFirstChild()->getFirstChild();\n-      else\n+      else if (firstChild->getFirstChild()->getOpCodeValue() == TR::aladd && firstChild->getFirstChild()->getFirstChild()->isDataAddrPointer())\n          {\n          dstArrayNode = firstChild->getFirstChild()->getFirstChild()->getFirstChild();\n          offsetNode = firstChild->getFirstChild()->getSecondChild();\n          }\n+      else\n+         {\n+         TR_ASSERT_FATAL(false, \"Unexpected array access tree shape for OffHeap in ArrayStoreCHKEvaluator\");\n+         }\n \n       cg->evaluate(dstArrayNode);\n       if (offsetNode &&\n",
    "9d6f392e27ddcfcfc71fdb192dd77a02ea17d448": "diff --git a/runtime/rasdump/javadump.cpp b/runtime/rasdump/javadump.cpp\nindex 6cb49da710d..cd2e3ae858f 100644\n--- a/runtime/rasdump/javadump.cpp\n+++ b/runtime/rasdump/javadump.cpp\n@@ -4544,7 +4544,7 @@ JavaCoreDumpWriter::writeThread(J9VMThread* vmThread, J9PlatformThread *nativeTh\n \t\t/* Replace vmstate with java state in the \"3XMTHREADINFO\" entry */\n \t\t_OutputStream.writeCharacters(\", state:\");\n \t\twriteThreadState(javaState);\n-\t\t_OutputStream.writeCharacters(\", raw state:\");\n+\t\t_OutputStream.writeCharacters(\", rawStateValue:\");\n \t\t_OutputStream.writeInteger(javaState);\n \n \t\t_OutputStream.writeCharacters(\", prio=\");\ndiff --git a/runtime/vm/JFRChunkWriter.cpp b/runtime/vm/JFRChunkWriter.cpp\nindex d0e417a1cd1..5ac5328fc17 100644\n--- a/runtime/vm/JFRChunkWriter.cpp\n+++ b/runtime/vm/JFRChunkWriter.cpp\n@@ -1104,7 +1104,7 @@ writeThreadInfo(J9VMThread *currentThread, J9VMThread *walkThread, VM_BufferWrit\n \t\treleaseOMRVMThreadName(walkThread->omrVMThread);\n \t}\n \tbufferWriter->writeFormattedString(\n-\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s raw state: 0x%zX\",\n+\t\t\t\"\\\"%s\\\" J9VMThread: %p tid: %zd nid: %zd prio: %zd state: %s rawStateValue: 0x%zX\",\n \t\t\tthreadName,\n \t\t\twalkThread,\n \t\t\tjavaTID,\n"
  }
}
